[86a807698c0bec] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed392000 +0  48894D50488945584889556048895D684889757048897D784C8985800000004C898D880000004C8995900000004C89A5980000004C89ADA00000004C89B5A80000004C89BDB00000008F45208F4510488B9424B0000000488B842498000000488942384889E848832C258893F900104C8BBC24880000004C8BB424800000004C8B6C24784C8B642470488B5C2468488B6C24604881C4B8000000C3
[86a807698d6f6d] jit-backend-dump}
[86a8076990b1d1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3920b0 +0  48894D50488945584889556048895D684889757048897D784C8985800000004C898D880000004C8995900000004C89A5980000004C89ADA00000004C89B5A80000004C89BDB0000000488B1C2548B35F0148C7042540B35F010000000048C7042548B35F010000000048895D388F45208F4510488B9424B0000000488B842498000000488942384889E848832C258893F900104C8BBC24880000004C8BB424800000004C8B6C24784C8B642470488B5C2468488B6C24604881C4B8000000C3
[86a8076990e4a8] jit-backend-dump}
[86a8076991bba0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed392180 +0  4889455848894D50488955604889757048897D784C8985800000004C898D880000004C899590000000488B7C240841BB80EFA60041FFD3488B4558488B4D50488B5560488B7570488B7D784C8B85800000004C8B8D880000004C8B9590000000C20800
[86a8076991d945] jit-backend-dump}
[86a807699246b1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3921f0 +0  4889455848894D50488955604889757048897D784C8985800000004C898D880000004C899590000000488B7C240841BB601DA80041FFD3488B442408F6400480488B4558488B4D50488B5560488B7570488B7D784C8B85800000004C8B8D880000004C8B9590000000C20800
[86a80769925fd5] jit-backend-dump}
[86a8076992f234] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed392270 +0  4883EC384889442408F20F114424104889EF48895C24284C89642430488B1C2548B35F014C8B242540B35F0148C7042540B35F010000000048C7042548B35F010000000041BB80EFA60041FFD3F20F10442410488B44240848891C2548B35F014C89242540B35F01488B5C24284C8B642430488D642438C3
[86a80769930c4f] jit-backend-dump}
[86a8076993a99a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3922f
[86a8076993e7a3] jit-backend-dump}
[86a80769943a92] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed392510 +0  48894D50488945584889556048895D684889757048897D784C8985800000004C898D880000004C8995900000004C89A5980000004C89ADA00000004C89B5A80000004C89BDB0000000F20F1185B8000000F20F118DC0000000F20F1195C8000000F20F119DD0000000F20F11A5D8000000F20F11ADE0000000F20F11B5E8000000F20F11BDF0000000F2440F1185F8000000F2440F118D00010000F2440F119508010000F2440F119D10010000F2440F11A518010000F2440F11AD20010000F2440F11B5280100008F45208F4510488B9424B0000000488B842498000000488942384889E848832C258893F900104C8BBC24880000004C8BB424800000004C8B6C24784C8B642470488B5C2468488B6C24604881C4B8000000C3
[86a80769946054] jit-backend-dump}
[86a8076994ae1a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed
[86a8076994d175] jit-backend-dump}
[86a807699de156] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed
[86a807699e0f16] jit-backend-dump}
[86a807699e7802] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3928f
[86a807699e9fde] jit-backend-dump}
[86a807699eedea] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed392a70 +0  488B042548B35F0148C7042540B35F010000000048C7042548B35F01000000004889453848C74510A002F900488B9424B0000000488B842498000000488942384889E848832C258893F900104C8BBC24880000004C8BB424800000004C8B6C24784C8B642470488B5C2468488B6C24604881C4B8000000C3
[86a807699f0663] jit-backend-dump}
[86a80769a047dc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed392af
[86a80769a07a67] jit-backend-dump}
[86a80769a0f70a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed392ce
[86a80769a127ab] jit-backend-dump}
[86a80769a1b915] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed392ee
[86a80769a1eb6c] jit-backend-dump}
[86a80769a24fa5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3930d
[86a80769a280b5] jit-backend-dump}
[86a80769a31cdd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3932c0 +0  48895D684C8985800000004C898D880000004C8995900000004C89A5980000004C89ADA00000004C89B5A80000004C89BDB00000004883EC08FFD0488B0C258893F900488B69F8F64504010F85520000004883C40848C7452000000000488B4D50488B5560488B5D68488B7570488B7D784C8B85800000004C8B8D880000004C8B95900000004C8BA5980000004C8BADA00000004C8BB5A80000004C8BBDB0000000C349BB702239EDB57F000041FFD3E99CFFFFFF
[86a80769a33de3] jit-backend-dump}
[86a80769a39141] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed393380 +0  4C8985800000004C898D880000004C8995900000004883EC08FFD0488B0C258893F900488B69F8F64504010F85320000004883C40848C7452000000000488B4D50488B5560488B7570488B7D784C8B85800000004C8B8D880000004C8B9590000000C349BB702239EDB57F000041FFD3E9BCFFFFFF
[86a80769a3a9d8] jit-backend-dump}
[86a80769a3fcf5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed
[86a80769a426b4] jit-backend-dump}
[86a80769a479aa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3935c
[86a80769a4a11e] jit-backend-dump}
[86a80769a5d01f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed393750 +0  4889E74883EC0841BBC027A90041FFD34883C408488B042540B35F014885C07501C34883C40849BB702A39EDB57F000041FFE3
[86a80769a5e958] jit-backend-dump}
[86a8076a008947] {jit-backend
[86a8076a0fa0fa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3939c0 +0  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004881ECB800000048896C24604889B424B0000000488D8424980000004C8B56384C89104889600848C7401003000000488946384889FD48895C24684C896424704C896C24784C89B424800000004C89BC2488000000488B1C258893F90048C7030100000048896B084883C31048891C258893F900488B0425704A5E014829E0483B0425784A5E010F87E301000048FF042540D49C0166662E0F1F84000000000048FF04253073FB01488B8D300100008139D00C01000F8500000000488B41204883F80172068138509A00000F8500000000488B1558FEFFFF4839D00F8400000000488B9538010000813A101100000F8500000000488B5A084883FB017206813B900F00000F8500000000488B71104883FE017206813E601400000F8500000000488B79184883FF017206813F601400000F85000000004C8B46084C8B4F084C89C74D01C80F80000000004C8B50084D39C20F84000000004989F84C29CF0F80000000004939FA0F84000000004983C1010F8000000000488B7908813F40B400000F85000000004C8B57184D8B62084983FC01720841813C2440B400000F85000000004C8B68104983FD01720841817D00509A00000F8500000000498B4424104C8B35E2FDFFFF4C39F00F85000000004C39E70F85000000004889BD300100004889B54001000048899D480100004C8995500100004C89A5580100000F1F44000048FF04250027A3014D89C44D01C80F80000000004D8B55084D39C20F84000000004D89E04D29CC0F80000000004D39E20F84000000004D89CC4983C1010F80000000004D8B55104983FA01720741813A509A00000F85000000004D89D5E99EFFFFFF66666666662E0F1F84000000000049BB503739EDB57F000041FFD3E90BFEFFFFFF3598FCFFFF49BB303839EDB57F000041534D8D9BD0E7FFFF41FFE3FF3584FCFFFF49BB403839EDB57F000041534D8D9BC0E7FFFF41FFE3FF3578FCFFFF49BB503839EDB57F000041534D8D9BB0E7FFFF41FFE3FF3564FCFFFF49BB603839EDB57F000041534D8D9BA0E7FFFF41FFE3FF3550FCFFFF49BB703839EDB57F000041534D8D9B90E7FFFF41FFE3FF353CFCFFFF49BB803839EDB57F000041534D8D9B80E7FFFF41FFE3FF3528FCFFFF49BB903839EDB57F000041534D8D9B70E7FFFF41FFE3FF3514FCFFFF49BBA03839EDB57F000041534D8D9B60E7FFFF41FFE3FF3500FCFFFF49BBB03839EDB57F000041534D8D9B50E7FFFF41FFE3FF35ECFBFFFF49BBC03839EDB57F000041534D8D9B40E7FFFF41FFE3FF35D8FBFFFF49BBD03839EDB57F000041534D8D9B30E7FFFF41FFE3FF35C4FBFFFF49BBE03839EDB57F000041534D8D9B20E7FFFF41FFE3FF35B0FBFFFF49BBF03839EDB57F000041534D8D9B10E7FFFF41FFE3FF359CFBFFFF49BB003939EDB57F000041534D8D9B00E7FFFF41FFE3FF3588FBFFFF49BB103939EDB57F000041534D8D9BF0E6FFFF41FFE3FF3574FBFFFF49BB203939EDB57F000041534D8D9BE0E6FFFF41FFE3FF3568FBFFFF49BB303939EDB57F000041534D8D9BD0E6FFFF41FFE3FF3554FBFFFF49BB403939EDB57F000041534D8D9BC0E6FFFF41FFE3FF3540FBFFFF49BB503939EDB57F000041534D8D9BB0E6FFFF41FFE3FF352CFBFFFF49BB603939EDB57F000041534D8D9BA0E6FFFF41FFE3FF3518FBFFFF49BB703939EDB57F000041534D8D9B90E6FFFF41FFE3FF3504FBFFFF49BB803939EDB57F000041534D8D9B80E6FFFF41FFE3FF35F0FAFFFF49BB903939EDB57F000041534D8D9B70E6FFFF41FFE3FF35DCFAFFFF49BBA03939EDB57F000041534D8D9B60E6FFFF41FFE3FF35C8FAFFFF49BBB03939EDB57F000041534D8D9B50E6FFFF41FFE3
[86a8076a103390] jit-backend-dump}
[86a8076a112b32] {jit-backend-addr
Loop 1 ((if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) row AppRand8 (cdr placed))) has address 0x7fb5ed393b2d to 0x7fb5ed393d10 (bootstrap 0x7fb5ed393aa0)
       gc table: 0x7fb5ed3939c0
       function: 0x7fb5ed393aa0
         resops: 0x7fb5ed393b2d
       failures: 0x7fb5ed393d10
            end: 0x7fb5ed393fde
[86a8076a117620] jit-backend-addr}
[86a8076a11c62e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed393b57 +0  C7010000
[86a8076a11d9b1] jit-backend-dump}
[86a8076a120c92] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed393b6d +0  CD010000
[86a8076a121b56] jit-backend-dump}
[86a8076a124ac3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed393b7d +0  D9010000
[86a8076a1257e4] jit-backend-dump}
[86a8076a1286cd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed393b90 +0  E2010000
[86a8076a129482] jit-backend-dump}
[86a8076a12c5bc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed393ba6 +0  E8010000
[86a8076a12d2fc] jit-backend-dump}
[86a8076a13047d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed393bbc +0  0A020000
[86a8076a131180] jit-backend-dump}
[86a8076a134127] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed393bd2 +0  10020000
[86a8076a134e45] jit-backend-dump}
[86a8076a137dcd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed393be6 +0  18020000
[86a8076a138ac7] jit-backend-dump}
[86a8076a13ba65] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed393bf3 +0  27020000
[86a8076a13c7e5] jit-backend-dump}
[86a8076a13f798] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed393bff +0  37020000
[86a8076a1404aa] jit-backend-dump}
[86a8076a14332e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed393c08 +0  4A020000
[86a8076a144068] jit-backend-dump}
[86a8076a146f6d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed393c12 +0  5C020000
[86a8076a147cad] jit-backend-dump}
[86a8076a14aacc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed393c22 +0  68020000
[86a8076a14b7f4] jit-backend-dump}
[86a8076a14e6c4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed393c3e +0  68020000
[86a8076a14f3da] jit-backend-dump}
[86a8076a152236] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed393c56 +0  6C020000
[86a8076a152f76] jit-backend-dump}
[86a8076a155e53] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed393c6b +0  73020000
[86a8076a156b75] jit-backend-dump}
[86a8076a15999d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed393c74 +0  86020000
[86a8076a15a6c5] jit-backend-dump}
[86a8076a15d696] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed393cb0 +0  82020000
[86a8076a15e38d] jit-backend-dump}
[86a8076a161321] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed393cbd +0  91020000
[86a8076a162055] jit-backend-dump}
[86a8076a164f9d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed393cc9 +0  A1020000
[86a8076a165c9a] jit-backend-dump}
[86a8076a168aed] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed393cd2 +0  B4020000
[86a8076a169821] jit-backend-dump}
[86a8076a16c71c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed393cdf +0  C3020000
[86a8076a16d40d] jit-backend-dump}
[86a8076a17028b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed393cf6 +0  C8020000
[86a8076a170f82] jit-backend-dump}
[86a8076a174afc] jit-backend}
[86a8076a178830] {jit-log-opt-loop
# Loop 1 ((if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) row AppRand8 (cdr placed))) : loop with 84 ops
[p0, p1]
+373: label(p0, p1, descr=TargetToken(52788128))
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) row AppRand8 (cdr placed))')
+392: guard_class(p0, 16500368, descr=<Guard0x323e9e0>) [p1, p0]
+411: p3 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+415: guard_nonnull_class(p3, 16471056, descr=<Guard0x323ea40>) [p1, p0]
+440: i6 = instance_ptr_eq(p3, ConstPtr(ptr5))
+443: guard_false(i6, descr=<Guard0x32bbf58>) [p1, p0]
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
+449: guard_class(p1, 16435920, descr=<Guard0x32bbfa0>) [p1, p0]
+468: p8 = getfield_gc_r(p1, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+472: guard_nonnull_class(p8, ConstClass(ForwardLink), descr=<Guard0x323eaa0>) [p1, p0]
debug_merge_point(0, 0, '(+ row dist)')
+490: guard_not_invalidated(descr=<Guard0x32cc020>) [p1, p0]
+490: p10 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+494: guard_nonnull_class(p10, ConstClass(W_Fixnum), descr=<Guard0x323eb00>) [p1, p0]
+512: p12 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+516: guard_nonnull_class(p12, ConstClass(W_Fixnum), descr=<Guard0x323eb60>) [p1, p0]
+534: i14 = getfield_gc_i(p10, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+538: i15 = getfield_gc_i(p12, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+542: i16 = int_add_ovf(i14, i15)
+548: guard_no_overflow(descr=<Guard0x32cc068>) [p1, p0]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+554: i17 = getfield_gc_i(p3, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+558: i18 = int_eq(i17, i16)
+561: guard_false(i18, descr=<Guard0x32cc0b0>) [p1, p0]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '(let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)))')
debug_merge_point(0, 0, '(- row dist)')
+567: i19 = int_sub_ovf(i14, i15)
+573: guard_no_overflow(descr=<Guard0x32cc0f8>) [p1, p0]
debug_merge_point(0, 0, '(let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand6)')
+579: i20 = int_eq(i17, i19)
+582: guard_false(i20, descr=<Guard0x32cc140>) [p1, p0]
debug_merge_point(0, 0, '(if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)')
debug_merge_point(0, 0, '(let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed)))')
debug_merge_point(0, 0, '(+ dist 1)')
+588: i22 = int_add_ovf(i15, 1)
+592: guard_no_overflow(descr=<Guard0x32cc188>) [p1, p0]
debug_merge_point(0, 0, '(CellRef(ok?) row AppRand8 (cdr placed))')
+598: p23 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+602: guard_class(p23, 16477696, descr=<Guard0x32cc1d0>) [p1, p0]
+614: p25 = getfield_gc_r(p23, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize1.inst__vals_0 24 pure>)
+618: p26 = getfield_gc_r(p25, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+622: guard_nonnull_class(p26, 16477696, descr=<Guard0x323ebc0>) [p1, p0]
+642: p28 = getfield_gc_r(p3, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+646: guard_nonnull_class(p28, 16471056, descr=<Guard0x323ec20>) [p1, p0]
+666: p30 = getfield_gc_r(p26, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+678: guard_value(p30, ConstPtr(ptr31), descr=<Guard0x32cc218>) [p1, p0]
+687: i32 = instance_ptr_eq(p23, p26)
+690: guard_true(i32, descr=<Guard0x32cc260>) [p1, p0]
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) row AppRand8 (cdr placed))')
+696: label(p23, p10, i22, p28, p1, p8, i14, p25, p26, descr=TargetToken(52788208))
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) row AppRand8 (cdr placed))')
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
debug_merge_point(0, 0, '(+ row dist)')
+744: guard_not_invalidated(descr=<Guard0x323ec80>) [i22, p28, p10, p23, p1, p8]
+744: i33 = int_add_ovf(i14, i22)
+750: guard_no_overflow(descr=<Guard0x32cc2a8>) [i22, p28, p10, p23, p1, p8]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+756: i34 = getfield_gc_i(p28, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+760: i35 = int_eq(i34, i33)
+763: guard_false(i35, descr=<Guard0x32cc2f0>) [i22, p28, p10, p23, p1, p8]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '(let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)))')
debug_merge_point(0, 0, '(- row dist)')
+769: i36 = int_sub_ovf(i14, i22)
+775: guard_no_overflow(descr=<Guard0x32cc338>) [i22, p28, p10, p23, p1, p8]
debug_merge_point(0, 0, '(let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand6)')
+781: i37 = int_eq(i34, i36)
+784: guard_false(i37, descr=<Guard0x32cc380>) [i22, p28, p10, p23, p1, p8]
debug_merge_point(0, 0, '(if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)')
debug_merge_point(0, 0, '(let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed)))')
debug_merge_point(0, 0, '(+ dist 1)')
+790: i39 = int_add_ovf(i22, 1)
+797: guard_no_overflow(descr=<Guard0x32cc3c8>) [i22, p28, p10, p23, p1, p8]
debug_merge_point(0, 0, '(CellRef(ok?) row AppRand8 (cdr placed))')
+803: p40 = getfield_gc_r(p28, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+807: guard_nonnull_class(p40, 16471056, descr=<Guard0x323ece0>) [i22, p28, p10, p23, p1, p8]
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) row AppRand8 (cdr placed))')
+826: jump(p23, p10, i39, p40, p1, p8, i14, p25, p26, descr=TargetToken(52788208))
+848: --end of the loop--
[86a8076a1fba22] jit-log-opt-loop}
[86a8076a6cc5b7] {jit-backend
[86a8076a719b58] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed
[86a8076a72116b] jit-backend-dump}
[86a8076a72bd3d] {jit-backend-addr
Loop 2 ((if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)) has address 0x7fb5ed39424d to 0x7fb5ed3943c0 (bootstrap 0x7fb5ed3941c0)
       gc table: 0x7fb5ed394120
       function: 0x7fb5ed3941c0
         resops: 0x7fb5ed39424d
       failures: 0x7fb5ed3943c0
            end: 0x7fb5ed3945ca
[86a8076a72efe6] jit-backend-addr}
[86a8076a733402] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed394264 +0  6A010000
[86a8076a734735] jit-backend-dump}
[86a8076a737b38] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39427a +0  70010000
[86a8076a7389c0] jit-backend-dump}
[86a8076a73b9b9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39428a +0  7C010000
[86a8076a73c6f3] jit-backend-dump}
[86a8076a73f6af] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39429d +0  85010000
[86a8076a7403af] jit-backend-dump}
[86a8076a743239] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3942b3 +0  8B010000
[86a8076a743eed] jit-backend-dump}
[86a8076a746ea6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3942c9 +0  AD010000
[86a8076a747b53] jit-backend-dump}
[86a8076a74aa33] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3942df +0  B3010000
[86a8076a74b6ec] jit-backend-dump}
[86a8076a74e55e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3942f3 +0  BB010000
[86a8076a74f1ed] jit-backend-dump}
[86a8076a75201e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed394300 +0  CA010000
[86a8076a752ccf] jit-backend-dump}
[86a8076a755b5f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39430c +0  DA010000
[86a8076a75681c] jit-backend-dump}
[86a8076a759687] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed394315 +0  ED010000
[86a8076a75a33b] jit-backend-dump}
[86a8076a75d22a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39431f +0  FF010000
[86a8076a75dec5] jit-backend-dump}
[86a8076a760cde] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39432f +0  0B020000
[86a8076a761976] jit-backend-dump}
[86a8076a7647f4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39434b +0  0B020000
[86a8076a765479] jit-backend-dump}
[86a8076a768350] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed394363 +0  0F020000
[86a8076a768feb] jit-backend-dump}
[86a8076a76be72] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed394378 +0  16020000
[86a8076a76cb13] jit-backend-dump}
[86a8076a76f9b0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed394381 +0  29020000
[86a8076a770648] jit-backend-dump}
[86a8076a773fd0] jit-backend}
[86a8076a777a87] {jit-log-opt-loop
# Loop 2 ((if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)) : entry bridge with 53 ops
[p0, p1]
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)')
+309: guard_class(p0, 16500368, descr=<Guard0x323ef80>) [p1, p0]
+328: p3 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+332: guard_nonnull_class(p3, 16471056, descr=<Guard0x323efe0>) [p1, p0]
+357: i6 = instance_ptr_eq(p3, ConstPtr(ptr5))
+360: guard_false(i6, descr=<Guard0x331e4e8>) [p1, p0]
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
+366: guard_class(p1, 16435920, descr=<Guard0x331e530>) [p1, p0]
+385: p8 = getfield_gc_r(p1, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+389: guard_nonnull_class(p8, ConstClass(ForwardLink), descr=<Guard0x323f040>) [p1, p0]
debug_merge_point(0, 0, '(+ row dist)')
+407: guard_not_invalidated(descr=<Guard0x331e578>) [p1, p0]
+407: p10 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+411: guard_nonnull_class(p10, ConstClass(W_Fixnum), descr=<Guard0x323f0a0>) [p1, p0]
+429: p12 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+433: guard_nonnull_class(p12, ConstClass(W_Fixnum), descr=<Guard0x323f100>) [p1, p0]
+451: i14 = getfield_gc_i(p10, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+455: i15 = getfield_gc_i(p12, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+459: i16 = int_add_ovf(i14, i15)
+465: guard_no_overflow(descr=<Guard0x331e5c0>) [p1, p0]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+471: i17 = getfield_gc_i(p3, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+475: i18 = int_eq(i17, i16)
+478: guard_false(i18, descr=<Guard0x331e608>) [p1, p0]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '(let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)))')
debug_merge_point(0, 0, '(- row dist)')
+484: i19 = int_sub_ovf(i14, i15)
+490: guard_no_overflow(descr=<Guard0x331e650>) [p1, p0]
debug_merge_point(0, 0, '(let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand6)')
+496: i20 = int_eq(i17, i19)
+499: guard_false(i20, descr=<Guard0x331e698>) [p1, p0]
debug_merge_point(0, 0, '(if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)')
debug_merge_point(0, 0, '(let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed)))')
debug_merge_point(0, 0, '(+ dist 1)')
+505: i22 = int_add_ovf(i15, 1)
+509: guard_no_overflow(descr=<Guard0x331e6e0>) [p1, p0]
debug_merge_point(0, 0, '(CellRef(ok?) row AppRand8 (cdr placed))')
+515: p23 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+519: guard_class(p23, 16477696, descr=<Guard0x331e728>) [p1, p0]
+531: p25 = getfield_gc_r(p23, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize1.inst__vals_0 24 pure>)
+535: p26 = getfield_gc_r(p25, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+539: guard_nonnull_class(p26, 16477696, descr=<Guard0x323f160>) [p1, p0]
+559: p28 = getfield_gc_r(p3, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+563: guard_nonnull_class(p28, 16471056, descr=<Guard0x323f1c0>) [p1, p0]
+583: p30 = getfield_gc_r(p26, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+595: guard_value(p30, ConstPtr(ptr31), descr=<Guard0x331e770>) [p1, p0]
+604: i32 = instance_ptr_eq(p23, p26)
+607: guard_true(i32, descr=<Guard0x331e7b8>) [p1, p0]
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) row AppRand8 (cdr placed))')
+613: jump(p23, p10, i22, p28, p1, p8, i14, p25, p26, descr=TargetToken(52788208))
+672: --end of the loop--
[86a8076a7a903b] jit-log-opt-loop}
[86a8076a8e21c8] {jit-backend
[86a8076a94ff3b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3946b
[86a8076a956218] jit-backend-dump}
[86a8076a963b0b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed394714 +0  22000000
[86a8076a964fb1] jit-backend-dump}
[86a8076a968c3f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed394845 +0  22000000
[86a8076a969a89] jit-backend-dump}
[86a8076a96cb9f] {jit-backend-addr
bridge out of Guard 0x323ece0 has address 0x7fb5ed394710 to 0x7fb5ed394840
       gc table: 0x7fb5ed3946b0
    jump target: 0x7fb5ed394710
         resops: 0x7fb5ed39471e
       failures: 0x7fb5ed394840
            end: 0x7fb5ed3949b7
[86a8076a96f3c4] jit-backend-addr}
[86a8076a9727e0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed394739 +0  62010000
[86a8076a973683] jit-backend-dump}
[86a8076a97669e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed394757 +0  60010000
[86a8076a9773b0] jit-backend-dump}
[86a8076a97a335] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed394764 +0  6F010000
[86a8076a97b023] jit-backend-dump}
[86a8076a97e065] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39476d +0  82010000
[86a8076a97edb8] jit-backend-dump}
[86a8076a981d46] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed394776 +0  95010000
[86a8076a9829fa] jit-backend-dump}
[86a8076a9859a9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed394783 +0  A4010000
[86a8076a986657] jit-backend-dump}
[86a8076a9894f6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3947a4 +0  9F010000
[86a8076a98a1d8] jit-backend-dump}
[86a8076a98d0a5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3947bb +0  A4010000
[86a8076a98dd56] jit-backend-dump}
[86a8076a990bdd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3947cf +0  AC010000
[86a8076a99187b] jit-backend-dump}
[86a8076a994711] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3947d8 +0  BF010000
[86a8076a9953af] jit-backend-dump}
[86a8076a99a38c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed393cf6 +0  160A0000
[86a8076a99b16f] jit-backend-dump}
[86a8076a9a1f19] jit-backend}
[86a8076a9a5a75] {jit-log-opt-bridge
# bridge out of Guard 0x323ece0 with 44 ops
[i0, p1, p2, p3, p4, p5]
+118: guard_not_invalidated(descr=<Guard0x323f220>) [i0, p1, p2, p3, p4, p5]
+118: i6 = getfield_gc_i(p2, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+129: i7 = int_add_ovf(i6, i0)
+135: guard_no_overflow(descr=<Guard0x331e800>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
+141: p8 = getfield_gc_r(p4, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+152: guard_nonnull_class(p8, ConstClass(ForwardLink), descr=<Guard0x323f280>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+171: i10 = getfield_gc_i(p1, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+175: i11 = int_eq(i10, i7)
+178: guard_false(i11, descr=<Guard0x331e848>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '(let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)))')
debug_merge_point(0, 0, '(- row dist)')
+184: i12 = int_sub_ovf(i6, i0)
+187: guard_no_overflow(descr=<Guard0x331e890>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand6)')
+193: i13 = int_eq(i10, i12)
+196: guard_false(i13, descr=<Guard0x331e8d8>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)')
debug_merge_point(0, 0, '(let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed)))')
debug_merge_point(0, 0, '(+ dist 1)')
+202: i15 = int_add_ovf(i0, 1)
+209: guard_no_overflow(descr=<Guard0x331e920>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(CellRef(ok?) row AppRand8 (cdr placed))')
+215: p16 = getfield_gc_r(p3, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize1.inst__vals_0 24 pure>)
+226: p17 = getfield_gc_r(p16, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+230: guard_nonnull_class(p17, 16477696, descr=<Guard0x323f2e0>) [i0, p1, p2, p3, p4, p5]
+248: p19 = getfield_gc_r(p1, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+252: guard_nonnull_class(p19, 16616448, descr=<Guard0x323f340>) [i0, p1, p2, p3, p4, p5]
+271: p21 = getfield_gc_r(p17, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+282: guard_value(p21, ConstPtr(ptr22), descr=<Guard0x331e968>) [i0, p1, p2, p3, p4, p5]
+291: i23 = instance_ptr_eq(p3, p17)
+294: guard_true(i23, descr=<Guard0x331e9b0>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) row AppRand8 (cdr placed))')
+300: p24 = new_with_vtable(descr=<SizeDescr 40>)
+341: p25 = new_with_vtable(descr=<SizeDescr 16>)
+352: setfield_gc(p25, i15, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+356: setfield_gc(p24, p3, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+360: setfield_gc(p24, p2, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+364: setfield_gc(p24, p25, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+368: setfield_gc(p24, p19, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+372: jump(p24, p4, descr=TargetToken(52788128))
+400: --end of the loop--
[86a8076a9cf410] jit-log-opt-bridge}
[86a8076ac77278] {jit-backend
[86a8076acacb68] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed394a
[86a8076acb2517] jit-backend-dump}
[86a8076acbc9b5] {jit-backend-addr
Loop 5 ((+ AppRand2 AppRand3) from (+ AppRand2 AppRand3)) has address 0x7fb5ed394b4d to 0x7fb5ed394c30 (bootstrap 0x7fb5ed394ac0)
       gc table: 0x7fb5ed394a70
       function: 0x7fb5ed394ac0
         resops: 0x7fb5ed394b4d
       failures: 0x7fb5ed394c30
            end: 0x7fb5ed394d3e
[86a8076acbf5db] jit-backend-addr}
[86a8076acc3878] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed394b77 +0  E3000000
[86a8076acc4afd] jit-backend-dump}
[86a8076acc7eee] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed394b88 +0  EE000000
[86a8076acc8cfe] jit-backend-dump}
[86a8076accbe8e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed394b9b +0  F7000000
[86a8076acccb8e] jit-backend-dump}
[86a8076accfb90] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed394baf +0  FF000000
[86a8076acd08ce] jit-backend-dump}
[86a8076acd38cd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed394be0 +0  06010000
[86a8076acd45f5] jit-backend-dump}
[86a8076acd75d8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed394bec +0  16010000
[86a8076acd82fd] jit-backend-dump}
[86a8076acdb24b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed394c00 +0  1E010000
[86a8076acdbf88] jit-backend-dump}
[86a8076acdfa33] jit-backend}
[86a8076ace3521] {jit-log-opt-loop
# Loop 5 ((+ AppRand2 AppRand3) from (+ AppRand2 AppRand3)) : loop with 26 ops
[p0, p1]
+229: label(p0, p1, descr=TargetToken(53317728))
+248: guard_not_invalidated(descr=<Guard0x323f3a0>) [p1, p0]
+248: guard_class(p0, 16503888, descr=<Guard0x331e9f8>) [p1, p0]
+267: i3 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_0 16 pure>)
+271: i4 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_1 24 pure>)
+275: i5 = int_add_ovf(i3, i4)
+278: guard_no_overflow(descr=<Guard0x331ea40>) [p1, p0]
+284: guard_class(p1, 16437216, descr=<Guard0x331ea88>) [p1, p0]
+303: p7 = getfield_gc_r(p1, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+314: guard_value(p7, ConstPtr(ptr8), descr=<Guard0x331ead0>) [p1, p0]
+323: p9 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+327: i10 = getfield_gc_i(p1, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+331: p11 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(+ AppRand2 AppRand3) from (+ AppRand2 AppRand3)')
+335: label(p9, i10, i5, p11, descr=TargetToken(53317808))
+360: guard_not_invalidated(descr=<Guard0x323f400>) [p11, i5, i10, p9]
+360: i12 = int_add_ovf(i10, i5)
+366: guard_no_overflow(descr=<Guard0x331eb18>) [p11, i5, i10, p9]
+372: guard_class(p11, 16437216, descr=<Guard0x331eb60>) [p11, i5, i10, p9]
+384: p14 = getfield_gc_r(p11, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+395: guard_value(p14, ConstPtr(ptr15), descr=<Guard0x331eba8>) [p11, i5, i10, p9]
+404: p16 = getfield_gc_r(p11, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+408: i17 = getfield_gc_i(p11, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+412: p18 = getfield_gc_r(p11, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(+ AppRand2 AppRand3) from (+ AppRand2 AppRand3)')
+416: jump(p16, i17, i12, p18, descr=TargetToken(53317808))
+448: --end of the loop--
[86a8076ad0108d] jit-log-opt-loop}
[86a8076af9224d] {jit-backend
[86a8076afea91a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed394ea0 +0  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8CA201000048FF042580E538024C8BBD400100004D8B77084D89F44D01CE0F80000000004C8B95380100004D8B42084983F8017207418138900F00000F85000000004D8B45084D39F00F84000000004D29CC0F80000000004D39E00F85000000004D8B62204C8B05FBFEFFFF4D39C40F85000000004D8B42104D8B621841813C24201600000F85000000004D8B7424084983FE01720741813E900F00000F8500000000418138D00C01000F85000000004D8B700841813EB8B500000F8500000000498B7E20488B77084883FE017206813EB8B500000F8500000000498B78104883FF017206813F509A00000F8500000000488B5F104883FB017206813B40D202000F8500000000498B78184883FF017206813F509A00000F8500000000498B78204885FF0F8400000000488B7E104C8B058AFEFFFF4C39C70F85000000004939F60F8500000000488B3589FEFFFF4839F30F8500000000498B742420488B1D84FEFFFF4839DE0F8500000000498B5C2410498B7424284D8B54241848899D300100004889F3BA000000004C89D149BBD04B39EDB57F000041FFE3666666662E0F1F84000000000048C7442408FFFFFF0049BB484D39EDB57F00004C895D204D8D9BA8D5FFFF41FFD3E938FEFFFFFF3564FDFFFF49BB584D39EDB57F000041534D8D9BA8D2FFFF41FFE3FF3550FDFFFF49BB684D39EDB57F000041534D8D9B98D2FFFF41FFE3FF353CFDFFFF49BB784D39EDB57F000041534D8D9B88D2FFFF41FFE3FF3528FDFFFF49BB884D39EDB57F000041534D8D9B78D2FFFF41FFE3FF3514FDFFFF49BB984D39EDB57F000041534D8D9B68D2FFFF41FFE3FF3500FDFFFF49BBA84D39EDB57F000041534D8D9B58D2FFFF41FFE3FF35F4FCFFFF49BBB84D39EDB57F000041534D8D9B48D2FFFF41FFE3FF35E0FCFFFF49BBC84D39EDB57F000041534D8D9B38D2FFFF41FFE3FF35CCFCFFFF49BBD84D39EDB57F000041534D8D9B28D2FFFF41FFE3FF35B8FCFFFF49BBE84D39EDB57F000041534D8D9B18D2FFFF41FFE3FF35A4FCFFFF49BBF84D39EDB57F000041534D8D9B08D2FFFF41FFE3FF3590FCFFFF49BB084E39EDB57F000041534D8D9BF8D1FFFF41FFE3FF357CFCFFFF49BB184E39EDB57F000041534D8D9BE8D1FFFF41FFE3FF3568FCFFFF49BB284E39EDB57F000041534D8D9BD8D1FFFF41FFE3FF3554FCFFFF49BB384E39EDB57F000041534D8D9BC8D1FFFF41FFE3FF3540FCFFFF49BB484E39EDB57F000041534D8D9BB8D1FFFF41FFE3FF3534FCFFFF49BB584E39EDB57F000041534D8D9BA8D1FFFF41FFE3FF3520FCFFFF49BB684E39EDB57F000041534D8D9B98D1FFFF41FFE3FF3514FCFFFF49BB784E39EDB57F000041534D8D9B88D1FFFF41FFE3FF3508FCFFFF49BB884E39EDB57F000041534D8D9B78D1FFFF41FFE3
[86a8076aff29a5] jit-backend-dump}
[86a8076affd0af] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed394f64 +0  20000000
[86a8076affe5db] jit-backend-dump}
[86a8076b00232a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed395115 +0  20000000
[86a8076b003241] jit-backend-dump}
[86a8076b006694] {jit-backend-addr
bridge out of Guard 0x32cc380 has address 0x7fb5ed394f60 to 0x7fb5ed395110
       gc table: 0x7fb5ed394ea0
    jump target: 0x7fb5ed394f60
         resops: 0x7fb5ed394f6e
       failures: 0x7fb5ed395110
            end: 0x7fb5ed395366
[86a8076b008bf1] jit-backend-addr}
[86a8076b00c0d0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed394f89 +0  C5010000
[86a8076b00cfbd] jit-backend-dump}
[86a8076b010181] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed394fa7 +0  C3010000
[86a8076b010ef2] jit-backend-dump}
[86a8076b013de4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed394fb4 +0  D2010000
[86a8076b014b1e] jit-backend-dump}
[86a8076b017a10] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed394fbd +0  E5010000
[86a8076b018726] jit-backend-dump}
[86a8076b01b615] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed394fc6 +0  F8010000
[86a8076b01c315] jit-backend-dump}
[86a8076b01f1e5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed394fda +0  00020000
[86a8076b01feeb] jit-backend-dump}
[86a8076b022dd7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed394ff0 +0  06020000
[86a8076b023abf] jit-backend-dump}
[86a8076b0269c0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed395008 +0  0A020000
[86a8076b027683] jit-backend-dump}
[86a8076b02a532] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed395015 +0  19020000
[86a8076b02b20a] jit-backend-dump}
[86a8076b02e112] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed395026 +0  24020000
[86a8076b02edf3] jit-backend-dump}
[86a8076b031c8c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed395040 +0  26020000
[86a8076b032940] jit-backend-dump}
[86a8076b035823] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed395056 +0  2C020000
[86a8076b0364e6] jit-backend-dump}
[86a8076b039394] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39506c +0  32020000
[86a8076b03a048] jit-backend-dump}
[86a8076b03cf2e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed395082 +0  38020000
[86a8076b03dbf1] jit-backend-dump}
[86a8076b040a9c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39508f +0  47020000
[86a8076b041759] jit-backend-dump}
[86a8076b044611] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3950a3 +0  4F020000
[86a8076b0452d7] jit-backend-dump}
[86a8076b04817a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3950ac +0  62020000
[86a8076b048e4f] jit-backend-dump}
[86a8076b04bd0a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3950bc +0  6E020000
[86a8076b04c9cd] jit-backend-dump}
[86a8076b04f902] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3950d1 +0  75020000
[86a8076b0505fc] jit-backend-dump}
[86a8076b05380c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed393cd2 +0  8A120000
[86a8076b0544bd] jit-backend-dump}
[86a8076b0581d5] jit-backend}
[86a8076b05bbf0] {jit-log-opt-bridge
# bridge out of Guard 0x32cc380 with 66 ops
[i0, p1, p2, p3, p4, p5]
+214: guard_not_invalidated(descr=<Guard0x323f460>) [i0, p1, p2, p3, p4, p5]
+214: i6 = getfield_gc_i(p2, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+225: i7 = int_add_ovf(i6, i0)
+231: guard_no_overflow(descr=<Guard0x331ebf0>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
+237: p8 = getfield_gc_r(p4, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+248: guard_nonnull_class(p8, ConstClass(ForwardLink), descr=<Guard0x323f4c0>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+267: i10 = getfield_gc_i(p1, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+271: i11 = int_eq(i10, i7)
+274: guard_false(i11, descr=<Guard0x331ec38>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '(let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)))')
debug_merge_point(0, 0, '(- row dist)')
+280: i12 = int_sub_ovf(i6, i0)
+283: guard_no_overflow(descr=<Guard0x331ec80>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand6)')
+289: i13 = int_eq(i10, i12)
+292: guard_true(i13, descr=<Guard0x331ecc8>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)')
debug_merge_point(0, 0, '#f')
+298: p14 = getfield_gc_r(p4, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+309: guard_value(p14, ConstPtr(ptr15), descr=<Guard0x331ed10>) [i0, p1, p2, p3, p4, p5]
+318: p16 = getfield_gc_r(p4, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+322: p17 = getfield_gc_r(p4, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand6)')
+326: guard_class(p17, 16437216, descr=<Guard0x331ed58>) [i0, p1, p2, p3, p4, p5]
+340: p19 = getfield_gc_r(p17, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+345: guard_nonnull_class(p19, ConstClass(ForwardLink), descr=<Guard0x323f520>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
+364: guard_class(p16, 16500368, descr=<Guard0x331eda0>) [i0, p1, p2, p3, p4, p5]
+377: p22 = getfield_gc_r(p16, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+381: guard_class(p22, 16478072, descr=<Guard0x331ede8>) [i0, p1, p2, p3, p4, p5]
+394: p24 = getfield_gc_r(p22, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand6)')
+394: p25 = getfield_gc_r(p22, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+398: p26 = getfield_gc_r(p25, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+402: guard_nonnull_class(p26, 16478072, descr=<Guard0x323f580>) [i0, p1, p2, p3, p4, p5]
+420: p28 = getfield_gc_r(p16, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+424: guard_nonnull_class(p28, 16471056, descr=<Guard0x323f5e0>) [i0, p1, p2, p3, p4, p5]
+442: p30 = getfield_gc_r(p28, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+446: guard_nonnull_class(p30, 16616448, descr=<Guard0x323f640>) [i0, p1, p2, p3, p4, p5]
+464: i32 = getfield_gc_i(p28, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+464: p33 = getfield_gc_r(p16, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+468: guard_nonnull_class(p33, 16471056, descr=<Guard0x323f6a0>) [i0, p1, p2, p3, p4, p5]
+486: p35 = getfield_gc_r(p16, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+490: guard_nonnull(p35, descr=<Guard0x331ee30>) [i0, p1, p2, p3, p4, p5]
+499: p36 = getfield_gc_r(p26, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+510: guard_value(p36, ConstPtr(ptr37), descr=<Guard0x331ee78>) [i0, p1, p2, p3, p4, p5]
+519: i38 = instance_ptr_eq(p22, p26)
+522: guard_true(i38, descr=<Guard0x331eec0>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+535: i40 = instance_ptr_eq(p30, ConstPtr(ptr39))
+538: guard_true(i40, descr=<Guard0x331ef08>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0)')
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(+ AppRand2 AppRand3) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+544: p41 = getfield_gc_r(p17, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+556: guard_value(p41, ConstPtr(ptr42), descr=<Guard0x331ef50>) [i0, p1, p2, p3, p4, p5]
+565: p43 = getfield_gc_r(p17, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+570: i44 = getfield_gc_i(p17, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+575: p45 = getfield_gc_r(p17, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(+ AppRand2 AppRand3) from (+ AppRand2 AppRand3)')
+580: jump(p43, i44, 0, p45, descr=TargetToken(53317808))
+624: --end of the loop--
[86a8076b09edba] jit-log-opt-bridge}
[86a8076b522a96] {jit-backend
[86a8076b5e72a0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3955b
[86a8076b5f3bbb] jit-backend-dump}
[86a8076b5ff052] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3956f4 +0  24000000
[86a8076b600510] jit-backend-dump}
[86a8076b603fc1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed395b05 +0  24000000
[86a8076b604f1c] jit-backend-dump}
[86a8076b607f7d] {jit-backend-addr
bridge out of Guard 0x323ea40 has address 0x7fb5ed3956f0 to 0x7fb5ed395b00
       gc table: 0x7fb5ed3955b0
    jump target: 0x7fb5ed3956f0
         resops: 0x7fb5ed3956fe
       failures: 0x7fb5ed395b00
            end: 0x7fb5ed395ef1
[86a8076b60a2a1] jit-backend-addr}
[86a8076b60d5ff] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39570e +0  43040000
[86a8076b60e49c] jit-backend-dump}
[86a8076b6114c9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39571b +0  52040000
[86a8076b612225] jit-backend-dump}
[86a8076b61511a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39572b +0  5E040000
[86a8076b615dce] jit-backend-dump}
[86a8076b618c48] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39573f +0  66040000
[86a8076b619914] jit-backend-dump}
[86a8076b61c7ab] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed395753 +0  6E040000
[86a8076b61d458] jit-backend-dump}
[86a8076b6206e9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed395768 +0  91040000
[86a8076b621439] jit-backend-dump}
[86a8076b6244af] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39577f +0  96040000
[86a8076b62516c] jit-backend-dump}
[86a8076b628033] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39578d +0  A4040000
[86a8076b628d49] jit-backend-dump}
[86a8076b62bc9a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3957a4 +0  A9040000
[86a8076b62c922] jit-backend-dump}
[86a8076b62f7c2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3957ba +0  AF040000
[86a8076b63046f] jit-backend-dump}
[86a8076b6333a8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3957c7 +0  BE040000
[86a8076b63403a] jit-backend-dump}
[86a8076b637076] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed395843 +0  5E040000
[86a8076b637d1d] jit-backend-dump}
[86a8076b63ac25] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed395855 +0  68040000
[86a8076b63b8a4] jit-backend-dump}
[86a8076b63e722] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39586e +0  6B040000
[86a8076b63f3d0] jit-backend-dump}
[86a8076b642297] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39588a +0  6B040000
[86a8076b642f23] jit-backend-dump}
[86a8076b645d88] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3958ad +0  64040000
[86a8076b646a36] jit-backend-dump}
[86a8076b649915] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3958c1 +0  6C040000
[86a8076b64a59b] jit-backend-dump}
[86a8076b64d3fa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3958ca +0  7F040000
[86a8076b64e0a8] jit-backend-dump}
[86a8076b650f6c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3958e5 +0  80040000
[86a8076b651bf2] jit-backend-dump}
[86a8076b654a4b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3958fd +0  84040000
[86a8076b6556f5] jit-backend-dump}
[86a8076b6585d5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39590f +0  8E040000
[86a8076b65925e] jit-backend-dump}
[86a8076b65c0ae] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed395918 +0  A1040000
[86a8076b65cd5e] jit-backend-dump}
[86a8076b65fc35] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed395925 +0  B0040000
[86a8076b6608df] jit-backend-dump}
[86a8076b6637b6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39592e +0  C3040000
[86a8076b66446f] jit-backend-dump}
[86a8076b66734f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed395944 +0  C9040000
[86a8076b667fe1] jit-backend-dump}
[86a8076b66aeab] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed395955 +0  D4040000
[86a8076b66bb6e] jit-backend-dump}
[86a8076b66ea2c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39595e +0  E7040000
[86a8076b66f6ca] jit-backend-dump}
[86a8076b672533] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39596b +0  F6040000
[86a8076b6731ec] jit-backend-dump}
[86a8076b6760cf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed395974 +0  09050000
[86a8076b676d6a] jit-backend-dump}
[86a8076b679bdc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39598e +0  0B050000
[86a8076b67a89f] jit-backend-dump}
[86a8076b67d760] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3959a2 +0  13050000
[86a8076b67e3f5] jit-backend-dump}
[86a8076b68125d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3959ab +0  26050000
[86a8076b681f5d] jit-backend-dump}
[86a8076b68514f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed393b6d +0  7F1B0000
[86a8076b685e00] jit-backend-dump}
[86a8076b689b95] jit-backend}
[86a8076b68d5bf] {jit-log-opt-bridge
# bridge out of Guard 0x323ea40 with 142 ops
[p0, p1]
+342: guard_class(p1, 16500368, descr=<Guard0x323f700>) [p0, p1]
+354: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+358: guard_nonnull(p3, descr=<Guard0x331ef98>) [p0, p1]
+374: i5 = instance_ptr_eq(p3, ConstPtr(ptr4))
+377: guard_true(i5, descr=<Guard0x331efe0>) [p0, p1]
debug_merge_point(0, 0, '#t')
+383: guard_class(p0, 16435920, descr=<Guard0x331f028>) [p0, p1]
+403: p7 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+414: guard_value(p7, ConstPtr(ptr8), descr=<Guard0x331f070>) [p0, p1]
+423: p9 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+427: guard_not_invalidated(descr=<Guard0x331f0b8>) [p0, p1]
+427: p10 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (CellRef(ok?) row AppRand8 (cdr placed))')
+431: guard_class(p10, 16437216, descr=<Guard0x331f100>) [p0, p1]
+444: p12 = getfield_gc_r(p10, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+448: guard_nonnull_class(p12, ConstClass(ForwardLink), descr=<Guard0x323f760>) [p0, p1]
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '(let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z)))')
debug_merge_point(0, 0, '(append (cdr x) y)')
+467: guard_class(p9, 16500368, descr=<Guard0x331f148>) [p0, p1]
+481: p15 = getfield_gc_r(p9, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+485: guard_nonnull_class(p15, 16471056, descr=<Guard0x323f7c0>) [p0, p1]
+504: p17 = getfield_gc_r(p15, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+508: guard_nonnull_class(p17, 16471056, descr=<Guard0x323f820>) [p0, p1]
+526: p19 = getfield_gc_r(p9, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+530: guard_nonnull(p19, descr=<Guard0x331f190>) [p0, p1]
+539: p21 = call_r(ConstClass(append_two), p17, p19, descr=<Callr 8 rr EF=5>)
+648: guard_no_exception(descr=<Guard0x323f880>) [p9, p21, p19, p17, p10, p12]
+663: guard_nonnull_class(p21, 16471056, descr=<Guard0x323f8e0>) [p9, p21, p19, p17, p10, p12]
debug_merge_point(0, 0, '(CellRef(my-try) AppRand1 '() (cons (car x) z))')
+681: p23 = getfield_gc_r(p9, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+692: guard_class(p23, 16478072, descr=<Guard0x331f1d8>) [p9, p21, p19, p17, p10, p12]
+706: p25 = getfield_gc_r(p23, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+711: p26 = getfield_gc_r(p25, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+715: guard_nonnull_class(p26, 16478072, descr=<Guard0x323f940>) [p9, p21, p19, p17, p10, p12]
+734: i28 = getfield_gc_i(p15, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+745: p29 = getfield_gc_r(p9, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+749: guard_nonnull_class(p29, 16471056, descr=<Guard0x323f9a0>) [p9, p21, p19, p17, p10, p12]
+769: p31 = getfield_gc_r(p26, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+780: guard_value(p31, ConstPtr(ptr32), descr=<Guard0x331f220>) [p9, p21, p19, p17, p10, p12]
+789: i33 = instance_ptr_eq(p23, p26)
+792: guard_true(i33, descr=<Guard0x331f268>) [p9, p21, p19, p17, p10, p12]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) AppRand1 '() (cons (car x) z))')
debug_merge_point(0, 0, '(let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))')
debug_merge_point(0, 0, '(CellRef(ok?) (car x) 1 z)')
+798: p34 = getfield_gc_r(p23, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+803: p35 = getfield_gc_r(p34, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+807: guard_nonnull_class(p35, 16477696, descr=<Guard0x323fa00>) [p9, p21, p19, p17, p10, p12]
+825: i37 = getfield_gc_i(p21, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+829: p38 = getfield_gc_r(p35, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+840: guard_value(p38, ConstPtr(ptr39), descr=<Guard0x331f2b0>) [p9, p21, p19, p17, p10, p12]
+849: p40 = getfield_gc_r(p23, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)')
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
debug_merge_point(0, 0, '(+ row dist)')
+854: i42 = int_add_ovf(i37, 1)
+861: guard_no_overflow(descr=<Guard0x331f2f8>) [p9, p21, p19, p17, p10, p12]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+867: i43 = int_eq(i28, i42)
+870: guard_false(i43, descr=<Guard0x331f340>) [p9, p21, p19, p17, p10, p12]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '(let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)))')
debug_merge_point(0, 0, '(- row dist)')
+876: i45 = int_sub_ovf(i37, 1)
+883: guard_no_overflow(descr=<Guard0x331f388>) [p9, p21, p19, p17, p10, p12]
debug_merge_point(0, 0, '(let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand6)')
+889: i46 = int_eq(i28, i45)
+892: guard_true(i46, descr=<Guard0x331f3d0>) [p9, p21, p19, p17, p10, p12]
debug_merge_point(0, 0, '(if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)')
debug_merge_point(0, 0, '#f')
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand6)')
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand6)')
+898: p47 = getfield_gc_r(p21, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+902: guard_nonnull_class(p47, 16471056, descr=<Guard0x323fa60>) [p9, p21, p19, p17, p10, p12]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
debug_merge_point(0, 0, '(let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))')
debug_merge_point(0, 0, '(CellRef(ok?) (car x) 1 z)')
+920: i49 = getfield_gc_i(p47, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)')
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
debug_merge_point(0, 0, '(+ row dist)')
+924: i51 = int_add_ovf(i49, 1)
+931: guard_no_overflow(descr=<Guard0x331f418>) [p9, p21, p19, p17, p10, p12]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+937: i52 = int_eq(i28, i51)
+940: guard_false(i52, descr=<Guard0x331f460>) [p9, p21, p19, p17, p10, p12]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '(let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)))')
debug_merge_point(0, 0, '(- row dist)')
+946: i54 = int_sub_ovf(i49, 1)
+953: guard_no_overflow(descr=<Guard0x331f4a8>) [p9, p21, p19, p17, p10, p12]
debug_merge_point(0, 0, '(let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand6)')
+959: i55 = int_eq(i28, i54)
+962: guard_false(i55, descr=<Guard0x331f4f0>) [p9, p21, p19, p17, p10, p12]
debug_merge_point(0, 0, '(if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)')
debug_merge_point(0, 0, '(let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed)))')
debug_merge_point(0, 0, '(+ dist 1)')
debug_merge_point(0, 0, '(CellRef(ok?) row AppRand8 (cdr placed))')
+968: p56 = getfield_gc_r(p35, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize1.inst__vals_0 24 pure>)
+972: p57 = getfield_gc_r(p56, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+976: guard_nonnull_class(p57, 16477696, descr=<Guard0x323fac0>) [p9, p21, p19, p17, p10, p12]
+994: p59 = getfield_gc_r(p57, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1005: guard_value(p59, ConstPtr(ptr60), descr=<Guard0x331f538>) [p9, p21, p19, p17, p10, p12]
+1014: i61 = instance_ptr_eq(p35, p57)
+1017: guard_true(i61, descr=<Guard0x331f580>) [p9, p21, p19, p17, p10, p12]
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) row AppRand8 (cdr placed))')
+1023: p62 = new_with_vtable(descr=<SizeDescr 16>)
+1077: p63 = new_with_vtable(descr=<SizeDescr 40>)
+1088: p64 = new_with_vtable(descr=<SizeDescr 40>)
+1099: setfield_gc(p64, p23, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1103: setfield_gc(p64, p47, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+1107: p65 = new_with_vtable(descr=<SizeDescr 24>)
+1119: setfield_gc(p65, i37, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+1123: setfield_gc(p65, ConstPtr(ptr66), descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+1134: setfield_gc(p64, p65, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+1138: p67 = new_with_vtable(descr=<SizeDescr 24>)
+1149: setfield_gc(p67, i28, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+1153: setfield_gc(p67, p29, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+1164: setfield_gc(p64, p67, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+1168: p68 = new_with_vtable(descr=<SizeDescr 48>)
+1180: setfield_gc(p68, p12, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1191: setfield_gc(p68, p40, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1195: p69 = new_with_vtable(descr=<SizeDescr 40>)
+1206: setfield_gc(p69, p12, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1210: setfield_gc(p69, p9, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1214: setfield_gc(p69, p10, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1232: setfield_gc(p69, ConstPtr(ptr70), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+1236: setfield_gc(p68, p69, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1247: setfield_gc(p68, ConstPtr(ptr71), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+1251: setfield_gc(p68, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+1259: setfield_gc(p63, ConstPtr(ptr73), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+1270: setfield_gc(p63, p64, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1274: setfield_gc(p63, p68, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1278: setfield_gc(p63, p12, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1282: setfield_gc(p62, i49, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1286: jump(p35, p62, 2, p29, p63, p12, i49, p56, p57, descr=TargetToken(52788208))
+1360: --end of the loop--
[86a8076b6fd19e] jit-log-opt-bridge}
[86a8076b97bc6e] {jit-backend
[86a8076b9ff71c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3960c0 +0  0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004881ECB800000048896C24604889B424B0000000488D8424980000004C8B56384C89104889600848C7401003000000488946384889FD48895C24684C896424704C896C24784C89B424800000004C89BC2488000000488B1C258893F90048C7030100000048896B084883C31048891C258893F900488B0425704A5E014829E0483B0425784A5E010F87A302000048FF042550A3340266662E0F1F84000000000048FF042570A33402488B8D300100008139D00C01000F8500000000488B41104883F80172068138509A00000F8500000000488B1548FEFFFF4839D00F8400000000488B9D38010000813B201600000F8500000000488B73084883FE017206813E900F00000F8500000000488B7908813FB8B500000F85000000004C8B47184D8B48084983F901720741813940B400000F85000000004C8B50084C8B61204983FC01720841813C24509A00000F85000000004D8B69104C8B35FCFDFFFF4D39F50F85000000004C8B77084939D40F84000000004C89D24983C2010F80000000004D8B6C24084D39D50F84000000004989D24883EA010F80000000004939D50F8500000000488B57204C8B7A084983FF01720741813FB8B500000F85000000004889B540010000488B70104883FE017206813E509A00000F8500000000488B41184883F80172068138509A00000F85000000004889BD48010000498B7F104C8985500100004C8B05A6FDFFFF4C39C70F85000000004C39BD480100000F85000000004C89F14C89A5300100004C898D58010000488995600100004C89BD6801000048898D70010000662E0F1F84000000000048FF042590A33402488B4E084989CF4883C1010F80000000004939CD0F84000000004C89F94983EF010F80000000004D39FD0F85000000004C8B7E104983FF01720741813F509A00000F85000000004989CC488B0C25F091F900488D5148483B14251092F9000F878600000048891425F091F90048C701509A0000488D511848C702201600004C8951084C8B95400100004C895208488941104C89721048895A18488B1D00FDFFFF48895A2048C74228000000004C89FE4889C84C8995400100004C8BB5700100004889D34D89E2E92DFFFFFF666666662E0F1F84000000000049BB503739EDB57F000041FFD3E94BFDFFFF49BBB06039EDB57F00004C895D204D8D9B40CAFFFF41FFD3E965FFFFFFFF35ABFBFFFF49BB105F39EDB57F000041534D8D9BF0C0FFFF41FFE3FF3597FBFFFF49BB205F39EDB57F000041534D8D9BE0C0FFFF41FFE3FF358BFBFFFF49BB305F39EDB57F000041534D8D9BD0C0FFFF41FFE3FF3577FBFFFF49BB405F39EDB57F000041534D8D9BC0C0FFFF41FFE3FF3563FBFFFF49BB505F39EDB57F000041534D8D9BB0C0FFFF41FFE3FF354FFBFFFF49BB605F39EDB57F000041534D8D9BA0C0FFFF41FFE3FF353BFBFFFF49BB705F39EDB57F000041534D8D9B90C0FFFF41FFE3FF3527FBFFFF49BB805F39EDB57F000041534D8D9B80C0FFFF41FFE3FF351BFBFFFF49BB905F39EDB57F000041534D8D9B70C0FFFF41FFE3FF3507FBFFFF49BBA05F39EDB57F000041534D8D9B60C0FFFF41FFE3FF35F3FAFFFF49BBB05F39EDB57F000041534D8D9B50C0FFFF41FFE3FF35DFFAFFFF49BBC05F39EDB57F000041534D8D9B40C0FFFF41FFE3FF35CBFAFFFF49BBD05F39EDB57F000041534D8D9B30C0FFFF41FFE3FF35B7FAFFFF49BBE05F39EDB57F000041534D8D9B20C0FFFF41FFE3FF35A3FAFFFF49BBF05F39EDB57F000041534D8D9B10C0FFFF41FFE3FF358FFAFFFF49BB006039EDB57F000041534D8D9B00C0FFFF41FFE3FF357BFAFFFF49BB106039EDB57F000041534D8D9BF0BFFFFF41FFE3FF3567FAFFFF49BB206039EDB57F000041534D8D9BE0BFFFFF41FFE3FF355BFAFFFF49BB306039EDB57F000041534D8D9BD0BFFFFF41FFE3FF3547FAFFFF49BB406039EDB57F000041534D8D9BC0BFFFFF41FFE3FF3533FAFFFF49BB506039EDB57F000041534D8D9BB0BFFFFF41FFE3FF351FFAFFFF49BB606039EDB57F000041534D8D9BA0BFFFFF41FFE3FF350BFAFFFF49BB706039EDB57F000041534D8D9B90BFFFFF41FFE3FF35F7F9FFFF49BB806039EDB57F000041534D8D9B80BFFFFF41FFE3FF35E3F9FFFF49BB906039EDB57F000041534D8D9B70BFFFFF41FFE3FF35CFF9FFFF49BBA06039EDB57F000041534D8D9B60BFFFFF41FFE3
[86a8076ba09818] jit-backend-dump}
[86a8076ba1463b] {jit-backend-addr
Loop 9 ((if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)) has address 0x7fb5ed39623d to 0x7fb5ed3964e0 (bootstrap 0x7fb5ed3961b0)
       gc table: 0x7fb5ed3960c0
       function: 0x7fb5ed3961b0
         resops: 0x7fb5ed39623d
       failures: 0x7fb5ed3964e0
            end: 0x7fb5ed3967e7
[86a8076ba176e6] jit-backend-addr}
[86a8076ba1b8aa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed396267 +0  A4020000
[86a8076ba1cbc2] jit-backend-dump}
[86a8076ba200ed] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39627d +0  AA020000
[86a8076ba21051] jit-backend-dump}
[86a8076ba2426e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39628d +0  B6020000
[86a8076ba24fa5] jit-backend-dump}
[86a8076ba27f33] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3962a0 +0  BF020000
[86a8076ba28c6d] jit-backend-dump}
[86a8076ba2bc45] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3962b6 +0  C5020000
[86a8076ba2c948] jit-backend-dump}
[86a8076ba2f907] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3962c6 +0  D1020000
[86a8076ba3060a] jit-backend-dump}
[86a8076ba33637] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3962e1 +0  D2020000
[86a8076ba3436e] jit-backend-dump}
[86a8076ba37504] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3962fd +0  D2020000
[86a8076ba3825d] jit-backend-dump}
[86a8076ba3b272] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed396311 +0  DA020000
[86a8076ba3bfe0] jit-backend-dump}
[86a8076ba3efab] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39631e +0  E9020000
[86a8076ba3fcbd] jit-backend-dump}
[86a8076ba42e50] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39632b +0  14030000
[86a8076ba43bc2] jit-backend-dump}
[86a8076ba46c5d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed396339 +0  22030000
[86a8076ba479a9] jit-backend-dump}
[86a8076ba4a928] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed396346 +0  31030000
[86a8076ba4b659] jit-backend-dump}
[86a8076ba4e5ed] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39634f +0  44030000
[86a8076ba4f355] jit-backend-dump}
[86a8076ba52786] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39636a +0  45030000
[86a8076ba53474] jit-backend-dump}
[86a8076ba564ee] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed396387 +0  44030000
[86a8076ba57240] jit-backend-dump}
[86a8076ba5a365] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39639d +0  4A030000
[86a8076ba5b04d] jit-backend-dump}
[86a8076ba5e083] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3963bf +0  44030000
[86a8076ba5ed77] jit-backend-dump}
[86a8076ba61d2d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3963cc +0  53030000
[86a8076ba62a1a] jit-backend-dump}
[86a8076ba65abc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed396415 +0  42030000
[86a8076ba667a6] jit-backend-dump}
[86a8076ba697a6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39641e +0  55030000
[86a8076ba6a47e] jit-backend-dump}
[86a8076ba6d3ad] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39642b +0  64030000
[86a8076ba6e0d2] jit-backend-dump}
[86a8076ba71082] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed396434 +0  77030000
[86a8076ba71d4e] jit-backend-dump}
[86a8076ba74d00] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39644b +0  7C030000
[86a8076ba759fd] jit-backend-dump}
[86a8076ba7952f] jit-backend}
[86a8076ba7d161] {jit-log-opt-loop
# Loop 9 ((if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)) : loop with 107 ops
[p0, p1]
+389: label(p0, p1, descr=TargetToken(53317888))
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+408: guard_class(p0, 16500368, descr=<Guard0x323fb20>) [p1, p0]
+427: p3 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+431: guard_nonnull_class(p3, 16471056, descr=<Guard0x323fb80>) [p1, p0]
+456: i6 = instance_ptr_eq(p3, ConstPtr(ptr5))
+459: guard_false(i6, descr=<Guard0x331f5c8>) [p1, p0]
debug_merge_point(0, 0, '(let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))')
+465: guard_class(p1, 16437216, descr=<Guard0x331f610>) [p1, p0]
+484: p8 = getfield_gc_r(p1, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+488: guard_nonnull_class(p8, ConstClass(ForwardLink), descr=<Guard0x323fbe0>) [p1, p0]
debug_merge_point(0, 0, '(CellRef(ok?) (car x) 1 z)')
+506: p10 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+510: guard_class(p10, 16478072, descr=<Guard0x331f658>) [p1, p0]
+522: p12 = getfield_gc_r(p10, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+526: p13 = getfield_gc_r(p12, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+530: guard_nonnull_class(p13, 16477696, descr=<Guard0x323fc40>) [p1, p0]
+549: i15 = getfield_gc_i(p3, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+553: p16 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+557: guard_nonnull_class(p16, 16471056, descr=<Guard0x323fca0>) [p1, p0]
+577: p18 = getfield_gc_r(p13, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+588: guard_value(p18, ConstPtr(ptr19), descr=<Guard0x331f6a0>) [p1, p0]
+597: p20 = getfield_gc_r(p10, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)')
+601: i22 = instance_ptr_eq(p16, ConstPtr(ptr21))
+604: guard_false(i22, descr=<Guard0x331f6e8>) [p1, p0]
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
debug_merge_point(0, 0, '(+ row dist)')
+610: guard_not_invalidated(descr=<Guard0x331f730>) [p1, p0]
+610: i24 = int_add_ovf(i15, 1)
+617: guard_no_overflow(descr=<Guard0x331f778>) [p1, p0]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+623: i25 = getfield_gc_i(p16, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+628: i26 = int_eq(i25, i24)
+631: guard_false(i26, descr=<Guard0x331f7c0>) [p1, p0]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '(let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)))')
debug_merge_point(0, 0, '(- row dist)')
+637: i28 = int_sub_ovf(i15, 1)
+644: guard_no_overflow(descr=<Guard0x331f808>) [p1, p0]
debug_merge_point(0, 0, '(let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand6)')
+650: i29 = int_eq(i25, i28)
+653: guard_true(i29, descr=<Guard0x331f850>) [p1, p0]
debug_merge_point(0, 0, '(if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)')
debug_merge_point(0, 0, '#f')
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand6)')
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand6)')
+659: p30 = getfield_gc_r(p10, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+663: p31 = getfield_gc_r(p30, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+667: guard_nonnull_class(p31, 16478072, descr=<Guard0x323fd00>) [p1, p0]
+686: p33 = getfield_gc_r(p3, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+697: guard_nonnull_class(p33, 16471056, descr=<Guard0x323fd60>) [p1, p0]
+715: p35 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+719: guard_nonnull_class(p35, 16471056, descr=<Guard0x323fdc0>) [p1, p0]
+737: p37 = getfield_gc_r(p31, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+762: guard_value(p37, ConstPtr(ptr38), descr=<Guard0x331f898>) [p1, p0]
+771: i39 = instance_ptr_eq(p10, p31)
+778: guard_true(i39, descr=<Guard0x331f8e0>) [p1, p0]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+784: p40 = same_as_r(p20)
+787: label(p10, p33, i15, p35, p16, p8, p20, p1, p12, p13, i25, p30, p31, p40, descr=TargetToken(53317968))
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
debug_merge_point(0, 0, '(let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))')
debug_merge_point(0, 0, '(CellRef(ok?) (car x) 1 z)')
+840: i41 = getfield_gc_i(p33, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)')
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
debug_merge_point(0, 0, '(+ row dist)')
+844: guard_not_invalidated(descr=<Guard0x323fe20>) [p1, p20, p35, i15, p33, p10, i41, p16, p13, p8]
+844: i43 = int_add_ovf(i41, 1)
+851: guard_no_overflow(descr=<Guard0x331f928>) [p1, p20, p35, i15, p33, p10, i41, p16, p13, p8]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+857: i44 = int_eq(i25, i43)
+860: guard_false(i44, descr=<Guard0x331f970>) [p1, p20, p35, i15, p33, p10, i41, p16, p13, p8]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '(let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)))')
debug_merge_point(0, 0, '(- row dist)')
+866: i46 = int_sub_ovf(i41, 1)
+873: guard_no_overflow(descr=<Guard0x331f9b8>) [p1, p20, p35, i15, p33, p10, i41, p16, p13, p8]
debug_merge_point(0, 0, '(let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand6)')
+879: i47 = int_eq(i25, i46)
+882: guard_true(i47, descr=<Guard0x331fa00>) [p1, p20, p35, i15, p33, p10, i41, p16, p13, p8]
debug_merge_point(0, 0, '(if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)')
debug_merge_point(0, 0, '#f')
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand6)')
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand6)')
+888: p48 = getfield_gc_r(p33, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+892: guard_nonnull_class(p48, 16471056, descr=<Guard0x323fe80>) [p1, p20, p35, i15, p33, p10, i41, p16, p13, p8]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+911: p50 = new_with_vtable(descr=<SizeDescr 24>)
+955: p51 = new_with_vtable(descr=<SizeDescr 48>)
+966: setfield_gc(p50, i15, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+970: setfield_gc(p51, p8, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+981: setfield_gc(p50, p35, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+985: setfield_gc(p51, p20, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+989: setfield_gc(p51, p1, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1000: setfield_gc(p51, ConstPtr(ptr52), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+1004: setfield_gc(p51, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+1012: jump(p10, p48, i41, p50, p16, p8, p40, p51, p12, p13, i25, p30, p31, p40, descr=TargetToken(53317968))
+1056: --end of the loop--
[86a8076bad462d] jit-log-opt-loop}
[86a8076bc672da] {jit-backend
[86a8076bc924de] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3968b0 +0  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8CC200000048FF042550A434028139D00C01000F85000000004C8B79104D85FF0F84000000004C8B357AFFFFFF4D39F70F85000000004C8B79184D85FF0F84000000004D39F70F84000000004C8BB53801000041813E201600000F85000000004D8B7E204C8B2D64FFFFFF4D39EF0F85000000004D8B7E284D8B661841813C24201600000F85000000004D8B5424204D39EA0F85000000004D8B6C24104D8B542428498B4C24184C89AD300100004C89D34C89FA49BBD04B39EDB57F000041FFE3660F1F44000048C7442408FFFFFF0049BBF86739EDB57F00004C895D204D8D9BF8BAFFFF41FFD3E918FFFFFFFF35A4FEFFFF49BB086839EDB57F000041534D8D9BF8B7FFFF41FFE3FF3590FEFFFF49BB186839EDB57F000041534D8D9BE8B7FFFF41FFE3FF3584FEFFFF49BB286839EDB57F000041534D8D9BD8B7FFFF41FFE3FF3570FEFFFF49BB386839EDB57F000041534D8D9BC8B7FFFF41FFE3FF355CFEFFFF49BB486839EDB57F000041534D8D9BB8B7FFFF41FFE3FF3548FEFFFF49BB586839EDB57F000041534D8D9BA8B7FFFF41FFE3FF353CFEFFFF49BB686839EDB57F000041534D8D9B98B7FFFF41FFE3FF3528FEFFFF49BB786839EDB57F000041534D8D9B88B7FFFF41FFE3FF3514FEFFFF49BB886839EDB57F000041534D8D9B78B7FFFF41FFE3FF3500FEFFFF49BB986839EDB57F000041534D8D9B68B7FFFF41FFE3
[86a8076bc97c64] jit-backend-dump}
[86a8076bca21f6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed396914 +0  1E000000
[86a8076bca3609] jit-backend-dump}
[86a8076bca6faa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3969e5 +0  1E000000
[86a8076bca7dd6] jit-backend-dump}
[86a8076bcaaf10] {jit-backend-addr
bridge out of Guard 0x323fb80 has address 0x7fb5ed396910 to 0x7fb5ed3969e0
       gc table: 0x7fb5ed3968b0
    jump target: 0x7fb5ed396910
         resops: 0x7fb5ed39691e
       failures: 0x7fb5ed3969e0
            end: 0x7fb5ed396b1e
[86a8076bcad209] jit-backend-addr}
[86a8076bcb05b0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39692e +0  D4000000
[86a8076bcb1432] jit-backend-dump}
[86a8076bcb4507] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39693b +0  E3000000
[86a8076bcb5257] jit-backend-dump}
[86a8076bcb828a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39694b +0  EF000000
[86a8076bcb8fa9] jit-backend-dump}
[86a8076bcbc06c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed396958 +0  FE000000
[86a8076bcbcd7b] jit-backend-dump}
[86a8076bcbfe4a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed396961 +0  11010000
[86a8076bcc0b47] jit-backend-dump}
[86a8076bcc3ae5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed396975 +0  19010000
[86a8076bcc47e5] jit-backend-dump}
[86a8076bcc7785] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed396989 +0  21010000
[86a8076bcc8479] jit-backend-dump}
[86a8076bccb53c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39699f +0  43010000
[86a8076bccc20e] jit-backend-dump}
[86a8076bccf1d0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3969ad +0  51010000
[86a8076bccff26] jit-backend-dump}
[86a8076bcd3146] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39627d +0  8F060000
[86a8076bcd3ded] jit-backend-dump}
[86a8076bcd7c80] jit-backend}
[86a8076bcdb5ed] {jit-log-opt-bridge
# bridge out of Guard 0x323fb80 with 27 ops
[p0, p1]
+118: guard_class(p1, 16500368, descr=<Guard0x323fee0>) [p0, p1]
+130: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+134: guard_nonnull(p3, descr=<Guard0x331fa48>) [p0, p1]
+150: i5 = instance_ptr_eq(p3, ConstPtr(ptr4))
+153: guard_true(i5, descr=<Guard0x331fa90>) [p0, p1]
debug_merge_point(0, 0, '(if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0)')
+159: p6 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+163: guard_nonnull(p6, descr=<Guard0x331fad8>) [p0, p1]
+172: i8 = instance_ptr_eq(p6, ConstPtr(ptr7))
+175: guard_false(i8, descr=<Guard0x331fb20>) [p0, p1]
debug_merge_point(0, 0, '0')
+181: guard_class(p0, 16437216, descr=<Guard0x331fb68>) [p0, p1]
+201: p10 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+212: guard_value(p10, ConstPtr(ptr11), descr=<Guard0x331fbb0>) [p0, p1]
+221: p12 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+221: guard_not_invalidated(descr=<Guard0x331fbf8>) [p0, p1]
+221: i13 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+225: p14 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(+ AppRand2 AppRand3) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+229: guard_class(p14, 16437216, descr=<Guard0x331fc40>) [p0, p1]
+243: p16 = getfield_gc_r(p14, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+248: guard_value(p16, ConstPtr(ptr17), descr=<Guard0x331fc88>) [p0, p1]
+257: p18 = getfield_gc_r(p14, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+262: i19 = getfield_gc_i(p14, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+267: p20 = getfield_gc_r(p14, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(+ AppRand2 AppRand3) from (+ AppRand2 AppRand3)')
+272: jump(p18, i19, i13, p20, descr=TargetToken(53317808))
+304: --end of the loop--
[86a8076bcf48c5] jit-log-opt-bridge}
[86a8076be047f8] {jit-backend
[86a8076be6120e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed396c
[86a8076be682eb] jit-backend-dump}
[86a8076be71f25] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed396cd4 +0  25000000
[86a8076be731e5] jit-backend-dump}
[86a8076be76a63] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed396ea5 +0  25000000
[86a8076be7789e] jit-backend-dump}
[86a8076be7a955] {jit-backend-addr
bridge out of Guard 0x331eb60 has address 0x7fb5ed396cd0 to 0x7fb5ed396ea0
       gc table: 0x7fb5ed396c40
    jump target: 0x7fb5ed396cd0
         resops: 0x7fb5ed396cde
       failures: 0x7fb5ed396ea0
            end: 0x7fb5ed397087
[86a8076be7cb62] jit-backend-addr}
[86a8076be7fe0c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed396cee +0  0D020000
[86a8076be80ba8] jit-backend-dump}
[86a8076be83c89] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed396cfa +0  1D020000
[86a8076be849bd] jit-backend-dump}
[86a8076be879c9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed396d0e +0  25020000
[86a8076be886ee] jit-backend-dump}
[86a8076be8b758] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed396d24 +0  2B020000
[86a8076be8c483] jit-backend-dump}
[86a8076be8f36c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed396d36 +0  35020000
[86a8076be900c1] jit-backend-dump}
[86a8076be9303a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed396d48 +0  3F020000
[86a8076be93d5f] jit-backend-dump}
[86a8076be96c4b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed396d5f +0  44020000
[86a8076be97963] jit-backend-dump}
[86a8076be9a899] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed396d7a +0  45020000
[86a8076be9b59c] jit-backend-dump}
[86a8076be9e478] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed396d91 +0  4A020000
[86a8076be9f1a0] jit-backend-dump}
[86a8076bea20bd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed396da7 +0  50020000
[86a8076bea2dc0] jit-backend-dump}
[86a8076bea5cce] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed396dc2 +0  51020000
[86a8076bea69e3] jit-backend-dump}
[86a8076bea993a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed396dd6 +0  59020000
[86a8076beaa634] jit-backend-dump}
[86a8076bead517] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed396df1 +0  5A020000
[86a8076beae226] jit-backend-dump}
[86a8076beb1159] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed396dfa +0  6D020000
[86a8076beb1e6b] jit-backend-dump}
[86a8076beb503e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed394bec +0  E0200000
[86a8076beb5da3] jit-backend-dump}
[86a8076beb9cae] jit-backend}
[86a8076bebd7cd] {jit-log-opt-bridge
# bridge out of Guard 0x331eb60 with 48 ops
[p0, i1, i2, p3]
+166: guard_not_invalidated(descr=<Guard0x323ff40>) [p0, i1, i2, p3]
+166: i4 = int_add_ovf(i2, i1)
+172: guard_no_overflow(descr=<Guard0x331fcd0>) [p0, i1, i2, p3]
+178: guard_class(p0, 16435920, descr=<Guard0x331fd18>) [p0, i1, i2, p3]
+190: p6 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+201: guard_value(p6, ConstPtr(ptr7), descr=<Guard0x331fd60>) [p0, i1, i2, p3]
+210: p8 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+214: p9 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+218: guard_class(p8, 16500368, descr=<Guard0x331fda8>) [p0, i1, i2, p3]
+232: p11 = getfield_gc_r(p8, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+236: guard_class(p11, 16478072, descr=<Guard0x331fdf0>) [p0, i1, i2, p3]
+250: p13 = getfield_gc_r(p11, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+255: guard_class(p9, 16435920, descr=<Guard0x331fe38>) [p0, i1, i2, p3]
+268: p15 = getfield_gc_r(p9, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+272: guard_nonnull_class(p15, ConstClass(ForwardLink), descr=<Guard0x323ffa0>) [p0, i1, i2, p3]
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (+ AppRand2 AppRand3)')
+291: p17 = getfield_gc_r(p11, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+296: p18 = getfield_gc_r(p17, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+300: guard_nonnull_class(p18, 16478072, descr=<Guard0x3354020>) [p0, i1, i2, p3]
+318: p20 = getfield_gc_r(p8, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+322: guard_nonnull_class(p20, 16471056, descr=<Guard0x3354080>) [p0, i1, i2, p3]
+341: p22 = getfield_gc_r(p20, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+345: guard_nonnull_class(p22, 16471056, descr=<Guard0x33540e0>) [p0, i1, i2, p3]
+363: i24 = getfield_gc_i(p20, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+367: p25 = getfield_gc_r(p8, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+371: guard_nonnull_class(p25, 16616448, descr=<Guard0x3354140>) [p0, i1, i2, p3]
+390: p27 = getfield_gc_r(p8, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+401: guard_nonnull(p27, descr=<Guard0x331fe80>) [p0, i1, i2, p3]
+410: p28 = getfield_gc_r(p18, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+428: guard_value(p28, ConstPtr(ptr29), descr=<Guard0x331fec8>) [p0, i1, i2, p3]
+437: i30 = instance_ptr_eq(p11, p18)
+440: guard_true(i30, descr=<Guard0x331ff10>) [p0, i1, i2, p3]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+446: p31 = new_with_vtable(descr=<SizeDescr 40>)
+487: p32 = new_with_vtable(descr=<SizeDescr 24>)
+498: setfield_gc(p32, i24, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+502: setfield_gc(p32, p25, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+506: p33 = new_with_vtable(descr=<SizeDescr 48>)
+524: setfield_gc(p33, ConstPtr(ptr34), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+528: setfield_gc(p33, p13, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+532: setfield_gc(p33, p9, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+536: setfield_gc(p31, p11, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+540: setfield_gc(p33, p15, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+544: setfield_gc(p31, p22, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+548: setfield_gc(p31, p32, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+552: setfield_gc(p31, p27, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+563: setfield_gc(p33, i4, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+574: jump(p31, p33, descr=TargetToken(53317888))
+608: --end of the loop--
[86a8076beea77c] jit-log-opt-bridge}
[86a8076bff1154] {jit-backend
[86a8076c06cc6f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3971d
[86a8076c076493] jit-backend-dump}
[86a8076c07f7cb] {jit-backend-addr
Loop 12 ((let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand6)) has address 0x7fb5ed39730d to 0x7fb5ed397500 (bootstrap 0x7fb5ed397280)
       gc table: 0x7fb5ed3971d0
       function: 0x7fb5ed397280
         resops: 0x7fb5ed39730d
       failures: 0x7fb5ed397500
            end: 0x7fb5ed397726
[86a8076c082413] jit-backend-addr}
[86a8076c086017] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed397324 +0  EA010000
[86a8076c08715e] jit-backend-dump}
[86a8076c08a411] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39733b +0  EF010000
[86a8076c08b1b0] jit-backend-dump}
[86a8076c08e245] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed397351 +0  F5010000
[86a8076c08efa4] jit-backend-dump}
[86a8076c092385] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39735e +0  04020000
[86a8076c09309e] jit-backend-dump}
[86a8076c0960ac] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39736e +0  10020000
[86a8076c096ddd] jit-backend-dump}
[86a8076c099d93] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39737a +0  20020000
[86a8076c09aaec] jit-backend-dump}
[86a8076c09da3a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39738a +0  2C020000
[86a8076c09e765] jit-backend-dump}
[86a8076c0a169d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3973a9 +0  29020000
[86a8076c0a23b6] jit-backend-dump}
[86a8076c0a52e5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3973c0 +0  2E020000
[86a8076c0a6028] jit-backend-dump}
[86a8076c0a8f3f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3973d8 +0  32020000
[86a8076c0a9c4e] jit-backend-dump}
[86a8076c0acb50] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3973f3 +0  33020000
[86a8076c0ad8a2] jit-backend-dump}
[86a8076c0b078b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39740a +0  38020000
[86a8076c0b148e] jit-backend-dump}
[86a8076c0b437a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39741e +0  40020000
[86a8076c0b50b4] jit-backend-dump}
[86a8076c0b7fc2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed397427 +0  53020000
[86a8076c0b8ccb] jit-backend-dump}
[86a8076c0bbbc0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed397434 +0  62020000
[86a8076c0bc8e5] jit-backend-dump}
[86a8076c0bf80e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed397450 +0  62020000
[86a8076c0c0521] jit-backend-dump}
[86a8076c0c341c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed397467 +0  67020000
[86a8076c0c4141] jit-backend-dump}
[86a8076c0c702a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39747b +0  6F020000
[86a8076c0c7d2d] jit-backend-dump}
[86a8076c0cac25] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed397492 +0  74020000
[86a8076c0cb940] jit-backend-dump}
[86a8076c0cf3a5] jit-backend}
[86a8076c0d30aa] {jit-log-opt-loop
# Loop 12 ((let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand6)) : entry bridge with 45 ops
[p0, p1]
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand6)')
+325: guard_class(p0, 16499664, descr=<Guard0x33541a0>) [p1, p0]
+344: p3 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+348: guard_class(p1, 16437216, descr=<Guard0x331ff58>) [p1, p0]
+367: p5 = getfield_gc_r(p1, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+371: guard_nonnull_class(p5, ConstClass(ForwardLink), descr=<Guard0x3354200>) [p1, p0]
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
+389: p7 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+393: guard_nonnull(p7, descr=<Guard0x331ffa0>) [p1, p0]
+409: i9 = instance_ptr_eq(p7, ConstPtr(ptr8))
+412: guard_true(i9, descr=<Guard0x335a020>) [p1, p0]
debug_merge_point(0, 0, '0')
+418: guard_class(p3, 16500368, descr=<Guard0x335a068>) [p1, p0]
+430: p11 = getfield_gc_r(p3, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+434: guard_class(p11, 16478072, descr=<Guard0x335a0b0>) [p1, p0]
+446: p13 = getfield_gc_r(p11, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand6)')
+450: p14 = getfield_gc_r(p11, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+454: p15 = getfield_gc_r(p14, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+458: guard_nonnull_class(p15, 16478072, descr=<Guard0x3354260>) [p1, p0]
+477: p17 = getfield_gc_r(p3, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+481: guard_nonnull_class(p17, 16471056, descr=<Guard0x33542c0>) [p1, p0]
+500: p19 = getfield_gc_r(p17, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+504: guard_nonnull_class(p19, 16471056, descr=<Guard0x3354320>) [p1, p0]
+524: i21 = getfield_gc_i(p17, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+528: p22 = getfield_gc_r(p3, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+532: guard_nonnull_class(p22, 16471056, descr=<Guard0x3354380>) [p1, p0]
+551: p24 = getfield_gc_r(p3, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+555: guard_nonnull_class(p24, 16471056, descr=<Guard0x33543e0>) [p1, p0]
+574: p26 = getfield_gc_r(p15, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+585: guard_value(p26, ConstPtr(ptr27), descr=<Guard0x335a0f8>) [p1, p0]
+594: i28 = instance_ptr_eq(p11, p15)
+597: guard_true(i28, descr=<Guard0x335a140>) [p1, p0]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+603: p29 = getfield_gc_r(p11, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+607: guard_nonnull(p29, descr=<Guard0x3354440>) [p22, i21, p24, p19, p11, p1, p13, p5]
+616: guard_subclass(p29, ConstClass(W_Cell), descr=<Guard0x33544a0>) [p22, i21, p24, p19, p11, p1, p13, p5]
+644: p31 = getfield_gc_r(p29, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+648: guard_nonnull_class(p31, 16477696, descr=<Guard0x3354500>) [p22, i21, p24, p19, p11, p1, p13, p5]
+667: p33 = getfield_gc_r(p31, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+678: guard_value(p33, ConstPtr(ptr34), descr=<Guard0x3354560>) [p22, i21, p24, p19, p11, p1, p13, p5]
+687: i35 = getfield_gc_i(p24, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+691: i37 = int_le(i35, 9223372036854775806)
+704: guard_true(i37, descr=<Guard0x33545c0>) [p22, i21, p24, p19, p11, p1, p13, p5]
+710: jump(p11, p19, i21, p22, p24, p5, p13, p1, p29, p31, i35, p14, p15, p13, descr=TargetToken(53317968))
+816: --end of the loop--
[86a8076c102cc0] jit-log-opt-loop}
[86a8076c2aee66] {jit-backend
[86a8076c30181f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed
[86a8076c309662] jit-backend-dump}
[86a8076c313c1c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed397944 +0  25000000
[86a8076c314fa5] jit-backend-dump}
[86a8076c318ab8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed397b35 +0  25000000
[86a8076c3198f6] jit-backend-dump}
[86a8076c31ca3c] {jit-backend-addr
bridge out of Guard 0x331f850 has address 0x7fb5ed397940 to 0x7fb5ed397b30
       gc table: 0x7fb5ed397890
    jump target: 0x7fb5ed397940
         resops: 0x7fb5ed39794e
       failures: 0x7fb5ed397b30
            end: 0x7fb5ed397d87
[86a8076c31ebe8] jit-backend-addr}
[86a8076c321f74] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39795e +0  11020000
[86a8076c322d66] jit-backend-dump}
[86a8076c325e0a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed397975 +0  16020000
[86a8076c326adc] jit-backend-dump}
[86a8076c329a7d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed397985 +0  22020000
[86a8076c32a72d] jit-backend-dump}
[86a8076c32d7e4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed397991 +0  32020000
[86a8076c32e491] jit-backend-dump}
[86a8076c331401] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3979a9 +0  36020000
[86a8076c3320a8] jit-backend-dump}
[86a8076c334ff3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3979bb +0  40020000
[86a8076c335cc5] jit-backend-dump}
[86a8076c338c72] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3979d8 +0  3F020000
[86a8076c33994d] jit-backend-dump}
[86a8076c33ca84] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3979f3 +0  40020000
[86a8076c33d732] jit-backend-dump}
[86a8076c340698] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed397a08 +0  47020000
[86a8076c341349] jit-backend-dump}
[86a8076c3442a9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed397a11 +0  5A020000
[86a8076c344f59] jit-backend-dump}
[86a8076c347fbe] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed397a1e +0  85020000
[86a8076c348c77] jit-backend-dump}
[86a8076c34bc24] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed397a2b +0  94020000
[86a8076c34c8d4] jit-backend-dump}
[86a8076c34f83e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed397a38 +0  A3020000
[86a8076c3504dc] jit-backend-dump}
[86a8076c35343c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed397a41 +0  B6020000
[86a8076c3540e0] jit-backend-dump}
[86a8076c357050] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed397a5d +0  B6020000
[86a8076c357cf1] jit-backend-dump}
[86a8076c35ac64] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed397a73 +0  BC020000
[86a8076c35b90b] jit-backend-dump}
[86a8076c35e957] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed397a80 +0  CB020000
[86a8076c35f623] jit-backend-dump}
[86a8076c362622] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed397a89 +0  DE020000
[86a8076c363310] jit-backend-dump}
[86a8076c366594] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39634f +0  ED150000
[86a8076c367205] jit-backend-dump}
[86a8076c36b0a7] jit-backend}
[86a8076c36eb7a] {jit-log-opt-bridge
# bridge out of Guard 0x331f850 with 65 ops
[p0, p1]
+198: guard_class(p1, 16500368, descr=<Guard0x3354620>) [p0, p1]
+210: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+214: guard_nonnull_class(p3, 16471056, descr=<Guard0x3354680>) [p0, p1]
+240: i6 = instance_ptr_eq(p3, ConstPtr(ptr5))
+243: guard_false(i6, descr=<Guard0x335a188>) [p0, p1]
debug_merge_point(0, 0, '(let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))')
+249: guard_class(p0, 16437216, descr=<Guard0x335a1d0>) [p0, p1]
+261: p8 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+265: guard_nonnull_class(p8, ConstClass(ForwardLink), descr=<Guard0x33546e0>) [p0, p1]
debug_merge_point(0, 0, '(CellRef(ok?) (car x) 1 z)')
+285: p10 = getfield_gc_r(p1, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+289: guard_class(p10, 16478072, descr=<Guard0x335a218>) [p0, p1]
+303: p12 = getfield_gc_r(p10, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+308: p13 = getfield_gc_r(p12, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+312: guard_nonnull_class(p13, 16477696, descr=<Guard0x3354740>) [p0, p1]
+332: i15 = getfield_gc_i(p3, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+336: p16 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+340: guard_nonnull_class(p16, 16471056, descr=<Guard0x33547a0>) [p0, p1]
+359: p18 = getfield_gc_r(p13, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+371: guard_value(p18, ConstPtr(ptr19), descr=<Guard0x335a260>) [p0, p1]
+380: p20 = getfield_gc_r(p10, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)')
+380: i22 = instance_ptr_eq(p16, ConstPtr(ptr21))
+383: guard_false(i22, descr=<Guard0x335a2a8>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
debug_merge_point(0, 0, '(+ row dist)')
+389: guard_not_invalidated(descr=<Guard0x335a2f0>) [p0, p1]
+389: i24 = int_add_ovf(i15, 1)
+396: guard_no_overflow(descr=<Guard0x335a338>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+402: i25 = getfield_gc_i(p16, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+406: i26 = int_eq(i25, i24)
+409: guard_false(i26, descr=<Guard0x335a380>) [p0, p1]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '(let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)))')
debug_merge_point(0, 0, '(- row dist)')
+415: i28 = int_sub_ovf(i15, 1)
+422: guard_no_overflow(descr=<Guard0x335a3c8>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand6)')
+428: i29 = int_eq(i25, i28)
+431: guard_false(i29, descr=<Guard0x335a410>) [p0, p1]
debug_merge_point(0, 0, '(if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)')
debug_merge_point(0, 0, '(let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed)))')
debug_merge_point(0, 0, '(+ dist 1)')
debug_merge_point(0, 0, '(CellRef(ok?) row AppRand8 (cdr placed))')
+437: p30 = getfield_gc_r(p13, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize1.inst__vals_0 24 pure>)
+442: p31 = getfield_gc_r(p30, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+446: guard_nonnull_class(p31, 16477696, descr=<Guard0x3354800>) [p0, p1]
+465: p33 = getfield_gc_r(p16, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+469: guard_nonnull_class(p33, 16471056, descr=<Guard0x3354860>) [p0, p1]
+487: p35 = getfield_gc_r(p31, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+491: guard_value(p35, ConstPtr(ptr36), descr=<Guard0x335a458>) [p0, p1]
+500: i37 = instance_ptr_eq(p13, p31)
+503: guard_true(i37, descr=<Guard0x335a4a0>) [p0, p1]
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) row AppRand8 (cdr placed))')
+509: p38 = new_with_vtable(descr=<SizeDescr 16>)
+553: p39 = new_with_vtable(descr=<SizeDescr 40>)
+564: setfield_gc(p39, p8, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+568: setfield_gc(p38, i15, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+572: setfield_gc(p39, p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+576: setfield_gc(p39, p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+587: setfield_gc(p39, ConstPtr(ptr40), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+591: jump(p13, p38, 2, p33, p39, p8, i15, p30, p31, descr=TargetToken(52788208))
+672: --end of the loop--
[86a8076c3a2874] jit-log-opt-bridge}
[86a8076c46d18d] {jit-backend
[86a8076c4a97ff] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed397e
[86a8076c4b0070] jit-backend-dump}
[86a8076c4b9d21] {jit-backend-addr
Loop 14 ((CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand6)) has address 0x7fb5ed397f1d to 0x7fb5ed398040 (bootstrap 0x7fb5ed397e90)
       gc table: 0x7fb5ed397e40
       function: 0x7fb5ed397e90
         resops: 0x7fb5ed397f1d
       failures: 0x7fb5ed398040
            end: 0x7fb5ed39816b
[86a8076c4bc5e9] jit-backend-addr}
[86a8076c4c0215] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed397f34 +0  37010000
[86a8076c4c13b8] jit-backend-dump}
[86a8076c4c4713] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed397f44 +0  43010000
[86a8076c4c54f5] jit-backend-dump}
[86a8076c4c8578] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed397f5e +0  45010000
[86a8076c4c92c2] jit-backend-dump}
[86a8076c4cc382] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed397f74 +0  4B010000
[86a8076c4cd0c2] jit-backend-dump}
[86a8076c4d00be] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed397f8a +0  51010000
[86a8076c4d0dc7] jit-backend-dump}
[86a8076c4d3d96] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed397fa4 +0  53010000
[86a8076c4d4a89] jit-backend-dump}
[86a8076c4d7a5e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed397fb1 +0  62010000
[86a8076c4d875e] jit-backend-dump}
[86a8076c4db75d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed397fc5 +0  6A010000
[86a8076c4dc463] jit-backend-dump}
[86a8076c4df3b1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed397fce +0  7D010000
[86a8076c4e00b7] jit-backend-dump}
[86a8076c4e3b71] jit-backend}
[86a8076c4e76b8] {jit-log-opt-loop
# Loop 14 ((CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand6)) : entry bridge with 30 ops
[p0, p1]
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand6)')
+229: guard_class(p0, 16500368, descr=<Guard0x33548c0>) [p1, p0]
+248: p3 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+252: guard_class(p3, 16478072, descr=<Guard0x335a4e8>) [p1, p0]
+264: p5 = getfield_gc_r(p3, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+268: p6 = getfield_gc_r(p5, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+272: guard_nonnull_class(p6, 16478072, descr=<Guard0x3354920>) [p1, p0]
+290: p8 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+294: guard_nonnull_class(p8, 16471056, descr=<Guard0x3354980>) [p1, p0]
+312: p10 = getfield_gc_r(p8, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+316: guard_nonnull_class(p10, 16616448, descr=<Guard0x33549e0>) [p1, p0]
+334: i12 = getfield_gc_i(p8, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+338: p13 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+342: guard_nonnull_class(p13, 16616448, descr=<Guard0x3354a40>) [p1, p0]
+360: p15 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+364: guard_nonnull(p15, descr=<Guard0x335a530>) [p1, p0]
+373: p16 = getfield_gc_r(p6, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+384: guard_value(p16, ConstPtr(ptr17), descr=<Guard0x335a578>) [p1, p0]
+393: i18 = instance_ptr_eq(p3, p6)
+396: guard_true(i18, descr=<Guard0x335a5c0>) [p1, p0]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+402: p19 = new_with_vtable(descr=<SizeDescr 40>)
+446: p20 = new_with_vtable(descr=<SizeDescr 24>)
+457: setfield_gc(p20, i12, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+461: setfield_gc(p20, p13, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+465: setfield_gc(p19, p3, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+469: setfield_gc(p19, p10, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+473: setfield_gc(p19, p20, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+477: setfield_gc(p19, p15, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+481: jump(p19, p1, descr=TargetToken(53317888))
+512: --end of the loop--
[86a8076c501d63] jit-log-opt-loop}
[86a8076c69dfcb] {jit-backend
[86a8076c6fc222] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3982c
[86a8076c7084a1] jit-backend-dump}
[86a8076c7127ae] {jit-backend-addr
Loop 15 ((if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) AppRand1 '() (cons (car x) z))) has address 0x7fb5ed3983fd to 0x7fb5ed3985f0 (bootstrap 0x7fb5ed398370)
       gc table: 0x7fb5ed3982c0
       function: 0x7fb5ed398370
         resops: 0x7fb5ed3983fd
       failures: 0x7fb5ed3985f0
            end: 0x7fb5ed398817
[86a8076c71545e] jit-backend-addr}
[86a8076c719618] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed398414 +0  07020000
[86a8076c71a9ab] jit-backend-dump}
[86a8076c71dcb3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39842a +0  0D020000
[86a8076c71eafa] jit-backend-dump}
[86a8076c721c0d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39843a +0  19020000
[86a8076c722947] jit-backend-dump}
[86a8076c725ae6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39844d +0  22020000
[86a8076c72681a] jit-backend-dump}
[86a8076c7298d1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed398463 +0  28020000
[86a8076c72a5d7] jit-backend-dump}
[86a8076c72d5fe] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed398473 +0  34020000
[86a8076c72e2f8] jit-backend-dump}
[86a8076c731366] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39848e +0  35020000
[86a8076c73205c] jit-backend-dump}
[86a8076c734fee] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3984a9 +0  36020000
[86a8076c735d0c] jit-backend-dump}
[86a8076c738ccb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3984bd +0  3E020000
[86a8076c7399f0] jit-backend-dump}
[86a8076c73c9e3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3984ca +0  4D020000
[86a8076c73d705] jit-backend-dump}
[86a8076c7409e8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3984d7 +0  78020000
[86a8076c7416ca] jit-backend-dump}
[86a8076c74479c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3984e4 +0  87020000
[86a8076c745516] jit-backend-dump}
[86a8076c7485be] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed398500 +0  87020000
[86a8076c7492d3] jit-backend-dump}
[86a8076c74c2df] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed398517 +0  8C020000
[86a8076c74cfe2] jit-backend-dump}
[86a8076c74ff2d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39852d +0  92020000
[86a8076c750cb9] jit-backend-dump}
[86a8076c753bf8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed398542 +0  99020000
[86a8076c7548ef] jit-backend-dump}
[86a8076c75780c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39854b +0  AC020000
[86a8076c758512] jit-backend-dump}
[86a8076c75bea3] jit-backend}
[86a8076c75f96a] {jit-log-opt-loop
# Loop 15 ((if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) AppRand1 '() (cons (car x) z))) : entry bridge with 68 ops
[p0, p1]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) AppRand1 '() (cons (car x) z))')
+325: guard_class(p0, 16500368, descr=<Guard0x3354aa0>) [p1, p0]
+344: p3 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+348: guard_nonnull_class(p3, 16471056, descr=<Guard0x3354b00>) [p1, p0]
+373: i6 = instance_ptr_eq(p3, ConstPtr(ptr5))
+376: guard_false(i6, descr=<Guard0x335a608>) [p1, p0]
debug_merge_point(0, 0, '(let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))')
+382: guard_class(p1, 16435920, descr=<Guard0x335a650>) [p1, p0]
+401: p8 = getfield_gc_r(p1, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+405: guard_nonnull_class(p8, ConstClass(ForwardLink), descr=<Guard0x3354b60>) [p1, p0]
debug_merge_point(0, 0, '(CellRef(ok?) (car x) 1 z)')
+423: p10 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+427: guard_class(p10, 16478072, descr=<Guard0x335a698>) [p1, p0]
+439: p12 = getfield_gc_r(p10, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+443: p13 = getfield_gc_r(p12, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+447: guard_nonnull_class(p13, 16477696, descr=<Guard0x3354bc0>) [p1, p0]
+466: i15 = getfield_gc_i(p3, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+470: p16 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+474: guard_nonnull_class(p16, 16471056, descr=<Guard0x3354c20>) [p1, p0]
+493: p18 = getfield_gc_r(p13, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+504: guard_value(p18, ConstPtr(ptr19), descr=<Guard0x335a6e0>) [p1, p0]
+513: p20 = getfield_gc_r(p10, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)')
+517: i22 = instance_ptr_eq(p16, ConstPtr(ptr21))
+520: guard_false(i22, descr=<Guard0x335a728>) [p1, p0]
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
debug_merge_point(0, 0, '(+ row dist)')
+526: guard_not_invalidated(descr=<Guard0x335a770>) [p1, p0]
+526: i24 = int_add_ovf(i15, 1)
+533: guard_no_overflow(descr=<Guard0x335a7b8>) [p1, p0]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+539: i25 = getfield_gc_i(p16, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+543: i26 = int_eq(i25, i24)
+546: guard_true(i26, descr=<Guard0x335a800>) [p1, p0]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '#f')
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand4)')
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand4)')
+552: p27 = getfield_gc_r(p10, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+556: p28 = getfield_gc_r(p27, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+560: guard_nonnull_class(p28, 16478072, descr=<Guard0x3354c80>) [p1, p0]
+580: p30 = getfield_gc_r(p3, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+584: guard_nonnull_class(p30, 16471056, descr=<Guard0x3354ce0>) [p1, p0]
+603: p32 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+607: guard_nonnull_class(p32, 16616448, descr=<Guard0x3354d40>) [p1, p0]
+625: p34 = getfield_gc_r(p28, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+637: guard_value(p34, ConstPtr(ptr35), descr=<Guard0x335a848>) [p1, p0]
+646: i36 = instance_ptr_eq(p10, p28)
+649: guard_true(i36, descr=<Guard0x335a890>) [p1, p0]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+655: p37 = new_with_vtable(descr=<SizeDescr 40>)
+699: p38 = new_with_vtable(descr=<SizeDescr 24>)
+710: setfield_gc(p38, i15, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+714: setfield_gc(p38, p32, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+718: p39 = new_with_vtable(descr=<SizeDescr 48>)
+729: setfield_gc(p37, p30, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+733: setfield_gc(p39, p8, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+737: setfield_gc(p37, p10, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+741: setfield_gc(p37, p16, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+745: setfield_gc(p37, p38, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+749: setfield_gc(p39, p20, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+753: setfield_gc(p39, p1, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+764: setfield_gc(p39, ConstPtr(ptr40), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+768: setfield_gc(p39, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+776: jump(p37, p39, descr=TargetToken(53317888))
+816: --end of the loop--
[86a8076c796397] jit-log-opt-loop}
[86a8076c9715e7] {jit-backend
[86a8076c9d7e57] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed398990 +0  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8C3202000048FF042590A734024C8BBD400100004D8B77084D01CE0F80000000004C8BA5380100004D8B5424084983FA01720741813A900F00000F85000000004D8B55084D39F20F85000000004D8B7424204C8B15FEFEFFFF4D39D60F85000000004D8B5424104D8B74241841813E201600000F85000000004D8B46084983F8017207418138900F00000F850000000041813AD00C01000F8500000000498B7A08813FB8B500000F8500000000488B7708488B5F20488B53084883FA017206813AB8B500000F8500000000498B42104883F80172068138509A00000F8500000000488B48104883F90172068139509A00000F85000000004C89B5500100004C8B7008498B42184883F80172068138509A00000F85000000004C8985580100004D8B42204983F8017207418138509A00000F85000000004C8B52104889BD60010000488B3D67FEFFFF4939FA0F8500000000483995600100000F85000000004C8BA5600100004D8B7C24184D85FF0F8400000000458B2F4E8B2C2DC0B9FA004981ED2C0300004983FD010F83000000004D8B6F084983FD01720841817D0040B400000F85000000004D8B4D10488B3D2DFEFFFF4939F90F8500000000498B780849BBFEFFFFFFFFFFFF7F4C39DF0F8F000000004C89A5480100004D89F24C8985300100004C8B9D580100004C899D400100004989F64C89AD580100004989FD48899D60010000488995680100004889B5700100004889CE488B9D500100004C89BD5001000049BB006439EDB57F000041FFE3660F1F44000048C7442408FFFFFF0049BB288839EDB57F00004C895D204D8D9BC89AFFFF41FFD3E9A8FDFFFFFF35D4FCFFFF49BB388839EDB57F000041534D8D9BC897FFFF41FFE3FF35C0FCFFFF49BB488839EDB57F000041534D8D9BB897FFFF41FFE3FF35ACFCFFFF49BB588839EDB57F000041534D8D9BA897FFFF41FFE3FF3598FCFFFF49BB688839EDB57F000041534D8D9B9897FFFF41FFE3FF358CFCFFFF49BB788839EDB57F000041534D8D9B8897FFFF41FFE3FF3578FCFFFF49BB888839EDB57F000041534D8D9B7897FFFF41FFE3FF3564FCFFFF49BB988839EDB57F000041534D8D9B6897FFFF41FFE3FF3550FCFFFF49BBA88839EDB57F000041534D8D9B5897FFFF41FFE3FF353CFCFFFF49BBB88839EDB57F000041534D8D9B4897FFFF41FFE3FF3528FCFFFF49BBC88839EDB57F000041534D8D9B3897FFFF41FFE3FF3514FCFFFF49BBD88839EDB57F000041534D8D9B2897FFFF41FFE3FF3500FCFFFF49BBE88839EDB57F000041534D8D9B1897FFFF41FFE3FF35ECFBFFFF49BBF88839EDB57F000041534D8D9B0897FFFF41FFE3FF35D8FBFFFF49BB088939EDB57F000041534D8D9BF896FFFF41FFE3FF35CCFBFFFF49BB188939EDB57F000041534D8D9BE896FFFF41FFE3FF35B8FBFFFF49BB288939EDB57F000041534D8D9BD896FFFF41FFE3FF35A4FBFFFF49BB388939EDB57F000041534D8D9BC896FFFF41FFE3FF3590FBFFFF49BB488939EDB57F000041534D8D9BB896FFFF41FFE3FF357CFBFFFF49BB588939EDB57F000041534D8D9BA896FFFF41FFE3FF3570FBFFFF49BB688939EDB57F000041534D8D9B9896FFFF41FFE3FF355CFBFFFF49BB788939EDB57F000041534D8D9B8896FFFF41FFE3
[86a8076c9e1304] jit-backend-dump}
[86a8076c9ec4b7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed398a54 +0  25000000
[86a8076c9ed7cc] jit-backend-dump}
[86a8076c9f12a4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed398c95 +0  25000000
[86a8076c9f2138] jit-backend-dump}
[86a8076c9f52e1] {jit-backend-addr
bridge out of Guard 0x32cc2f0 has address 0x7fb5ed398a50 to 0x7fb5ed398c90
       gc table: 0x7fb5ed398990
    jump target: 0x7fb5ed398a50
         resops: 0x7fb5ed398a5e
       failures: 0x7fb5ed398c90
            end: 0x7fb5ed398f02
[86a8076c9f74d0] jit-backend-addr}
[86a8076c9faa7f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed398a76 +0  58020000
[86a8076c9fb7ed] jit-backend-dump}
[86a8076c9fe962] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed398a95 +0  55020000
[86a8076c9ff674] jit-backend-dump}
[86a8076ca02728] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed398aa2 +0  64020000
[86a8076ca0346b] jit-backend-dump}
[86a8076ca06492] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed398ab7 +0  6B020000
[86a8076ca071d8] jit-backend-dump}
[86a8076ca0a2e5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed398ace +0  70020000
[86a8076ca0b01f] jit-backend-dump}
[86a8076ca0df82] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed398ae5 +0  75020000
[86a8076ca0ecfa] jit-backend-dump}
[86a8076ca11c07] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed398af2 +0  84020000
[86a8076ca12910] jit-backend-dump}
[86a8076ca158a5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed398b02 +0  90020000
[86a8076ca165d6] jit-backend-dump}
[86a8076ca19542] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed398b20 +0  8E020000
[86a8076ca1a23c] jit-backend-dump}
[86a8076ca1d184] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed398b36 +0  94020000
[86a8076ca1dec7] jit-backend-dump}
[86a8076ca20f5c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed398b4c +0  9A020000
[86a8076ca21c2e] jit-backend-dump}
[86a8076ca24c96] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed398b6d +0  95020000
[86a8076ca259b7] jit-backend-dump}
[86a8076ca28924] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed398b8b +0  93020000
[86a8076ca2962d] jit-backend-dump}
[86a8076ca2c522] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed398ba6 +0  94020000
[86a8076ca2d24d] jit-backend-dump}
[86a8076ca301d5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed398bb3 +0  A3020000
[86a8076ca30ecf] jit-backend-dump}
[86a8076ca33e4e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed398bc8 +0  AA020000
[86a8076ca34b44] jit-backend-dump}
[86a8076ca37b87] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed398be4 +0  AA020000
[86a8076ca388b5] jit-backend-dump}
[86a8076ca3b899] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed398bfc +0  AE020000
[86a8076ca3c604] jit-backend-dump}
[86a8076ca3f707] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed398c10 +0  B6020000
[86a8076ca40410] jit-backend-dump}
[86a8076ca4334c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed398c27 +0  BB020000
[86a8076ca4405b] jit-backend-dump}
[86a8076ca471f7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed393cbd +0  8F4D0000
[86a8076ca47ea5] jit-backend-dump}
[86a8076ca4bc1e] jit-backend}
[86a8076ca4f545] {jit-log-opt-bridge
# bridge out of Guard 0x32cc2f0 with 56 ops
[i0, p1, p2, p3, p4, p5]
+214: guard_not_invalidated(descr=<Guard0x3354da0>) [i0, p1, p2, p3, p4, p5]
+214: i6 = getfield_gc_i(p2, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+225: i7 = int_add_ovf(i6, i0)
+228: guard_no_overflow(descr=<Guard0x335a8d8>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
+234: p8 = getfield_gc_r(p4, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+246: guard_nonnull_class(p8, ConstClass(ForwardLink), descr=<Guard0x3354e00>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+265: i10 = getfield_gc_i(p1, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+269: i11 = int_eq(i10, i7)
+272: guard_true(i11, descr=<Guard0x335a920>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '#f')
+278: p12 = getfield_gc_r(p4, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+290: guard_value(p12, ConstPtr(ptr13), descr=<Guard0x335a968>) [i0, p1, p2, p3, p4, p5]
+299: p14 = getfield_gc_r(p4, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+304: p15 = getfield_gc_r(p4, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand4)')
+309: guard_class(p15, 16437216, descr=<Guard0x335a9b0>) [i0, p1, p2, p3, p4, p5]
+322: p17 = getfield_gc_r(p15, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+326: guard_nonnull_class(p17, ConstClass(ForwardLink), descr=<Guard0x3354e60>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
+345: guard_class(p14, 16500368, descr=<Guard0x335a9f8>) [i0, p1, p2, p3, p4, p5]
+358: p20 = getfield_gc_r(p14, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+362: guard_class(p20, 16478072, descr=<Guard0x335aa40>) [i0, p1, p2, p3, p4, p5]
+374: p22 = getfield_gc_r(p20, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand4)')
+378: p23 = getfield_gc_r(p20, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+382: p24 = getfield_gc_r(p23, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+386: guard_nonnull_class(p24, 16478072, descr=<Guard0x3354ec0>) [i0, p1, p2, p3, p4, p5]
+404: p26 = getfield_gc_r(p14, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+408: guard_nonnull_class(p26, 16471056, descr=<Guard0x3354f20>) [i0, p1, p2, p3, p4, p5]
+426: p28 = getfield_gc_r(p26, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+430: guard_nonnull_class(p28, 16471056, descr=<Guard0x3354f80>) [i0, p1, p2, p3, p4, p5]
+448: i30 = getfield_gc_i(p26, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+459: p31 = getfield_gc_r(p14, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+463: guard_nonnull_class(p31, 16471056, descr=<Guard0x3354fe0>) [i0, p1, p2, p3, p4, p5]
+481: p33 = getfield_gc_r(p14, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+492: guard_nonnull_class(p33, 16471056, descr=<Guard0x3355040>) [i0, p1, p2, p3, p4, p5]
+511: p35 = getfield_gc_r(p24, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+529: guard_value(p35, ConstPtr(ptr36), descr=<Guard0x335aa88>) [i0, p1, p2, p3, p4, p5]
+538: i37 = instance_ptr_eq(p20, p24)
+545: guard_true(i37, descr=<Guard0x335aad0>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+551: p38 = getfield_gc_r(p20, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+563: guard_nonnull(p38, descr=<Guard0x33550a0>) [p31, i30, p33, p28, p20, p15, p22, p17, None, None, None, None, None, None]
+572: guard_subclass(p38, ConstClass(W_Cell), descr=<Guard0x3355100>) [p31, i30, p33, p28, p20, p15, p22, p17, None, None, None, None, None, None]
+600: p41 = getfield_gc_r(p38, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+604: guard_nonnull_class(p41, 16477696, descr=<Guard0x3355160>) [p31, i30, p33, p28, p20, p15, p22, p17, None, None, None, None, None, None]
+624: p43 = getfield_gc_r(p41, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+635: guard_value(p43, ConstPtr(ptr44), descr=<Guard0x33551c0>) [p31, i30, p33, p28, p20, p15, p22, p17, None, None, None, None, None, None]
+644: i45 = getfield_gc_i(p33, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+648: i47 = int_le(i45, 9223372036854775806)
+661: guard_true(i47, descr=<Guard0x3355220>) [p31, i30, p33, p28, p20, p15, p22, p17, None, None, None, None, None, None]
+667: jump(p20, p28, i30, p31, p33, p17, p22, p15, p38, p41, i45, p23, p24, p22, descr=TargetToken(53317968))
+768: --end of the loop--
[86a8076ca8f31b] jit-log-opt-bridge}
[86a8076cb93af2] {jit-backend
[86a8076cbe1967] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed
[86a8076cbe95cd] jit-backend-dump}
[86a8076cbf3730] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3990a4 +0  25000000
[86a8076cbf4a48] jit-backend-dump}
[86a8076cbfb894] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed399255 +0  25000000
[86a8076cbfc95b] jit-backend-dump}
[86a8076cc002a9] {jit-backend-addr
bridge out of Guard 0x3354320 has address 0x7fb5ed3990a0 to 0x7fb5ed399250
       gc table: 0x7fb5ed399010
    jump target: 0x7fb5ed3990a0
         resops: 0x7fb5ed3990ae
       failures: 0x7fb5ed399250
            end: 0x7fb5ed39941b
[86a8076cc023ea] jit-backend-addr}
[86a8076cc0582a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3990be +0  D1010000
[86a8076cc06622] jit-backend-dump}
[86a8076cc098ac] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3990ce +0  DD010000
[86a8076cc0a621] jit-backend-dump}
[86a8076cc0d730] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3990e5 +0  E2010000
[86a8076cc0e470] jit-backend-dump}
[86a8076cc114db] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3990f2 +0  F1010000
[86a8076cc12240] jit-backend-dump}
[86a8076cc15444] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed399102 +0  FD010000
[86a8076cc161a3] jit-backend-dump}
[86a8076cc191fb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39910f +0  0C020000
[86a8076cc19f26] jit-backend-dump}
[86a8076cc1cff2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed399121 +0  16020000
[86a8076cc1dd1d] jit-backend-dump}
[86a8076cc20e1d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed399142 +0  11020000
[86a8076cc21b42] jit-backend-dump}
[86a8076cc24c0e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed399159 +0  16020000
[86a8076cc2590e] jit-backend-dump}
[86a8076cc28972] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed399170 +0  1B020000
[86a8076cc296ac] jit-backend-dump}
[86a8076cc2c778] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39918b +0  1C020000
[86a8076cc2d502] jit-backend-dump}
[86a8076cc306cf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed399198 +0  2B020000
[86a8076cc31425] jit-backend-dump}
[86a8076cc34519] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3991ac +0  33020000
[86a8076cc3527b] jit-backend-dump}
[86a8076cc383f2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3991b5 +0  46020000
[86a8076cc3910e] jit-backend-dump}
[86a8076cc3c352] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3973d8 +0  C41C0000
[86a8076cc3d040] jit-backend-dump}
[86a8076cc40f69] jit-backend}
[86a8076cc448c6] {jit-log-opt-bridge
# bridge out of Guard 0x3354320 with 48 ops
[p0, p1]
+166: guard_class(p1, 16499664, descr=<Guard0x3355280>) [p0, p1]
+178: p3 = getfield_gc_r(p1, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+182: guard_class(p0, 16437216, descr=<Guard0x335ab18>) [p0, p1]
+194: p5 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+198: guard_nonnull_class(p5, ConstClass(ForwardLink), descr=<Guard0x33552e0>) [p0, p1]
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
+217: p7 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+221: guard_nonnull(p7, descr=<Guard0x335ab60>) [p0, p1]
+237: i9 = instance_ptr_eq(p7, ConstPtr(ptr8))
+240: guard_true(i9, descr=<Guard0x335aba8>) [p0, p1]
debug_merge_point(0, 0, '0')
+246: guard_class(p3, 16500368, descr=<Guard0x335abf0>) [p0, p1]
+259: p11 = getfield_gc_r(p3, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+263: guard_class(p11, 16478072, descr=<Guard0x335ac38>) [p0, p1]
+277: p13 = getfield_gc_r(p11, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand6)')
+282: p14 = getfield_gc_r(p11, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+287: p15 = getfield_gc_r(p14, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+291: guard_nonnull_class(p15, 16478072, descr=<Guard0x3355340>) [p0, p1]
+310: p17 = getfield_gc_r(p3, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+314: guard_nonnull_class(p17, 16471056, descr=<Guard0x33553a0>) [p0, p1]
+333: p19 = getfield_gc_r(p17, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+337: guard_nonnull_class(p19, 16616448, descr=<Guard0x3355400>) [p0, p1]
+356: i21 = getfield_gc_i(p17, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+360: p22 = getfield_gc_r(p3, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+364: guard_nonnull_class(p22, 16471056, descr=<Guard0x3355460>) [p0, p1]
+383: p24 = getfield_gc_r(p3, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+387: guard_nonnull(p24, descr=<Guard0x335ac80>) [p0, p1]
+396: p25 = getfield_gc_r(p15, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+407: guard_value(p25, ConstPtr(ptr26), descr=<Guard0x335acc8>) [p0, p1]
+416: i27 = instance_ptr_eq(p11, p15)
+419: guard_true(i27, descr=<Guard0x335ad10>) [p0, p1]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+425: p28 = new_with_vtable(descr=<SizeDescr 40>)
+469: p29 = new_with_vtable(descr=<SizeDescr 24>)
+480: setfield_gc(p29, i21, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+484: setfield_gc(p29, p22, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+488: p30 = new_with_vtable(descr=<SizeDescr 48>)
+499: setfield_gc(p28, p11, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+503: setfield_gc(p30, p5, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+507: setfield_gc(p28, p19, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+511: setfield_gc(p28, p29, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+515: setfield_gc(p28, p24, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+519: setfield_gc(p30, p13, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+523: setfield_gc(p30, p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+534: setfield_gc(p30, ConstPtr(ptr31), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+538: setfield_gc(p30, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+546: jump(p28, p30, descr=TargetToken(53317888))
+576: --end of the loop--
[86a8076cc6f6ee] jit-log-opt-bridge}
[86a8076cef0165] {jit-backend
[86a8076cf6a2fe] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3995c0 +0  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004881ECB800000048896C24604889B424B0000000488D8424980000004C8B56384C89104889600848C7401003000000488946384889FD48895C24684C896424704C896C24784C89B424800000004C89BC2488000000488B1C258893F90048C7030100000048896B084883C31048891C258893F900488B0425704A5E014829E0483B0425784A5E010F87E302000048FF042590A83402488B8D300100008139100A01000F8500000000488B4108488B9538010000813A201600000F8500000000488B5A084883FB017206813B900F00000F8500000000488B71104885F60F8400000000488B3D57FEFFFF4839FE0F84000000008138D00C01000F8500000000488B78104883FF017206813F509A00000F8500000000488B77104883FE017206813E40D202000F85000000004C8B40184D85C00F84000000004889853001000048899D400100004889BD480100004889B5500100004C8985580100004889F74C89C649BBE09439EDB57F00004C895D2041BB5062630041FFD3488B0C258893F900488B69F8F64504010F85F501000048C745200000000048833C2540B35F01000F85000000004883F80172068138509A00000F8500000000488B9530010000488B5A08813BB8B500000F8500000000488B7B20488B77084883FE017206813EB8B500000F8500000000488BBD480100004C8B4708488B7A204883FF017206813F509A00000F8500000000488B4E104C8B0D8DFDFFFF4C39C90F85000000004839F30F8500000000488B73184C8B4E084983F901720741813940B400000F8500000000488B7008498B49104C8B0D71FDFFFF4C39C90F85000000004C8B4B084889F14883C6010F80000000004939F00F8500000000488B70104883FE017206813E509A00000F85000000004989CC4989D5488B0C25F091F900488D91B0000000483B14251092F9000F87E900000048891425F091F90048C701D00C0100488D512848C702509A00004C8962084C8B2518FDFFFF4C8962104C8D621849C70424509A00004D8944240849897C2410498D7C241848C707201600004C8D473049C70010110000488B8540010000498940084D8968104C8BAD380100004D8968184C8B2DCEFCFFFF4D896820488959084889470848897110488951184C8961204C894F104C8947184C8B05AFFCFFFF4C89472048C747280000000048898D300100004889BD3801000049BB506239EDB57F000041FFE349BB503739EDB57F000041FFD3E90BFDFFFF49BB702239EDB57F000041FFD3E9F9FDFFFF49BBB09539EDB57F00004C895D204D8D9B4095FFFF41FFD3E902FFFFFFFF3569FBFFFF49BB409439EDB57F000041534D8D9BC08BFFFF41FFE3FF3555FBFFFF49BB509439EDB57F000041534D8D9BB08BFFFF41FFE3FF3541FBFFFF49BB609439EDB57F000041534D8D9BA08BFFFF41FFE3FF352DFBFFFF49BB709439EDB57F000041534D8D9B908BFFFF41FFE3FF3521FBFFFF49BB809439EDB57F000041534D8D9B808BFFFF41FFE3FF350DFBFFFF49BB909439EDB57F000041534D8D9B708BFFFF41FFE3FF35F9FAFFFF49BBA09439EDB57F000041534D8D9B608BFFFF41FFE3FF35E5FAFFFF49BBB09439EDB57F000041534D8D9B508BFFFF41FFE3FF35D1FAFFFF49BBC09439EDB57F000041534D8D9B408BFFFF41FFE3FF35BDFAFFFF49BBD09439EDB57F000041534D8D9B308BFFFF41FFE3FF35A9FAFFFF49BBF09439EDB57F000041534D8D9BC08BFFFF41FFE3FF3595FAFFFF49BB009539EDB57F000041534D8D9B008BFFFF41FFE3FF3581FAFFFF49BB109539EDB57F000041534D8D9BF08AFFFF41FFE3FF356DFAFFFF49BB209539EDB57F000041534D8D9BE08AFFFF41FFE3FF3559FAFFFF49BB309539EDB57F000041534D8D9BD08AFFFF41FFE3FF354DFAFFFF49BB409539EDB57F000041534D8D9BC08AFFFF41FFE3FF3539FAFFFF49BB509539EDB57F000041534D8D9BB08AFFFF41FFE3FF3525FAFFFF49BB609539EDB57F000041534D8D9BA08AFFFF41FFE3FF3519FAFFFF49BB709539EDB57F000041534D8D9B908AFFFF41FFE3FF3505FAFFFF49BB809539EDB57F000041534D8D9B808AFFFF41FFE3FF35F1F9FFFF49BB909539EDB57F000041534D8D9B708AFFFF41FFE3FF35DDF9FFFF49BBA09539EDB57F000041534D8D9B608AFFFF41FFE3
[86a8076cf73b87] jit-backend-dump}
[86a8076cf7e83e] {jit-backend-addr
Loop 18 ((let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (CellRef(ok?) row AppRand8 (cdr placed))) has address 0x7fb5ed39972d to 0x7fb5ed399a10 (bootstrap 0x7fb5ed3996a0)
       gc table: 0x7fb5ed3995c0
       function: 0x7fb5ed3996a0
         resops: 0x7fb5ed39972d
       failures: 0x7fb5ed399a10
            end: 0x7fb5ed399cb9
[86a8076cf8151c] jit-backend-addr}
[86a8076cf85494] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed399744 +0  09030000
[86a8076cf8671a] jit-backend-dump}
[86a8076cf89b20] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39975b +0  0E030000
[86a8076cf8a92d] jit-backend-dump}
[86a8076cf8d976] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed399771 +0  14030000
[86a8076cf8e6a0] jit-backend-dump}
[86a8076cf91742] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39977e +0  23030000
[86a8076cf92460] jit-backend-dump}
[86a8076cf95491] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39978e +0  2F030000
[86a8076cf9611c] jit-backend-dump}
[86a8076cf9984a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39979a +0  5B030000
[86a8076cf9a501] jit-backend-dump}
[86a8076cf9d675] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3997b0 +0  61030000
[86a8076cf9e378] jit-backend-dump}
[86a8076cfa12f7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3997c6 +0  67030000
[86a8076cfa1f95] jit-backend-dump}
[86a8076cfa4ef2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3997d3 +0  76030000
[86a8076cfa5bb8] jit-backend-dump}
[86a8076cfa8bdc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed399840 +0  25030000
[86a8076cfa98d0] jit-backend-dump}
[86a8076cfac85b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed399852 +0  2F030000
[86a8076cfad524] jit-backend-dump}
[86a8076cfb0576] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed399869 +0  34030000
[86a8076cfb120b] jit-backend-dump}
[86a8076cfb4213] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed399883 +0  36030000
[86a8076cfb4f16] jit-backend-dump}
[86a8076cfb7e5e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3998a4 +0  31030000
[86a8076cfb8b1b] jit-backend-dump}
[86a8076cfbbaa3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3998b8 +0  39030000
[86a8076cfbc7a9] jit-backend-dump}
[86a8076cfbf6fa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3998c1 +0  4C030000
[86a8076cfc03aa] jit-backend-dump}
[86a8076cfc32af] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3998dc +0  4D030000
[86a8076cfc3f8d] jit-backend-dump}
[86a8076cfc6ecc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3998f4 +0  51030000
[86a8076cfc7b88] jit-backend-dump}
[86a8076cfcaa87] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed399905 +0  5C030000
[86a8076cfcb77e] jit-backend-dump}
[86a8076cfce706] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39990e +0  6F030000
[86a8076cfcf3d5] jit-backend-dump}
[86a8076cfd22d6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed399924 +0  75030000
[86a8076cfd2fca] jit-backend-dump}
[86a8076cfd698f] jit-backend}
[86a8076cfda563] {jit-log-opt-loop
# Loop 18 ((let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (CellRef(ok?) row AppRand8 (cdr placed))) : entry bridge with 88 ops
[p0, p1]
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (CellRef(ok?) row AppRand8 (cdr placed))')
+373: guard_class(p0, 16499664, descr=<Guard0x33554c0>) [p1, p0]
+392: p3 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+396: guard_class(p1, 16437216, descr=<Guard0x335ad58>) [p1, p0]
+415: p5 = getfield_gc_r(p1, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+419: guard_nonnull_class(p5, ConstClass(ForwardLink), descr=<Guard0x3355520>) [p1, p0]
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
+437: p7 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+441: guard_nonnull(p7, descr=<Guard0x335ada0>) [p1, p0]
+457: i9 = instance_ptr_eq(p7, ConstPtr(ptr8))
+460: guard_false(i9, descr=<Guard0x335ade8>) [p1, p0]
debug_merge_point(0, 0, '(let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z)))')
debug_merge_point(0, 0, '(append (cdr x) y)')
+466: guard_not_invalidated(descr=<Guard0x335ae30>) [p1, p0]
+466: guard_class(p3, 16500368, descr=<Guard0x335ae78>) [p1, p0]
+478: p11 = getfield_gc_r(p3, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+482: guard_nonnull_class(p11, 16471056, descr=<Guard0x3355580>) [p1, p0]
+500: p13 = getfield_gc_r(p11, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+504: guard_nonnull_class(p13, 16616448, descr=<Guard0x33555e0>) [p1, p0]
+522: p15 = getfield_gc_r(p3, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+526: guard_nonnull(p15, descr=<Guard0x335aec0>) [p1, p0]
+535: p17 = call_r(ConstClass(append_two), p13, p15, descr=<Callr 8 rr EF=5>)
+629: guard_no_exception(descr=<Guard0x3355640>) [p3, p17, p15, p13, p1, p5]
+644: guard_nonnull_class(p17, 16471056, descr=<Guard0x33556a0>) [p3, p17, p15, p13, p1, p5]
debug_merge_point(0, 0, '(CellRef(my-try) AppRand1 '() (cons (car x) z))')
+662: p19 = getfield_gc_r(p3, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+673: guard_class(p19, 16478072, descr=<Guard0x335af08>) [p3, p17, p15, p13, p1, p5]
+685: p21 = getfield_gc_r(p19, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+689: p22 = getfield_gc_r(p21, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+693: guard_nonnull_class(p22, 16478072, descr=<Guard0x3355700>) [p3, p17, p15, p13, p1, p5]
+711: i24 = getfield_gc_i(p11, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+722: p25 = getfield_gc_r(p3, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+726: guard_nonnull_class(p25, 16471056, descr=<Guard0x3355760>) [p3, p17, p15, p13, p1, p5]
+744: p27 = getfield_gc_r(p22, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+755: guard_value(p27, ConstPtr(ptr28), descr=<Guard0x335af50>) [p3, p17, p15, p13, p1, p5]
+764: i29 = instance_ptr_eq(p19, p22)
+767: guard_true(i29, descr=<Guard0x335af98>) [p3, p17, p15, p13, p1, p5]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) AppRand1 '() (cons (car x) z))')
debug_merge_point(0, 0, '(let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))')
debug_merge_point(0, 0, '(CellRef(ok?) (car x) 1 z)')
+773: p30 = getfield_gc_r(p19, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+777: p31 = getfield_gc_r(p30, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+781: guard_nonnull_class(p31, 16477696, descr=<Guard0x33557c0>) [p3, p17, p15, p13, p1, p5]
+800: i33 = getfield_gc_i(p17, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+804: p34 = getfield_gc_r(p31, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+815: guard_value(p34, ConstPtr(ptr35), descr=<Guard0x335afe0>) [p3, p17, p15, p13, p1, p5]
+824: p36 = getfield_gc_r(p19, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)')
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
debug_merge_point(0, 0, '(+ row dist)')
+828: i38 = int_add_ovf(i33, 1)
+835: guard_no_overflow(descr=<Guard0x335b028>) [p3, p17, p15, p13, p1, p5]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+841: i39 = int_eq(i24, i38)
+844: guard_true(i39, descr=<Guard0x335b070>) [p3, p17, p15, p13, p1, p5]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '#f')
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand4)')
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand4)')
+850: p40 = getfield_gc_r(p17, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+854: guard_nonnull_class(p40, 16471056, descr=<Guard0x3355820>) [p3, p17, p15, p13, p1, p5]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+872: p42 = new_with_vtable(descr=<SizeDescr 40>)
+922: p43 = new_with_vtable(descr=<SizeDescr 24>)
+933: setfield_gc(p43, i33, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+944: setfield_gc(p43, ConstPtr(ptr44), descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+948: p45 = new_with_vtable(descr=<SizeDescr 24>)
+960: setfield_gc(p45, i24, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+965: setfield_gc(p45, p25, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+970: p46 = new_with_vtable(descr=<SizeDescr 48>)
+982: p47 = new_with_vtable(descr=<SizeDescr 40>)
+993: setfield_gc(p47, p5, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1004: setfield_gc(p47, p3, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1008: setfield_gc(p47, p1, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1026: setfield_gc(p47, ConstPtr(ptr48), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+1030: setfield_gc(p42, p19, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1034: setfield_gc(p46, p5, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1038: setfield_gc(p42, p40, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+1042: setfield_gc(p42, p43, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+1046: setfield_gc(p42, p45, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+1050: setfield_gc(p46, p36, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1054: setfield_gc(p46, p47, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1065: setfield_gc(p46, ConstPtr(ptr49), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+1069: setfield_gc(p46, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+1077: jump(p42, p46, descr=TargetToken(53317888))
+1104: --end of the loop--
[86a8076d0251c2] jit-log-opt-loop}
[86a8076d1d0090] {jit-backend
[86a8076d22020b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed399de
[86a8076d227057] jit-backend-dump}
[86a8076d23181c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed399e74 +0  25000000
[86a8076d232c97] jit-backend-dump}
[86a8076d2367ed] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39a045 +0  25000000
[86a8076d237609] jit-backend-dump}
[86a8076d23a762] {jit-backend-addr
bridge out of Guard 0x331fe38 has address 0x7fb5ed399e70 to 0x7fb5ed39a040
       gc table: 0x7fb5ed399de0
    jump target: 0x7fb5ed399e70
         resops: 0x7fb5ed399e7e
       failures: 0x7fb5ed39a040
            end: 0x7fb5ed39a227
[86a8076d23cb81] jit-backend-addr}
[86a8076d240039] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed399e8e +0  0D020000
[86a8076d240e5b] jit-backend-dump}
[86a8076d243fd3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed399e9a +0  1D020000
[86a8076d244d28] jit-backend-dump}
[86a8076d247cf7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed399eae +0  25020000
[86a8076d248a22] jit-backend-dump}
[86a8076d24b9c8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed399ec4 +0  2B020000
[86a8076d24c736] jit-backend-dump}
[86a8076d24f6b8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed399ed6 +0  35020000
[86a8076d250405] jit-backend-dump}
[86a8076d2534ce] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed399ee8 +0  3F020000
[86a8076d2541cb] jit-backend-dump}
[86a8076d2571b2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed399eff +0  44020000
[86a8076d257f1d] jit-backend-dump}
[86a8076d25af5c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed399f19 +0  46020000
[86a8076d25bc75] jit-backend-dump}
[86a8076d25ecee] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed399f30 +0  4B020000
[86a8076d25f9e2] jit-backend-dump}
[86a8076d262942] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed399f46 +0  51020000
[86a8076d263652] jit-backend-dump}
[86a8076d266629] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed399f61 +0  52020000
[86a8076d267314] jit-backend-dump}
[86a8076d26a243] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed399f76 +0  59020000
[86a8076d26af1b] jit-backend-dump}
[86a8076d26dfb0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed399f91 +0  5A020000
[86a8076d26ecaa] jit-backend-dump}
[86a8076d271c01] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed399f9a +0  6D020000
[86a8076d2728e0] jit-backend-dump}
[86a8076d275b64] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed396d48 +0  24310000
[86a8076d276815] jit-backend-dump}
[86a8076d27a582] jit-backend}
[86a8076d27e01b] {jit-log-opt-bridge
# bridge out of Guard 0x331fe38 with 48 ops
[p0, i1, i2, p3]
+166: guard_not_invalidated(descr=<Guard0x3355940>) [p0, i1, i2, p3]
+166: i4 = int_add_ovf(i2, i1)
+172: guard_no_overflow(descr=<Guard0x335b2f8>) [p0, i1, i2, p3]
+178: guard_class(p0, 16435920, descr=<Guard0x335b340>) [p0, i1, i2, p3]
+190: p6 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+201: guard_value(p6, ConstPtr(ptr7), descr=<Guard0x335b388>) [p0, i1, i2, p3]
+210: p8 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+214: p9 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+218: guard_class(p8, 16500368, descr=<Guard0x335b3d0>) [p0, i1, i2, p3]
+232: p11 = getfield_gc_r(p8, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+237: guard_class(p11, 16478072, descr=<Guard0x335b418>) [p0, i1, i2, p3]
+250: p13 = getfield_gc_r(p11, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+254: guard_class(p9, 16437216, descr=<Guard0x335b460>) [p0, i1, i2, p3]
+268: p15 = getfield_gc_r(p9, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+272: guard_nonnull_class(p15, ConstClass(ForwardLink), descr=<Guard0x3355a00>) [p0, i1, i2, p3]
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (+ AppRand2 AppRand3)')
+291: p17 = getfield_gc_r(p11, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+295: p18 = getfield_gc_r(p17, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+299: guard_nonnull_class(p18, 16478072, descr=<Guard0x3355a60>) [p0, i1, i2, p3]
+317: p20 = getfield_gc_r(p8, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+322: guard_nonnull_class(p20, 16471056, descr=<Guard0x3355ac0>) [p0, i1, i2, p3]
+340: p22 = getfield_gc_r(p20, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+344: guard_nonnull_class(p22, 16616448, descr=<Guard0x3355b20>) [p0, i1, i2, p3]
+362: i24 = getfield_gc_i(p20, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+366: p25 = getfield_gc_r(p8, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+371: guard_nonnull_class(p25, 16471056, descr=<Guard0x3355b80>) [p0, i1, i2, p3]
+389: p27 = getfield_gc_r(p8, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+401: guard_nonnull(p27, descr=<Guard0x335b4a8>) [p0, i1, i2, p3]
+410: p28 = getfield_gc_r(p18, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+428: guard_value(p28, ConstPtr(ptr29), descr=<Guard0x335b4f0>) [p0, i1, i2, p3]
+437: i30 = instance_ptr_eq(p11, p18)
+440: guard_true(i30, descr=<Guard0x335b538>) [p0, i1, i2, p3]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+446: p31 = new_with_vtable(descr=<SizeDescr 40>)
+487: p32 = new_with_vtable(descr=<SizeDescr 24>)
+498: setfield_gc(p32, i24, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+502: setfield_gc(p32, p25, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+506: p33 = new_with_vtable(descr=<SizeDescr 48>)
+524: setfield_gc(p33, ConstPtr(ptr34), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+528: setfield_gc(p33, p13, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+532: setfield_gc(p33, p9, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+536: setfield_gc(p31, p11, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+540: setfield_gc(p33, p15, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+544: setfield_gc(p31, p22, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+548: setfield_gc(p31, p32, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+552: setfield_gc(p31, p27, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+563: setfield_gc(p33, i4, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+574: jump(p31, p33, descr=TargetToken(53317888))
+608: --end of the loop--
[86a8076d2aad26] jit-log-opt-bridge}
[86a8076d3572aa] {jit-backend
[86a8076d38ff26] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39a2e
[86a8076d395a0d] jit-backend-dump}
[86a8076d39f486] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39a334 +0  25000000
[86a8076d3a0705] jit-backend-dump}
[86a8076d3a40af] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39a465 +0  25000000
[86a8076d3a4f08] jit-backend-dump}
[86a8076d3a817e] {jit-backend-addr
bridge out of Guard 0x33549e0 has address 0x7fb5ed39a330 to 0x7fb5ed39a460
       gc table: 0x7fb5ed39a2e0
    jump target: 0x7fb5ed39a330
         resops: 0x7fb5ed39a33e
       failures: 0x7fb5ed39a460
            end: 0x7fb5ed39a59f
[86a8076d3aa525] jit-backend-addr}
[86a8076d3ad950] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39a34e +0  51010000
[86a8076d3ae7b3] jit-backend-dump}
[86a8076d3b1a01] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39a35f +0  5C010000
[86a8076d3b278d] jit-backend-dump}
[86a8076d3b5992] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39a37b +0  5C010000
[86a8076d3b66d5] jit-backend-dump}
[86a8076d3b980c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39a392 +0  61010000
[86a8076d3ba52b] jit-backend-dump}
[86a8076d3bd5eb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39a3aa +0  65010000
[86a8076d3be319] jit-backend-dump}
[86a8076d3c1386] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39a3c5 +0  66010000
[86a8076d3c20c0] jit-backend-dump}
[86a8076d3c5134] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39a3d2 +0  75010000
[86a8076d3c5e7a] jit-backend-dump}
[86a8076d3c8ed2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39a3e6 +0  7D010000
[86a8076d3c9bc0] jit-backend-dump}
[86a8076d3ccc30] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39a3ef +0  90010000
[86a8076d3cd9fa] jit-backend-dump}
[86a8076d3d0e03] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed397f8a +0  A2230000
[86a8076d3d1b03] jit-backend-dump}
[86a8076d3d59bb] jit-backend}
[86a8076d3d94e9] {jit-log-opt-bridge
# bridge out of Guard 0x33549e0 with 29 ops
[p0, p1]
+102: guard_class(p1, 16500368, descr=<Guard0x3355be0>) [p0, p1]
+114: p3 = getfield_gc_r(p1, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+118: guard_class(p3, 16478072, descr=<Guard0x335b580>) [p0, p1]
+131: p5 = getfield_gc_r(p3, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+135: p6 = getfield_gc_r(p5, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+139: guard_nonnull_class(p6, 16478072, descr=<Guard0x3355c40>) [p0, p1]
+159: p8 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+163: guard_nonnull_class(p8, 16471056, descr=<Guard0x3355ca0>) [p0, p1]
+182: p10 = getfield_gc_r(p8, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+186: guard_nonnull_class(p10, 16471056, descr=<Guard0x3355d00>) [p0, p1]
+206: i12 = getfield_gc_i(p8, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+210: p13 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+214: guard_nonnull_class(p13, 16616448, descr=<Guard0x3355d60>) [p0, p1]
+233: p15 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+237: guard_nonnull(p15, descr=<Guard0x335b5c8>) [p0, p1]
+246: p16 = getfield_gc_r(p6, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+257: guard_value(p16, ConstPtr(ptr17), descr=<Guard0x335b610>) [p0, p1]
+266: i18 = instance_ptr_eq(p3, p6)
+269: guard_true(i18, descr=<Guard0x335b658>) [p0, p1]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+275: p19 = new_with_vtable(descr=<SizeDescr 40>)
+316: p20 = new_with_vtable(descr=<SizeDescr 24>)
+327: setfield_gc(p20, i12, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+331: setfield_gc(p20, p13, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+335: setfield_gc(p19, p3, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+339: setfield_gc(p19, p10, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+343: setfield_gc(p19, p20, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+347: setfield_gc(p19, p15, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+351: jump(p19, p0, descr=TargetToken(53317888))
+384: --end of the loop--
[86a8076d3f430f] jit-log-opt-bridge}
[86a8076d4f4974] {jit-backend
[86a8076d541999] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39a6b
[86a8076d548a4c] jit-backend-dump}
[86a8076d552fd2] {jit-backend-addr
Loop 21 ((let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand4)) has address 0x7fb5ed39a7cd to 0x7fb5ed39a980 (bootstrap 0x7fb5ed39a740)
       gc table: 0x7fb5ed39a6b0
       function: 0x7fb5ed39a740
         resops: 0x7fb5ed39a7cd
       failures: 0x7fb5ed39a980
            end: 0x7fb5ed39ab37
[86a8076d555b1c] jit-backend-addr}
[86a8076d5598ae] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39a7e4 +0  C7010000
[86a8076d55ac84] jit-backend-dump}
[86a8076d55e10e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39a7fb +0  CC010000
[86a8076d55eeb9] jit-backend-dump}
[86a8076d5620b1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39a811 +0  D2010000
[86a8076d562e0a] jit-backend-dump}
[86a8076d565e4c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39a81e +0  E1010000
[86a8076d566b3d] jit-backend-dump}
[86a8076d569bb0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39a82e +0  ED010000
[86a8076d56a8a1] jit-backend-dump}
[86a8076d56d876] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39a83a +0  FD010000
[86a8076d56e594] jit-backend-dump}
[86a8076d571535] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39a84a +0  09020000
[86a8076d572228] jit-backend-dump}
[86a8076d575195] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39a869 +0  06020000
[86a8076d575e6d] jit-backend-dump}
[86a8076d578de0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39a880 +0  0B020000
[86a8076d579ac4] jit-backend-dump}
[86a8076d57ca09] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39a897 +0  10020000
[86a8076d57d6de] jit-backend-dump}
[86a8076d580601] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39a8b2 +0  11020000
[86a8076d5812ec] jit-backend-dump}
[86a8076d584221] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39a8bf +0  20020000
[86a8076d584f0c] jit-backend-dump}
[86a8076d587e44] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39a8d3 +0  28020000
[86a8076d588b2f] jit-backend-dump}
[86a8076d58ba61] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39a8dc +0  3B020000
[86a8076d58c75e] jit-backend-dump}
[86a8076d590188] jit-backend}
[86a8076d593e3e] {jit-log-opt-loop
# Loop 21 ((let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand4)) : entry bridge with 49 ops
[p0, p1]
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand4)')
+293: guard_class(p0, 16499664, descr=<Guard0x3355dc0>) [p1, p0]
+312: p3 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+316: guard_class(p1, 16437216, descr=<Guard0x335b6a0>) [p1, p0]
+335: p5 = getfield_gc_r(p1, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+339: guard_nonnull_class(p5, ConstClass(ForwardLink), descr=<Guard0x3355e20>) [p1, p0]
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
+357: p7 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+361: guard_nonnull(p7, descr=<Guard0x335b6e8>) [p1, p0]
+377: i9 = instance_ptr_eq(p7, ConstPtr(ptr8))
+380: guard_true(i9, descr=<Guard0x335b730>) [p1, p0]
debug_merge_point(0, 0, '0')
+386: guard_class(p3, 16500368, descr=<Guard0x335b778>) [p1, p0]
+398: p11 = getfield_gc_r(p3, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+402: guard_class(p11, 16478072, descr=<Guard0x335b7c0>) [p1, p0]
+414: p13 = getfield_gc_r(p11, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand4)')
+418: p14 = getfield_gc_r(p11, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+422: p15 = getfield_gc_r(p14, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+426: guard_nonnull_class(p15, 16478072, descr=<Guard0x3355e80>) [p1, p0]
+445: p17 = getfield_gc_r(p3, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+449: guard_nonnull_class(p17, 16471056, descr=<Guard0x3355ee0>) [p1, p0]
+468: p19 = getfield_gc_r(p17, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+472: guard_nonnull_class(p19, 16616448, descr=<Guard0x3355f40>) [p1, p0]
+491: i21 = getfield_gc_i(p17, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+495: p22 = getfield_gc_r(p3, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+499: guard_nonnull_class(p22, 16471056, descr=<Guard0x3355fa0>) [p1, p0]
+518: p24 = getfield_gc_r(p3, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+522: guard_nonnull(p24, descr=<Guard0x335b808>) [p1, p0]
+531: p25 = getfield_gc_r(p15, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+542: guard_value(p25, ConstPtr(ptr26), descr=<Guard0x335b850>) [p1, p0]
+551: i27 = instance_ptr_eq(p11, p15)
+554: guard_true(i27, descr=<Guard0x335b898>) [p1, p0]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+560: p28 = new_with_vtable(descr=<SizeDescr 40>)
+604: p29 = new_with_vtable(descr=<SizeDescr 24>)
+615: setfield_gc(p29, i21, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+619: setfield_gc(p29, p22, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+623: p30 = new_with_vtable(descr=<SizeDescr 48>)
+634: setfield_gc(p28, p11, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+638: setfield_gc(p30, p5, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+642: setfield_gc(p28, p19, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+646: setfield_gc(p28, p29, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+650: setfield_gc(p28, p24, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+654: setfield_gc(p30, p13, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+658: setfield_gc(p30, p1, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+669: setfield_gc(p30, ConstPtr(ptr31), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+673: setfield_gc(p30, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+681: jump(p28, p30, descr=TargetToken(53317888))
+720: --end of the loop--
[86a8076d5be0eb] jit-log-opt-loop}
[86a8076d6cc68f] {jit-backend
[86a8076d705f84] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39ac
[86a8076d70be97] jit-backend-dump}
[86a8076d715c37] {jit-backend-addr
Loop 22 ((CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand4)) has address 0x7fb5ed39acdd to 0x7fb5ed39ae00 (bootstrap 0x7fb5ed39ac50)
       gc table: 0x7fb5ed39ac00
       function: 0x7fb5ed39ac50
         resops: 0x7fb5ed39acdd
       failures: 0x7fb5ed39ae00
            end: 0x7fb5ed39af2b
[86a8076d718491] jit-backend-addr}
[86a8076d71c14d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39acf4 +0  37010000
[86a8076d71d2a0] jit-backend-dump}
[86a8076d72063e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39ad04 +0  43010000
[86a8076d72146a] jit-backend-dump}
[86a8076d72469f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39ad1e +0  45010000
[86a8076d7253ca] jit-backend-dump}
[86a8076d728554] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39ad34 +0  4B010000
[86a8076d7292bc] jit-backend-dump}
[86a8076d72c3aa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39ad4a +0  51010000
[86a8076d72d0b6] jit-backend-dump}
[86a8076d73019e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39ad64 +0  53010000
[86a8076d730ea7] jit-backend-dump}
[86a8076d733f52] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39ad71 +0  62010000
[86a8076d734c73] jit-backend-dump}
[86a8076d737cff] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39ad85 +0  6A010000
[86a8076d738a1e] jit-backend-dump}
[86a8076d73ba76] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39ad8e +0  7D010000
[86a8076d73c818] jit-backend-dump}
[86a8076d74032b] jit-backend}
[86a8076d743f60] {jit-log-opt-loop
# Loop 22 ((CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand4)) : entry bridge with 30 ops
[p0, p1]
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand4)')
+229: guard_class(p0, 16500368, descr=<Guard0x3378020>) [p1, p0]
+248: p3 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+252: guard_class(p3, 16478072, descr=<Guard0x335b8e0>) [p1, p0]
+264: p5 = getfield_gc_r(p3, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+268: p6 = getfield_gc_r(p5, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+272: guard_nonnull_class(p6, 16478072, descr=<Guard0x3378080>) [p1, p0]
+290: p8 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+294: guard_nonnull_class(p8, 16471056, descr=<Guard0x33780e0>) [p1, p0]
+312: p10 = getfield_gc_r(p8, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+316: guard_nonnull_class(p10, 16616448, descr=<Guard0x3378140>) [p1, p0]
+334: i12 = getfield_gc_i(p8, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+338: p13 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+342: guard_nonnull_class(p13, 16616448, descr=<Guard0x33781a0>) [p1, p0]
+360: p15 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+364: guard_nonnull(p15, descr=<Guard0x335b928>) [p1, p0]
+373: p16 = getfield_gc_r(p6, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+384: guard_value(p16, ConstPtr(ptr17), descr=<Guard0x335b970>) [p1, p0]
+393: i18 = instance_ptr_eq(p3, p6)
+396: guard_true(i18, descr=<Guard0x335b9b8>) [p1, p0]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+402: p19 = new_with_vtable(descr=<SizeDescr 40>)
+446: p20 = new_with_vtable(descr=<SizeDescr 24>)
+457: setfield_gc(p20, i12, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+461: setfield_gc(p20, p13, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+465: setfield_gc(p19, p3, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+469: setfield_gc(p19, p10, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+473: setfield_gc(p19, p20, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+477: setfield_gc(p19, p15, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+481: jump(p19, p1, descr=TargetToken(53317888))
+512: --end of the loop--
[86a8076d76107c] jit-log-opt-loop}
[86a8076d9107d5] {jit-backend
[86a8076d968822] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39b
[86a8076d97023c] jit-backend-dump}
[86a8076d97a8d2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39b144 +0  25000000
[86a8076d97bc27] jit-backend-dump}
[86a8076d97f8a3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39b335 +0  25000000
[86a8076d980734] jit-backend-dump}
[86a8076d9839a3] {jit-backend-addr
bridge out of Guard 0x335a800 has address 0x7fb5ed39b140 to 0x7fb5ed39b330
       gc table: 0x7fb5ed39b090
    jump target: 0x7fb5ed39b140
         resops: 0x7fb5ed39b14e
       failures: 0x7fb5ed39b330
            end: 0x7fb5ed39b587
[86a8076d985c56] jit-backend-addr}
[86a8076d98900c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39b15e +0  11020000
[86a8076d989e26] jit-backend-dump}
[86a8076d98ce41] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39b175 +0  16020000
[86a8076d98db5f] jit-backend-dump}
[86a8076d990b55] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39b185 +0  22020000
[86a8076d991824] jit-backend-dump}
[86a8076d994836] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39b191 +0  32020000
[86a8076d995524] jit-backend-dump}
[86a8076d998548] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39b1a9 +0  36020000
[86a8076d99924b] jit-backend-dump}
[86a8076d99c20d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39b1bb +0  40020000
[86a8076d99cf28] jit-backend-dump}
[86a8076d99feee] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39b1d8 +0  3F020000
[86a8076d9a0bd8] jit-backend-dump}
[86a8076d9a3b20] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39b1f3 +0  40020000
[86a8076d9a4829] jit-backend-dump}
[86a8076d9a77d6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39b208 +0  47020000
[86a8076d9a84ae] jit-backend-dump}
[86a8076d9ab3f3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39b211 +0  5A020000
[86a8076d9ac0d7] jit-backend-dump}
[86a8076d9af1aa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39b21e +0  85020000
[86a8076d9afe4e] jit-backend-dump}
[86a8076d9b2df4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39b22b +0  94020000
[86a8076d9b3ae2] jit-backend-dump}
[86a8076d9b6a8c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39b238 +0  A3020000
[86a8076d9b777c] jit-backend-dump}
[86a8076d9ba6b2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39b241 +0  B6020000
[86a8076d9bb39c] jit-backend-dump}
[86a8076d9be32e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39b25d +0  B6020000
[86a8076d9befea] jit-backend-dump}
[86a8076d9c1f78] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39b273 +0  BC020000
[86a8076d9c2c82] jit-backend-dump}
[86a8076d9c5c1f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39b280 +0  CB020000
[86a8076d9c6910] jit-backend-dump}
[86a8076d9c9814] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39b289 +0  DE020000
[86a8076d9ca4fc] jit-backend-dump}
[86a8076d9cd67c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3984e4 +0  582C0000
[86a8076d9ce2ff] jit-backend-dump}
[86a8076d9d1fbb] jit-backend}
[86a8076d9d5a84] {jit-log-opt-bridge
# bridge out of Guard 0x335a800 with 65 ops
[p0, p1]
+198: guard_class(p1, 16500368, descr=<Guard0x3378200>) [p0, p1]
+210: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+214: guard_nonnull_class(p3, 16471056, descr=<Guard0x3378260>) [p0, p1]
+240: i6 = instance_ptr_eq(p3, ConstPtr(ptr5))
+243: guard_false(i6, descr=<Guard0x335ba00>) [p0, p1]
debug_merge_point(0, 0, '(let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))')
+249: guard_class(p0, 16435920, descr=<Guard0x335ba48>) [p0, p1]
+261: p8 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+265: guard_nonnull_class(p8, ConstClass(ForwardLink), descr=<Guard0x33782c0>) [p0, p1]
debug_merge_point(0, 0, '(CellRef(ok?) (car x) 1 z)')
+285: p10 = getfield_gc_r(p1, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+289: guard_class(p10, 16478072, descr=<Guard0x335ba90>) [p0, p1]
+303: p12 = getfield_gc_r(p10, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+308: p13 = getfield_gc_r(p12, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+312: guard_nonnull_class(p13, 16477696, descr=<Guard0x3378320>) [p0, p1]
+332: i15 = getfield_gc_i(p3, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+336: p16 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+340: guard_nonnull_class(p16, 16471056, descr=<Guard0x3378380>) [p0, p1]
+359: p18 = getfield_gc_r(p13, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+371: guard_value(p18, ConstPtr(ptr19), descr=<Guard0x335bad8>) [p0, p1]
+380: p20 = getfield_gc_r(p10, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)')
+380: i22 = instance_ptr_eq(p16, ConstPtr(ptr21))
+383: guard_false(i22, descr=<Guard0x335bb20>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
debug_merge_point(0, 0, '(+ row dist)')
+389: guard_not_invalidated(descr=<Guard0x335bb68>) [p0, p1]
+389: i24 = int_add_ovf(i15, 1)
+396: guard_no_overflow(descr=<Guard0x335bbb0>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+402: i25 = getfield_gc_i(p16, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+406: i26 = int_eq(i25, i24)
+409: guard_false(i26, descr=<Guard0x335bbf8>) [p0, p1]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '(let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)))')
debug_merge_point(0, 0, '(- row dist)')
+415: i28 = int_sub_ovf(i15, 1)
+422: guard_no_overflow(descr=<Guard0x335bc40>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand6)')
+428: i29 = int_eq(i25, i28)
+431: guard_false(i29, descr=<Guard0x335bc88>) [p0, p1]
debug_merge_point(0, 0, '(if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)')
debug_merge_point(0, 0, '(let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed)))')
debug_merge_point(0, 0, '(+ dist 1)')
debug_merge_point(0, 0, '(CellRef(ok?) row AppRand8 (cdr placed))')
+437: p30 = getfield_gc_r(p13, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize1.inst__vals_0 24 pure>)
+442: p31 = getfield_gc_r(p30, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+446: guard_nonnull_class(p31, 16477696, descr=<Guard0x33783e0>) [p0, p1]
+465: p33 = getfield_gc_r(p16, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+469: guard_nonnull_class(p33, 16471056, descr=<Guard0x3378440>) [p0, p1]
+487: p35 = getfield_gc_r(p31, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+491: guard_value(p35, ConstPtr(ptr36), descr=<Guard0x335bcd0>) [p0, p1]
+500: i37 = instance_ptr_eq(p13, p31)
+503: guard_true(i37, descr=<Guard0x335bd18>) [p0, p1]
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) row AppRand8 (cdr placed))')
+509: p38 = new_with_vtable(descr=<SizeDescr 16>)
+553: p39 = new_with_vtable(descr=<SizeDescr 40>)
+564: setfield_gc(p39, p8, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+568: setfield_gc(p38, i15, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+572: setfield_gc(p39, p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+576: setfield_gc(p39, p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+587: setfield_gc(p39, ConstPtr(ptr40), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+591: jump(p13, p38, 2, p33, p39, p8, i15, p30, p31, descr=TargetToken(52788208))
+672: --end of the loop--
[86a8076da09e5a] jit-log-opt-bridge}
[86a8076db6aea3] {jit-backend
[86a8076dbc3c96] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39b
[86a8076dbca4c0] jit-backend-dump}
[86a8076dbd4bc5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39b6a4 +0  25000000
[86a8076dbd5ff6] jit-backend-dump}
[86a8076dbd9c35] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39b865 +0  25000000
[86a8076dbdaaed] jit-backend-dump}
[86a8076dbddddd] {jit-backend-addr
bridge out of Guard 0x331fa00 has address 0x7fb5ed39b6a0 to 0x7fb5ed39b860
       gc table: 0x7fb5ed39b640
    jump target: 0x7fb5ed39b6a0
         resops: 0x7fb5ed39b6ae
       failures: 0x7fb5ed39b860
            end: 0x7fb5ed39b99f
[86a8076dbe0107] jit-backend-addr}
[86a8076dbe392c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39b6bf +0  FC010000
[86a8076dbe4844] jit-backend-dump}
[86a8076dbe79d1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39b6d3 +0  04020000
[86a8076dbe86e3] jit-backend-dump}
[86a8076dbeb74a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39b6e0 +0  13020000
[86a8076dbec450] jit-backend-dump}
[86a8076dbef5e0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39b6e9 +0  26020000
[86a8076dbf0282] jit-backend-dump}
[86a8076dbf327e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39b70c +0  1F020000
[86a8076dbf3f50] jit-backend-dump}
[86a8076dbf6fa8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39b723 +0  24020000
[86a8076dbf7ca5] jit-backend-dump}
[86a8076dbfacf7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39b737 +0  2C020000
[86a8076dbfb9a7] jit-backend-dump}
[86a8076dbfeab1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39b740 +0  3F020000
[86a8076dbff77a] jit-backend-dump}
[86a8076dc029f8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed396434 +0  68520000
[86a8076dc0368d] jit-backend-dump}
[86a8076dc074f2] jit-backend}
[86a8076dc0b067] {jit-log-opt-bridge
# bridge out of Guard 0x331fa00 with 53 ops
[p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
+118: guard_not_invalidated(descr=<Guard0x33784a0>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
+118: i11 = int_add_ovf(i6, 1)
+125: guard_no_overflow(descr=<Guard0x335bd60>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+131: i12 = getfield_gc_i(p7, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+142: i13 = int_eq(i12, i11)
+145: guard_false(i13, descr=<Guard0x335bda8>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '(let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)))')
debug_merge_point(0, 0, '(- row dist)')
+151: i15 = int_sub_ovf(i6, 1)
+158: guard_no_overflow(descr=<Guard0x335bdf0>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
debug_merge_point(0, 0, '(let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand6)')
+164: i16 = int_eq(i12, i15)
+167: guard_false(i16, descr=<Guard0x335be38>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
debug_merge_point(0, 0, '(if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)')
debug_merge_point(0, 0, '(let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed)))')
debug_merge_point(0, 0, '(+ dist 1)')
debug_merge_point(0, 0, '(CellRef(ok?) row AppRand8 (cdr placed))')
+173: p17 = getfield_gc_r(p8, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize1.inst__vals_0 24 pure>)
+184: p18 = getfield_gc_r(p17, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+189: guard_nonnull_class(p18, 16477696, descr=<Guard0x3378500>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
+208: p20 = getfield_gc_r(p7, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+212: guard_nonnull_class(p20, 16471056, descr=<Guard0x3378560>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
+231: p22 = getfield_gc_r(p18, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+242: guard_value(p22, ConstPtr(ptr23), descr=<Guard0x335be80>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
+251: i24 = instance_ptr_eq(p8, p18)
+254: guard_true(i24, descr=<Guard0x335bec8>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) row AppRand8 (cdr placed))')
+260: p25 = new_with_vtable(descr=<SizeDescr 16>)
+311: p26 = new_with_vtable(descr=<SizeDescr 40>)
+322: p27 = new_with_vtable(descr=<SizeDescr 40>)
+333: setfield_gc(p27, p5, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+344: setfield_gc(p27, p4, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+348: p28 = new_with_vtable(descr=<SizeDescr 24>)
+359: setfield_gc(p28, i3, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+363: setfield_gc(p28, p2, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+367: setfield_gc(p27, p28, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+371: setfield_gc(p27, p7, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+375: p29 = new_with_vtable(descr=<SizeDescr 48>)
+387: setfield_gc(p29, p9, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+398: setfield_gc(p29, p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+402: setfield_gc(p29, p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+413: setfield_gc(p29, ConstPtr(ptr30), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+417: setfield_gc(p29, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+425: setfield_gc(p25, i6, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+436: setfield_gc(p26, p9, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+440: setfield_gc(p26, p27, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+444: setfield_gc(p26, p29, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+455: setfield_gc(p26, ConstPtr(ptr32), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+459: jump(p8, p25, 2, p20, p26, p9, i6, p17, p18, descr=TargetToken(52788208))
+544: --end of the loop--
[86a8076dc38cd9] jit-log-opt-bridge}
[86a8076dd22f49] {jit-backend
[86a8076dd8e434] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39bb10 +0  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8C2202000048FF0425801533034D89F74901D60F80000000008139101100000F85000000004C8B69204C8B251FFFFFFF4D39E50F85000000004C8B61104C8B691841813C24D00C01000F85000000004D8B54240841813AB8B500000F85000000004D8B4A0841817D00201600000F85000000004D8B45084983F8017207418138900F00000F8500000000498B7A20488B77084883FE017206813EB8B500000F8500000000498B5C24104883FB017206813B509A00000F8500000000488B43104883F80172068138509A00000F85000000004C89AD380100004C8B6B08498B5C24184883FB017206813B509A00000F85000000004C8995400100004D8B5424204983FA01720741813A509A00000F85000000004C8B66104C898D480100004C8B0D83FEFFFF4D39CC0F85000000004839B5400100000F85000000004983FE000F85000000004C8BB5400100004D8B7E184D85FF0F8400000000418B17488B1415C0B9FA004881EA2C0300004883FA010F8300000000498B57084883FA017206813A40B400000F8500000000488B4A104C8B0D4AFEFFFF4C39C90F85000000004D8B4A0849BBFEFFFFFFFFFFFF7F4D39D90F8F000000004C8995300100004C8985400100004C89BD50010000488995580100004889BD600100004889B5680100004C8B9D480100004C899D700100004889C64D89EA4889D8488B9D380100004D89CDFFB5480100004C89B548010000415E49BB006439EDB57F000041FFE366662E0F1F84000000000048C7442408FFFFFF0049BBB0B939EDB57F00004C895D204D8D9B4069FFFF41FFD3E9B8FDFFFFFF35E4FCFFFF49BBC0B939EDB57F000041534D8D9B4066FFFF41FFE3FF35D0FCFFFF49BBD0B939EDB57F000041534D8D9B3066FFFF41FFE3FF35BCFCFFFF49BBE0B939EDB57F000041534D8D9B2066FFFF41FFE3FF35B0FCFFFF49BBF0B939EDB57F000041534D8D9B1066FFFF41FFE3FF359CFCFFFF49BB00BA39EDB57F000041534D8D9B0066FFFF41FFE3FF3588FCFFFF49BB10BA39EDB57F000041534D8D9BF065FFFF41FFE3FF3574FCFFFF49BB20BA39EDB57F000041534D8D9BE065FFFF41FFE3FF3560FCFFFF49BB30BA39EDB57F000041534D8D9BD065FFFF41FFE3FF354CFCFFFF49BB40BA39EDB57F000041534D8D9BC065FFFF41FFE3FF3538FCFFFF49BB50BA39EDB57F000041534D8D9BB065FFFF41FFE3FF3524FCFFFF49BB60BA39EDB57F000041534D8D9BA065FFFF41FFE3FF3510FCFFFF49BB70BA39EDB57F000041534D8D9B9065FFFF41FFE3FF35FCFBFFFF49BB80BA39EDB57F000041534D8D9B8065FFFF41FFE3FF35F0FBFFFF49BB90BA39EDB57F000041534D8D9B7065FFFF41FFE3FF35DCFBFFFF49BBA0BA39EDB57F000041534D8D9B6065FFFF41FFE3FF35C8FBFFFF49BBB0BA39EDB57F000041534D8D9B5065FFFF41FFE3FF35B4FBFFFF49BBC0BA39EDB57F000041534D8D9B4065FFFF41FFE3FF35A0FBFFFF49BBD0BA39EDB57F000041534D8D9B3065FFFF41FFE3FF358CFBFFFF49BBE0BA39EDB57F000041534D8D9B2065FFFF41FFE3FF3580FBFFFF49BBF0BA39EDB57F000041534D8D9B1065FFFF41FFE3FF356CFBFFFF49BB00BB39EDB57F000041534D8D9B0065FFFF41FFE3
[86a8076dd96cc4] jit-backend-dump}
[86a8076dda10d4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39bbd4 +0  25000000
[86a8076dda2326] jit-backend-dump}
[86a8076dda5df2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39be05 +0  25000000
[86a8076dda6c08] jit-backend-dump}
[86a8076dda9f17] {jit-backend-addr
bridge out of Guard 0x3355b20 has address 0x7fb5ed39bbd0 to 0x7fb5ed39be00
       gc table: 0x7fb5ed39bb10
    jump target: 0x7fb5ed39bbd0
         resops: 0x7fb5ed39bbde
       failures: 0x7fb5ed39be00
            end: 0x7fb5ed39c072
[86a8076ddac0cf] jit-backend-addr}
[86a8076ddaf8ba] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39bbee +0  50020000
[86a8076ddb065f] jit-backend-dump}
[86a8076ddb39ee] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39bbfa +0  60020000
[86a8076ddb46e2] jit-backend-dump}
[86a8076ddb788d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39bc0e +0  68020000
[86a8076ddb8578] jit-backend-dump}
[86a8076ddbb65d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39bc24 +0  6E020000
[86a8076ddbc381] jit-backend-dump}
[86a8076ddbf48e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39bc36 +0  78020000
[86a8076ddc019a] jit-backend-dump}
[86a8076ddc3282] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39bc48 +0  82020000
[86a8076ddc3f57] jit-backend-dump}
[86a8076ddc6f90] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39bc5f +0  87020000
[86a8076ddc7ca6] jit-backend-dump}
[86a8076ddcacca] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39bc79 +0  89020000
[86a8076ddcb9a2] jit-backend-dump}
[86a8076ddceaca] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39bc90 +0  8E020000
[86a8076ddcf7cd] jit-backend-dump}
[86a8076ddd2878] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39bca6 +0  94020000
[86a8076ddd354d] jit-backend-dump}
[86a8076ddd659f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39bcc8 +0  8E020000
[86a8076ddd72a5] jit-backend-dump}
[86a8076ddda309] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39bce7 +0  8B020000
[86a8076dddaff7] jit-backend-dump}
[86a8076ddde083] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39bd02 +0  8C020000
[86a8076ddded86] jit-backend-dump}
[86a8076dde1dd8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39bd0f +0  9B020000
[86a8076dde2aa1] jit-backend-dump}
[86a8076dde5b05] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39bd19 +0  AD020000
[86a8076dde67f6] jit-backend-dump}
[86a8076dde9835] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39bd2d +0  B5020000
[86a8076ddea507] jit-backend-dump}
[86a8076dded590] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39bd49 +0  B5020000
[86a8076ddee2ac] jit-backend-dump}
[86a8076ddf12ab] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39bd5f +0  BB020000
[86a8076ddf1f8c] jit-backend-dump}
[86a8076ddf5018] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39bd73 +0  C3020000
[86a8076ddf5d06] jit-backend-dump}
[86a8076ddf8d2a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39bd8a +0  C8020000
[86a8076ddf9a1b] jit-backend-dump}
[86a8076ddfcd38] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed399f46 +0  861C0000
[86a8076ddfd9ef] jit-backend-dump}
[86a8076de018fc] jit-backend}
[86a8076de05386] {jit-log-opt-bridge
# bridge out of Guard 0x3355b20 with 45 ops
[p0, i1, i2, p3]
+214: guard_not_invalidated(descr=<Guard0x33785c0>) [p0, i1, i2, p3]
+214: i4 = int_add_ovf(i2, i1)
+220: guard_no_overflow(descr=<Guard0x335bf10>) [p0, i1, i2, p3]
+226: guard_class(p0, 16435920, descr=<Guard0x335bf58>) [p0, i1, i2, p3]
+238: p6 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+249: guard_value(p6, ConstPtr(ptr7), descr=<Guard0x335bfa0>) [p0, i1, i2, p3]
+258: p8 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+262: p9 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+266: guard_class(p8, 16500368, descr=<Guard0x3380020>) [p0, i1, i2, p3]
+280: p11 = getfield_gc_r(p8, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+285: guard_class(p11, 16478072, descr=<Guard0x3380068>) [p0, i1, i2, p3]
+298: p13 = getfield_gc_r(p11, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+302: guard_class(p9, 16437216, descr=<Guard0x33800b0>) [p0, i1, i2, p3]
+316: p15 = getfield_gc_r(p9, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+320: guard_nonnull_class(p15, ConstClass(ForwardLink), descr=<Guard0x3378620>) [p0, i1, i2, p3]
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (+ AppRand2 AppRand3)')
+339: p17 = getfield_gc_r(p11, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+343: p18 = getfield_gc_r(p17, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+347: guard_nonnull_class(p18, 16478072, descr=<Guard0x3378680>) [p0, i1, i2, p3]
+365: p20 = getfield_gc_r(p8, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+370: guard_nonnull_class(p20, 16471056, descr=<Guard0x33786e0>) [p0, i1, i2, p3]
+388: p22 = getfield_gc_r(p20, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+392: guard_nonnull_class(p22, 16471056, descr=<Guard0x3378740>) [p0, i1, i2, p3]
+410: i24 = getfield_gc_i(p20, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+421: p25 = getfield_gc_r(p8, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+426: guard_nonnull_class(p25, 16471056, descr=<Guard0x33787a0>) [p0, i1, i2, p3]
+444: p27 = getfield_gc_r(p8, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+456: guard_nonnull_class(p27, 16471056, descr=<Guard0x3378800>) [p0, i1, i2, p3]
+475: p29 = getfield_gc_r(p18, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+493: guard_value(p29, ConstPtr(ptr30), descr=<Guard0x33800f8>) [p0, i1, i2, p3]
+502: i31 = instance_ptr_eq(p11, p18)
+509: guard_true(i31, descr=<Guard0x3380140>) [p0, i1, i2, p3]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+515: guard_value(i4, 0, descr=<Guard0x3378860>) [p25, i24, p27, p22, p11, i4, p9, p13, p15, None, None, None]
+525: p34 = getfield_gc_r(p11, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+536: guard_nonnull(p34, descr=<Guard0x33788c0>) [p25, i24, p27, p22, p11, None, p9, p13, p15, None, None, None]
+545: guard_subclass(p34, ConstClass(W_Cell), descr=<Guard0x3378920>) [p25, i24, p27, p22, p11, None, p9, p13, p15, None, None, None]
+573: p36 = getfield_gc_r(p34, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+577: guard_nonnull_class(p36, 16477696, descr=<Guard0x3378980>) [p25, i24, p27, p22, p11, None, p9, p13, p15, None, None, None]
+595: p38 = getfield_gc_r(p36, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+606: guard_value(p38, ConstPtr(ptr39), descr=<Guard0x33789e0>) [p25, i24, p27, p22, p11, None, p9, p13, p15, None, None, None]
+615: i40 = getfield_gc_i(p27, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+619: i42 = int_le(i40, 9223372036854775806)
+632: guard_true(i42, descr=<Guard0x3378a40>) [p25, i24, p27, p22, p11, None, p9, p13, p15, None, None, None]
+638: jump(p11, p22, i24, p25, p27, p15, p13, p9, p34, p36, i40, p17, p18, p13, descr=TargetToken(53317968))
+752: --end of the loop--
[86a8076de38257] jit-log-opt-bridge}
[86a8076e055d9d] {jit-backend
[86a8076e0c6ea8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39c
[86a8076e0cfbe6] jit-backend-dump}
[86a8076e0daa4d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39c314 +0  25000000
[86a8076e0dbf17] jit-backend-dump}
[86a8076e0dff3b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39c575 +0  25000000
[86a8076e0e0e77] jit-backend-dump}
[86a8076e0e4206] {jit-backend-addr
bridge out of Guard 0x331e698 has address 0x7fb5ed39c310 to 0x7fb5ed39c570
       gc table: 0x7fb5ed39c230
    jump target: 0x7fb5ed39c310
         resops: 0x7fb5ed39c31e
       failures: 0x7fb5ed39c570
            end: 0x7fb5ed39c853
[86a8076e0e656d] jit-backend-addr}
[86a8076e0e9a96] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39c32e +0  81020000
[86a8076e0ea9b6] jit-backend-dump}
[86a8076e0edb7d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39c345 +0  86020000
[86a8076e0ee889] jit-backend-dump}
[86a8076e0f1842] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39c355 +0  92020000
[86a8076e0f2589] jit-backend-dump}
[86a8076e0f55f0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39c361 +0  A2020000
[86a8076e0f632a] jit-backend-dump}
[86a8076e0f933f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39c378 +0  A7020000
[86a8076e0fa06a] jit-backend-dump}
[86a8076e0fd1b0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39c38f +0  C8020000
[86a8076e0fdeb3] jit-backend-dump}
[86a8076e100f1e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39c3a7 +0  CC020000
[86a8076e101c21] jit-backend-dump}
[86a8076e104c76] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39c3bb +0  D4020000
[86a8076e105969] jit-backend-dump}
[86a8076e108981] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39c3c8 +0  E3020000
[86a8076e109684] jit-backend-dump}
[86a8076e10c6dc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39c3d1 +0  F6020000
[86a8076e10d3dc] jit-backend-dump}
[86a8076e110395] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39c3da +0  09030000
[86a8076e1110b7] jit-backend-dump}
[86a8076e11413d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39c3ee +0  11030000
[86a8076e114e2d] jit-backend-dump}
[86a8076e117ee4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39c404 +0  17030000
[86a8076e118be7] jit-backend-dump}
[86a8076e11bc36] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39c41b +0  1C030000
[86a8076e11c933] jit-backend-dump}
[86a8076e11f8f8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39c428 +0  2B030000
[86a8076e1205fe] jit-backend-dump}
[86a8076e1236da] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39c43a +0  35030000
[86a8076e1243d7] jit-backend-dump}
[86a8076e127368] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39c45b +0  30030000
[86a8076e12806e] jit-backend-dump}
[86a8076e12b06d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39c472 +0  35030000
[86a8076e12bd70] jit-backend-dump}
[86a8076e12ecb8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39c488 +0  3B030000
[86a8076e12f9c1] jit-backend-dump}
[86a8076e1329df] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39c4a3 +0  3C030000
[86a8076e1336d0] jit-backend-dump}
[86a8076e13662a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39c4b0 +0  4B030000
[86a8076e137336] jit-backend-dump}
[86a8076e13a329] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39c4c4 +0  53030000
[86a8076e13b03f] jit-backend-dump}
[86a8076e13dfbe] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39c4cd +0  66030000
[86a8076e13eccd] jit-backend-dump}
[86a8076e141efc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed394315 +0  F77F0000
[86a8076e142bbc] jit-backend-dump}
[86a8076e146957] jit-backend}
[86a8076e14a46d] {jit-log-opt-bridge
# bridge out of Guard 0x331e698 with 82 ops
[p0, p1]
+246: guard_class(p1, 16500368, descr=<Guard0x3378aa0>) [p0, p1]
+258: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+262: guard_nonnull_class(p3, 16471056, descr=<Guard0x3378b00>) [p0, p1]
+288: i6 = instance_ptr_eq(p3, ConstPtr(ptr5))
+291: guard_false(i6, descr=<Guard0x3380188>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
+297: guard_class(p0, 16435920, descr=<Guard0x33801d0>) [p0, p1]
+309: p8 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+313: guard_nonnull_class(p8, ConstClass(ForwardLink), descr=<Guard0x3378b60>) [p0, p1]
debug_merge_point(0, 0, '(+ row dist)')
+332: guard_not_invalidated(descr=<Guard0x3380218>) [p0, p1]
+332: p10 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+336: guard_nonnull_class(p10, ConstClass(W_Fixnum), descr=<Guard0x3378bc0>) [p0, p1]
+355: p12 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+359: guard_nonnull_class(p12, ConstClass(W_Fixnum), descr=<Guard0x3378c20>) [p0, p1]
+379: i14 = getfield_gc_i(p10, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+383: i15 = getfield_gc_i(p12, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+387: i16 = int_add_ovf(i14, i15)
+393: guard_no_overflow(descr=<Guard0x3380260>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+399: i17 = getfield_gc_i(p3, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+403: i18 = int_eq(i17, i16)
+406: guard_false(i18, descr=<Guard0x33802a8>) [p0, p1]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '(let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)))')
debug_merge_point(0, 0, '(- row dist)')
+412: i19 = int_sub_ovf(i14, i15)
+415: guard_no_overflow(descr=<Guard0x33802f0>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand6)')
+421: i20 = int_eq(i17, i19)
+424: guard_true(i20, descr=<Guard0x3380338>) [p0, p1]
debug_merge_point(0, 0, '(if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)')
debug_merge_point(0, 0, '#f')
+430: p21 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+441: guard_value(p21, ConstPtr(ptr22), descr=<Guard0x3380380>) [p0, p1]
+450: p23 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+454: p24 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand6)')
+458: guard_class(p24, 16435920, descr=<Guard0x33803c8>) [p0, p1]
+472: p26 = getfield_gc_r(p24, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+476: guard_nonnull_class(p26, ConstClass(ForwardLink), descr=<Guard0x3378c80>) [p0, p1]
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
+495: guard_class(p23, 16500368, descr=<Guard0x3380410>) [p0, p1]
+508: p29 = getfield_gc_r(p23, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+512: guard_class(p29, 16478072, descr=<Guard0x3380458>) [p0, p1]
+526: p31 = getfield_gc_r(p29, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand6)')
+531: p32 = getfield_gc_r(p29, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+536: p33 = getfield_gc_r(p32, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+540: guard_nonnull_class(p33, 16478072, descr=<Guard0x3378ce0>) [p0, p1]
+559: p35 = getfield_gc_r(p23, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+563: guard_nonnull_class(p35, 16471056, descr=<Guard0x3378d40>) [p0, p1]
+582: p37 = getfield_gc_r(p35, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+586: guard_nonnull_class(p37, 16616448, descr=<Guard0x3378da0>) [p0, p1]
+604: i39 = getfield_gc_i(p35, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+608: p40 = getfield_gc_r(p23, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+612: guard_nonnull_class(p40, 16616448, descr=<Guard0x3378e00>) [p0, p1]
+631: p42 = getfield_gc_r(p23, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+635: guard_nonnull(p42, descr=<Guard0x33804a0>) [p0, p1]
+644: p43 = getfield_gc_r(p33, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+655: guard_value(p43, ConstPtr(ptr44), descr=<Guard0x33804e8>) [p0, p1]
+664: i45 = instance_ptr_eq(p29, p33)
+667: guard_true(i45, descr=<Guard0x3380530>) [p0, p1]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+673: p46 = new_with_vtable(descr=<SizeDescr 40>)
+714: p47 = new_with_vtable(descr=<SizeDescr 24>)
+725: setfield_gc(p47, i39, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+729: setfield_gc(p47, p40, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+733: p48 = new_with_vtable(descr=<SizeDescr 48>)
+744: setfield_gc(p46, p42, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+748: setfield_gc(p48, p26, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+752: setfield_gc(p46, p37, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+756: setfield_gc(p46, p47, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+767: setfield_gc(p48, ConstPtr(ptr49), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+771: setfield_gc(p48, p31, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+775: setfield_gc(p48, p24, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+779: setfield_gc(p46, p29, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+783: setfield_gc(p48, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+791: jump(p46, p48, descr=TargetToken(53317888))
+832: --end of the loop--
[86a8076e18db1a] jit-log-opt-bridge}
[86a8076e37533c] {jit-backend
[86a8076e3d8b14] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39c
[86a8076e3defc1] jit-backend-dump}
[86a8076e3e9c32] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39c974 +0  25000000
[86a8076e3eb0aa] jit-backend-dump}
[86a8076e3eef46] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39cb05 +0  25000000
[86a8076e3efe30] jit-backend-dump}
[86a8076e3f31dd] {jit-backend-addr
bridge out of Guard 0x323fe80 has address 0x7fb5ed39c970 to 0x7fb5ed39cb00
       gc table: 0x7fb5ed39c910
    jump target: 0x7fb5ed39c970
         resops: 0x7fb5ed39c97e
       failures: 0x7fb5ed39cb00
            end: 0x7fb5ed39cc3f
[86a8076e3f54be] jit-backend-addr}
[86a8076e3f8aba] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39c98f +0  CC010000
[86a8076e3f98d6] jit-backend-dump}
[86a8076e3fcb21] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39c9a3 +0  D4010000
[86a8076e3fd81e] jit-backend-dump}
[86a8076e4009b7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39c9b0 +0  E3010000
[86a8076e40166d] jit-backend-dump}
[86a8076e40470c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39c9b9 +0  F6010000
[86a8076e4053c8] jit-backend-dump}
[86a8076e4084b3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39c9df +0  EC010000
[86a8076e409170] jit-backend-dump}
[86a8076e40c227] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39c9f6 +0  F1010000
[86a8076e40cedd] jit-backend-dump}
[86a8076e40ff8b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39ca15 +0  EE010000
[86a8076e410c4b] jit-backend-dump}
[86a8076e413cd7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39ca1e +0  01020000
[86a8076e4149ce] jit-backend-dump}
[86a8076e417f12] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39644b +0  21650000
[86a8076e418bdb] jit-backend-dump}
[86a8076e41ca77] jit-backend}
[86a8076e42056e] {jit-log-opt-bridge
# bridge out of Guard 0x323fe80 with 59 ops
[p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
+118: guard_not_invalidated(descr=<Guard0x3378e60>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
+118: i11 = int_add_ovf(i6, 1)
+125: guard_no_overflow(descr=<Guard0x3380578>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+131: i12 = getfield_gc_i(p7, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+142: i13 = int_eq(i12, i11)
+145: guard_false(i13, descr=<Guard0x33805c0>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '(let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)))')
debug_merge_point(0, 0, '(- row dist)')
+151: i15 = int_sub_ovf(i6, 1)
+158: guard_no_overflow(descr=<Guard0x3380608>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
debug_merge_point(0, 0, '(let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand6)')
+164: i16 = int_eq(i12, i15)
+167: guard_true(i16, descr=<Guard0x3380650>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
debug_merge_point(0, 0, '(if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)')
debug_merge_point(0, 0, '#f')
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand6)')
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
+173: p17 = getfield_gc_r(p5, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand6)')
+184: p18 = getfield_gc_r(p5, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+188: p19 = getfield_gc_r(p18, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+192: guard_nonnull_class(p19, 16478072, descr=<Guard0x3378ec0>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
+211: p21 = getfield_gc_r(p4, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+215: guard_nonnull_class(p21, 16616448, descr=<Guard0x3378f20>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
+234: i23 = getfield_gc_i(p4, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+238: p24 = getfield_gc_r(p19, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+256: guard_value(p24, ConstPtr(ptr25), descr=<Guard0x3380698>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
+265: i26 = instance_ptr_eq(p5, p19)
+268: guard_true(i26, descr=<Guard0x33806e0>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+274: p27 = new_with_vtable(descr=<SizeDescr 40>)
+318: p28 = new_with_vtable(descr=<SizeDescr 24>)
+329: setfield_gc(p28, i23, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+333: p29 = new_with_vtable(descr=<SizeDescr 24>)
+344: setfield_gc(p29, i3, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+348: setfield_gc(p29, p2, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+352: setfield_gc(p28, p29, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+356: p30 = new_with_vtable(descr=<SizeDescr 48>)
+367: p31 = new_with_vtable(descr=<SizeDescr 48>)
+378: setfield_gc(p31, p9, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+389: setfield_gc(p31, p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+393: setfield_gc(p31, p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+404: setfield_gc(p31, ConstPtr(ptr32), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+408: setfield_gc(p31, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+416: setfield_gc(p27, p5, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+420: setfield_gc(p27, p21, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+424: setfield_gc(p27, p28, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+428: setfield_gc(p27, p7, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+432: setfield_gc(p30, p9, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+436: setfield_gc(p30, p17, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+447: setfield_gc(p30, p31, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+451: setfield_gc(p30, ConstPtr(ptr34), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+455: setfield_gc(p30, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+463: jump(p27, p30, descr=TargetToken(53317888))
+496: --end of the loop--
[86a8076e454c78] jit-log-opt-bridge}
[86a8076e547869] {jit-backend
[86a8076e5cbc3e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39cd
[86a8076e5d2873] jit-backend-dump}
[86a8076e5dce39] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39cde4 +0  25000000
[86a8076e5de252] jit-backend-dump}
[86a8076e5e1e7e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39cf95 +0  25000000
[86a8076e5e2c17] jit-backend-dump}
[86a8076e5e5dde] {jit-backend-addr
bridge out of Guard 0x331ff58 has address 0x7fb5ed39cde0 to 0x7fb5ed39cf90
       gc table: 0x7fb5ed39cd50
    jump target: 0x7fb5ed39cde0
         resops: 0x7fb5ed39cdee
       failures: 0x7fb5ed39cf90
            end: 0x7fb5ed39d15b
[86a8076e5e80aa] jit-backend-addr}
[86a8076e5eb580] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39cdfe +0  D1010000
[86a8076e5ec3ec] jit-backend-dump}
[86a8076e5ef6c0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39ce0e +0  DD010000
[86a8076e5f03e2] jit-backend-dump}
[86a8076e5f35a9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39ce25 +0  E2010000
[86a8076e5f431a] jit-backend-dump}
[86a8076e5f73be] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39ce32 +0  F1010000
[86a8076e5f8123] jit-backend-dump}
[86a8076e5fb1d7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39ce42 +0  FD010000
[86a8076e5fbf08] jit-backend-dump}
[86a8076e5fefa9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39ce4f +0  0C020000
[86a8076e5ffcf0] jit-backend-dump}
[86a8076e602e1b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39ce61 +0  16020000
[86a8076e603b6a] jit-backend-dump}
[86a8076e606ba4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39ce82 +0  11020000
[86a8076e60792d] jit-backend-dump}
[86a8076e60a8b8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39ce99 +0  16020000
[86a8076e60b642] jit-backend-dump}
[86a8076e60e688] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39ceb0 +0  1B020000
[86a8076e60f3a3] jit-backend-dump}
[86a8076e612353] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39cecb +0  1C020000
[86a8076e613081] jit-backend-dump}
[86a8076e61603d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39ced8 +0  2B020000
[86a8076e616d21] jit-backend-dump}
[86a8076e619cbc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39ceec +0  33020000
[86a8076e61a9bf] jit-backend-dump}
[86a8076e61d968] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39cef5 +0  46020000
[86a8076e61e681] jit-backend-dump}
[86a8076e621927] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39733b +0  A15A0000
[86a8076e622606] jit-backend-dump}
[86a8076e626483] jit-backend}
[86a8076e62a00a] {jit-log-opt-bridge
# bridge out of Guard 0x331ff58 with 48 ops
[p0, p1]
+166: guard_class(p1, 16499664, descr=<Guard0x3378f80>) [p0, p1]
+178: p3 = getfield_gc_r(p1, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+182: guard_class(p0, 16435920, descr=<Guard0x3380728>) [p0, p1]
+194: p5 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+198: guard_nonnull_class(p5, ConstClass(ForwardLink), descr=<Guard0x3378fe0>) [p0, p1]
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
+217: p7 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+221: guard_nonnull(p7, descr=<Guard0x3380770>) [p0, p1]
+237: i9 = instance_ptr_eq(p7, ConstPtr(ptr8))
+240: guard_true(i9, descr=<Guard0x33807b8>) [p0, p1]
debug_merge_point(0, 0, '0')
+246: guard_class(p3, 16500368, descr=<Guard0x3380800>) [p0, p1]
+259: p11 = getfield_gc_r(p3, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+263: guard_class(p11, 16478072, descr=<Guard0x3380848>) [p0, p1]
+277: p13 = getfield_gc_r(p11, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand6)')
+282: p14 = getfield_gc_r(p11, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+287: p15 = getfield_gc_r(p14, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+291: guard_nonnull_class(p15, 16478072, descr=<Guard0x3379040>) [p0, p1]
+310: p17 = getfield_gc_r(p3, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+314: guard_nonnull_class(p17, 16471056, descr=<Guard0x33790a0>) [p0, p1]
+333: p19 = getfield_gc_r(p17, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+337: guard_nonnull_class(p19, 16471056, descr=<Guard0x3379100>) [p0, p1]
+356: i21 = getfield_gc_i(p17, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+360: p22 = getfield_gc_r(p3, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+364: guard_nonnull_class(p22, 16616448, descr=<Guard0x3379160>) [p0, p1]
+383: p24 = getfield_gc_r(p3, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+387: guard_nonnull(p24, descr=<Guard0x3380890>) [p0, p1]
+396: p25 = getfield_gc_r(p15, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+407: guard_value(p25, ConstPtr(ptr26), descr=<Guard0x33808d8>) [p0, p1]
+416: i27 = instance_ptr_eq(p11, p15)
+419: guard_true(i27, descr=<Guard0x3380920>) [p0, p1]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+425: p28 = new_with_vtable(descr=<SizeDescr 40>)
+469: p29 = new_with_vtable(descr=<SizeDescr 24>)
+480: setfield_gc(p29, i21, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+484: setfield_gc(p29, p22, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+488: p30 = new_with_vtable(descr=<SizeDescr 48>)
+499: setfield_gc(p28, p11, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+503: setfield_gc(p30, p5, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+507: setfield_gc(p28, p19, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+511: setfield_gc(p28, p29, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+515: setfield_gc(p28, p24, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+519: setfield_gc(p30, p13, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+523: setfield_gc(p30, p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+534: setfield_gc(p30, ConstPtr(ptr31), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+538: setfield_gc(p30, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+546: jump(p28, p30, descr=TargetToken(53317888))
+576: --end of the loop--
[86a8076e655fe1] jit-log-opt-bridge}
[86a8076e809fbe] {jit-backend
[86a8076e86d5d7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39d2a
[86a8076e875280] jit-backend-dump}
[86a8076e87fd63] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39d354 +0  25000000
[86a8076e881041] jit-backend-dump}
[86a8076e884cd2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39d585 +0  25000000
[86a8076e885b23] jit-backend-dump}
[86a8076e888cb3] {jit-backend-addr
bridge out of Guard 0x331f3d0 has address 0x7fb5ed39d350 to 0x7fb5ed39d580
       gc table: 0x7fb5ed39d2a0
    jump target: 0x7fb5ed39d350
         resops: 0x7fb5ed39d35e
       failures: 0x7fb5ed39d580
            end: 0x7fb5ed39d79f
[86a8076e88afec] jit-backend-addr}
[86a8076e88e436] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39d374 +0  4B020000
[86a8076e88f1e1] jit-backend-dump}
[86a8076e8923d0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39d385 +0  72020000
[86a8076e89306b] jit-backend-dump}
[86a8076e896134] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39d3a1 +0  72020000
[86a8076e896e28] jit-backend-dump}
[86a8076e899e02] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39d3b9 +0  76020000
[86a8076e89aac8] jit-backend-dump}
[86a8076e89da3e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39d3d5 +0  76020000
[86a8076e89e710] jit-backend-dump}
[86a8076e8a16b0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39d3ea +0  7D020000
[86a8076e8a2370] jit-backend-dump}
[86a8076e8a52e9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39d3f3 +0  90020000
[86a8076e8a5fac] jit-backend-dump}
[86a8076e8a8f34] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39d40f +0  90020000
[86a8076e8a9be7] jit-backend-dump}
[86a8076e8acb75] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39d427 +0  94020000
[86a8076e8ad841] jit-backend-dump}
[86a8076e8b07d6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39d434 +0  A3020000
[86a8076e8b1489] jit-backend-dump}
[86a8076e8b43e3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39d43d +0  B6020000
[86a8076e8b509d] jit-backend-dump}
[86a8076e8b802e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39d44a +0  C5020000
[86a8076e8b8cf1] jit-backend-dump}
[86a8076e8bbcb0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39d453 +0  D8020000
[86a8076e8bc970] jit-backend-dump}
[86a8076e8bf950] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39d46d +0  DA020000
[86a8076e8c0607] jit-backend-dump}
[86a8076e8c362b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39d47a +0  E9020000
[86a8076e8c4316] jit-backend-dump}
[86a8076e8c72b0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39d483 +0  FC020000
[86a8076e8c7f94] jit-backend-dump}
[86a8076e8cb13d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39592e +0  1E7A0000
[86a8076e8cbdf0] jit-backend-dump}
[86a8076e8cfcf5] jit-backend}
[86a8076e8d3692] {jit-log-opt-bridge
# bridge out of Guard 0x331f3d0 with 78 ops
[p0, p1, p2, p3, p4, p5]
+198: guard_nonnull_class(p1, 16471056, descr=<Guard0x33791c0>) [p0, p1, p4, p5]
+216: guard_not_invalidated(descr=<Guard0x3380968>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(CellRef(my-try) AppRand1 '() (cons (car x) z))')
+216: p7 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+220: guard_class(p7, 16478072, descr=<Guard0x33809b0>) [p0, p1, p4, p5]
+233: p9 = getfield_gc_r(p7, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+237: p10 = getfield_gc_r(p9, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+241: guard_nonnull_class(p10, 16478072, descr=<Guard0x3379220>) [p0, p1, p4, p5]
+261: p12 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+265: guard_nonnull_class(p12, 16471056, descr=<Guard0x3379280>) [p0, p1, p4, p5]
+285: i14 = getfield_gc_i(p12, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+289: p15 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+293: guard_nonnull_class(p15, 16471056, descr=<Guard0x33792e0>) [p0, p1, p4, p5]
+313: p17 = getfield_gc_r(p10, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+325: guard_value(p17, ConstPtr(ptr18), descr=<Guard0x33809f8>) [p0, p1, p4, p5]
+334: i19 = instance_ptr_eq(p7, p10)
+337: guard_true(i19, descr=<Guard0x3380a40>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) AppRand1 '() (cons (car x) z))')
debug_merge_point(0, 0, '(let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))')
debug_merge_point(0, 0, '(CellRef(ok?) (car x) 1 z)')
+343: p20 = getfield_gc_r(p7, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+347: p21 = getfield_gc_r(p20, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+352: guard_nonnull_class(p21, 16477696, descr=<Guard0x3379340>) [p0, p1, p4, p5]
+371: i23 = getfield_gc_i(p1, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+375: p24 = getfield_gc_r(p21, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+386: guard_value(p24, ConstPtr(ptr25), descr=<Guard0x3380a88>) [p0, p1, p4, p5]
+395: p26 = getfield_gc_r(p7, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)')
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
debug_merge_point(0, 0, '(+ row dist)')
+395: i28 = int_add_ovf(i23, 1)
+402: guard_no_overflow(descr=<Guard0x3380ad0>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+408: i29 = int_eq(i14, i28)
+411: guard_false(i29, descr=<Guard0x3380b18>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '(let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)))')
debug_merge_point(0, 0, '(- row dist)')
+417: i31 = int_sub_ovf(i23, 1)
+424: guard_no_overflow(descr=<Guard0x3380b60>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand6)')
+430: i32 = int_eq(i14, i31)
+433: guard_false(i32, descr=<Guard0x3380ba8>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)')
debug_merge_point(0, 0, '(let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed)))')
debug_merge_point(0, 0, '(+ dist 1)')
debug_merge_point(0, 0, '(CellRef(ok?) row AppRand8 (cdr placed))')
+439: p33 = getfield_gc_r(p21, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize1.inst__vals_0 24 pure>)
+443: p34 = getfield_gc_r(p33, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+447: guard_nonnull_class(p34, 16477696, descr=<Guard0x33793a0>) [p0, p1, p4, p5]
+465: p36 = getfield_gc_r(p34, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+469: guard_value(p36, ConstPtr(ptr37), descr=<Guard0x3380bf0>) [p0, p1, p4, p5]
+478: i38 = instance_ptr_eq(p21, p34)
+481: guard_true(i38, descr=<Guard0x3380c38>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) row AppRand8 (cdr placed))')
+487: p39 = new_with_vtable(descr=<SizeDescr 16>)
+531: p40 = new_with_vtable(descr=<SizeDescr 40>)
+542: p41 = new_with_vtable(descr=<SizeDescr 40>)
+553: setfield_gc(p41, p7, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+557: setfield_gc(p41, p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+568: setfield_gc(p41, ConstPtr(ptr42), descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+572: p43 = new_with_vtable(descr=<SizeDescr 24>)
+583: setfield_gc(p43, i14, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+587: setfield_gc(p43, p15, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+591: setfield_gc(p41, p43, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+595: p44 = new_with_vtable(descr=<SizeDescr 40>)
+606: setfield_gc(p44, p5, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+617: setfield_gc(p44, p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+621: setfield_gc(p44, p4, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+639: setfield_gc(p44, ConstPtr(ptr45), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+643: setfield_gc(p39, i23, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+647: setfield_gc(p40, p5, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+651: setfield_gc(p40, p41, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+655: setfield_gc(p40, p44, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+666: setfield_gc(p40, ConstPtr(ptr46), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+670: jump(p21, p39, 2, p15, p40, p5, i23, p33, p34, descr=TargetToken(52788208))
+736: --end of the loop--
[86a8076e912d78] jit-log-opt-bridge}
[86a8076eb030dc] {jit-backend
[86a8076eb7c005] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39d
[86a8076eb85939] jit-backend-dump}
[86a8076eb90640] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39da54 +0  25000000
[86a8076eb91970] jit-backend-dump}
[86a8076eb9560b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39dd75 +0  25000000
[86a8076eb964c9] jit-backend-dump}
[86a8076eb99702] {jit-backend-addr
bridge out of Guard 0x331f100 has address 0x7fb5ed39da50 to 0x7fb5ed39dd70
       gc table: 0x7fb5ed39d960
    jump target: 0x7fb5ed39da50
         resops: 0x7fb5ed39da5e
       failures: 0x7fb5ed39dd70
            end: 0x7fb5ed39e065
[86a8076eb9bb42] jit-backend-addr}
[86a8076eb9eea6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39da6e +0  53030000
[86a8076eb9fd86] jit-backend-dump}
[86a8076eba2fb8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39da7b +0  62030000
[86a8076eba3caf] jit-backend-dump}
[86a8076eba6d26] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39da8b +0  6E030000
[86a8076eba7a1d] jit-backend-dump}
[86a8076ebaaa96] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39da98 +0  7D030000
[86a8076ebab768] jit-backend-dump}
[86a8076ebae7ba] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39daac +0  85030000
[86a8076ebaf4a5] jit-backend-dump}
[86a8076ebb2613] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39dac1 +0  A8030000
[86a8076ebb32d3] jit-backend-dump}
[86a8076ebb6387] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39dad8 +0  AD030000
[86a8076ebb7074] jit-backend-dump}
[86a8076ebba0fa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39dae6 +0  BB030000
[86a8076ebbadd6] jit-backend-dump}
[86a8076ebbde3a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39dafe +0  BF030000
[86a8076ebbeb21] jit-backend-dump}
[86a8076ebc1bcc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39db15 +0  C4030000
[86a8076ebc28db] jit-backend-dump}
[86a8076ebc593c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39db23 +0  D2030000
[86a8076ebc665b] jit-backend-dump}
[86a8076ebc96ed] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39db9e +0  73030000
[86a8076ebca3e4] jit-backend-dump}
[86a8076ebcd433] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39dbb0 +0  7D030000
[86a8076ebce164] jit-backend-dump}
[86a8076ebd1224] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39dbc9 +0  80030000
[86a8076ebd1f33] jit-backend-dump}
[86a8076ebd4f7c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39dbe5 +0  80030000
[86a8076ebd5c63] jit-backend-dump}
[86a8076ebd8d17] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39dc07 +0  7A030000
[86a8076ebd99e3] jit-backend-dump}
[86a8076ebdca32] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39dc1b +0  82030000
[86a8076ebdd74a] jit-backend-dump}
[86a8076ebe0882] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39dc24 +0  95030000
[86a8076ebe15a6] jit-backend-dump}
[86a8076ebe45ec] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39dc3f +0  96030000
[86a8076ebe52dd] jit-backend-dump}
[86a8076ebe8378] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39dc57 +0  9A030000
[86a8076ebe9044] jit-backend-dump}
[86a8076ebec099] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39dc69 +0  A4030000
[86a8076ebecd77] jit-backend-dump}
[86a8076ebefe28] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39dc72 +0  B7030000
[86a8076ebf0afa] jit-backend-dump}
[86a8076ebf3b3d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39dc89 +0  BC030000
[86a8076ebf481b] jit-backend-dump}
[86a8076ebf7b45] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed395768 +0  E4820000
[86a8076ebf87dd] jit-backend-dump}
[86a8076ebfc743] jit-backend}
[86a8076ec00301] {jit-log-opt-bridge
# bridge out of Guard 0x331f100 with 93 ops
[p0, p1]
+262: guard_class(p1, 16500368, descr=<Guard0x3379400>) [p0, p1]
+274: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+278: guard_nonnull(p3, descr=<Guard0x3380c80>) [p0, p1]
+294: i5 = instance_ptr_eq(p3, ConstPtr(ptr4))
+297: guard_true(i5, descr=<Guard0x3380cc8>) [p0, p1]
debug_merge_point(0, 0, '#t')
+303: guard_class(p0, 16435920, descr=<Guard0x3380d10>) [p0, p1]
+316: p7 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+327: guard_value(p7, ConstPtr(ptr8), descr=<Guard0x3380d58>) [p0, p1]
+336: p9 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+340: guard_not_invalidated(descr=<Guard0x3380da0>) [p0, p1]
+340: p10 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (CellRef(ok?) row AppRand8 (cdr placed))')
+344: guard_class(p10, 16435920, descr=<Guard0x3380de8>) [p0, p1]
+357: p12 = getfield_gc_r(p10, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+361: guard_nonnull_class(p12, ConstClass(ForwardLink), descr=<Guard0x3379460>) [p0, p1]
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '(let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z)))')
debug_merge_point(0, 0, '(append (cdr x) y)')
+380: guard_class(p9, 16500368, descr=<Guard0x3380e30>) [p0, p1]
+394: p15 = getfield_gc_r(p9, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+399: guard_nonnull_class(p15, 16471056, descr=<Guard0x33794c0>) [p0, p1]
+418: p17 = getfield_gc_r(p15, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+422: guard_nonnull_class(p17, 16471056, descr=<Guard0x3379520>) [p0, p1]
+441: p19 = getfield_gc_r(p9, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+446: guard_nonnull(p19, descr=<Guard0x3380e78>) [p0, p1]
+455: p21 = call_r(ConstClass(append_two), p17, p19, descr=<Callr 8 rr EF=5>)
+563: guard_no_exception(descr=<Guard0x3379580>) [p9, p21, p19, p17, p10, p12]
+578: guard_nonnull_class(p21, 16471056, descr=<Guard0x33795e0>) [p9, p21, p19, p17, p10, p12]
debug_merge_point(0, 0, '(CellRef(my-try) AppRand1 '() (cons (car x) z))')
+596: p23 = getfield_gc_r(p9, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+607: guard_class(p23, 16478072, descr=<Guard0x3380ec0>) [p9, p21, p19, p17, p10, p12]
+621: p25 = getfield_gc_r(p23, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+626: p26 = getfield_gc_r(p25, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+630: guard_nonnull_class(p26, 16478072, descr=<Guard0x3379640>) [p9, p21, p19, p17, p10, p12]
+649: i28 = getfield_gc_i(p15, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+660: p29 = getfield_gc_r(p9, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+664: guard_nonnull_class(p29, 16471056, descr=<Guard0x33796a0>) [p9, p21, p19, p17, p10, p12]
+683: p31 = getfield_gc_r(p26, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+694: guard_value(p31, ConstPtr(ptr32), descr=<Guard0x3380f08>) [p9, p21, p19, p17, p10, p12]
+703: i33 = instance_ptr_eq(p23, p26)
+706: guard_true(i33, descr=<Guard0x3380f50>) [p9, p21, p19, p17, p10, p12]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) AppRand1 '() (cons (car x) z))')
debug_merge_point(0, 0, '(let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))')
debug_merge_point(0, 0, '(CellRef(ok?) (car x) 1 z)')
+712: p34 = getfield_gc_r(p23, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+717: p35 = getfield_gc_r(p34, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+721: guard_nonnull_class(p35, 16477696, descr=<Guard0x3379700>) [p9, p21, p19, p17, p10, p12]
+739: i37 = getfield_gc_i(p21, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+743: p38 = getfield_gc_r(p35, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+754: guard_value(p38, ConstPtr(ptr39), descr=<Guard0x3380f98>) [p9, p21, p19, p17, p10, p12]
+763: p40 = getfield_gc_r(p23, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)')
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
debug_merge_point(0, 0, '(+ row dist)')
+768: i42 = int_add_ovf(i37, 1)
+775: guard_no_overflow(descr=<Guard0x3380fe0>) [p9, p21, p19, p17, p10, p12]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+781: i43 = int_eq(i28, i42)
+784: guard_true(i43, descr=<Guard0x3381028>) [p9, p21, p19, p17, p10, p12]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '#f')
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand4)')
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand4)')
+790: p44 = getfield_gc_r(p21, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+794: guard_nonnull_class(p44, 16471056, descr=<Guard0x3379760>) [p9, p21, p19, p17, p10, p12]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+813: p46 = new_with_vtable(descr=<SizeDescr 40>)
+857: p47 = new_with_vtable(descr=<SizeDescr 24>)
+868: setfield_gc(p47, i37, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+872: setfield_gc(p47, ConstPtr(ptr48), descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+883: p49 = new_with_vtable(descr=<SizeDescr 24>)
+894: setfield_gc(p49, i28, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+898: setfield_gc(p49, p29, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+902: p50 = new_with_vtable(descr=<SizeDescr 48>)
+913: p51 = new_with_vtable(descr=<SizeDescr 40>)
+924: setfield_gc(p51, p12, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+935: setfield_gc(p51, p9, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+939: setfield_gc(p51, p10, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+957: setfield_gc(p51, ConstPtr(ptr52), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+961: setfield_gc(p46, p49, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+972: setfield_gc(p50, ConstPtr(ptr53), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+976: setfield_gc(p50, p40, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+980: setfield_gc(p50, p51, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+984: setfield_gc(p50, p12, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+988: setfield_gc(p46, p44, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+992: setfield_gc(p46, p47, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+996: setfield_gc(p46, p23, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1000: setfield_gc(p50, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+1008: jump(p46, p50, descr=TargetToken(53317888))
+1040: --end of the loop--
[86a8076ec52ad1] jit-log-opt-bridge}
[86a8076ee33def] {jit-backend
[86a8076ee9fadc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39e200 +0  0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8C2202000048FF0425101A33034D8B77084D89F44D01CE0F80000000004D8B42084983F8017207418138900F00000F85000000004D8B45084D39F00F84000000004D29CC0F80000000004D39E00F85000000004D8B62204C8B05F9FEFFFF4D39C40F85000000004D8B42104D8B621841813C24201600000F85000000004D8B7424084983FE01720741813E900F00000F8500000000418138D00C01000F8500000000498B7808813FB8B500000F8500000000488B7708488B5F20488B53084883FA017206813AB8B500000F8500000000498B40104883F80172068138509A00000F8500000000488B48104883F90172068139509A00000F85000000004C89A5380100004C8B6008498B40184883F80172068138509A00000F85000000004C89B5400100004D8B70204983FE01720741813E509A00000F85000000004C8B42104889BD50010000488B3D62FEFFFF4939F80F8500000000483995500100000F85000000004C8B95500100004D8B7A184D85FF0F8400000000458B2F4E8B2C2DC0B9FA004981ED2C0300004983FD010F83000000004D8B6F084983FD01720841817D0040B400000F85000000004D8B4D10488B3D29FEFFFF4939F90F8500000000498B7E0849BBFEFFFFFFFFFFFF7F4C39DF0F8F000000004C8995480100004D89E24C89B5300100004989F64C89BD500100004C89AD580100004989FD48899D60010000488995680100004889B5700100004889CE488B9D3801000049BB006439EDB57F000041FFE348C7442408FFFFFF0049BB78E039EDB57F00004C895D204D8D9B7842FFFF41FFD3E9B8FDFFFFFF35D4FCFFFF49BB88E039EDB57F000041534D8D9B783FFFFF41FFE3FF35C0FCFFFF49BB98E039EDB57F000041534D8D9B683FFFFF41FFE3FF35ACFCFFFF49BBA8E039EDB57F000041534D8D9B583FFFFF41FFE3FF3598FCFFFF49BBB8E039EDB57F000041534D8D9B483FFFFF41FFE3FF3584FCFFFF49BBC8E039EDB57F000041534D8D9B383FFFFF41FFE3FF3570FCFFFF49BBD8E039EDB57F000041534D8D9B283FFFFF41FFE3FF3564FCFFFF49BBE8E039EDB57F000041534D8D9B183FFFFF41FFE3FF3550FCFFFF49BBF8E039EDB57F000041534D8D9B083FFFFF41FFE3FF353CFCFFFF49BB08E139EDB57F000041534D8D9BF83EFFFF41FFE3FF3528FCFFFF49BB18E139EDB57F000041534D8D9BE83EFFFF41FFE3FF3514FCFFFF49BB28E139EDB57F000041534D8D9BD83EFFFF41FFE3FF3500FCFFFF49BB38E139EDB57F000041534D8D9BC83EFFFF41FFE3FF35ECFBFFFF49BB48E139EDB57F000041534D8D9BB83EFFFF41FFE3FF35D8FBFFFF49BB58E139EDB57F000041534D8D9BA83EFFFF41FFE3FF35C4FBFFFF49BB68E139EDB57F000041534D8D9B983EFFFF41FFE3FF35B0FBFFFF49BB78E139EDB57F000041534D8D9B883EFFFF41FFE3FF35A4FBFFFF49BB88E139EDB57F000041534D8D9B783EFFFF41FFE3FF3590FBFFFF49BB98E139EDB57F000041534D8D9B683EFFFF41FFE3FF357CFBFFFF49BBA8E139EDB57F000041534D8D9B583EFFFF41FFE3FF3568FBFFFF49BBB8E139EDB57F000041534D8D9B483EFFFF41FFE3FF3554FBFFFF49BBC8E139EDB57F000041534D8D9B383EFFFF41FFE3FF3548FBFFFF49BBD8E139EDB57F000041534D8D9B283EFFFF41FFE3FF3534FBFFFF49BBE8E139EDB57F000041534D8D9B183EFFFF41FFE3
[86a8076eea814b] jit-backend-dump}
[86a8076eeb2dbf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39e2d4 +0  25000000
[86a8076eeb42b7] jit-backend-dump}
[86a8076eeb7f2d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39e505 +0  25000000
[86a8076eeb8d99] jit-backend-dump}
[86a8076eebc045] {jit-backend-addr
bridge out of Guard 0x323f640 has address 0x7fb5ed39e2d0 to 0x7fb5ed39e500
       gc table: 0x7fb5ed39e200
    jump target: 0x7fb5ed39e2d0
         resops: 0x7fb5ed39e2de
       failures: 0x7fb5ed39e500
            end: 0x7fb5ed39e7aa
[86a8076eebe452] jit-backend-addr}
[86a8076eec1d7e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39e2f2 +0  4C020000
[86a8076eec2ba4] jit-backend-dump}
[86a8076eec5db4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39e309 +0  51020000
[86a8076eec6ae8] jit-backend-dump}
[86a8076eec9b77] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39e316 +0  60020000
[86a8076eeca86b] jit-backend-dump}
[86a8076eecd8fa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39e31f +0  73020000
[86a8076eece5ba] jit-backend-dump}
[86a8076eed1671] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39e328 +0  86020000
[86a8076eed234c] jit-backend-dump}
[86a8076eed53f0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39e33c +0  8E020000
[86a8076eed60b3] jit-backend-dump}
[86a8076eed9142] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39e352 +0  94020000
[86a8076eed9e05] jit-backend-dump}
[86a8076eedcebf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39e36a +0  98020000
[86a8076eeddb60] jit-backend-dump}
[86a8076eee0bef] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39e377 +0  A7020000
[86a8076eee18a0] jit-backend-dump}
[86a8076eee4913] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39e387 +0  B3020000
[86a8076eee55c1] jit-backend-dump}
[86a8076eee864d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39e3a5 +0  B1020000
[86a8076eee92f7] jit-backend-dump}
[86a8076eeec377] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39e3bb +0  B7020000
[86a8076eeed012] jit-backend-dump}
[86a8076eef010c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39e3d1 +0  BD020000
[86a8076eef0dc6] jit-backend-dump}
[86a8076eef3ec6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39e3f2 +0  B8020000
[86a8076eef4b61] jit-backend-dump}
[86a8076eef7bf6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39e410 +0  B6020000
[86a8076eef88b3] jit-backend-dump}
[86a8076eefb945] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39e42b +0  B7020000
[86a8076eefc5e6] jit-backend-dump}
[86a8076eeff675] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39e438 +0  C6020000
[86a8076ef00332] jit-backend-dump}
[86a8076ef0341d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39e44c +0  CE020000
[86a8076ef040e9] jit-backend-dump}
[86a8076ef07187] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39e468 +0  CE020000
[86a8076ef07e96] jit-backend-dump}
[86a8076ef0af84] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39e480 +0  D2020000
[86a8076ef0bc28] jit-backend-dump}
[86a8076ef0ed07] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39e494 +0  DA020000
[86a8076ef0f9b4] jit-backend-dump}
[86a8076ef12a71] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39e4ab +0  DF020000
[86a8076ef13728] jit-backend-dump}
[86a8076ef16a21] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39506c +0  60920000
[86a8076ef176e1] jit-backend-dump}
[86a8076ef1b7f6] jit-backend}
[86a8076ef1f472] {jit-log-opt-bridge
# bridge out of Guard 0x323f640 with 65 ops
[i0, p1, p2, p3, p4, p5]
+230: guard_not_invalidated(descr=<Guard0x33797c0>) [i0, p1, p2, p3, p4, p5]
+230: i6 = getfield_gc_i(p2, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+234: i7 = int_add_ovf(i6, i0)
+240: guard_no_overflow(descr=<Guard0x3381070>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
+246: p8 = getfield_gc_r(p4, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+250: guard_nonnull_class(p8, ConstClass(ForwardLink), descr=<Guard0x3379820>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+269: i10 = getfield_gc_i(p1, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+273: i11 = int_eq(i10, i7)
+276: guard_false(i11, descr=<Guard0x33810b8>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '(let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)))')
debug_merge_point(0, 0, '(- row dist)')
+282: i12 = int_sub_ovf(i6, i0)
+285: guard_no_overflow(descr=<Guard0x3381100>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand6)')
+291: i13 = int_eq(i10, i12)
+294: guard_true(i13, descr=<Guard0x3381148>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)')
debug_merge_point(0, 0, '#f')
+300: p14 = getfield_gc_r(p4, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+311: guard_value(p14, ConstPtr(ptr15), descr=<Guard0x3381190>) [i0, p1, p2, p3, p4, p5]
+320: p16 = getfield_gc_r(p4, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+324: p17 = getfield_gc_r(p4, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand6)')
+328: guard_class(p17, 16437216, descr=<Guard0x33811d8>) [i0, p1, p2, p3, p4, p5]
+342: p19 = getfield_gc_r(p17, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+347: guard_nonnull_class(p19, ConstClass(ForwardLink), descr=<Guard0x3379880>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
+366: guard_class(p16, 16500368, descr=<Guard0x3381220>) [i0, p1, p2, p3, p4, p5]
+379: p22 = getfield_gc_r(p16, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+383: guard_class(p22, 16478072, descr=<Guard0x3381268>) [i0, p1, p2, p3, p4, p5]
+395: p24 = getfield_gc_r(p22, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand6)')
+399: p25 = getfield_gc_r(p22, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+403: p26 = getfield_gc_r(p25, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+407: guard_nonnull_class(p26, 16478072, descr=<Guard0x33798e0>) [i0, p1, p2, p3, p4, p5]
+425: p28 = getfield_gc_r(p16, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+429: guard_nonnull_class(p28, 16471056, descr=<Guard0x3379940>) [i0, p1, p2, p3, p4, p5]
+447: p30 = getfield_gc_r(p28, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+451: guard_nonnull_class(p30, 16471056, descr=<Guard0x33799a0>) [i0, p1, p2, p3, p4, p5]
+469: i32 = getfield_gc_i(p28, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+480: p33 = getfield_gc_r(p16, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+484: guard_nonnull_class(p33, 16471056, descr=<Guard0x3379a00>) [i0, p1, p2, p3, p4, p5]
+502: p35 = getfield_gc_r(p16, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+513: guard_nonnull_class(p35, 16471056, descr=<Guard0x3379a60>) [i0, p1, p2, p3, p4, p5]
+532: p37 = getfield_gc_r(p26, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+550: guard_value(p37, ConstPtr(ptr38), descr=<Guard0x33812b0>) [i0, p1, p2, p3, p4, p5]
+559: i39 = instance_ptr_eq(p22, p26)
+566: guard_true(i39, descr=<Guard0x33812f8>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+572: p40 = getfield_gc_r(p22, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+583: guard_nonnull(p40, descr=<Guard0x3379ac0>) [p33, i32, p35, p30, p22, p17, p24, p19, None, None, None, None, None, None]
+592: guard_subclass(p40, ConstClass(W_Cell), descr=<Guard0x3379b20>) [p33, i32, p35, p30, p22, p17, p24, p19, None, None, None, None, None, None]
+620: p43 = getfield_gc_r(p40, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+624: guard_nonnull_class(p43, 16477696, descr=<Guard0x3379b80>) [p33, i32, p35, p30, p22, p17, p24, p19, None, None, None, None, None, None]
+644: p45 = getfield_gc_r(p43, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+655: guard_value(p45, ConstPtr(ptr46), descr=<Guard0x3379be0>) [p33, i32, p35, p30, p22, p17, p24, p19, None, None, None, None, None, None]
+664: i47 = getfield_gc_i(p35, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+668: i49 = int_le(i47, 9223372036854775806)
+681: guard_true(i49, descr=<Guard0x3379c40>) [p33, i32, p35, p30, p22, p17, p24, p19, None, None, None, None, None, None]
+687: jump(p22, p30, i32, p33, p35, p19, p24, p17, p40, p43, i47, p25, p26, p24, descr=TargetToken(53317968))
+768: --end of the loop--
[86a8076ef60646] jit-log-opt-bridge}
[86a8076f165757] {jit-backend
[86a8076f1cb032] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39e
[86a8076f1d2cb0] jit-backend-dump}
[86a8076f1ddc8c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39e9b4 +0  25000000
[86a8076f1df10a] jit-backend-dump}
[86a8076f1e2ee5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39ebb5 +0  25000000
[86a8076f1e3dd2] jit-backend-dump}
[86a8076f1e70af] {jit-backend-addr
bridge out of Guard 0x331ed58 has address 0x7fb5ed39e9b0 to 0x7fb5ed39ebb0
       gc table: 0x7fb5ed39e900
    jump target: 0x7fb5ed39e9b0
         resops: 0x7fb5ed39e9be
       failures: 0x7fb5ed39ebb0
            end: 0x7fb5ed39edeb
[86a8076f1e9545] jit-backend-addr}
[86a8076f1ecaeb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39e9d2 +0  39020000
[86a8076f1ed8e6] jit-backend-dump}
[86a8076f1f0a3f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39e9e9 +0  3E020000
[86a8076f1f1761] jit-backend-dump}
[86a8076f1f47f9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39e9f6 +0  4D020000
[86a8076f1f54e0] jit-backend-dump}
[86a8076f1f864c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39e9ff +0  60020000
[86a8076f1f9349] jit-backend-dump}
[86a8076f1fc342] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39ea08 +0  73020000
[86a8076f1fd008] jit-backend-dump}
[86a8076f1fffc4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39ea1c +0  7B020000
[86a8076f200cb4] jit-backend-dump}
[86a8076f203c61] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39ea32 +0  81020000
[86a8076f204949] jit-backend-dump}
[86a8076f2078f8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39ea4a +0  85020000
[86a8076f2085e3] jit-backend-dump}
[86a8076f20b574] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39ea57 +0  94020000
[86a8076f20c231] jit-backend-dump}
[86a8076f20f17f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39ea67 +0  A0020000
[86a8076f20fe57] jit-backend-dump}
[86a8076f212e0d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39ea85 +0  9E020000
[86a8076f213abd] jit-backend-dump}
[86a8076f216a0e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39ea9b +0  A4020000
[86a8076f2176fc] jit-backend-dump}
[86a8076f21a693] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39eab1 +0  AA020000
[86a8076f21b35c] jit-backend-dump}
[86a8076f21e2cc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39eacb +0  AC020000
[86a8076f21efb6] jit-backend-dump}
[86a8076f221f8b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39eadf +0  B4020000
[86a8076f222c91] jit-backend-dump}
[86a8076f225c41] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39eafa +0  B5020000
[86a8076f22693e] jit-backend-dump}
[86a8076f2298d8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39eb03 +0  C8020000
[86a8076f22a595] jit-backend-dump}
[86a8076f22d81c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed394ff0 +0  BC990000
[86a8076f22e4c7] jit-backend-dump}
[86a8076f2322f2] jit-backend}
[86a8076f235e85] {jit-log-opt-bridge
# bridge out of Guard 0x331ed58 with 69 ops
[i0, p1, p2, p3, p4, p5]
+198: guard_not_invalidated(descr=<Guard0x3379ca0>) [i0, p1, p2, p3, p4, p5]
+198: i6 = getfield_gc_i(p2, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+202: i7 = int_add_ovf(i6, i0)
+208: guard_no_overflow(descr=<Guard0x3381340>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
+214: p8 = getfield_gc_r(p4, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+218: guard_nonnull_class(p8, ConstClass(ForwardLink), descr=<Guard0x3379d00>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+237: i10 = getfield_gc_i(p1, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+241: i11 = int_eq(i10, i7)
+244: guard_false(i11, descr=<Guard0x3381388>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '(let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)))')
debug_merge_point(0, 0, '(- row dist)')
+250: i12 = int_sub_ovf(i6, i0)
+253: guard_no_overflow(descr=<Guard0x33813d0>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand6)')
+259: i13 = int_eq(i10, i12)
+262: guard_true(i13, descr=<Guard0x3381418>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)')
debug_merge_point(0, 0, '#f')
+268: p14 = getfield_gc_r(p4, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+279: guard_value(p14, ConstPtr(ptr15), descr=<Guard0x3381460>) [i0, p1, p2, p3, p4, p5]
+288: p16 = getfield_gc_r(p4, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+292: p17 = getfield_gc_r(p4, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand6)')
+296: guard_class(p17, 16435920, descr=<Guard0x33814a8>) [i0, p1, p2, p3, p4, p5]
+310: p19 = getfield_gc_r(p17, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+315: guard_nonnull_class(p19, ConstClass(ForwardLink), descr=<Guard0x3379d60>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
+334: guard_class(p16, 16500368, descr=<Guard0x33814f0>) [i0, p1, p2, p3, p4, p5]
+347: p22 = getfield_gc_r(p16, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+351: guard_class(p22, 16478072, descr=<Guard0x3381538>) [i0, p1, p2, p3, p4, p5]
+363: p24 = getfield_gc_r(p22, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand6)')
+367: p25 = getfield_gc_r(p22, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+371: p26 = getfield_gc_r(p25, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+375: guard_nonnull_class(p26, 16478072, descr=<Guard0x3379dc0>) [i0, p1, p2, p3, p4, p5]
+393: p28 = getfield_gc_r(p16, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+397: guard_nonnull_class(p28, 16471056, descr=<Guard0x3379e20>) [i0, p1, p2, p3, p4, p5]
+415: p30 = getfield_gc_r(p28, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+419: guard_nonnull_class(p30, 16471056, descr=<Guard0x3379e80>) [i0, p1, p2, p3, p4, p5]
+437: i32 = getfield_gc_i(p28, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+441: p33 = getfield_gc_r(p16, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+445: guard_nonnull_class(p33, 16616448, descr=<Guard0x3379ee0>) [i0, p1, p2, p3, p4, p5]
+463: p35 = getfield_gc_r(p16, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+474: guard_nonnull(p35, descr=<Guard0x3381580>) [i0, p1, p2, p3, p4, p5]
+483: p36 = getfield_gc_r(p26, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+501: guard_value(p36, ConstPtr(ptr37), descr=<Guard0x33815c8>) [i0, p1, p2, p3, p4, p5]
+510: i38 = instance_ptr_eq(p22, p26)
+513: guard_true(i38, descr=<Guard0x3381610>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+519: p39 = new_with_vtable(descr=<SizeDescr 40>)
+563: p40 = new_with_vtable(descr=<SizeDescr 24>)
+574: setfield_gc(p40, i32, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+578: setfield_gc(p40, p33, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+582: p41 = new_with_vtable(descr=<SizeDescr 48>)
+593: setfield_gc(p41, p19, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+604: setfield_gc(p41, ConstPtr(ptr42), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+608: setfield_gc(p41, p24, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+612: setfield_gc(p41, p17, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+616: setfield_gc(p39, p22, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+620: setfield_gc(p39, p30, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+631: setfield_gc(p39, p40, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+635: setfield_gc(p39, p35, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+646: setfield_gc(p41, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+654: jump(p39, p41, descr=TargetToken(53317888))
+688: --end of the loop--
[86a8076f274d04] jit-log-opt-bridge}
[86a8076f49f238] {jit-backend
[86a8076f525efd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39efd
[86a8076f52fc91] jit-backend-dump}
[86a8076f53acea] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39f0d4 +0  25000000
[86a8076f53c1a8] jit-backend-dump}
[86a8076f5400a9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39f415 +0  25000000
[86a8076f541022] jit-backend-dump}
[86a8076f5444d7] {jit-backend-addr
bridge out of Guard 0x323f820 has address 0x7fb5ed39f0d0 to 0x7fb5ed39f410
       gc table: 0x7fb5ed39efd0
    jump target: 0x7fb5ed39f0d0
         resops: 0x7fb5ed39f0de
       failures: 0x7fb5ed39f410
            end: 0x7fb5ed39f73d
[86a8076f546a58] jit-backend-addr}
[86a8076f54a02c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39f0ee +0  73030000
[86a8076f54aee5] jit-backend-dump}
[86a8076f54e1d5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39f0fb +0  82030000
[86a8076f54ef5e] jit-backend-dump}
[86a8076f552040] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39f10b +0  8E030000
[86a8076f552d74] jit-backend-dump}
[86a8076f555e37] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39f118 +0  9D030000
[86a8076f556b8a] jit-backend-dump}
[86a8076f559bd8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39f12c +0  A5030000
[86a8076f55a909] jit-backend-dump}
[86a8076f55da5c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39f141 +0  C8030000
[86a8076f55e799] jit-backend-dump}
[86a8076f5618e6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39f158 +0  CD030000
[86a8076f562605] jit-backend-dump}
[86a8076f565669] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39f166 +0  DB030000
[86a8076f56639d] jit-backend-dump}
[86a8076f5693fe] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39f17e +0  DF030000
[86a8076f56a12c] jit-backend-dump}
[86a8076f56d12b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39f195 +0  E4030000
[86a8076f56de3e] jit-backend-dump}
[86a8076f570e74] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39f1a3 +0  F2030000
[86a8076f571b74] jit-backend-dump}
[86a8076f574bba] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39f21e +0  93030000
[86a8076f575898] jit-backend-dump}
[86a8076f5788d4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39f230 +0  9D030000
[86a8076f5795ed] jit-backend-dump}
[86a8076f57c63f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39f249 +0  A0030000
[86a8076f57d33c] jit-backend-dump}
[86a8076f58034d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39f265 +0  A0030000
[86a8076f581066] jit-backend-dump}
[86a8076f58406e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39f287 +0  9A030000
[86a8076f584db2] jit-backend-dump}
[86a8076f587e16] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39f29b +0  A2030000
[86a8076f588b31] jit-backend-dump}
[86a8076f58bb62] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39f2a4 +0  B5030000
[86a8076f58c899] jit-backend-dump}
[86a8076f58f8bd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39f2bf +0  B6030000
[86a8076f5905b0] jit-backend-dump}
[86a8076f5935d4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39f2d7 +0  BA030000
[86a8076f5942d1] jit-backend-dump}
[86a8076f5972ec] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39f2e9 +0  C4030000
[86a8076f597fe9] jit-backend-dump}
[86a8076f59affe] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39f2f2 +0  D7030000
[86a8076f59bd29] jit-backend-dump}
[86a8076f59ed6e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39f2ff +0  E6030000
[86a8076f59fa8a] jit-backend-dump}
[86a8076f5a2a95] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39f308 +0  F9030000
[86a8076f5a37a5] jit-backend-dump}
[86a8076f5a67d8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39f31f +0  FE030000
[86a8076f5a74fd] jit-backend-dump}
[86a8076f5aa7a0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3957ba +0  12990000
[86a8076f5ab49a] jit-backend-dump}
[86a8076f5af37c] jit-backend}
[86a8076f5b2e95] {jit-log-opt-bridge
# bridge out of Guard 0x323f820 with 102 ops
[p0, p1]
+278: guard_class(p1, 16500368, descr=<Guard0x3379f40>) [p0, p1]
+290: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+294: guard_nonnull(p3, descr=<Guard0x3381658>) [p0, p1]
+310: i5 = instance_ptr_eq(p3, ConstPtr(ptr4))
+313: guard_true(i5, descr=<Guard0x33816a0>) [p0, p1]
debug_merge_point(0, 0, '#t')
+319: guard_class(p0, 16435920, descr=<Guard0x33816e8>) [p0, p1]
+332: p7 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+343: guard_value(p7, ConstPtr(ptr8), descr=<Guard0x3381730>) [p0, p1]
+352: p9 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+356: guard_not_invalidated(descr=<Guard0x3381778>) [p0, p1]
+356: p10 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (CellRef(ok?) row AppRand8 (cdr placed))')
+360: guard_class(p10, 16437216, descr=<Guard0x33817c0>) [p0, p1]
+373: p12 = getfield_gc_r(p10, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+377: guard_nonnull_class(p12, ConstClass(ForwardLink), descr=<Guard0x3379fa0>) [p0, p1]
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '(let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z)))')
debug_merge_point(0, 0, '(append (cdr x) y)')
+396: guard_class(p9, 16500368, descr=<Guard0x3381808>) [p0, p1]
+410: p15 = getfield_gc_r(p9, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+415: guard_nonnull_class(p15, 16471056, descr=<Guard0x3392020>) [p0, p1]
+434: p17 = getfield_gc_r(p15, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+438: guard_nonnull_class(p17, 16616448, descr=<Guard0x3392080>) [p0, p1]
+457: p19 = getfield_gc_r(p9, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+462: guard_nonnull(p19, descr=<Guard0x3381850>) [p0, p1]
+471: p21 = call_r(ConstClass(append_two), p17, p19, descr=<Callr 8 rr EF=5>)
+579: guard_no_exception(descr=<Guard0x33920e0>) [p9, p21, p19, p17, p10, p12]
+594: guard_nonnull_class(p21, 16471056, descr=<Guard0x3392140>) [p9, p21, p19, p17, p10, p12]
debug_merge_point(0, 0, '(CellRef(my-try) AppRand1 '() (cons (car x) z))')
+612: p23 = getfield_gc_r(p9, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+623: guard_class(p23, 16478072, descr=<Guard0x3381898>) [p9, p21, p19, p17, p10, p12]
+637: p25 = getfield_gc_r(p23, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+642: p26 = getfield_gc_r(p25, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+646: guard_nonnull_class(p26, 16478072, descr=<Guard0x33921a0>) [p9, p21, p19, p17, p10, p12]
+665: i28 = getfield_gc_i(p15, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+676: p29 = getfield_gc_r(p9, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+680: guard_nonnull_class(p29, 16471056, descr=<Guard0x3392200>) [p9, p21, p19, p17, p10, p12]
+699: p31 = getfield_gc_r(p26, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+710: guard_value(p31, ConstPtr(ptr32), descr=<Guard0x33818e0>) [p9, p21, p19, p17, p10, p12]
+719: i33 = instance_ptr_eq(p23, p26)
+722: guard_true(i33, descr=<Guard0x3381928>) [p9, p21, p19, p17, p10, p12]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) AppRand1 '() (cons (car x) z))')
debug_merge_point(0, 0, '(let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))')
debug_merge_point(0, 0, '(CellRef(ok?) (car x) 1 z)')
+728: p34 = getfield_gc_r(p23, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+733: p35 = getfield_gc_r(p34, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+737: guard_nonnull_class(p35, 16477696, descr=<Guard0x3392260>) [p9, p21, p19, p17, p10, p12]
+755: i37 = getfield_gc_i(p21, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+759: p38 = getfield_gc_r(p35, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+770: guard_value(p38, ConstPtr(ptr39), descr=<Guard0x3381970>) [p9, p21, p19, p17, p10, p12]
+779: p40 = getfield_gc_r(p23, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)')
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
debug_merge_point(0, 0, '(+ row dist)')
+784: i42 = int_add_ovf(i37, 1)
+791: guard_no_overflow(descr=<Guard0x33819b8>) [p9, p21, p19, p17, p10, p12]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+797: i43 = int_eq(i28, i42)
+800: guard_false(i43, descr=<Guard0x3381a00>) [p9, p21, p19, p17, p10, p12]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '(let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)))')
debug_merge_point(0, 0, '(- row dist)')
+806: i45 = int_sub_ovf(i37, 1)
+813: guard_no_overflow(descr=<Guard0x3381a48>) [p9, p21, p19, p17, p10, p12]
debug_merge_point(0, 0, '(let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand6)')
+819: i46 = int_eq(i28, i45)
+822: guard_true(i46, descr=<Guard0x3381a90>) [p9, p21, p19, p17, p10, p12]
debug_merge_point(0, 0, '(if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)')
debug_merge_point(0, 0, '#f')
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand6)')
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand6)')
+828: p47 = getfield_gc_r(p21, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+832: guard_nonnull_class(p47, 16471056, descr=<Guard0x33922c0>) [p9, p21, p19, p17, p10, p12]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+851: p49 = new_with_vtable(descr=<SizeDescr 40>)
+895: p50 = new_with_vtable(descr=<SizeDescr 24>)
+906: setfield_gc(p50, i37, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+910: setfield_gc(p50, ConstPtr(ptr51), descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+921: p52 = new_with_vtable(descr=<SizeDescr 24>)
+932: setfield_gc(p52, i28, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+936: setfield_gc(p52, p29, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+940: p53 = new_with_vtable(descr=<SizeDescr 48>)
+951: p54 = new_with_vtable(descr=<SizeDescr 40>)
+962: setfield_gc(p54, p12, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+973: setfield_gc(p54, p9, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+977: setfield_gc(p54, p10, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+995: setfield_gc(p54, ConstPtr(ptr55), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+999: setfield_gc(p49, p52, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+1010: setfield_gc(p53, ConstPtr(ptr56), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+1014: setfield_gc(p53, p40, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1018: setfield_gc(p53, p54, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1022: setfield_gc(p53, p12, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1026: setfield_gc(p49, p47, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+1030: setfield_gc(p49, p50, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+1034: setfield_gc(p49, p23, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1038: setfield_gc(p53, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+1046: jump(p49, p53, descr=TargetToken(53317888))
+1088: --end of the loop--
[86a8076f60d5d9] jit-log-opt-bridge}
[86a8076f83eba4] {jit-backend
[86a8076f8a54cc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39f8d0 +0  0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8C3202000048FF0425F01933038139D00C01000F85000000004C8B79204983FF01720741813F509A00000F85000000004C8B3500FFFFFF4D39F70F8400000000813A101100000F85000000004C8B72084983FE01720741813E900F00000F85000000004C8B71104983FE01720741813E601400000F85000000004C8B69184983FD01720841817D00601400000F85000000004D8B66084D8B75084D01E60F80000000004D8B67084D39F40F85000000004C8B72204C8B25C4FEFFFF4D39E60F85000000004C8B62104C8B721841813E101100000F85000000004D8B7E084983FF01720741813F900F00000F850000000041813C24D00C01000F85000000004D8B6C240841817D00B8B500000F85000000004D8B55084D8B4D204D8B41084983F8017207418138B8B500000F85000000004D8B4C24104983F9017207418139509A00000F8500000000498B79104883FF017206813F40D202000F8500000000498B71084D8B4C24184983F901720741813940D202000F8500000000498B5C24204885DB0F84000000004D8B6010488B0544FEFFFF4939C40F85000000004D39C50F8500000000488B0C25F091F900488D5170483B14251092F9000F879E00000048891425F091F90048C701D00C0100488D512848C702509A0000488972084C894A104C8D4A1849C70120160000488959204D8979084889791048895118488B15ECFDFFFF498951204D8951104D8971184C89690849C741280000000048898D300100004C898D3801000049BB506239EDB57F000041FFE39048C7442408FFFFFF0049BB48F739EDB57F00004C895D204D8D9BA82BFFFF41FFD3E9A8FDFFFF49BBB8F839EDB57F00004C895D204D8D9B3832FFFF41FFD3E94DFFFFFFFF35A7FCFFFF49BB58F739EDB57F000041534D8D9BA828FFFF41FFE3FF3593FCFFFF49BB68F739EDB57F000041534D8D9B9828FFFF41FFE3FF3587FCFFFF49BB78F739EDB57F000041534D8D9B8828FFFF41FFE3FF3573FCFFFF49BB88F739EDB57F000041534D8D9B7828FFFF41FFE3FF355FFCFFFF49BB98F739EDB57F000041534D8D9B6828FFFF41FFE3FF354BFCFFFF49BBA8F739EDB57F000041534D8D9B5828FFFF41FFE3FF3537FCFFFF49BBB8F739EDB57F000041534D8D9B4828FFFF41FFE3FF3523FCFFFF49BBC8F739EDB57F000041534D8D9B3828FFFF41FFE3FF350FFCFFFF49BBD8F739EDB57F000041534D8D9B2828FFFF41FFE3FF35FBFBFFFF49BBE8F739EDB57F000041534D8D9B1828FFFF41FFE3FF35EFFBFFFF49BBF8F739EDB57F000041534D8D9B0828FFFF41FFE3FF35DBFBFFFF49BB08F839EDB57F000041534D8D9BF827FFFF41FFE3FF35C7FBFFFF49BB18F839EDB57F000041534D8D9BE827FFFF41FFE3FF35B3FBFFFF49BB28F839EDB57F000041534D8D9BD827FFFF41FFE3FF359FFBFFFF49BB38F839EDB57F000041534D8D9BC827FFFF41FFE3FF358BFBFFFF49BB48F839EDB57F000041534D8D9BB827FFFF41FFE3FF3577FBFFFF49BB58F839EDB57F000041534D8D9BA827FFFF41FFE3FF3563FBFFFF49BB68F839EDB57F000041534D8D9B9827FFFF41FFE3FF354FFBFFFF49BB78F839EDB57F000041534D8D9B8827FFFF41FFE3FF353BFBFFFF49BB88F839EDB57F000041534D8D9B7827FFFF41FFE3FF352FFBFFFF49BB98F839EDB57F000041534D8D9B6827FFFF41FFE3FF351BFBFFFF49BBA8F839EDB57F000041534D8D9B5827FFFF41FFE3
[86a8076f8adc39] jit-backend-dump}
[86a8076f8b89d8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39f9a4 +0  25000000
[86a8076f8b9e04] jit-backend-dump}
[86a8076f8bde52] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39fbe5 +0  25000000
[86a8076f8bed11] jit-backend-dump}
[86a8076f8c223d] {jit-backend-addr
bridge out of Guard 0x331e608 has address 0x7fb5ed39f9a0 to 0x7fb5ed39fbe0
       gc table: 0x7fb5ed39f8d0
    jump target: 0x7fb5ed39f9a0
         resops: 0x7fb5ed39f9ae
       failures: 0x7fb5ed39fbe0
            end: 0x7fb5ed39fe8b
[86a8076f8c481d] jit-backend-addr}
[86a8076f8c7d8c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39f9be +0  61020000
[86a8076f8c8bb2] jit-backend-dump}
[86a8076f8cbdde] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39f9d5 +0  66020000
[86a8076f8ccb0c] jit-backend-dump}
[86a8076f8cfb76] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39f9e5 +0  72020000
[86a8076f8d0882] jit-backend-dump}
[86a8076f8d3924] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39f9f1 +0  82020000
[86a8076f8d45f3] jit-backend-dump}
[86a8076f8d757e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39fa08 +0  87020000
[86a8076f8d821f] jit-backend-dump}
[86a8076f8db28c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39fa1f +0  A8020000
[86a8076f8dbf09] jit-backend-dump}
[86a8076f8deece] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39fa37 +0  AC020000
[86a8076f8dfb66] jit-backend-dump}
[86a8076f8e2b13] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39fa48 +0  B7020000
[86a8076f8e37b4] jit-backend-dump}
[86a8076f8e6730] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39fa55 +0  C6020000
[86a8076f8e73a9] jit-backend-dump}
[86a8076f8ea359] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39fa69 +0  CE020000
[86a8076f8eaff1] jit-backend-dump}
[86a8076f8edf94] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39fa7e +0  D5020000
[86a8076f8eec29] jit-backend-dump}
[86a8076f8f1bae] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39fa95 +0  DA020000
[86a8076f8f285f] jit-backend-dump}
[86a8076f8f57bf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39faa3 +0  E8020000
[86a8076f8f6451] jit-backend-dump}
[86a8076f8f93dc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39fab6 +0  F1020000
[86a8076f8fa06e] jit-backend-dump}
[86a8076f8fcfd1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39fad5 +0  EE020000
[86a8076f8fdc5d] jit-backend-dump}
[86a8076f900bae] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39faed +0  F2020000
[86a8076f901846] jit-backend-dump}
[86a8076f904814] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39fb03 +0  F8020000
[86a8076f9054ac] jit-backend-dump}
[86a8076f908434] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39fb1f +0  F8020000
[86a8076f9090cf] jit-backend-dump}
[86a8076f90c03c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39fb2d +0  06030000
[86a8076f90cd0b] jit-backend-dump}
[86a8076f90fc8d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39fb41 +0  0E030000
[86a8076f910931] jit-backend-dump}
[86a8076f9138f0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39fb4a +0  21030000
[86a8076f914585] jit-backend-dump}
[86a8076f9177dc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed394300 +0  9CB60000
[86a8076f9184c9] jit-backend-dump}
[86a8076f91c3a3] jit-backend}
[86a8076f91fe8b] {jit-log-opt-bridge
# bridge out of Guard 0x331e608 with 73 ops
[p0, p1]
+230: guard_class(p1, 16500368, descr=<Guard0x3392320>) [p0, p1]
+242: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+246: guard_nonnull_class(p3, 16471056, descr=<Guard0x3392380>) [p0, p1]
+272: i6 = instance_ptr_eq(p3, ConstPtr(ptr5))
+275: guard_false(i6, descr=<Guard0x3381ad8>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
+281: guard_class(p0, 16435920, descr=<Guard0x3381b20>) [p0, p1]
+293: p8 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+297: guard_nonnull_class(p8, ConstClass(ForwardLink), descr=<Guard0x33923e0>) [p0, p1]
debug_merge_point(0, 0, '(+ row dist)')
+316: guard_not_invalidated(descr=<Guard0x3381b68>) [p0, p1]
+316: p10 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+320: guard_nonnull_class(p10, ConstClass(W_Fixnum), descr=<Guard0x3392440>) [p0, p1]
+339: p12 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+343: guard_nonnull_class(p12, ConstClass(W_Fixnum), descr=<Guard0x33924a0>) [p0, p1]
+363: i14 = getfield_gc_i(p10, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+367: i15 = getfield_gc_i(p12, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+371: i16 = int_add_ovf(i14, i15)
+374: guard_no_overflow(descr=<Guard0x3381bb0>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+380: i17 = getfield_gc_i(p3, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+384: i18 = int_eq(i17, i16)
+387: guard_true(i18, descr=<Guard0x3381bf8>) [p0, p1]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '#f')
+393: p19 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+404: guard_value(p19, ConstPtr(ptr20), descr=<Guard0x3381c40>) [p0, p1]
+413: p21 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+417: p22 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand4)')
+421: guard_class(p22, 16435920, descr=<Guard0x3381c88>) [p0, p1]
+434: p24 = getfield_gc_r(p22, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+438: guard_nonnull_class(p24, ConstClass(ForwardLink), descr=<Guard0x3392500>) [p0, p1]
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
+457: guard_class(p21, 16500368, descr=<Guard0x3381cd0>) [p0, p1]
+471: p27 = getfield_gc_r(p21, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+476: guard_class(p27, 16478072, descr=<Guard0x3381d18>) [p0, p1]
+490: p29 = getfield_gc_r(p27, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand4)')
+494: p30 = getfield_gc_r(p27, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+498: p31 = getfield_gc_r(p30, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+502: guard_nonnull_class(p31, 16478072, descr=<Guard0x3392560>) [p0, p1]
+521: p33 = getfield_gc_r(p21, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+526: guard_nonnull_class(p33, 16471056, descr=<Guard0x33925c0>) [p0, p1]
+545: p35 = getfield_gc_r(p33, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+549: guard_nonnull_class(p35, 16616448, descr=<Guard0x3392620>) [p0, p1]
+567: i37 = getfield_gc_i(p33, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+571: p38 = getfield_gc_r(p21, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+576: guard_nonnull_class(p38, 16616448, descr=<Guard0x3392680>) [p0, p1]
+595: p40 = getfield_gc_r(p21, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+600: guard_nonnull(p40, descr=<Guard0x3381d60>) [p0, p1]
+609: p41 = getfield_gc_r(p31, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+620: guard_value(p41, ConstPtr(ptr42), descr=<Guard0x3381da8>) [p0, p1]
+629: i43 = instance_ptr_eq(p27, p31)
+632: guard_true(i43, descr=<Guard0x3381df0>) [p0, p1]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+638: p44 = new_with_vtable(descr=<SizeDescr 40>)
+679: p45 = new_with_vtable(descr=<SizeDescr 24>)
+690: setfield_gc(p45, i37, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+694: setfield_gc(p45, p38, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+698: p46 = new_with_vtable(descr=<SizeDescr 48>)
+709: setfield_gc(p44, p40, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+713: setfield_gc(p46, p24, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+717: setfield_gc(p44, p35, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+721: setfield_gc(p44, p45, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+732: setfield_gc(p46, ConstPtr(ptr47), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+736: setfield_gc(p46, p29, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+740: setfield_gc(p46, p22, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+744: setfield_gc(p44, p27, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+748: setfield_gc(p46, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+756: jump(p44, p46, descr=TargetToken(53317888))
+784: --end of the loop--
[86a8076f95c5b7] jit-log-opt-bridge}
[86a8076f9e190c] {jit-backend
[86a8076fa1835b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39ff
[86a8076fa1ddb0] jit-backend-dump}
[86a8076fa27aae] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39ffa4 +0  25000000
[86a8076fa28c2f] jit-backend-dump}
[86a8076fa2c467] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a00d5 +0  25000000
[86a8076fa2d283] jit-backend-dump}
[86a8076fa3056a] {jit-backend-addr
bridge out of Guard 0x3378140 has address 0x7fb5ed39ffa0 to 0x7fb5ed3a00d0
       gc table: 0x7fb5ed39ff50
    jump target: 0x7fb5ed39ffa0
         resops: 0x7fb5ed39ffae
       failures: 0x7fb5ed3a00d0
            end: 0x7fb5ed3a020f
[86a8076fa32bc2] jit-backend-addr}
[86a8076fa36339] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39ffbe +0  51010000
[86a8076fa37130] jit-backend-dump}
[86a8076fa3a356] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39ffcf +0  5C010000
[86a8076fa3b0a6] jit-backend-dump}
[86a8076fa3e3b4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39ffeb +0  5C010000
[86a8076fa3f0b4] jit-backend-dump}
[86a8076fa4222f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a0002 +0  61010000
[86a8076fa42ef2] jit-backend-dump}
[86a8076fa45ff2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a001a +0  65010000
[86a8076fa46cec] jit-backend-dump}
[86a8076fa49e20] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a0035 +0  66010000
[86a8076fa4aafe] jit-backend-dump}
[86a8076fa4dc26] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a0042 +0  75010000
[86a8076fa4e8f8] jit-backend-dump}
[86a8076fa519e3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a0056 +0  7D010000
[86a8076fa526b8] jit-backend-dump}
[86a8076fa5578b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a005f +0  90010000
[86a8076fa5645d] jit-backend-dump}
[86a8076fa597cd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39ad4a +0  52520000
[86a8076fa5a4d3] jit-backend-dump}
[86a8076fa5e4c0] jit-backend}
[86a8076fa6210e] {jit-log-opt-bridge
# bridge out of Guard 0x3378140 with 29 ops
[p0, p1]
+102: guard_class(p1, 16500368, descr=<Guard0x33926e0>) [p0, p1]
+114: p3 = getfield_gc_r(p1, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+118: guard_class(p3, 16478072, descr=<Guard0x3381e38>) [p0, p1]
+131: p5 = getfield_gc_r(p3, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+135: p6 = getfield_gc_r(p5, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+139: guard_nonnull_class(p6, 16478072, descr=<Guard0x3392740>) [p0, p1]
+159: p8 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+163: guard_nonnull_class(p8, 16471056, descr=<Guard0x33927a0>) [p0, p1]
+182: p10 = getfield_gc_r(p8, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+186: guard_nonnull_class(p10, 16471056, descr=<Guard0x3392800>) [p0, p1]
+206: i12 = getfield_gc_i(p8, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+210: p13 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+214: guard_nonnull_class(p13, 16471056, descr=<Guard0x3392860>) [p0, p1]
+233: p15 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+237: guard_nonnull(p15, descr=<Guard0x3381e80>) [p0, p1]
+246: p16 = getfield_gc_r(p6, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+257: guard_value(p16, ConstPtr(ptr17), descr=<Guard0x3381ec8>) [p0, p1]
+266: i18 = instance_ptr_eq(p3, p6)
+269: guard_true(i18, descr=<Guard0x3381f10>) [p0, p1]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+275: p19 = new_with_vtable(descr=<SizeDescr 40>)
+316: p20 = new_with_vtable(descr=<SizeDescr 24>)
+327: setfield_gc(p20, i12, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+331: setfield_gc(p20, p13, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+335: setfield_gc(p19, p3, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+339: setfield_gc(p19, p10, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+343: setfield_gc(p19, p20, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+347: setfield_gc(p19, p15, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+351: jump(p19, p0, descr=TargetToken(53317888))
+384: --end of the loop--
[86a8076fa7d111] jit-log-opt-bridge}
[86a8076fc6fc4b] {jit-backend
[86a8076fcc391c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a
[86a8076fccac82] jit-backend-dump}
[86a8076fcd53a5] {jit-backend-addr
Loop 36 ((+ AppRand2 AppRand3) from (CellRef(my-try) (cdr x) (cons (car x) y) z)) has address 0x7fb5ed3a046d to 0x7fb5ed3a0640 (bootstrap 0x7fb5ed3a03e0)
       gc table: 0x7fb5ed3a0340
       function: 0x7fb5ed3a03e0
         resops: 0x7fb5ed3a046d
       failures: 0x7fb5ed3a0640
            end: 0x7fb5ed3a082f
[86a8076fcd80a4] jit-backend-addr}
[86a8076fcdc0e1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a0484 +0  03020000
[86a8076fcdd3a9] jit-backend-dump}
[86a8076fce07dd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a0495 +0  0E020000
[86a8076fce169c] jit-backend-dump}
[86a8076fce4954] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a04a8 +0  17020000
[86a8076fce56fd] jit-backend-dump}
[86a8076fce889f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a04bc +0  1F020000
[86a8076fce95e8] jit-backend-dump}
[86a8076fcec79d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a04d0 +0  27020000
[86a8076fced514] jit-backend-dump}
[86a8076fcf07f8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a04e0 +0  33020000
[86a8076fcf1501] jit-backend-dump}
[86a8076fcf46aa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a04f0 +0  3F020000
[86a8076fcf5397] jit-backend-dump}
[86a8076fcf8470] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a0507 +0  44020000
[86a8076fcf916d] jit-backend-dump}
[86a8076fcfc24b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a0523 +0  44020000
[86a8076fcfcf64] jit-backend-dump}
[86a8076fd000f7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a053a +0  49020000
[86a8076fd00ddb] jit-backend-dump}
[86a8076fd03ec6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a0552 +0  4D020000
[86a8076fd04bf4] jit-backend-dump}
[86a8076fd07d22] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a056d +0  4E020000
[86a8076fd089f4] jit-backend-dump}
[86a8076fd0babd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a057a +0  5D020000
[86a8076fd0c7ab] jit-backend-dump}
[86a8076fd0f8be] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a0596 +0  5D020000
[86a8076fd105a8] jit-backend-dump}
[86a8076fd1366e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a059f +0  70020000
[86a8076fd1434d] jit-backend-dump}
[86a8076fd17f29] jit-backend}
[86a8076fd1bac9] {jit-log-opt-loop
# Loop 36 ((+ AppRand2 AppRand3) from (CellRef(my-try) (cdr x) (cons (car x) y) z)) : entry bridge with 52 ops
[p0, p1]
debug_merge_point(0, 0, '(+ AppRand2 AppRand3) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+309: guard_not_invalidated(descr=<Guard0x3392920>) [p1, p0]
+309: guard_class(p0, 16503888, descr=<Guard0x339a068>) [p1, p0]
+328: i3 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_0 16 pure>)
+332: i4 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_1 24 pure>)
+336: i5 = int_add_ovf(i3, i4)
+339: guard_no_overflow(descr=<Guard0x339a0b0>) [p1, p0]
+345: guard_class(p1, 16435920, descr=<Guard0x339a0f8>) [p1, p0]
+364: p7 = getfield_gc_r(p1, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+375: guard_value(p7, ConstPtr(ptr8), descr=<Guard0x339a140>) [p1, p0]
+384: p9 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+388: p10 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+392: guard_class(p9, 16500368, descr=<Guard0x339a188>) [p1, p0]
+404: p12 = getfield_gc_r(p9, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+408: guard_class(p12, 16478072, descr=<Guard0x339a1d0>) [p1, p0]
+420: p14 = getfield_gc_r(p12, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+424: guard_class(p10, 16437216, descr=<Guard0x339a218>) [p1, p0]
+436: p16 = getfield_gc_r(p10, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+440: guard_nonnull_class(p16, ConstClass(ForwardLink), descr=<Guard0x3392980>) [p1, p0]
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (+ AppRand2 AppRand3)')
+459: p18 = getfield_gc_r(p12, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+463: p19 = getfield_gc_r(p18, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+467: guard_nonnull_class(p19, 16478072, descr=<Guard0x33929e0>) [p1, p0]
+487: p21 = getfield_gc_r(p9, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+491: guard_nonnull_class(p21, 16471056, descr=<Guard0x3392a40>) [p1, p0]
+510: p23 = getfield_gc_r(p21, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+514: guard_nonnull_class(p23, 16616448, descr=<Guard0x3392aa0>) [p1, p0]
+534: i25 = getfield_gc_i(p21, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+538: p26 = getfield_gc_r(p9, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+542: guard_nonnull_class(p26, 16471056, descr=<Guard0x3392b00>) [p1, p0]
+561: p28 = getfield_gc_r(p9, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+565: guard_nonnull(p28, descr=<Guard0x339a260>) [p1, p0]
+574: p29 = getfield_gc_r(p19, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+593: guard_value(p29, ConstPtr(ptr30), descr=<Guard0x339a2a8>) [p1, p0]
+602: i31 = instance_ptr_eq(p12, p19)
+605: guard_true(i31, descr=<Guard0x339a2f0>) [p1, p0]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+611: p32 = new_with_vtable(descr=<SizeDescr 40>)
+652: p33 = new_with_vtable(descr=<SizeDescr 24>)
+663: setfield_gc(p33, i25, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+667: setfield_gc(p33, p26, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+671: p34 = new_with_vtable(descr=<SizeDescr 48>)
+689: setfield_gc(p34, ConstPtr(ptr35), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+693: setfield_gc(p34, p14, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+697: setfield_gc(p34, p10, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+701: setfield_gc(p32, p12, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+705: setfield_gc(p34, p16, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+709: setfield_gc(p32, p23, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+713: setfield_gc(p32, p33, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+717: setfield_gc(p32, p28, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+721: setfield_gc(p34, i5, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+732: jump(p32, p34, descr=TargetToken(53317888))
+768: --end of the loop--
[86a8076fd4b055] jit-log-opt-loop}
[86a8076fe66cb7] {jit-backend
[86a8076fec806d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a
[86a8076fecf5b9] jit-backend-dump}
[86a8076fed9de3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a0a04 +0  25000000
[86a8076fedb258] jit-backend-dump}
[86a8076fedef11] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a0bf5 +0  25000000
[86a8076fedfd8f] jit-backend-dump}
[86a8076fee30f0] {jit-backend-addr
bridge out of Guard 0x3354f80 has address 0x7fb5ed3a0a00 to 0x7fb5ed3a0bf0
       gc table: 0x7fb5ed3a0960
    jump target: 0x7fb5ed3a0a00
         resops: 0x7fb5ed3a0a0e
       failures: 0x7fb5ed3a0bf0
            end: 0x7fb5ed3a0df3
[86a8076fee55d3] jit-backend-addr}
[86a8076fee8b91] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a0a1f +0  2C020000
[86a8076fee9a4a] jit-backend-dump}
[86a8076feeccbf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a0a37 +0  30020000
[86a8076feeda3d] jit-backend-dump}
[86a8076fef0be2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a0a44 +0  3F020000
[86a8076fef1938] jit-backend-dump}
[86a8076fef4bcc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a0a59 +0  46020000
[86a8076fef58fa] jit-backend-dump}
[86a8076fef89db] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a0a70 +0  4B020000
[86a8076fef9734] jit-backend-dump}
[86a8076fefc806] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a0a87 +0  50020000
[86a8076fefd559] jit-backend-dump}
[86a8076ff00600] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a0a94 +0  5F020000
[86a8076ff01344] jit-backend-dump}
[86a8076ff043df] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a0aa4 +0  6B020000
[86a8076ff05128] jit-backend-dump}
[86a8076ff081d0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a0ac2 +0  69020000
[86a8076ff08f1c] jit-backend-dump}
[86a8076ff0bf9c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a0ad8 +0  6F020000
[86a8076ff0cce9] jit-backend-dump}
[86a8076ff0fdac] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a0aee +0  75020000
[86a8076ff10ae0] jit-backend-dump}
[86a8076ff13b78] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a0b08 +0  77020000
[86a8076ff148af] jit-backend-dump}
[86a8076ff1795a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a0b1c +0  7F020000
[86a8076ff18697] jit-backend-dump}
[86a8076ff1b70a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a0b37 +0  80020000
[86a8076ff1c43b] jit-backend-dump}
[86a8076ff1f4ec] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a0b40 +0  93020000
[86a8076ff20220] jit-backend-dump}
[86a8076ff2355f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed398b4c +0  B07E0000
[86a8076ff24278] jit-backend-dump}
[86a8076ff281f9] jit-backend}
[86a8076ff2bdcd] {jit-log-opt-bridge
# bridge out of Guard 0x3354f80 with 60 ops
[i0, p1, p2, p3, p4, p5]
+182: guard_not_invalidated(descr=<Guard0x3392b60>) [i0, p1, p2, p3, p4, p5]
+182: i6 = getfield_gc_i(p2, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+186: i7 = int_add_ovf(i6, i0)
+189: guard_no_overflow(descr=<Guard0x339a338>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
+195: p8 = getfield_gc_r(p4, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+200: guard_nonnull_class(p8, ConstClass(ForwardLink), descr=<Guard0x3392bc0>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+219: i10 = getfield_gc_i(p1, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+223: i11 = int_eq(i10, i7)
+226: guard_true(i11, descr=<Guard0x339a380>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '#f')
+232: p12 = getfield_gc_r(p4, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+244: guard_value(p12, ConstPtr(ptr13), descr=<Guard0x339a3c8>) [i0, p1, p2, p3, p4, p5]
+253: p14 = getfield_gc_r(p4, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+258: p15 = getfield_gc_r(p4, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand4)')
+263: guard_class(p15, 16437216, descr=<Guard0x339a410>) [i0, p1, p2, p3, p4, p5]
+276: p17 = getfield_gc_r(p15, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+280: guard_nonnull_class(p17, ConstClass(ForwardLink), descr=<Guard0x3392c20>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
+299: guard_class(p14, 16500368, descr=<Guard0x339a458>) [i0, p1, p2, p3, p4, p5]
+312: p20 = getfield_gc_r(p14, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+316: guard_class(p20, 16478072, descr=<Guard0x339a4a0>) [i0, p1, p2, p3, p4, p5]
+328: p22 = getfield_gc_r(p20, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand4)')
+332: p23 = getfield_gc_r(p20, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+336: p24 = getfield_gc_r(p23, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+340: guard_nonnull_class(p24, 16478072, descr=<Guard0x3392c80>) [i0, p1, p2, p3, p4, p5]
+358: p26 = getfield_gc_r(p14, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+362: guard_nonnull_class(p26, 16471056, descr=<Guard0x3392ce0>) [i0, p1, p2, p3, p4, p5]
+380: p28 = getfield_gc_r(p26, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+384: guard_nonnull_class(p28, 16616448, descr=<Guard0x3392d40>) [i0, p1, p2, p3, p4, p5]
+402: i30 = getfield_gc_i(p26, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+406: p31 = getfield_gc_r(p14, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+410: guard_nonnull_class(p31, 16471056, descr=<Guard0x3392da0>) [i0, p1, p2, p3, p4, p5]
+428: p33 = getfield_gc_r(p14, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+439: guard_nonnull(p33, descr=<Guard0x339a4e8>) [i0, p1, p2, p3, p4, p5]
+448: p34 = getfield_gc_r(p24, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+466: guard_value(p34, ConstPtr(ptr35), descr=<Guard0x339a530>) [i0, p1, p2, p3, p4, p5]
+475: i36 = instance_ptr_eq(p20, p24)
+478: guard_true(i36, descr=<Guard0x339a578>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+484: p37 = new_with_vtable(descr=<SizeDescr 40>)
+528: p38 = new_with_vtable(descr=<SizeDescr 24>)
+539: setfield_gc(p38, i30, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+543: setfield_gc(p38, p31, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+547: p39 = new_with_vtable(descr=<SizeDescr 48>)
+558: setfield_gc(p39, p17, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+569: setfield_gc(p39, ConstPtr(ptr40), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+573: setfield_gc(p39, p22, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+577: setfield_gc(p39, p15, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+581: setfield_gc(p37, p20, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+585: setfield_gc(p37, p28, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+596: setfield_gc(p37, p38, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+600: setfield_gc(p37, p33, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+611: setfield_gc(p39, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+619: jump(p37, p39, descr=TargetToken(53317888))
+656: --end of the loop--
[86a8076ff63f35] jit-log-opt-bridge}
[86a8077009a55d] {jit-backend
[86a807700f7db3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a0f70 +0  0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8C2202000048FF0425501B33038139D00C01000F85000000004C8B79104D85FF0F84000000004C8B2D0AFFFFFF4D39EF0F85000000004C8B79184D85FF0F84000000004D39EF0F840000000041813E201600000F85000000004D8B6E204C8B3DFBFEFFFF4D39FD0F85000000004D8B6E284D8B661841813C24101100000F85000000004D8B5424204C8B0DF0FEFFFF4D39CA0F85000000004D8B4C24104D8B542418418139D00C01000F85000000004D8B610841813C24B8B500000F85000000004D8B44240841813A201600000F8500000000498B7A084883FF017206813F900F00000F8500000000498B742420488B5E084883FB017206813BB8B500000F8500000000498B71104883FE017206813E509A00000F8500000000488B56104883FA017206813A40D202000F8500000000488B4608498B71184883FE017206813E509A00000F85000000004889BD30010000498B79204885FF0F84000000004C8B4B104889BD38010000488B3D67FEFFFF4939F90F85000000004939DC0F85000000004989D6488B0C25F091F900488D5170483B14251092F9000F87AE00000048891425F091F90048C701D00C0100488D512848C702509A00004889420848897210488D721848C706201600004C897110488951184C897E204C8946104C896E284C8956184C8961084C8BA5300100004C8966084C8BA5380100004C89612048898D300100004889B53801000049BB506239EDB57F000041FFE366666666662E0F1F84000000000048C7442408FFFFFF0049BB000E3AEDB57F00004C895D204D8D9BF014FFFF41FFD3E9B8FDFFFF49BB600F3AEDB57F00004C895D204D8D9B901BFFFF41FFD3E93DFFFFFFFF35B7FCFFFF49BB100E3AEDB57F000041534D8D9BF011FFFF41FFE3FF35A3FCFFFF49BB200E3AEDB57F000041534D8D9BE011FFFF41FFE3FF3597FCFFFF49BB300E3AEDB57F000041534D8D9BD011FFFF41FFE3FF3583FCFFFF49BB400E3AEDB57F000041534D8D9BC011FFFF41FFE3FF356FFCFFFF49BB500E3AEDB57F000041534D8D9BB011FFFF41FFE3FF355BFCFFFF49BB600E3AEDB57F000041534D8D9BA011FFFF41FFE3FF354FFCFFFF49BB700E3AEDB57F000041534D8D9B9011FFFF41FFE3FF353BFCFFFF49BB800E3AEDB57F000041534D8D9B8011FFFF41FFE3FF3527FCFFFF49BB900E3AEDB57F000041534D8D9B7011FFFF41FFE3FF351BFCFFFF49BBA00E3AEDB57F000041534D8D9B6011FFFF41FFE3FF3507FCFFFF49BBB00E3AEDB57F000041534D8D9B5011FFFF41FFE3FF35F3FBFFFF49BBC00E3AEDB57F000041534D8D9B4011FFFF41FFE3FF35DFFBFFFF49BBD00E3AEDB57F000041534D8D9B3011FFFF41FFE3FF35CBFBFFFF49BBE00E3AEDB57F000041534D8D9B2011FFFF41FFE3FF35B7FBFFFF49BBF00E3AEDB57F000041534D8D9B1011FFFF41FFE3FF35A3FBFFFF49BB000F3AEDB57F000041534D8D9B0011FFFF41FFE3FF358FFBFFFF49BB100F3AEDB57F000041534D8D9BF010FFFF41FFE3FF357BFBFFFF49BB200F3AEDB57F000041534D8D9BE010FFFF41FFE3FF3567FBFFFF49BB300F3AEDB57F000041534D8D9BD010FFFF41FFE3FF355BFBFFFF49BB400F3AEDB57F000041534D8D9BC010FFFF41FFE3FF3547FBFFFF49BB500F3AEDB57F000041534D8D9BB010FFFF41FFE3
[86a807701001bb] jit-backend-dump}
[86a8077010a898] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1044 +0  25000000
[86a8077010be75] jit-backend-dump}
[86a8077010fc01] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1275 +0  25000000
[86a80770110ac0] jit-backend-dump}
[86a80770113f56] {jit-backend-addr
bridge out of Guard 0x331fc40 has address 0x7fb5ed3a1040 to 0x7fb5ed3a1270
       gc table: 0x7fb5ed3a0f70
    jump target: 0x7fb5ed3a1040
         resops: 0x7fb5ed3a104e
       failures: 0x7fb5ed3a1270
            end: 0x7fb5ed3a14ff
[86a807701162c6] jit-backend-addr}
[86a807701197d0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a105e +0  51020000
[86a8077011a5c8] jit-backend-dump}
[86a8077011d859] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a106b +0  60020000
[86a8077011e544] jit-backend-dump}
[86a80770121656] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a107b +0  6C020000
[86a8077012235c] jit-backend-dump}
[86a8077012542c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1088 +0  7B020000
[86a80770126132] jit-backend-dump}
[86a807701291c1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1091 +0  8E020000
[86a80770129ed0] jit-backend-dump}
[86a8077012cefa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a109e +0  9D020000
[86a8077012dbf7] jit-backend-dump}
[86a80770130c49] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a10b2 +0  A5020000
[86a8077013194c] jit-backend-dump}
[86a80770134b91] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a10c8 +0  C7020000
[86a8077013582f] jit-backend-dump}
[86a80770138926] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a10dd +0  CE020000
[86a8077013962c] jit-backend-dump}
[86a8077013c71a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a10f4 +0  D3020000
[86a8077013d404] jit-backend-dump}
[86a8077014063d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1106 +0  DD020000
[86a80770141383] jit-backend-dump}
[86a807701445c4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1118 +0  E7020000
[86a80770145326] jit-backend-dump}
[86a80770148565] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a112e +0  ED020000
[86a8077014927d] jit-backend-dump}
[86a8077014c44d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1149 +0  EE020000
[86a8077014d144] jit-backend-dump}
[86a8077015023e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a115f +0  F4020000
[86a80770150f23] jit-backend-dump}
[86a8077015409a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1175 +0  FA020000
[86a80770154d85] jit-backend-dump}
[86a80770157fbd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a118f +0  FC020000
[86a80770158d00] jit-backend-dump}
[86a8077015bdf4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a11a3 +0  04030000
[86a8077015cb53] jit-backend-dump}
[86a8077015fd82] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a11be +0  05030000
[86a80770160a98] jit-backend-dump}
[86a80770163b2d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a11c7 +0  18030000
[86a8077016483c] jit-backend-dump}
[86a80770167b5d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39699f +0  9DA60000
[86a80770168810] jit-backend-dump}
[86a8077016c730] jit-backend}
[86a807701701bc] {jit-log-opt-bridge
# bridge out of Guard 0x331fc40 with 64 ops
[p0, p1]
+230: guard_class(p1, 16500368, descr=<Guard0x3392e00>) [p0, p1]
+242: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+246: guard_nonnull(p3, descr=<Guard0x339a5c0>) [p0, p1]
+262: i5 = instance_ptr_eq(p3, ConstPtr(ptr4))
+265: guard_true(i5, descr=<Guard0x339a608>) [p0, p1]
debug_merge_point(0, 0, '(if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0)')
+271: p6 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+275: guard_nonnull(p6, descr=<Guard0x339a650>) [p0, p1]
+284: i8 = instance_ptr_eq(p6, ConstPtr(ptr7))
+287: guard_false(i8, descr=<Guard0x339a698>) [p0, p1]
debug_merge_point(0, 0, '0')
+293: guard_class(p0, 16437216, descr=<Guard0x339a6e0>) [p0, p1]
+306: p10 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+317: guard_value(p10, ConstPtr(ptr11), descr=<Guard0x339a728>) [p0, p1]
+326: p12 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+326: guard_not_invalidated(descr=<Guard0x339a770>) [p0, p1]
+326: i13 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+330: p14 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(+ AppRand2 AppRand3) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+334: guard_class(p14, 16435920, descr=<Guard0x339a7b8>) [p0, p1]
+348: p16 = getfield_gc_r(p14, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+360: guard_value(p16, ConstPtr(ptr17), descr=<Guard0x339a800>) [p0, p1]
+369: p18 = getfield_gc_r(p14, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+374: p19 = getfield_gc_r(p14, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+379: guard_class(p18, 16500368, descr=<Guard0x339a848>) [p0, p1]
+392: p21 = getfield_gc_r(p18, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+396: guard_class(p21, 16478072, descr=<Guard0x339a890>) [p0, p1]
+410: p23 = getfield_gc_r(p21, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+415: guard_class(p19, 16437216, descr=<Guard0x339a8d8>) [p0, p1]
+428: p25 = getfield_gc_r(p19, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+432: guard_nonnull_class(p25, ConstClass(ForwardLink), descr=<Guard0x3392e60>) [p0, p1]
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (+ AppRand2 AppRand3)')
+450: p27 = getfield_gc_r(p21, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+455: p28 = getfield_gc_r(p27, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+459: guard_nonnull_class(p28, 16478072, descr=<Guard0x3392ec0>) [p0, p1]
+477: p30 = getfield_gc_r(p18, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+481: guard_nonnull_class(p30, 16471056, descr=<Guard0x3392f20>) [p0, p1]
+499: p32 = getfield_gc_r(p30, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+503: guard_nonnull_class(p32, 16616448, descr=<Guard0x3392f80>) [p0, p1]
+521: i34 = getfield_gc_i(p30, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+525: p35 = getfield_gc_r(p18, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+529: guard_nonnull_class(p35, 16471056, descr=<Guard0x3392fe0>) [p0, p1]
+547: p37 = getfield_gc_r(p18, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+558: guard_nonnull(p37, descr=<Guard0x339a920>) [p0, p1]
+567: p38 = getfield_gc_r(p28, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+585: guard_value(p38, ConstPtr(ptr39), descr=<Guard0x339a968>) [p0, p1]
+594: i40 = instance_ptr_eq(p21, p28)
+597: guard_true(i40, descr=<Guard0x339a9b0>) [p0, p1]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+603: p41 = new_with_vtable(descr=<SizeDescr 40>)
+647: p42 = new_with_vtable(descr=<SizeDescr 24>)
+658: setfield_gc(p42, i34, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+662: setfield_gc(p42, p35, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+666: p43 = new_with_vtable(descr=<SizeDescr 48>)
+677: setfield_gc(p41, p32, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+681: setfield_gc(p41, p42, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+685: setfield_gc(p43, ConstPtr(ptr44), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+689: setfield_gc(p43, p23, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+693: setfield_gc(p43, i13, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+697: setfield_gc(p43, p19, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+701: setfield_gc(p41, p21, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+705: setfield_gc(p43, p25, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+716: setfield_gc(p41, p37, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+727: jump(p41, p43, descr=TargetToken(53317888))
+768: --end of the loop--
[86a807701a2c78] jit-log-opt-bridge}
[86a8077030fdb6] {jit-backend
[86a8077036a5a8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a
[86a807703718c2] jit-backend-dump}
[86a8077037bf6d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a16d4 +0  25000000
[86a8077037d1f5] jit-backend-dump}
[86a80770380e15] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a18c5 +0  25000000
[86a80770381e77] jit-backend-dump}
[86a807703851e4] {jit-backend-addr
bridge out of Guard 0x335a9b0 has address 0x7fb5ed3a16d0 to 0x7fb5ed3a18c0
       gc table: 0x7fb5ed3a1630
    jump target: 0x7fb5ed3a16d0
         resops: 0x7fb5ed3a16de
       failures: 0x7fb5ed3a18c0
            end: 0x7fb5ed3a1ac3
[86a8077038732e] jit-backend-addr}
[86a8077038a8d7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a16ef +0  2C020000
[86a8077038b734] jit-backend-dump}
[86a8077038ea48] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1707 +0  30020000
[86a8077038f7e4] jit-backend-dump}
[86a80770392962] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1714 +0  3F020000
[86a8077039366b] jit-backend-dump}
[86a80770396689] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1729 +0  46020000
[86a807703973a2] jit-backend-dump}
[86a8077039a3aa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1740 +0  4B020000
[86a8077039b0de] jit-backend-dump}
[86a8077039e105] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1757 +0  50020000
[86a8077039ee1e] jit-backend-dump}
[86a807703a1dda] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1764 +0  5F020000
[86a807703a2ada] jit-backend-dump}
[86a807703a5b13] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1774 +0  6B020000
[86a807703a6804] jit-backend-dump}
[86a807703a97d5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1792 +0  69020000
[86a807703aa4d8] jit-backend-dump}
[86a807703ad4de] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a17a8 +0  6F020000
[86a807703ae1ed] jit-backend-dump}
[86a807703b1242] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a17be +0  75020000
[86a807703b1f51] jit-backend-dump}
[86a807703b4f26] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a17d8 +0  77020000
[86a807703b5bfb] jit-backend-dump}
[86a807703b8bba] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a17ec +0  7F020000
[86a807703b989e] jit-backend-dump}
[86a807703bc873] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1807 +0  80020000
[86a807703bd570] jit-backend-dump}
[86a807703c069b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1810 +0  93020000
[86a807703c13ad] jit-backend-dump}
[86a807703c464a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed398ace +0  FE8B0000
[86a807703c532f] jit-backend-dump}
[86a807703c92ba] jit-backend}
[86a807703ccce4] {jit-log-opt-bridge
# bridge out of Guard 0x335a9b0 with 60 ops
[i0, p1, p2, p3, p4, p5]
+182: guard_not_invalidated(descr=<Guard0x3393040>) [i0, p1, p2, p3, p4, p5]
+182: i6 = getfield_gc_i(p2, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+186: i7 = int_add_ovf(i6, i0)
+189: guard_no_overflow(descr=<Guard0x339a9f8>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
+195: p8 = getfield_gc_r(p4, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+200: guard_nonnull_class(p8, ConstClass(ForwardLink), descr=<Guard0x33930a0>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+219: i10 = getfield_gc_i(p1, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+223: i11 = int_eq(i10, i7)
+226: guard_true(i11, descr=<Guard0x339aa40>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '#f')
+232: p12 = getfield_gc_r(p4, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+244: guard_value(p12, ConstPtr(ptr13), descr=<Guard0x339aa88>) [i0, p1, p2, p3, p4, p5]
+253: p14 = getfield_gc_r(p4, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+258: p15 = getfield_gc_r(p4, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand4)')
+263: guard_class(p15, 16435920, descr=<Guard0x339aad0>) [i0, p1, p2, p3, p4, p5]
+276: p17 = getfield_gc_r(p15, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+280: guard_nonnull_class(p17, ConstClass(ForwardLink), descr=<Guard0x3393100>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
+299: guard_class(p14, 16500368, descr=<Guard0x339ab18>) [i0, p1, p2, p3, p4, p5]
+312: p20 = getfield_gc_r(p14, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+316: guard_class(p20, 16478072, descr=<Guard0x339ab60>) [i0, p1, p2, p3, p4, p5]
+328: p22 = getfield_gc_r(p20, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand4)')
+332: p23 = getfield_gc_r(p20, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+336: p24 = getfield_gc_r(p23, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+340: guard_nonnull_class(p24, 16478072, descr=<Guard0x3393160>) [i0, p1, p2, p3, p4, p5]
+358: p26 = getfield_gc_r(p14, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+362: guard_nonnull_class(p26, 16471056, descr=<Guard0x33931c0>) [i0, p1, p2, p3, p4, p5]
+380: p28 = getfield_gc_r(p26, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+384: guard_nonnull_class(p28, 16616448, descr=<Guard0x3393220>) [i0, p1, p2, p3, p4, p5]
+402: i30 = getfield_gc_i(p26, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+406: p31 = getfield_gc_r(p14, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+410: guard_nonnull_class(p31, 16616448, descr=<Guard0x3393280>) [i0, p1, p2, p3, p4, p5]
+428: p33 = getfield_gc_r(p14, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+439: guard_nonnull(p33, descr=<Guard0x339aba8>) [i0, p1, p2, p3, p4, p5]
+448: p34 = getfield_gc_r(p24, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+466: guard_value(p34, ConstPtr(ptr35), descr=<Guard0x339abf0>) [i0, p1, p2, p3, p4, p5]
+475: i36 = instance_ptr_eq(p20, p24)
+478: guard_true(i36, descr=<Guard0x339ac38>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+484: p37 = new_with_vtable(descr=<SizeDescr 40>)
+528: p38 = new_with_vtable(descr=<SizeDescr 24>)
+539: setfield_gc(p38, i30, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+543: setfield_gc(p38, p31, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+547: p39 = new_with_vtable(descr=<SizeDescr 48>)
+558: setfield_gc(p39, p17, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+569: setfield_gc(p39, ConstPtr(ptr40), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+573: setfield_gc(p39, p22, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+577: setfield_gc(p39, p15, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+581: setfield_gc(p37, p20, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+585: setfield_gc(p37, p28, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+596: setfield_gc(p37, p38, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+600: setfield_gc(p37, p33, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+611: setfield_gc(p39, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+619: jump(p37, p39, descr=TargetToken(53317888))
+656: --end of the loop--
[86a80770402911] jit-log-opt-bridge}
[86a807705618dd] {jit-backend
[86a807705b629e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1c
[86a807705bdbe8] jit-backend-dump}
[86a807705c80e2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1cd4 +0  25000000
[86a807705c943d] jit-backend-dump}
[86a807705cd1f4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1ec5 +0  25000000
[86a807705ce03e] jit-backend-dump}
[86a807705d13d3] {jit-backend-addr
bridge out of Guard 0x3355f40 has address 0x7fb5ed3a1cd0 to 0x7fb5ed3a1ec0
       gc table: 0x7fb5ed3a1c20
    jump target: 0x7fb5ed3a1cd0
         resops: 0x7fb5ed3a1cde
       failures: 0x7fb5ed3a1ec0
            end: 0x7fb5ed3a20fa
[86a807705d35d4] jit-backend-addr}
[86a807705d6c20] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1cee +0  F4010000
[86a807705d79ed] jit-backend-dump}
[86a807705dacb8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1cfe +0  00020000
[86a807705db9c1] jit-backend-dump}
[86a807705deca1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1d15 +0  05020000
[86a807705df9d5] jit-backend-dump}
[86a807705e2ce1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1d22 +0  14020000
[86a807705e3a61] jit-backend-dump}
[86a807705e6c10] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1d32 +0  20020000
[86a807705e7941] jit-backend-dump}
[86a807705eaae3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1d3f +0  2F020000
[86a807705eb7e3] jit-backend-dump}
[86a807705ee8c2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1d51 +0  39020000
[86a807705ef5af] jit-backend-dump}
[86a807705f28d0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1d72 +0  34020000
[86a807705f3626] jit-backend-dump}
[86a807705f687c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1d89 +0  39020000
[86a807705f75a7] jit-backend-dump}
[86a807705fa78d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1d9f +0  3F020000
[86a807705fb4ca] jit-backend-dump}
[86a807705fe5ec] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1dba +0  40020000
[86a807705ff323] jit-backend-dump}
[86a8077060238a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1dd0 +0  46020000
[86a807706030ac] jit-backend-dump}
[86a807706061e0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1de4 +0  4E020000
[86a80770606f33] jit-backend-dump}
[86a80770609fea] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1ded +0  61020000
[86a8077060ad24] jit-backend-dump}
[86a8077060ddff] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1dfb +0  6F020000
[86a8077060eb12] jit-backend-dump}
[86a80770611b39] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1e16 +0  70020000
[86a8077061282c] jit-backend-dump}
[86a807706158d4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1e2c +0  76020000
[86a807706165dd] jit-backend-dump}
[86a807706196f3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1e47 +0  77020000
[86a8077061a3ff] jit-backend-dump}
[86a8077061d4bf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1e5e +0  7C020000
[86a8077061e1b9] jit-backend-dump}
[86a8077062155d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39a897 +0  35740000
[86a8077062225d] jit-backend-dump}
[86a80770626143] jit-backend}
[86a80770629d29] {jit-log-opt-bridge
# bridge out of Guard 0x3355f40 with 44 ops
[p0, p1]
+198: guard_class(p1, 16499664, descr=<Guard0x33932e0>) [p0, p1]
+210: p3 = getfield_gc_r(p1, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+214: guard_class(p0, 16437216, descr=<Guard0x339ac80>) [p0, p1]
+226: p5 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+230: guard_nonnull_class(p5, ConstClass(ForwardLink), descr=<Guard0x3393340>) [p0, p1]
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
+249: p7 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+253: guard_nonnull(p7, descr=<Guard0x339acc8>) [p0, p1]
+269: i9 = instance_ptr_eq(p7, ConstPtr(ptr8))
+272: guard_true(i9, descr=<Guard0x339ad10>) [p0, p1]
debug_merge_point(0, 0, '0')
+278: guard_class(p3, 16500368, descr=<Guard0x339ad58>) [p0, p1]
+291: p11 = getfield_gc_r(p3, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+295: guard_class(p11, 16478072, descr=<Guard0x339ada0>) [p0, p1]
+309: p13 = getfield_gc_r(p11, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand4)')
+314: p14 = getfield_gc_r(p11, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+319: p15 = getfield_gc_r(p14, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+323: guard_nonnull_class(p15, 16478072, descr=<Guard0x33933a0>) [p0, p1]
+342: p17 = getfield_gc_r(p3, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+346: guard_nonnull_class(p17, 16471056, descr=<Guard0x3393400>) [p0, p1]
+365: p19 = getfield_gc_r(p17, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+369: guard_nonnull_class(p19, 16471056, descr=<Guard0x3393460>) [p0, p1]
+387: i21 = getfield_gc_i(p17, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+391: p22 = getfield_gc_r(p3, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+395: guard_nonnull_class(p22, 16471056, descr=<Guard0x33934c0>) [p0, p1]
+414: p24 = getfield_gc_r(p3, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+418: guard_nonnull_class(p24, 16471056, descr=<Guard0x3393520>) [p0, p1]
+436: p26 = getfield_gc_r(p15, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+447: guard_value(p26, ConstPtr(ptr27), descr=<Guard0x339ade8>) [p0, p1]
+456: i28 = instance_ptr_eq(p11, p15)
+459: guard_true(i28, descr=<Guard0x339ae30>) [p0, p1]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+465: p29 = getfield_gc_r(p11, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+470: guard_nonnull(p29, descr=<Guard0x3393580>) [p22, i21, p24, p19, p11, p0, p13, p5]
+479: guard_subclass(p29, ConstClass(W_Cell), descr=<Guard0x33935e0>) [p22, i21, p24, p19, p11, p0, p13, p5]
+506: p31 = getfield_gc_r(p29, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+510: guard_nonnull_class(p31, 16477696, descr=<Guard0x3393640>) [p22, i21, p24, p19, p11, p0, p13, p5]
+528: p33 = getfield_gc_r(p31, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+546: guard_value(p33, ConstPtr(ptr34), descr=<Guard0x33936a0>) [p22, i21, p24, p19, p11, p0, p13, p5]
+555: i35 = getfield_gc_i(p24, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+559: i37 = int_le(i35, 9223372036854775806)
+572: guard_true(i37, descr=<Guard0x3393700>) [p22, i21, p24, p19, p11, p0, p13, p5]
+578: jump(p11, p19, i21, p22, p24, p5, p13, p0, p29, p31, i35, p14, p15, p13, descr=TargetToken(53317968))
+672: --end of the loop--
[86a807706541ff] jit-log-opt-bridge}
[86a807706fd7b5] {jit-backend
[86a8077074c355] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a
[86a80770753684] jit-backend-dump}
[86a8077076108e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a22a4 +0  25000000
[86a807707625ee] jit-backend-dump}
[86a807707663fd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a2455 +0  25000000
[86a80770767196] jit-backend-dump}
[86a8077076a752] {jit-backend-addr
bridge out of Guard 0x335b6a0 has address 0x7fb5ed3a22a0 to 0x7fb5ed3a2450
       gc table: 0x7fb5ed3a2210
    jump target: 0x7fb5ed3a22a0
         resops: 0x7fb5ed3a22ae
       failures: 0x7fb5ed3a2450
            end: 0x7fb5ed3a261b
[86a8077076c852] jit-backend-addr}
[86a8077076fc83] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a22be +0  D1010000
[86a80770770a16] jit-backend-dump}
[86a80770773c7f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a22ce +0  DD010000
[86a8077077496a] jit-backend-dump}
[86a80770777af7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a22e5 +0  E2010000
[86a807707787cf] jit-backend-dump}
[86a8077077b8cc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a22f2 +0  F1010000
[86a8077077c5d2] jit-backend-dump}
[86a8077077f6c6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a2302 +0  FD010000
[86a80770780395] jit-backend-dump}
[86a80770783462] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a230f +0  0C020000
[86a8077078414c] jit-backend-dump}
[86a80770787225] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a2321 +0  16020000
[86a80770787eee] jit-backend-dump}
[86a8077078afee] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a2342 +0  11020000
[86a8077078bceb] jit-backend-dump}
[86a8077078eea9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a2359 +0  16020000
[86a8077078fb8a] jit-backend-dump}
[86a80770792d20] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a2370 +0  1B020000
[86a80770793a3f] jit-backend-dump}
[86a80770796c12] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a238b +0  1C020000
[86a807707978e7] jit-backend-dump}
[86a8077079a9a1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a2398 +0  2B020000
[86a8077079b6a7] jit-backend-dump}
[86a8077079e831] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a23ac +0  33020000
[86a8077079f51f] jit-backend-dump}
[86a807707a2696] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a23b5 +0  46020000
[86a807707a33bb] jit-backend-dump}
[86a807707a6793] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39a7fb +0  A17A0000
[86a807707a7493] jit-backend-dump}
[86a807707ab376] jit-backend}
[86a807707aef49] {jit-log-opt-bridge
# bridge out of Guard 0x335b6a0 with 48 ops
[p0, p1]
+166: guard_class(p1, 16499664, descr=<Guard0x3393760>) [p0, p1]
+178: p3 = getfield_gc_r(p1, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+182: guard_class(p0, 16435920, descr=<Guard0x339ae78>) [p0, p1]
+194: p5 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+198: guard_nonnull_class(p5, ConstClass(ForwardLink), descr=<Guard0x33937c0>) [p0, p1]
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
+217: p7 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+221: guard_nonnull(p7, descr=<Guard0x339aec0>) [p0, p1]
+237: i9 = instance_ptr_eq(p7, ConstPtr(ptr8))
+240: guard_true(i9, descr=<Guard0x339af08>) [p0, p1]
debug_merge_point(0, 0, '0')
+246: guard_class(p3, 16500368, descr=<Guard0x339af50>) [p0, p1]
+259: p11 = getfield_gc_r(p3, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+263: guard_class(p11, 16478072, descr=<Guard0x339af98>) [p0, p1]
+277: p13 = getfield_gc_r(p11, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand4)')
+282: p14 = getfield_gc_r(p11, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+287: p15 = getfield_gc_r(p14, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+291: guard_nonnull_class(p15, 16478072, descr=<Guard0x3393820>) [p0, p1]
+310: p17 = getfield_gc_r(p3, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+314: guard_nonnull_class(p17, 16471056, descr=<Guard0x3393880>) [p0, p1]
+333: p19 = getfield_gc_r(p17, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+337: guard_nonnull_class(p19, 16471056, descr=<Guard0x33938e0>) [p0, p1]
+356: i21 = getfield_gc_i(p17, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+360: p22 = getfield_gc_r(p3, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+364: guard_nonnull_class(p22, 16616448, descr=<Guard0x3393940>) [p0, p1]
+383: p24 = getfield_gc_r(p3, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+387: guard_nonnull(p24, descr=<Guard0x339afe0>) [p0, p1]
+396: p25 = getfield_gc_r(p15, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+407: guard_value(p25, ConstPtr(ptr26), descr=<Guard0x339b028>) [p0, p1]
+416: i27 = instance_ptr_eq(p11, p15)
+419: guard_true(i27, descr=<Guard0x339b070>) [p0, p1]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+425: p28 = new_with_vtable(descr=<SizeDescr 40>)
+469: p29 = new_with_vtable(descr=<SizeDescr 24>)
+480: setfield_gc(p29, i21, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+484: setfield_gc(p29, p22, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+488: p30 = new_with_vtable(descr=<SizeDescr 48>)
+499: setfield_gc(p28, p11, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+503: setfield_gc(p30, p5, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+507: setfield_gc(p28, p19, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+511: setfield_gc(p28, p29, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+515: setfield_gc(p28, p24, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+519: setfield_gc(p30, p13, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+523: setfield_gc(p30, p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+534: setfield_gc(p30, ConstPtr(ptr31), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+538: setfield_gc(p30, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+546: jump(p28, p30, descr=TargetToken(53317888))
+576: --end of the loop--
[86a807707da2fd] jit-log-opt-bridge}
[86a807709a4a55] {jit-backend
[86a80770a185f0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a
[86a80770a2007e] jit-backend-dump}
[86a80770a2a803] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a2814 +0  25000000
[86a80770a2ba32] jit-backend-dump}
[86a80770a2f502] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a2a45 +0  25000000
[86a80770a302db] jit-backend-dump}
[86a80770a3349f] {jit-backend-addr
bridge out of Guard 0x3381a90 has address 0x7fb5ed3a2810 to 0x7fb5ed3a2a40
       gc table: 0x7fb5ed3a2760
    jump target: 0x7fb5ed3a2810
         resops: 0x7fb5ed3a281e
       failures: 0x7fb5ed3a2a40
            end: 0x7fb5ed3a2c5f
[86a80770a355af] jit-backend-addr}
[86a80770a38a32] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a2834 +0  4B020000
[86a80770a397d1] jit-backend-dump}
[86a80770a3cbbf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a2845 +0  72020000
[86a80770a3d8c8] jit-backend-dump}
[86a80770a40b75] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a2861 +0  72020000
[86a80770a4182b] jit-backend-dump}
[86a80770a4493e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a2878 +0  77020000
[86a80770a45644] jit-backend-dump}
[86a80770a487d1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a2893 +0  78020000
[86a80770a494a3] jit-backend-dump}
[86a80770a4c55a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a28a8 +0  7F020000
[86a80770a4d232] jit-backend-dump}
[86a80770a50301] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a28b1 +0  92020000
[86a80770a50fe9] jit-backend-dump}
[86a80770a5407b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a28cd +0  92020000
[86a80770a54d66] jit-backend-dump}
[86a80770a57e5d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a28e5 +0  96020000
[86a80770a58b29] jit-backend-dump}
[86a80770a5bb93] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a28f2 +0  A5020000
[86a80770a5c88a] jit-backend-dump}
[86a80770a5f965] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a28fb +0  B8020000
[86a80770a60622] jit-backend-dump}
[86a80770a636a2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a2908 +0  C7020000
[86a80770a64396] jit-backend-dump}
[86a80770a6746b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a2911 +0  DA020000
[86a80770a68140] jit-backend-dump}
[86a80770a6b1d8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a292b +0  DC020000
[86a80770a6bec0] jit-backend-dump}
[86a80770a6efc9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a2938 +0  EB020000
[86a80770a6fc89] jit-backend-dump}
[86a80770a72ddc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a2941 +0  FE020000
[86a80770a73af1] jit-backend-dump}
[86a80770a76eae] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39f308 +0  04350000
[86a80770a77b3d] jit-backend-dump}
[86a80770a7b9e2] jit-backend}
[86a80770a7f4e3] {jit-log-opt-bridge
# bridge out of Guard 0x3381a90 with 78 ops
[p0, p1, p2, p3, p4, p5]
+198: guard_nonnull_class(p1, 16471056, descr=<Guard0x33939a0>) [p0, p1, p4, p5]
+216: guard_not_invalidated(descr=<Guard0x339b0b8>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(CellRef(my-try) AppRand1 '() (cons (car x) z))')
+216: p7 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+220: guard_class(p7, 16478072, descr=<Guard0x339b100>) [p0, p1, p4, p5]
+233: p9 = getfield_gc_r(p7, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+237: p10 = getfield_gc_r(p9, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+241: guard_nonnull_class(p10, 16478072, descr=<Guard0x3393a00>) [p0, p1, p4, p5]
+261: p12 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+265: guard_nonnull_class(p12, 16471056, descr=<Guard0x3393a60>) [p0, p1, p4, p5]
+284: i14 = getfield_gc_i(p12, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+288: p15 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+292: guard_nonnull_class(p15, 16471056, descr=<Guard0x3393ac0>) [p0, p1, p4, p5]
+311: p17 = getfield_gc_r(p10, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+323: guard_value(p17, ConstPtr(ptr18), descr=<Guard0x339b148>) [p0, p1, p4, p5]
+332: i19 = instance_ptr_eq(p7, p10)
+335: guard_true(i19, descr=<Guard0x339b190>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) AppRand1 '() (cons (car x) z))')
debug_merge_point(0, 0, '(let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))')
debug_merge_point(0, 0, '(CellRef(ok?) (car x) 1 z)')
+341: p20 = getfield_gc_r(p7, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+345: p21 = getfield_gc_r(p20, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+350: guard_nonnull_class(p21, 16477696, descr=<Guard0x3393b20>) [p0, p1, p4, p5]
+369: i23 = getfield_gc_i(p1, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+373: p24 = getfield_gc_r(p21, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+384: guard_value(p24, ConstPtr(ptr25), descr=<Guard0x339b1d8>) [p0, p1, p4, p5]
+393: p26 = getfield_gc_r(p7, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)')
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
debug_merge_point(0, 0, '(+ row dist)')
+393: i28 = int_add_ovf(i23, 1)
+400: guard_no_overflow(descr=<Guard0x339b220>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+406: i29 = int_eq(i14, i28)
+409: guard_false(i29, descr=<Guard0x339b268>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '(let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)))')
debug_merge_point(0, 0, '(- row dist)')
+415: i31 = int_sub_ovf(i23, 1)
+422: guard_no_overflow(descr=<Guard0x339b2b0>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand6)')
+428: i32 = int_eq(i14, i31)
+431: guard_false(i32, descr=<Guard0x339b2f8>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)')
debug_merge_point(0, 0, '(let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed)))')
debug_merge_point(0, 0, '(+ dist 1)')
debug_merge_point(0, 0, '(CellRef(ok?) row AppRand8 (cdr placed))')
+437: p33 = getfield_gc_r(p21, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize1.inst__vals_0 24 pure>)
+441: p34 = getfield_gc_r(p33, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+445: guard_nonnull_class(p34, 16477696, descr=<Guard0x3393b80>) [p0, p1, p4, p5]
+463: p36 = getfield_gc_r(p34, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+467: guard_value(p36, ConstPtr(ptr37), descr=<Guard0x339b340>) [p0, p1, p4, p5]
+476: i38 = instance_ptr_eq(p21, p34)
+479: guard_true(i38, descr=<Guard0x339b388>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) row AppRand8 (cdr placed))')
+485: p39 = new_with_vtable(descr=<SizeDescr 16>)
+529: p40 = new_with_vtable(descr=<SizeDescr 40>)
+540: p41 = new_with_vtable(descr=<SizeDescr 40>)
+551: setfield_gc(p41, p7, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+555: setfield_gc(p41, p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+566: setfield_gc(p41, ConstPtr(ptr42), descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+570: p43 = new_with_vtable(descr=<SizeDescr 24>)
+581: setfield_gc(p43, i14, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+585: setfield_gc(p43, p15, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+589: setfield_gc(p41, p43, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+593: p44 = new_with_vtable(descr=<SizeDescr 40>)
+604: setfield_gc(p44, p5, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+615: setfield_gc(p44, p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+619: setfield_gc(p44, p4, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+637: setfield_gc(p44, ConstPtr(ptr45), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+641: setfield_gc(p39, i23, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+645: setfield_gc(p40, p5, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+649: setfield_gc(p40, p41, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+653: setfield_gc(p40, p44, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+664: setfield_gc(p40, ConstPtr(ptr46), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+668: jump(p21, p39, 2, p15, p40, p5, i23, p33, p34, descr=TargetToken(52788208))
+736: --end of the loop--
[86a80770abf365] jit-log-opt-bridge}
[86a80770cc3678] {jit-backend
[86a80770d3c5a7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a2da
[86a80770d4477f] jit-backend-dump}
[86a80770d4eb4c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a2e54 +0  25000000
[86a80770d4fe6e] jit-backend-dump}
[86a80770d53a75] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a3085 +0  25000000
[86a80770d5483c] jit-backend-dump}
[86a80770d57d7a] {jit-backend-addr
bridge out of Guard 0x3381028 has address 0x7fb5ed3a2e50 to 0x7fb5ed3a3080
       gc table: 0x7fb5ed3a2da0
    jump target: 0x7fb5ed3a2e50
         resops: 0x7fb5ed3a2e5e
       failures: 0x7fb5ed3a3080
            end: 0x7fb5ed3a329f
[86a80770d5a058] jit-backend-addr}
[86a80770d5d562] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a2e74 +0  4B020000
[86a80770d5e341] jit-backend-dump}
[86a80770d61637] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a2e85 +0  72020000
[86a80770d6236e] jit-backend-dump}
[86a80770d65538] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a2ea1 +0  72020000
[86a80770d6620a] jit-backend-dump}
[86a80770d69304] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a2eb8 +0  77020000
[86a80770d69ffe] jit-backend-dump}
[86a80770d6d0ec] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a2ed3 +0  78020000
[86a80770d6ddd4] jit-backend-dump}
[86a80770d70fcf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a2ee8 +0  7F020000
[86a80770d71d0f] jit-backend-dump}
[86a80770d74e0f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a2ef1 +0  92020000
[86a80770d75b12] jit-backend-dump}
[86a80770d78be2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a2f0d +0  92020000
[86a80770d798cf] jit-backend-dump}
[86a80770d7caec] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a2f25 +0  96020000
[86a80770d7d7ef] jit-backend-dump}
[86a80770d80948] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a2f32 +0  A5020000
[86a80770d8167c] jit-backend-dump}
[86a80770d847bc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a2f3b +0  B8020000
[86a80770d854d5] jit-backend-dump}
[86a80770d8856d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a2f48 +0  C7020000
[86a80770d89264] jit-backend-dump}
[86a80770d8c2b0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a2f51 +0  DA020000
[86a80770d8cfcb] jit-backend-dump}
[86a80770d90039] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a2f6b +0  DC020000
[86a80770d90d0b] jit-backend-dump}
[86a80770d93d5a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a2f78 +0  EB020000
[86a80770d94a35] jit-backend-dump}
[86a80770d97b35] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a2f81 +0  FE020000
[86a80770d9881d] jit-backend-dump}
[86a80770d9bcf0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39dc72 +0  DA510000
[86a80770d9c9da] jit-backend-dump}
[86a80770da09bb] jit-backend}
[86a80770da4419] {jit-log-opt-bridge
# bridge out of Guard 0x3381028 with 78 ops
[p0, p1, p2, p3, p4, p5]
+198: guard_nonnull_class(p1, 16471056, descr=<Guard0x3393be0>) [p0, p1, p4, p5]
+216: guard_not_invalidated(descr=<Guard0x339b3d0>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(CellRef(my-try) AppRand1 '() (cons (car x) z))')
+216: p7 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+220: guard_class(p7, 16478072, descr=<Guard0x339b418>) [p0, p1, p4, p5]
+233: p9 = getfield_gc_r(p7, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+237: p10 = getfield_gc_r(p9, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+241: guard_nonnull_class(p10, 16478072, descr=<Guard0x3393c40>) [p0, p1, p4, p5]
+261: p12 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+265: guard_nonnull_class(p12, 16471056, descr=<Guard0x3393ca0>) [p0, p1, p4, p5]
+284: i14 = getfield_gc_i(p12, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+288: p15 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+292: guard_nonnull_class(p15, 16471056, descr=<Guard0x3393d00>) [p0, p1, p4, p5]
+311: p17 = getfield_gc_r(p10, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+323: guard_value(p17, ConstPtr(ptr18), descr=<Guard0x339b460>) [p0, p1, p4, p5]
+332: i19 = instance_ptr_eq(p7, p10)
+335: guard_true(i19, descr=<Guard0x339b4a8>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) AppRand1 '() (cons (car x) z))')
debug_merge_point(0, 0, '(let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))')
debug_merge_point(0, 0, '(CellRef(ok?) (car x) 1 z)')
+341: p20 = getfield_gc_r(p7, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+345: p21 = getfield_gc_r(p20, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+350: guard_nonnull_class(p21, 16477696, descr=<Guard0x3393d60>) [p0, p1, p4, p5]
+369: i23 = getfield_gc_i(p1, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+373: p24 = getfield_gc_r(p21, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+384: guard_value(p24, ConstPtr(ptr25), descr=<Guard0x339b4f0>) [p0, p1, p4, p5]
+393: p26 = getfield_gc_r(p7, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)')
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
debug_merge_point(0, 0, '(+ row dist)')
+393: i28 = int_add_ovf(i23, 1)
+400: guard_no_overflow(descr=<Guard0x339b538>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+406: i29 = int_eq(i14, i28)
+409: guard_false(i29, descr=<Guard0x339b580>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '(let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)))')
debug_merge_point(0, 0, '(- row dist)')
+415: i31 = int_sub_ovf(i23, 1)
+422: guard_no_overflow(descr=<Guard0x339b5c8>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand6)')
+428: i32 = int_eq(i14, i31)
+431: guard_false(i32, descr=<Guard0x339b610>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)')
debug_merge_point(0, 0, '(let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed)))')
debug_merge_point(0, 0, '(+ dist 1)')
debug_merge_point(0, 0, '(CellRef(ok?) row AppRand8 (cdr placed))')
+437: p33 = getfield_gc_r(p21, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize1.inst__vals_0 24 pure>)
+441: p34 = getfield_gc_r(p33, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+445: guard_nonnull_class(p34, 16477696, descr=<Guard0x3393dc0>) [p0, p1, p4, p5]
+463: p36 = getfield_gc_r(p34, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+467: guard_value(p36, ConstPtr(ptr37), descr=<Guard0x339b658>) [p0, p1, p4, p5]
+476: i38 = instance_ptr_eq(p21, p34)
+479: guard_true(i38, descr=<Guard0x339b6a0>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) row AppRand8 (cdr placed))')
+485: p39 = new_with_vtable(descr=<SizeDescr 16>)
+529: p40 = new_with_vtable(descr=<SizeDescr 40>)
+540: p41 = new_with_vtable(descr=<SizeDescr 40>)
+551: setfield_gc(p41, p7, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+555: setfield_gc(p41, p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+566: setfield_gc(p41, ConstPtr(ptr42), descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+570: p43 = new_with_vtable(descr=<SizeDescr 24>)
+581: setfield_gc(p43, i14, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+585: setfield_gc(p43, p15, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+589: setfield_gc(p41, p43, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+593: p44 = new_with_vtable(descr=<SizeDescr 40>)
+604: setfield_gc(p44, p5, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+615: setfield_gc(p44, p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+619: setfield_gc(p44, p4, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+637: setfield_gc(p44, ConstPtr(ptr45), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+641: setfield_gc(p39, i23, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+645: setfield_gc(p40, p5, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+649: setfield_gc(p40, p41, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+653: setfield_gc(p40, p44, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+664: setfield_gc(p40, ConstPtr(ptr46), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+668: jump(p21, p39, 2, p15, p40, p5, i23, p33, p34, descr=TargetToken(52788208))
+736: --end of the loop--
[86a80770ded4c6] jit-log-opt-bridge}
[86a80770fe38e3] {jit-backend
[86a80771043164] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a33a
[86a8077104a38f] jit-backend-dump}
[86a807710547d1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a3434 +0  25000000
[86a80771055a16] jit-backend-dump}
[86a8077105964b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a3625 +0  25000000
[86a8077105a483] jit-backend-dump}
[86a8077105da97] {jit-backend-addr
bridge out of Guard 0x331f340 has address 0x7fb5ed3a3430 to 0x7fb5ed3a3620
       gc table: 0x7fb5ed3a33a0
    jump target: 0x7fb5ed3a3430
         resops: 0x7fb5ed3a343e
       failures: 0x7fb5ed3a3620
            end: 0x7fb5ed3a37cf
[86a8077105fc99] jit-backend-addr}
[86a80771063453] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a3454 +0  0B020000
[86a8077106424b] jit-backend-dump}
[86a807710675ac] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a3465 +0  32020000
[86a807710682e0] jit-backend-dump}
[86a8077106b454] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a3481 +0  32020000
[86a8077106c17f] jit-backend-dump}
[86a8077106f34f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a3499 +0  36020000
[86a807710700ab] jit-backend-dump}
[86a80771073159] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a34b5 +0  36020000
[86a80771073e9c] jit-backend-dump}
[86a80771076ef7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a34ca +0  3D020000
[86a80771077c1f] jit-backend-dump}
[86a8077107ac6e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a34d3 +0  50020000
[86a8077107b980] jit-backend-dump}
[86a8077107e97f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a34ef +0  50020000
[86a8077107f6a1] jit-backend-dump}
[86a8077108269a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a3507 +0  54020000
[86a807710833a9] jit-backend-dump}
[86a807710863a6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a3518 +0  5F020000
[86a807710870cd] jit-backend-dump}
[86a8077108a0d6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a3521 +0  72020000
[86a8077108ade5] jit-backend-dump}
[86a8077108ddad] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a3539 +0  76020000
[86a8077108eacc] jit-backend-dump}
[86a80771091d78] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed395918 +0  14DB0000
[86a80771092a54] jit-backend-dump}
[86a80771096a37] jit-backend}
[86a8077109a4dc] {jit-log-opt-bridge
# bridge out of Guard 0x331f340 with 68 ops
[p0, p1, p2, p3, p4, p5]
+166: guard_nonnull_class(p1, 16471056, descr=<Guard0x3393e20>) [p0, p1, p4, p5]
+184: guard_not_invalidated(descr=<Guard0x339b6e8>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(CellRef(my-try) AppRand1 '() (cons (car x) z))')
+184: p7 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+188: guard_class(p7, 16478072, descr=<Guard0x339b730>) [p0, p1, p4, p5]
+201: p9 = getfield_gc_r(p7, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+205: p10 = getfield_gc_r(p9, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+209: guard_nonnull_class(p10, 16478072, descr=<Guard0x3393e80>) [p0, p1, p4, p5]
+229: p12 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+233: guard_nonnull_class(p12, 16471056, descr=<Guard0x3393ee0>) [p0, p1, p4, p5]
+253: i14 = getfield_gc_i(p12, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+257: p15 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+261: guard_nonnull_class(p15, 16471056, descr=<Guard0x3393f40>) [p0, p1, p4, p5]
+281: p17 = getfield_gc_r(p10, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+293: guard_value(p17, ConstPtr(ptr18), descr=<Guard0x339b778>) [p0, p1, p4, p5]
+302: i19 = instance_ptr_eq(p7, p10)
+305: guard_true(i19, descr=<Guard0x339b7c0>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) AppRand1 '() (cons (car x) z))')
debug_merge_point(0, 0, '(let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))')
debug_merge_point(0, 0, '(CellRef(ok?) (car x) 1 z)')
+311: p20 = getfield_gc_r(p7, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+315: p21 = getfield_gc_r(p20, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+320: guard_nonnull_class(p21, 16477696, descr=<Guard0x3393fa0>) [p0, p1, p4, p5]
+339: i23 = getfield_gc_i(p1, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+343: p24 = getfield_gc_r(p21, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+354: guard_value(p24, ConstPtr(ptr25), descr=<Guard0x339b808>) [p0, p1, p4, p5]
+363: p26 = getfield_gc_r(p7, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)')
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
debug_merge_point(0, 0, '(+ row dist)')
+367: i28 = int_add_ovf(i23, 1)
+374: guard_no_overflow(descr=<Guard0x339b850>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+380: i29 = int_eq(i14, i28)
+383: guard_true(i29, descr=<Guard0x339b898>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '#f')
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand4)')
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand4)')
+389: p30 = getfield_gc_r(p1, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+393: guard_nonnull_class(p30, 16471056, descr=<Guard0x33ae020>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+413: p32 = new_with_vtable(descr=<SizeDescr 40>)
+457: p33 = new_with_vtable(descr=<SizeDescr 24>)
+468: setfield_gc(p33, i23, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+479: setfield_gc(p33, ConstPtr(ptr34), descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+483: p35 = new_with_vtable(descr=<SizeDescr 24>)
+494: setfield_gc(p35, i14, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+498: setfield_gc(p35, p15, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+502: p36 = new_with_vtable(descr=<SizeDescr 48>)
+514: p37 = new_with_vtable(descr=<SizeDescr 40>)
+525: setfield_gc(p37, p5, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+536: setfield_gc(p37, p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+540: setfield_gc(p37, p4, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+558: setfield_gc(p37, ConstPtr(ptr38), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+562: setfield_gc(p32, p7, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+566: setfield_gc(p32, p30, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+570: setfield_gc(p32, p35, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+574: setfield_gc(p32, p33, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+578: setfield_gc(p36, p5, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+582: setfield_gc(p36, p26, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+586: setfield_gc(p36, p37, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+597: setfield_gc(p36, ConstPtr(ptr39), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+601: setfield_gc(p36, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+609: jump(p32, p36, descr=TargetToken(53317888))
+640: --end of the loop--
[86a807710d0694] jit-log-opt-bridge}
[86a807712432fa] {jit-backend
[86a807712a26ed] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a
[86a807712aa946] jit-backend-dump}
[86a807712b5191] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a39e4 +0  25000000
[86a807712b6368] jit-backend-dump}
[86a807712b9f42] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a3c65 +0  25000000
[86a807712bad46] jit-backend-dump}
[86a807712be042] {jit-backend-addr
bridge out of Guard 0x335ad58 has address 0x7fb5ed3a39e0 to 0x7fb5ed3a3c60
       gc table: 0x7fb5ed3a3930
    jump target: 0x7fb5ed3a39e0
         resops: 0x7fb5ed3a39ee
       failures: 0x7fb5ed3a3c60
            end: 0x7fb5ed3a3ead
[86a807712c0347] jit-backend-addr}
[86a807712c382a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a39fe +0  B3020000
[86a807712c4649] jit-backend-dump}
[86a807712c789d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a3a0e +0  BF020000
[86a807712c85c8] jit-backend-dump}
[86a807712cb7d5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a3a25 +0  C4020000
[86a807712cc540] jit-backend-dump}
[86a807712cf6ef] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a3a32 +0  D3020000
[86a807712d0429] jit-backend-dump}
[86a807712d365b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a3a42 +0  DF020000
[86a807712d4352] jit-backend-dump}
[86a807712d7604] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a3a4f +0  0A030000
[86a807712d82ef] jit-backend-dump}
[86a807712db68a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a3a67 +0  0E030000
[86a807712dc38d] jit-backend-dump}
[86a807712df4e9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a3a80 +0  11030000
[86a807712e01f2] jit-backend-dump}
[86a807712e33e7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a3a97 +0  16030000
[86a807712e4115] jit-backend-dump}
[86a807712e726e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a3b0b +0  BE020000
[86a807712e7f9c] jit-backend-dump}
[86a807712eb154] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a3b1d +0  C8020000
[86a807712ebe54] jit-backend-dump}
[86a807712eef85] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a3b35 +0  CC020000
[86a807712efcb0] jit-backend-dump}
[86a807712f2ed6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a3b51 +0  CC020000
[86a807712f3c00] jit-backend-dump}
[86a807712f6d28] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a3b73 +0  C6020000
[86a807712f7a41] jit-backend-dump}
[86a807712fabf6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a3b88 +0  CD020000
[86a807712fb902] jit-backend-dump}
[86a807712fea2d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a3b91 +0  E0020000
[86a807712ff73f] jit-backend-dump}
[86a80771302906] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a3ba1 +0  EC020000
[86a80771303603] jit-backend-dump}
[86a807713069cf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39975b +0  81A20000
[86a807713076eb] jit-backend-dump}
[86a8077130b77a] jit-backend}
[86a8077130f36f] {jit-log-opt-bridge
# bridge out of Guard 0x335ad58 with 62 ops
[p0, p1]
+198: guard_class(p1, 16499664, descr=<Guard0x33ae080>) [p0, p1]
+210: p3 = getfield_gc_r(p1, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+214: guard_class(p0, 16435920, descr=<Guard0x339b8e0>) [p0, p1]
+226: p5 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+230: guard_nonnull_class(p5, ConstClass(ForwardLink), descr=<Guard0x33ae0e0>) [p0, p1]
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
+249: p7 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+253: guard_nonnull(p7, descr=<Guard0x339b928>) [p0, p1]
+269: i9 = instance_ptr_eq(p7, ConstPtr(ptr8))
+272: guard_false(i9, descr=<Guard0x339b970>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z)))')
debug_merge_point(0, 0, '(append (cdr x) y)')
+278: guard_not_invalidated(descr=<Guard0x339b9b8>) [p0, p1]
+278: guard_class(p3, 16500368, descr=<Guard0x339ba00>) [p0, p1]
+291: p11 = getfield_gc_r(p3, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+295: guard_nonnull_class(p11, 16471056, descr=<Guard0x33ae140>) [p0, p1]
+315: p13 = getfield_gc_r(p11, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+320: guard_nonnull_class(p13, 16616448, descr=<Guard0x33ae1a0>) [p0, p1]
+340: p15 = getfield_gc_r(p3, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+344: guard_nonnull_class(p15, 16616448, descr=<Guard0x33ae200>) [p0, p1]
+363: p18 = call_r(ConstClass(append_two), p13, p15, descr=<Callr 8 rr EF=5>)
+464: guard_no_exception(descr=<Guard0x33ae260>) [p3, p18, p15, p13, p0, p5]
+479: guard_nonnull_class(p18, 16616448, descr=<Guard0x33ae2c0>) [p3, p18, p15, p13, p0, p5]
debug_merge_point(0, 0, '(CellRef(my-try) AppRand1 '() (cons (car x) z))')
+497: p20 = getfield_gc_r(p3, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+508: guard_class(p20, 16478072, descr=<Guard0x339ba48>) [p3, p18, p15, p13, p0, p5]
+521: p22 = getfield_gc_r(p20, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+525: p23 = getfield_gc_r(p22, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+529: guard_nonnull_class(p23, 16478072, descr=<Guard0x33ae320>) [p3, p18, p15, p13, p0, p5]
+549: i25 = getfield_gc_i(p11, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+560: p26 = getfield_gc_r(p3, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+564: guard_nonnull_class(p26, 16471056, descr=<Guard0x33ae380>) [p3, p18, p15, p13, p0, p5]
+583: p28 = getfield_gc_r(p23, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+595: guard_value(p28, ConstPtr(ptr29), descr=<Guard0x339ba90>) [p3, p18, p15, p13, p0, p5]
+604: i30 = instance_ptr_eq(p20, p23)
+607: guard_true(i30, descr=<Guard0x339bad8>) [p3, p18, p15, p13, p0, p5]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) AppRand1 '() (cons (car x) z))')
+620: i32 = instance_ptr_eq(p18, ConstPtr(ptr31))
+623: guard_true(i32, descr=<Guard0x339bb20>) [p3, p18, p15, p13, p0, p5]
debug_merge_point(0, 0, '(if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0)')
debug_merge_point(0, 0, '(begin (if trace? (begin (write z) (newline)) (void)) 1)')
+629: p33 = getfield_gc_r(p20, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(if trace? (begin (write z) (newline)) (void))')
debug_merge_point(0, 0, '(void)')
debug_merge_point(0, 0, '1')
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (void)')
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+633: p34 = new_with_vtable(descr=<SizeDescr 40>)
+674: p35 = new_with_vtable(descr=<SizeDescr 24>)
+685: setfield_gc(p35, i25, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+689: setfield_gc(p35, p15, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+700: p36 = new_with_vtable(descr=<SizeDescr 48>)
+712: setfield_gc(p34, p20, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+716: setfield_gc(p36, p5, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+727: setfield_gc(p34, p13, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+738: setfield_gc(p34, p35, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+742: setfield_gc(p34, p26, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+746: setfield_gc(p36, p33, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+750: setfield_gc(p36, p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+768: setfield_gc(p36, ConstPtr(ptr37), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+772: setfield_gc(p36, 1, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+780: jump(p34, p36, descr=TargetToken(53317888))
+816: --end of the loop--
[86a80771341274] jit-log-opt-bridge}
[86a807714b0ae9] {jit-backend
[86a80771512c38] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a
[86a8077151a8c5] jit-backend-dump}
[86a807715252c3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a40b4 +0  25000000
[86a807715266df] jit-backend-dump}
[86a8077152a5ea] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a42b5 +0  25000000
[86a8077152b4d0] jit-backend-dump}
[86a8077152ea08] {jit-backend-addr
bridge out of Guard 0x3379e80 has address 0x7fb5ed3a40b0 to 0x7fb5ed3a42b0
       gc table: 0x7fb5ed3a4000
    jump target: 0x7fb5ed3a40b0
         resops: 0x7fb5ed3a40be
       failures: 0x7fb5ed3a42b0
            end: 0x7fb5ed3a44eb
[86a8077153103b] jit-backend-addr}
[86a80771534f6a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a40d2 +0  39020000
[86a80771535e3b] jit-backend-dump}
[86a807715392d1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a40e9 +0  3E020000
[86a8077153a048] jit-backend-dump}
[86a8077153d203] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a40f6 +0  4D020000
[86a8077153df15] jit-backend-dump}
[86a807715410f8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a40ff +0  60020000
[86a80771541df5] jit-backend-dump}
[86a80771544f82] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a4108 +0  73020000
[86a80771545c8b] jit-backend-dump}
[86a80771548e49] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a411c +0  7B020000
[86a80771549b1e] jit-backend-dump}
[86a8077154cc77] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a4132 +0  81020000
[86a8077154d93d] jit-backend-dump}
[86a80771550b26] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a414a +0  85020000
[86a807715517e2] jit-backend-dump}
[86a80771554b28] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a4157 +0  94020000
[86a8077155583d] jit-backend-dump}
[86a80771558bbd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a4167 +0  A0020000
[86a807715598f7] jit-backend-dump}
[86a8077155cb91] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a4185 +0  9E020000
[86a8077155d8c8] jit-backend-dump}
[86a80771560b03] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a419b +0  A4020000
[86a80771561809] jit-backend-dump}
[86a80771564981] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a41b1 +0  AA020000
[86a80771565678] jit-backend-dump}
[86a8077156878d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a41cb +0  AC020000
[86a807715694a3] jit-backend-dump}
[86a8077156c5b2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a41df +0  B4020000
[86a8077156d2af] jit-backend-dump}
[86a807715703e0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a41fa +0  B5020000
[86a807715710d7] jit-backend-dump}
[86a807715741b0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a4203 +0  C8020000
[86a80771574ea0] jit-backend-dump}
[86a807715781f2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39eab1 +0  FB550000
[86a80771578edd] jit-backend-dump}
[86a8077157cf31] jit-backend}
[86a80771580ab8] {jit-log-opt-bridge
# bridge out of Guard 0x3379e80 with 69 ops
[i0, p1, p2, p3, p4, p5]
+198: guard_not_invalidated(descr=<Guard0x33ae3e0>) [i0, p1, p2, p3, p4, p5]
+198: i6 = getfield_gc_i(p2, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+202: i7 = int_add_ovf(i6, i0)
+208: guard_no_overflow(descr=<Guard0x339bb68>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
+214: p8 = getfield_gc_r(p4, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+218: guard_nonnull_class(p8, ConstClass(ForwardLink), descr=<Guard0x33ae440>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+237: i10 = getfield_gc_i(p1, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+241: i11 = int_eq(i10, i7)
+244: guard_false(i11, descr=<Guard0x339bbb0>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '(let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)))')
debug_merge_point(0, 0, '(- row dist)')
+250: i12 = int_sub_ovf(i6, i0)
+253: guard_no_overflow(descr=<Guard0x339bbf8>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand6)')
+259: i13 = int_eq(i10, i12)
+262: guard_true(i13, descr=<Guard0x339bc40>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)')
debug_merge_point(0, 0, '#f')
+268: p14 = getfield_gc_r(p4, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+279: guard_value(p14, ConstPtr(ptr15), descr=<Guard0x339bc88>) [i0, p1, p2, p3, p4, p5]
+288: p16 = getfield_gc_r(p4, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+292: p17 = getfield_gc_r(p4, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand6)')
+296: guard_class(p17, 16435920, descr=<Guard0x339bcd0>) [i0, p1, p2, p3, p4, p5]
+310: p19 = getfield_gc_r(p17, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+315: guard_nonnull_class(p19, ConstClass(ForwardLink), descr=<Guard0x33ae4a0>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
+334: guard_class(p16, 16500368, descr=<Guard0x339bd18>) [i0, p1, p2, p3, p4, p5]
+347: p22 = getfield_gc_r(p16, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+351: guard_class(p22, 16478072, descr=<Guard0x339bd60>) [i0, p1, p2, p3, p4, p5]
+363: p24 = getfield_gc_r(p22, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand6)')
+367: p25 = getfield_gc_r(p22, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+371: p26 = getfield_gc_r(p25, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+375: guard_nonnull_class(p26, 16478072, descr=<Guard0x33ae500>) [i0, p1, p2, p3, p4, p5]
+393: p28 = getfield_gc_r(p16, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+397: guard_nonnull_class(p28, 16471056, descr=<Guard0x33ae560>) [i0, p1, p2, p3, p4, p5]
+415: p30 = getfield_gc_r(p28, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+419: guard_nonnull_class(p30, 16616448, descr=<Guard0x33ae5c0>) [i0, p1, p2, p3, p4, p5]
+437: i32 = getfield_gc_i(p28, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+441: p33 = getfield_gc_r(p16, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+445: guard_nonnull_class(p33, 16616448, descr=<Guard0x33ae620>) [i0, p1, p2, p3, p4, p5]
+463: p35 = getfield_gc_r(p16, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+474: guard_nonnull(p35, descr=<Guard0x339bda8>) [i0, p1, p2, p3, p4, p5]
+483: p36 = getfield_gc_r(p26, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+501: guard_value(p36, ConstPtr(ptr37), descr=<Guard0x339bdf0>) [i0, p1, p2, p3, p4, p5]
+510: i38 = instance_ptr_eq(p22, p26)
+513: guard_true(i38, descr=<Guard0x339be38>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+519: p39 = new_with_vtable(descr=<SizeDescr 40>)
+563: p40 = new_with_vtable(descr=<SizeDescr 24>)
+574: setfield_gc(p40, i32, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+578: setfield_gc(p40, p33, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+582: p41 = new_with_vtable(descr=<SizeDescr 48>)
+593: setfield_gc(p41, p19, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+604: setfield_gc(p41, ConstPtr(ptr42), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+608: setfield_gc(p41, p24, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+612: setfield_gc(p41, p17, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+616: setfield_gc(p39, p22, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+620: setfield_gc(p39, p30, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+631: setfield_gc(p39, p40, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+635: setfield_gc(p39, p35, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+646: setfield_gc(p41, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+654: jump(p39, p41, descr=TargetToken(53317888))
+688: --end of the loop--
[86a807715bc1ae] jit-log-opt-bridge}
[86a8077182c216] {jit-backend
[86a80771896ed8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a46a0 +0  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8C5202000048FF0425103F33038139D00C01000F85000000004C8B79204983FF01720741813F509A00000F85000000004C8B35F0FEFFFF4D39F70F8400000000813A101100000F85000000004C8B72084983FE01720741813E900F00000F85000000004C8B71104983FE01720741813E601400000F85000000004C8B69184983FD01720841817D00601400000F85000000004D8B66084D8B75084D89E54D01F40F80000000004D8B57084D39E20F84000000004D29F50F80000000004D39EA0F85000000004C8B6A204C8B15AFFEFFFF4D39D50F85000000004C8B52104C8B6A1841817D00101100000F85000000004D8B75084983FE01720741813E900F00000F850000000041813AD00C01000F85000000004D8B620841813C24B8B500000F85000000004D8B7C24084D8B4C24204D8B41084983F8017207418138B8B500000F85000000004D8B4A104983F9017207418139509A00000F8500000000498B79104883FF017206813F509A00000F8500000000498B71084D8B4A184983F901720741813940D202000F8500000000498B5A204885DB0F84000000004D8B5010488B0531FEFFFF4939C20F85000000004D39C40F8500000000488B0C25F091F900488D5170483B14251092F9000F87AB00000048891425F091F90048C701D00C0100488D512848C702509A0000488972084C894A104C8D4A1849C70120160000488959204D8971084889791048895118488B15D9FDFFFF498951204D8979104D8969184C89610849C741280000000048898D300100004C898D3801000049BB506239EDB57F000041FFE366666666662E0F1F84000000000048C7442408FFFFFF0049BBF8443AEDB57F00004C895D204D8D9BF8DDFEFF41FFD3E988FDFFFF49BB88463AEDB57F00004C895D204D8D9B68E4FEFF41FFD3E940FFFFFFFF3577FCFFFF49BB08453AEDB57F000041534D8D9BF8DAFEFF41FFE3FF3563FCFFFF49BB18453AEDB57F000041534D8D9BE8DAFEFF41FFE3FF3557FCFFFF49BB28453AEDB57F000041534D8D9BD8DAFEFF41FFE3FF3543FCFFFF49BB38453AEDB57F000041534D8D9BC8DAFEFF41FFE3FF352FFCFFFF49BB48453AEDB57F000041534D8D9BB8DAFEFF41FFE3FF351BFCFFFF49BB58453AEDB57F000041534D8D9BA8DAFEFF41FFE3FF3507FCFFFF49BB68453AEDB57F000041534D8D9B98DAFEFF41FFE3FF35F3FBFFFF49BB78453AEDB57F000041534D8D9B88DAFEFF41FFE3FF35DFFBFFFF49BB88453AEDB57F000041534D8D9B78DAFEFF41FFE3FF35CBFBFFFF49BB98453AEDB57F000041534D8D9B68DAFEFF41FFE3FF35B7FBFFFF49BBA8453AEDB57F000041534D8D9B58DAFEFF41FFE3FF35A3FBFFFF49BBB8453AEDB57F000041534D8D9B48DAFEFF41FFE3FF3597FBFFFF49BBC8453AEDB57F000041534D8D9B38DAFEFF41FFE3FF3583FBFFFF49BBD8453AEDB57F000041534D8D9B28DAFEFF41FFE3FF356FFBFFFF49BBE8453AEDB57F000041534D8D9B18DAFEFF41FFE3FF355BFBFFFF49BBF8453AEDB57F000041534D8D9B08DAFEFF41FFE3FF3547FBFFFF49BB08463AEDB57F000041534D8D9BF8D9FEFF41FFE3FF3533FBFFFF49BB18463AEDB57F000041534D8D9BE8D9FEFF41FFE3FF351FFBFFFF49BB28463AEDB57F000041534D8D9BD8D9FEFF41FFE3FF350BFBFFFF49BB38463AEDB57F000041534D8D9BC8D9FEFF41FFE3FF35F7FAFFFF49BB48463AEDB57F000041534D8D9BB8D9FEFF41FFE3FF35E3FAFFFF49BB58463AEDB57F000041534D8D9BA8D9FEFF41FFE3FF35D7FAFFFF49BB68463AEDB57F000041534D8D9B98D9FEFF41FFE3FF35C3FAFFFF49BB78463AEDB57F000041534D8D9B88D9FEFF41FFE3
[86a8077189fbb2] jit-backend-dump}
[86a807718adf1c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a4784 +0  25000000
[86a807718af7f7] jit-backend-dump}
[86a807718b3da6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a49e5 +0  25000000
[86a807718b4d1c] jit-backend-dump}
[86a807718b81c4] {jit-backend-addr
bridge out of Guard 0x3378da0 has address 0x7fb5ed3a4780 to 0x7fb5ed3a49e0
       gc table: 0x7fb5ed3a46a0
    jump target: 0x7fb5ed3a4780
         resops: 0x7fb5ed3a478e
       failures: 0x7fb5ed3a49e0
            end: 0x7fb5ed3a4cc3
[86a807718ba504] jit-backend-addr}
[86a807718bda4e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a479e +0  81020000
[86a807718be886] jit-backend-dump}
[86a807718c1add] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a47b5 +0  86020000
[86a807718c2829] jit-backend-dump}
[86a807718c59d2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a47c5 +0  92020000
[86a807718c6718] jit-backend-dump}
[86a807718c9758] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a47d1 +0  A2020000
[86a807718ca46a] jit-backend-dump}
[86a807718cd502] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a47e8 +0  A7020000
[86a807718ce1d1] jit-backend-dump}
[86a807718d13e8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a47ff +0  C8020000
[86a807718d20eb] jit-backend-dump}
[86a807718d52a3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a4817 +0  CC020000
[86a807718d5fa3] jit-backend-dump}
[86a807718d90c8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a482b +0  D4020000
[86a807718d9e33] jit-backend-dump}
[86a807718dce57] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a4838 +0  E3020000
[86a807718ddb82] jit-backend-dump}
[86a807718e0b44] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a4841 +0  F6020000
[86a807718e1872] jit-backend-dump}
[86a807718e48c0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a484a +0  09030000
[86a807718e55a8] jit-backend-dump}
[86a807718e86b4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a485e +0  11030000
[86a807718e938d] jit-backend-dump}
[86a807718ec398] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a4874 +0  17030000
[86a807718ed0f7] jit-backend-dump}
[86a807718f0161] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a488b +0  1C030000
[86a807718f0e4f] jit-backend-dump}
[86a807718f3e30] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a4898 +0  2B030000
[86a807718f4b0e] jit-backend-dump}
[86a807718f7b35] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a48aa +0  35030000
[86a807718f881a] jit-backend-dump}
[86a807718fb7fd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a48cb +0  30030000
[86a807718fc4e5] jit-backend-dump}
[86a807718ff574] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a48e2 +0  35030000
[86a80771900249] jit-backend-dump}
[86a8077190326d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a48f8 +0  3B030000
[86a80771903f61] jit-backend-dump}
[86a80771906fc8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a4913 +0  3C030000
[86a80771907cb3] jit-backend-dump}
[86a8077190ac81] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a4920 +0  4B030000
[86a8077190b966] jit-backend-dump}
[86a8077190ea0d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a4934 +0  53030000
[86a8077190f6f2] jit-backend-dump}
[86a80771912703] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a493d +0  66030000
[86a80771913416] jit-backend-dump}
[86a8077191683d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39c488 +0  F4820000
[86a807719174c6] jit-backend-dump}
[86a8077191b365] jit-backend}
[86a8077191ef82] {jit-log-opt-bridge
# bridge out of Guard 0x3378da0 with 82 ops
[p0, p1]
+246: guard_class(p1, 16500368, descr=<Guard0x33ae680>) [p0, p1]
+258: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+262: guard_nonnull_class(p3, 16471056, descr=<Guard0x33ae6e0>) [p0, p1]
+288: i6 = instance_ptr_eq(p3, ConstPtr(ptr5))
+291: guard_false(i6, descr=<Guard0x339be80>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
+297: guard_class(p0, 16435920, descr=<Guard0x339bec8>) [p0, p1]
+309: p8 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+313: guard_nonnull_class(p8, ConstClass(ForwardLink), descr=<Guard0x33ae740>) [p0, p1]
debug_merge_point(0, 0, '(+ row dist)')
+332: guard_not_invalidated(descr=<Guard0x339bf10>) [p0, p1]
+332: p10 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+336: guard_nonnull_class(p10, ConstClass(W_Fixnum), descr=<Guard0x33ae7a0>) [p0, p1]
+355: p12 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+359: guard_nonnull_class(p12, ConstClass(W_Fixnum), descr=<Guard0x33ae800>) [p0, p1]
+379: i14 = getfield_gc_i(p10, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+383: i15 = getfield_gc_i(p12, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+387: i16 = int_add_ovf(i14, i15)
+393: guard_no_overflow(descr=<Guard0x339bf58>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+399: i17 = getfield_gc_i(p3, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+403: i18 = int_eq(i17, i16)
+406: guard_false(i18, descr=<Guard0x339bfa0>) [p0, p1]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '(let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)))')
debug_merge_point(0, 0, '(- row dist)')
+412: i19 = int_sub_ovf(i14, i15)
+415: guard_no_overflow(descr=<Guard0x33b4020>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand6)')
+421: i20 = int_eq(i17, i19)
+424: guard_true(i20, descr=<Guard0x33b4068>) [p0, p1]
debug_merge_point(0, 0, '(if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)')
debug_merge_point(0, 0, '#f')
+430: p21 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+441: guard_value(p21, ConstPtr(ptr22), descr=<Guard0x33b40b0>) [p0, p1]
+450: p23 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+454: p24 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand6)')
+458: guard_class(p24, 16435920, descr=<Guard0x33b40f8>) [p0, p1]
+472: p26 = getfield_gc_r(p24, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+476: guard_nonnull_class(p26, ConstClass(ForwardLink), descr=<Guard0x33ae860>) [p0, p1]
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
+495: guard_class(p23, 16500368, descr=<Guard0x33b4140>) [p0, p1]
+508: p29 = getfield_gc_r(p23, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+512: guard_class(p29, 16478072, descr=<Guard0x33b4188>) [p0, p1]
+526: p31 = getfield_gc_r(p29, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand6)')
+531: p32 = getfield_gc_r(p29, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+536: p33 = getfield_gc_r(p32, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+540: guard_nonnull_class(p33, 16478072, descr=<Guard0x33ae8c0>) [p0, p1]
+559: p35 = getfield_gc_r(p23, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+563: guard_nonnull_class(p35, 16471056, descr=<Guard0x33ae920>) [p0, p1]
+582: p37 = getfield_gc_r(p35, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+586: guard_nonnull_class(p37, 16471056, descr=<Guard0x33ae980>) [p0, p1]
+604: i39 = getfield_gc_i(p35, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+608: p40 = getfield_gc_r(p23, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+612: guard_nonnull_class(p40, 16616448, descr=<Guard0x33ae9e0>) [p0, p1]
+631: p42 = getfield_gc_r(p23, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+635: guard_nonnull(p42, descr=<Guard0x33b41d0>) [p0, p1]
+644: p43 = getfield_gc_r(p33, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+655: guard_value(p43, ConstPtr(ptr44), descr=<Guard0x33b4218>) [p0, p1]
+664: i45 = instance_ptr_eq(p29, p33)
+667: guard_true(i45, descr=<Guard0x33b4260>) [p0, p1]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+673: p46 = new_with_vtable(descr=<SizeDescr 40>)
+714: p47 = new_with_vtable(descr=<SizeDescr 24>)
+725: setfield_gc(p47, i39, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+729: setfield_gc(p47, p40, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+733: p48 = new_with_vtable(descr=<SizeDescr 48>)
+744: setfield_gc(p46, p42, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+748: setfield_gc(p48, p26, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+752: setfield_gc(p46, p37, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+756: setfield_gc(p46, p47, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+767: setfield_gc(p48, ConstPtr(ptr49), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+771: setfield_gc(p48, p31, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+775: setfield_gc(p48, p24, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+779: setfield_gc(p46, p29, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+783: setfield_gc(p48, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+791: jump(p46, p48, descr=TargetToken(53317888))
+832: --end of the loop--
[86a80771962ee9] jit-log-opt-bridge}
[86a80771b50dc9] {jit-backend
[86a80771baec16] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a4e30 +0  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8CF201000048FF0425B03F33038139D00C01000F85000000004C8B79104983FF01720741813F509A00000F85000000004C8B3510FFFFFF4D39F70F8400000000813B101100000F85000000004C8B6B084983FD01720841817D00900F00000F85000000004C8B610841813C24B8B500000F85000000004D8B5424184D8B4A084983F901720741813940B400000F85000000004D8B57084C8B41204983F8017207418138509A00000F8500000000498B79104C8B0DC7FEFFFF4C39CF0F85000000004D8B4C24084D39F00F84000000004D89D64983C2010F8000000000498B78084C39D70F84000000004D89F24983EE010F80000000004C39F70F85000000004D8B742420498B7E084883FF017206813FB8B500000F85000000004D8B77104983FE01720741813E40D202000F85000000004C8B79184983FF01720741813F40D202000F8500000000488B7710488B1584FEFFFF4839D60F85000000004939FC0F8500000000488B0C25F091F900488D5170483B14251092F9000F879E00000048891425F091F90048C701D00C0100488D512848C702509A00004C8952084C897A104C8D7A1849C707201600004C8971104D896F084C8961084C894120488951184D894F1049895F18488B1D20FEFFFF49895F2049C747280000000048898D300100004C89BD3801000049BB506239EDB57F000041FFE39048C7442408FFFFFF0049BBD04C3AEDB57F00004C895D204D8D9B20D6FEFF41FFD3E9E8FDFFFF49BB204E3AEDB57F00004C895D204D8D9BD0DCFEFF41FFD3E94DFFFFFFFF35F7FCFFFF49BBE04C3AEDB57F000041534D8D9B20D3FEFF41FFE3FF35E3FCFFFF49BBF04C3AEDB57F000041534D8D9B10D3FEFF41FFE3FF35D7FCFFFF49BB004D3AEDB57F000041534D8D9B00D3FEFF41FFE3FF35C3FCFFFF49BB104D3AEDB57F000041534D8D9BF0D2FEFF41FFE3FF35AFFCFFFF49BB204D3AEDB57F000041534D8D9BE0D2FEFF41FFE3FF359BFCFFFF49BB304D3AEDB57F000041534D8D9BD0D2FEFF41FFE3FF3587FCFFFF49BB404D3AEDB57F000041534D8D9BC0D2FEFF41FFE3FF3573FCFFFF49BB504D3AEDB57F000041534D8D9BB0D2FEFF41FFE3FF3567FCFFFF49BB604D3AEDB57F000041534D8D9BA0D2FEFF41FFE3FF3553FCFFFF49BB704D3AEDB57F000041534D8D9B90D2FEFF41FFE3FF353FFCFFFF49BB804D3AEDB57F000041534D8D9B80D2FEFF41FFE3FF352BFCFFFF49BB904D3AEDB57F000041534D8D9B70D2FEFF41FFE3FF3517FCFFFF49BBA04D3AEDB57F000041534D8D9B60D2FEFF41FFE3FF3503FCFFFF49BBB04D3AEDB57F000041534D8D9B50D2FEFF41FFE3FF35EFFBFFFF49BBC04D3AEDB57F000041534D8D9B40D2FEFF41FFE3FF35DBFBFFFF49BBD04D3AEDB57F000041534D8D9B30D2FEFF41FFE3FF35C7FBFFFF49BBE04D3AEDB57F000041534D8D9B20D2FEFF41FFE3FF35B3FBFFFF49BBF04D3AEDB57F000041534D8D9B10D2FEFF41FFE3FF35A7FBFFFF49BB004E3AEDB57F000041534D8D9B00D2FEFF41FFE3FF3593FBFFFF49BB104E3AEDB57F000041534D8D9BF0D1FEFF41FFE3
[86a80771bb7018] jit-backend-dump}
[86a80771bc20d3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a4ef4 +0  25000000
[86a80771bc3511] jit-backend-dump}
[86a80771bc7317] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a50f5 +0  25000000
[86a80771bc8189] jit-backend-dump}
[86a80771bcb628] {jit-backend-addr
bridge out of Guard 0x335bc88 has address 0x7fb5ed3a4ef0 to 0x7fb5ed3a50f0
       gc table: 0x7fb5ed3a4e30
    jump target: 0x7fb5ed3a4ef0
         resops: 0x7fb5ed3a4efe
       failures: 0x7fb5ed3a50f0
            end: 0x7fb5ed3a5363
[86a80771bcda04] jit-backend-addr}
[86a80771bd0fb9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a4f0e +0  21020000
[86a80771bd1d5e] jit-backend-dump}
[86a80771bd4fd7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a4f25 +0  26020000
[86a80771bd5c7b] jit-backend-dump}
[86a80771bd8e0b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a4f35 +0  32020000
[86a80771bd9ada] jit-backend-dump}
[86a80771bdcd0c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a4f41 +0  42020000
[86a80771bdd9db] jit-backend-dump}
[86a80771be0b2e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a4f59 +0  46020000
[86a80771be1809] jit-backend-dump}
[86a80771be4996] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a4f6b +0  50020000
[86a80771be5641] jit-backend-dump}
[86a80771be8805] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a4f87 +0  50020000
[86a80771be94d1] jit-backend-dump}
[86a80771bec67c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a4fa2 +0  51020000
[86a80771bed3b9] jit-backend-dump}
[86a80771bf067b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a4fb6 +0  59020000
[86a80771bf1384] jit-backend-dump}
[86a80771bf455e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a4fc4 +0  67020000
[86a80771bf52fa] jit-backend-dump}
[86a80771bf8695] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a4fd1 +0  92020000
[86a80771bf9379] jit-backend-dump}
[86a80771bfc540] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a4fde +0  A1020000
[86a80771bfd250] jit-backend-dump}
[86a80771c003bb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a4feb +0  B0020000
[86a80771c010b8] jit-backend-dump}
[86a80771c04187] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a4ff4 +0  C3020000
[86a80771c04e8a] jit-backend-dump}
[86a80771c07fec] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a500f +0  C4020000
[86a80771c08d1a] jit-backend-dump}
[86a80771c0becf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a5026 +0  C9020000
[86a80771c0cbc6] jit-backend-dump}
[86a80771c0fd96] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a503d +0  CE020000
[86a80771c10a6b] jit-backend-dump}
[86a80771c13b41] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a5051 +0  D6020000
[86a80771c14834] jit-backend-dump}
[86a80771c1798d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a505a +0  E9020000
[86a80771c18656] jit-backend-dump}
[86a80771c1b94f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39b241 +0  AB9C0000
[86a80771c1c60c] jit-backend-dump}
[86a80771c2056c] jit-backend}
[86a80771c241cf] {jit-log-opt-bridge
# bridge out of Guard 0x335bc88 with 76 ops
[p0, p1]
+214: guard_class(p1, 16500368, descr=<Guard0x33aea40>) [p0, p1]
+226: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+230: guard_nonnull_class(p3, 16471056, descr=<Guard0x33aeaa0>) [p0, p1]
+256: i6 = instance_ptr_eq(p3, ConstPtr(ptr5))
+259: guard_false(i6, descr=<Guard0x33b42a8>) [p0, p1]
debug_merge_point(0, 0, '(let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))')
+265: guard_class(p0, 16435920, descr=<Guard0x33b42f0>) [p0, p1]
+277: p8 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+281: guard_nonnull_class(p8, ConstClass(ForwardLink), descr=<Guard0x33aeb00>) [p0, p1]
debug_merge_point(0, 0, '(CellRef(ok?) (car x) 1 z)')
+301: p10 = getfield_gc_r(p1, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+305: guard_class(p10, 16478072, descr=<Guard0x33b4338>) [p0, p1]
+319: p12 = getfield_gc_r(p10, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+324: p13 = getfield_gc_r(p12, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+328: guard_nonnull_class(p13, 16477696, descr=<Guard0x33aeb60>) [p0, p1]
+347: i15 = getfield_gc_i(p3, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+351: p16 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+355: guard_nonnull_class(p16, 16471056, descr=<Guard0x33aebc0>) [p0, p1]
+374: p18 = getfield_gc_r(p13, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+385: guard_value(p18, ConstPtr(ptr19), descr=<Guard0x33b4380>) [p0, p1]
+394: p20 = getfield_gc_r(p10, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)')
+399: i22 = instance_ptr_eq(p16, ConstPtr(ptr21))
+402: guard_false(i22, descr=<Guard0x33b43c8>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
debug_merge_point(0, 0, '(+ row dist)')
+408: guard_not_invalidated(descr=<Guard0x33b4410>) [p0, p1]
+408: i24 = int_add_ovf(i15, 1)
+415: guard_no_overflow(descr=<Guard0x33b4458>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+421: i25 = getfield_gc_i(p16, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+425: i26 = int_eq(i25, i24)
+428: guard_false(i26, descr=<Guard0x33b44a0>) [p0, p1]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '(let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)))')
debug_merge_point(0, 0, '(- row dist)')
+434: i28 = int_sub_ovf(i15, 1)
+441: guard_no_overflow(descr=<Guard0x33b44e8>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand6)')
+447: i29 = int_eq(i25, i28)
+450: guard_true(i29, descr=<Guard0x33b4530>) [p0, p1]
debug_merge_point(0, 0, '(if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)')
debug_merge_point(0, 0, '#f')
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand6)')
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand6)')
+456: p30 = getfield_gc_r(p10, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+461: p31 = getfield_gc_r(p30, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+465: guard_nonnull_class(p31, 16478072, descr=<Guard0x33aec20>) [p0, p1]
+483: p33 = getfield_gc_r(p3, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+487: guard_nonnull_class(p33, 16616448, descr=<Guard0x33aec80>) [p0, p1]
+506: p35 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+510: guard_nonnull_class(p35, 16616448, descr=<Guard0x33aece0>) [p0, p1]
+529: p37 = getfield_gc_r(p31, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+540: guard_value(p37, ConstPtr(ptr38), descr=<Guard0x33b4578>) [p0, p1]
+549: i39 = instance_ptr_eq(p10, p31)
+552: guard_true(i39, descr=<Guard0x33b45c0>) [p0, p1]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+558: p40 = new_with_vtable(descr=<SizeDescr 40>)
+599: p41 = new_with_vtable(descr=<SizeDescr 24>)
+610: setfield_gc(p41, i15, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+614: setfield_gc(p41, p35, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+618: p42 = new_with_vtable(descr=<SizeDescr 48>)
+629: setfield_gc(p40, p33, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+633: setfield_gc(p42, p8, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+637: setfield_gc(p40, p10, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+641: setfield_gc(p40, p16, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+645: setfield_gc(p40, p41, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+649: setfield_gc(p42, p20, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+653: setfield_gc(p42, p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+664: setfield_gc(p42, ConstPtr(ptr43), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+668: setfield_gc(p42, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+676: jump(p40, p42, descr=TargetToken(53317888))
+704: --end of the loop--
[86a80771c6015c] jit-log-opt-bridge}
[86a80771c9edca] {jit-backend
[86a80771cc631e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a53a
[86a80771cc9a86] jit-backend-dump}
[86a80771cd32ad] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a53b4 +0  25000000
[86a80771cd4315] jit-backend-dump}
[86a80771cd7cac] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a5475 +0  25000000
[86a80771cd8a76] jit-backend-dump}
[86a80771cdbd69] {jit-backend-addr
bridge out of Guard 0x3378860 has address 0x7fb5ed3a53b0 to 0x7fb5ed3a5470
       gc table: 0x7fb5ed3a53a0
    jump target: 0x7fb5ed3a53b0
         resops: 0x7fb5ed3a53be
       failures: 0x7fb5ed3a5470
            end: 0x7fb5ed3a54b3
[86a80771cddd9d] jit-backend-addr}
[86a80771ce1517] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39bd19 +0  93960000
[86a80771ce225a] jit-backend-dump}
[86a80771ce6180] jit-backend}
[86a80771ce9e36] {jit-log-opt-bridge
# bridge out of Guard 0x3378860 with 16 ops
[p0, i1, p2, p3, p4, i5, p6, p7, p8]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+38: p9 = new_with_vtable(descr=<SizeDescr 40>)
+79: p10 = new_with_vtable(descr=<SizeDescr 24>)
+90: setfield_gc(p10, i1, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+94: setfield_gc(p10, p0, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+98: p11 = new_with_vtable(descr=<SizeDescr 48>)
+109: setfield_gc(p9, p4, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+120: setfield_gc(p9, p3, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+124: setfield_gc(p9, p10, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+128: setfield_gc(p9, p2, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+132: setfield_gc(p11, p8, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+136: setfield_gc(p11, p7, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+147: setfield_gc(p11, p6, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+165: setfield_gc(p11, ConstPtr(ptr12), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+169: setfield_gc(p11, i5, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+173: jump(p9, p11, descr=TargetToken(53317888))
+208: --end of the loop--
[86a80771cfa2bc] jit-log-opt-bridge}
[86a80771eb3dec] {jit-backend
[86a80771f1223b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a55b
[86a80771f193e0] jit-backend-dump}
[86a80771f2497b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a5644 +0  25000000
[86a80771f25d10] jit-backend-dump}
[86a80771f29eac] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a5835 +0  25000000
[86a80771f2ad6b] jit-backend-dump}
[86a80771f2e2a0] {jit-backend-addr
bridge out of Guard 0x3381a00 has address 0x7fb5ed3a5640 to 0x7fb5ed3a5830
       gc table: 0x7fb5ed3a55b0
    jump target: 0x7fb5ed3a5640
         resops: 0x7fb5ed3a564e
       failures: 0x7fb5ed3a5830
            end: 0x7fb5ed3a59df
[86a80771f30610] jit-backend-addr}
[86a80771f33cc0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a5664 +0  0B020000
[86a80771f34b36] jit-backend-dump}
[86a80771f38071] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a5675 +0  32020000
[86a80771f38dd6] jit-backend-dump}
[86a80771f3c112] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a5691 +0  32020000
[86a80771f3ce2d] jit-backend-dump}
[86a80771f4010e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a56a8 +0  37020000
[86a80771f40e0e] jit-backend-dump}
[86a80771f440d6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a56c3 +0  38020000
[86a80771f44dd6] jit-backend-dump}
[86a80771f48103] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a56d8 +0  3F020000
[86a80771f48e62] jit-backend-dump}
[86a80771f4c08e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a56e1 +0  52020000
[86a80771f4cda6] jit-backend-dump}
[86a80771f4feed] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a56fd +0  52020000
[86a80771f50c21] jit-backend-dump}
[86a80771f53fdd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a5715 +0  56020000
[86a80771f54cfc] jit-backend-dump}
[86a80771f57f19] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a5726 +0  61020000
[86a80771f58bfa] jit-backend-dump}
[86a80771f5bd99] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a572f +0  74020000
[86a80771f5ca8d] jit-backend-dump}
[86a80771f5fbaf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a5747 +0  78020000
[86a80771f608da] jit-backend-dump}
[86a80771f63d02] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39f2f2 +0  4A630000
[86a80771f64978] jit-backend-dump}
[86a80771f6896b] jit-backend}
[86a80771f6c507] {jit-log-opt-bridge
# bridge out of Guard 0x3381a00 with 68 ops
[p0, p1, p2, p3, p4, p5]
+166: guard_nonnull_class(p1, 16471056, descr=<Guard0x33aed40>) [p0, p1, p4, p5]
+184: guard_not_invalidated(descr=<Guard0x33b4608>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(CellRef(my-try) AppRand1 '() (cons (car x) z))')
+184: p7 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+188: guard_class(p7, 16478072, descr=<Guard0x33b4650>) [p0, p1, p4, p5]
+201: p9 = getfield_gc_r(p7, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+205: p10 = getfield_gc_r(p9, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+209: guard_nonnull_class(p10, 16478072, descr=<Guard0x33aeda0>) [p0, p1, p4, p5]
+229: p12 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+233: guard_nonnull_class(p12, 16471056, descr=<Guard0x33aee00>) [p0, p1, p4, p5]
+252: i14 = getfield_gc_i(p12, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+256: p15 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+260: guard_nonnull_class(p15, 16471056, descr=<Guard0x33aee60>) [p0, p1, p4, p5]
+279: p17 = getfield_gc_r(p10, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+291: guard_value(p17, ConstPtr(ptr18), descr=<Guard0x33b4698>) [p0, p1, p4, p5]
+300: i19 = instance_ptr_eq(p7, p10)
+303: guard_true(i19, descr=<Guard0x33b46e0>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) AppRand1 '() (cons (car x) z))')
debug_merge_point(0, 0, '(let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))')
debug_merge_point(0, 0, '(CellRef(ok?) (car x) 1 z)')
+309: p20 = getfield_gc_r(p7, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+313: p21 = getfield_gc_r(p20, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+318: guard_nonnull_class(p21, 16477696, descr=<Guard0x33aeec0>) [p0, p1, p4, p5]
+337: i23 = getfield_gc_i(p1, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+341: p24 = getfield_gc_r(p21, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+352: guard_value(p24, ConstPtr(ptr25), descr=<Guard0x33b4728>) [p0, p1, p4, p5]
+361: p26 = getfield_gc_r(p7, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)')
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
debug_merge_point(0, 0, '(+ row dist)')
+365: i28 = int_add_ovf(i23, 1)
+372: guard_no_overflow(descr=<Guard0x33b4770>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+378: i29 = int_eq(i14, i28)
+381: guard_true(i29, descr=<Guard0x33b47b8>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '#f')
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand4)')
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand4)')
+387: p30 = getfield_gc_r(p1, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+391: guard_nonnull_class(p30, 16471056, descr=<Guard0x33aef20>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+411: p32 = new_with_vtable(descr=<SizeDescr 40>)
+455: p33 = new_with_vtable(descr=<SizeDescr 24>)
+466: setfield_gc(p33, i23, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+477: setfield_gc(p33, ConstPtr(ptr34), descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+481: p35 = new_with_vtable(descr=<SizeDescr 24>)
+492: setfield_gc(p35, i14, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+496: setfield_gc(p35, p15, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+500: p36 = new_with_vtable(descr=<SizeDescr 48>)
+511: p37 = new_with_vtable(descr=<SizeDescr 40>)
+522: setfield_gc(p37, p5, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+533: setfield_gc(p37, p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+537: setfield_gc(p37, p4, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+555: setfield_gc(p37, ConstPtr(ptr38), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+559: setfield_gc(p32, p7, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+563: setfield_gc(p32, p30, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+567: setfield_gc(p32, p35, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+571: setfield_gc(p32, p33, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+575: setfield_gc(p36, p5, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+579: setfield_gc(p36, p26, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+583: setfield_gc(p36, p37, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+594: setfield_gc(p36, ConstPtr(ptr39), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+598: setfield_gc(p36, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+606: jump(p32, p36, descr=TargetToken(53317888))
+640: --end of the loop--
[86a80771fa6b15] jit-log-opt-bridge}
[86a8077213c208] {jit-backend
[86a807721a7fe1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a5b
[86a807721b0a9a] jit-backend-dump}
[86a807721bb80c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a5c24 +0  25000000
[86a807721bcbe1] jit-backend-dump}
[86a807721c0a68] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a5ec5 +0  25000000
[86a807721c1967] jit-backend-dump}
[86a807721c4d42] {jit-backend-addr
bridge out of Guard 0x3379520 has address 0x7fb5ed3a5c20 to 0x7fb5ed3a5ec0
       gc table: 0x7fb5ed3a5b60
    jump target: 0x7fb5ed3a5c20
         resops: 0x7fb5ed3a5c2e
       failures: 0x7fb5ed3a5ec0
            end: 0x7fb5ed3a6145
[86a807721c7203] jit-backend-addr}
[86a807721ca99c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a5c3e +0  D3020000
[86a807721cb7a0] jit-backend-dump}
[86a807721ceaae] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a5c4b +0  E2020000
[86a807721cf7ca] jit-backend-dump}
[86a807721d2a58] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a5c5b +0  EE020000
[86a807721d376a] jit-backend-dump}
[86a807721d69be] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a5c68 +0  FD020000
[86a807721d76c7] jit-backend-dump}
[86a807721da995] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a5c7c +0  05030000
[86a807721db661] jit-backend-dump}
[86a807721de8fe] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a5c91 +0  28030000
[86a807721df5a9] jit-backend-dump}
[86a807721e27f6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a5ca8 +0  2D030000
[86a807721e34c2] jit-backend-dump}
[86a807721e66eb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a5cb6 +0  3B030000
[86a807721e73cd] jit-backend-dump}
[86a807721ea664] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a5cce +0  3F030000
[86a807721eb320] jit-backend-dump}
[86a807721ee531] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a5ce5 +0  44030000
[86a807721ef228] jit-backend-dump}
[86a807721f243e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a5cfc +0  49030000
[86a807721f3104] jit-backend-dump}
[86a807721f62c8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a5d77 +0  EA020000
[86a807721f6f9a] jit-backend-dump}
[86a807721fa1f1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a5d89 +0  F4020000
[86a807721faee5] jit-backend-dump}
[86a807721fe11d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a5da2 +0  F7020000
[86a807721fedf5] jit-backend-dump}
[86a80772201fed] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a5dbe +0  F7020000
[86a80772202cb3] jit-backend-dump}
[86a80772205ebe] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a5de0 +0  F1020000
[86a80772206bb1] jit-backend-dump}
[86a80772209e36] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a5df4 +0  F9020000
[86a8077220ab02] jit-backend-dump}
[86a8077220dcfa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a5dfd +0  0C030000
[86a8077220e9d2] jit-backend-dump}
[86a80772211bcd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a5e0a +0  1B030000
[86a80772212893] jit-backend-dump}
[86a80772215d48] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39db15 +0  07810000
[86a80772216a11] jit-backend-dump}
[86a8077221ab26] jit-backend}
[86a8077221e856] {jit-log-opt-bridge
# bridge out of Guard 0x3379520 with 68 ops
[p0, p1]
+214: guard_class(p1, 16500368, descr=<Guard0x33aef80>) [p0, p1]
+226: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+230: guard_nonnull(p3, descr=<Guard0x33b4800>) [p0, p1]
+246: i5 = instance_ptr_eq(p3, ConstPtr(ptr4))
+249: guard_true(i5, descr=<Guard0x33b4848>) [p0, p1]
debug_merge_point(0, 0, '#t')
+255: guard_class(p0, 16435920, descr=<Guard0x33b4890>) [p0, p1]
+268: p7 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+279: guard_value(p7, ConstPtr(ptr8), descr=<Guard0x33b48d8>) [p0, p1]
+288: p9 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+292: guard_not_invalidated(descr=<Guard0x33b4920>) [p0, p1]
+292: p10 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (CellRef(ok?) row AppRand8 (cdr placed))')
+296: guard_class(p10, 16435920, descr=<Guard0x33b4968>) [p0, p1]
+309: p12 = getfield_gc_r(p10, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+313: guard_nonnull_class(p12, ConstClass(ForwardLink), descr=<Guard0x33aefe0>) [p0, p1]
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '(let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z)))')
debug_merge_point(0, 0, '(append (cdr x) y)')
+332: guard_class(p9, 16500368, descr=<Guard0x33b49b0>) [p0, p1]
+346: p15 = getfield_gc_r(p9, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+351: guard_nonnull_class(p15, 16471056, descr=<Guard0x33af040>) [p0, p1]
+370: p17 = getfield_gc_r(p15, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+374: guard_nonnull_class(p17, 16616448, descr=<Guard0x33af0a0>) [p0, p1]
+393: p19 = getfield_gc_r(p9, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+398: guard_nonnull_class(p19, 16616448, descr=<Guard0x33af100>) [p0, p1]
+416: p22 = call_r(ConstClass(append_two), p17, p19, descr=<Callr 8 rr EF=5>)
+524: guard_no_exception(descr=<Guard0x33af160>) [p9, p22, p19, p17, p10, p12]
+539: guard_nonnull_class(p22, 16616448, descr=<Guard0x33af1c0>) [p9, p22, p19, p17, p10, p12]
debug_merge_point(0, 0, '(CellRef(my-try) AppRand1 '() (cons (car x) z))')
+557: p24 = getfield_gc_r(p9, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+568: guard_class(p24, 16478072, descr=<Guard0x33b49f8>) [p9, p22, p19, p17, p10, p12]
+582: p26 = getfield_gc_r(p24, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+587: p27 = getfield_gc_r(p26, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+591: guard_nonnull_class(p27, 16478072, descr=<Guard0x33af220>) [p9, p22, p19, p17, p10, p12]
+610: i29 = getfield_gc_i(p15, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+621: p30 = getfield_gc_r(p9, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+625: guard_nonnull_class(p30, 16471056, descr=<Guard0x33af280>) [p9, p22, p19, p17, p10, p12]
+644: p32 = getfield_gc_r(p27, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+655: guard_value(p32, ConstPtr(ptr33), descr=<Guard0x33b4a40>) [p9, p22, p19, p17, p10, p12]
+664: i34 = instance_ptr_eq(p24, p27)
+667: guard_true(i34, descr=<Guard0x33b4a88>) [p9, p22, p19, p17, p10, p12]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) AppRand1 '() (cons (car x) z))')
+673: i36 = instance_ptr_eq(p22, ConstPtr(ptr35))
+680: guard_true(i36, descr=<Guard0x33b4ad0>) [p9, p22, p19, p17, p10, p12]
debug_merge_point(0, 0, '(if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0)')
debug_merge_point(0, 0, '(begin (if trace? (begin (write z) (newline)) (void)) 1)')
+686: p37 = getfield_gc_r(p24, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(if trace? (begin (write z) (newline)) (void))')
debug_merge_point(0, 0, '(void)')
debug_merge_point(0, 0, '1')
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (void)')
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+691: p38 = new_with_vtable(descr=<SizeDescr 40>)
+732: p39 = new_with_vtable(descr=<SizeDescr 24>)
+743: setfield_gc(p39, i29, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+747: setfield_gc(p39, p19, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+758: p40 = new_with_vtable(descr=<SizeDescr 48>)
+769: setfield_gc(p38, p30, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+780: setfield_gc(p40, ConstPtr(ptr41), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+784: setfield_gc(p40, p37, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+788: setfield_gc(p40, p10, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+799: setfield_gc(p40, p12, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+810: setfield_gc(p38, p17, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+821: setfield_gc(p38, p39, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+825: setfield_gc(p38, p24, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+829: setfield_gc(p40, 1, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+837: jump(p38, p40, descr=TargetToken(53317888))
+864: --end of the loop--
[86a8077225afa4] jit-log-opt-bridge}
[86a807725569ac] {jit-backend
[86a807725a19a6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a62a0 +0  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8CE201000048FF0425F04433038139D00C01000F85000000004C8B79104983FF01720741813F509A00000F85000000004C8B3520FFFFFF4D39F70F8400000000813B201600000F85000000004C8B6B084983FD01720841817D00900F00000F85000000004C8B610841813C24B8B500000F85000000004D8B5424184D8B4A084983F901720741813940B400000F85000000004D8B4708488B79204883FF017206813F509A00000F8500000000498B7110488B15D8FEFFFF4839D60F8500000000498B5424084C39F70F84000000004D89C64983C0010F8000000000488B77084C39C60F85000000004D8B442420498B40084883F80172068138B8B500000F850000000048899D30010000498B5F104883FB017206813B509A00000F85000000004C8B79184983FF01720741813F509A00000F85000000004C89AD380100004C8B68104C89A5400100004C8B2587FEFFFF4D39E50F8500000000483985400100000F850000000049BBFEFFFFFFFFFFFF7F4C39DE0F8F000000004C8B9D400100004C899D480100004C8B9D380100004C899D400100004C8995500100004C898D580100004989F54C89856001000048898568010000488995700100004889DE4D89F24C89F84989D6488B9D300100004889BD3001000049BB006439EDB57F000041FFE30F1F44000048C7442408FFFFFF0049BB58613AEDB57F00004C895D204D8D9B98C1FEFF41FFD3E9F8FDFFFFFF3534FDFFFF49BB68613AEDB57F000041534D8D9B98BEFEFF41FFE3FF3520FDFFFF49BB78613AEDB57F000041534D8D9B88BEFEFF41FFE3FF3514FDFFFF49BB88613AEDB57F000041534D8D9B78BEFEFF41FFE3FF3500FDFFFF49BB98613AEDB57F000041534D8D9B68BEFEFF41FFE3FF35ECFCFFFF49BBA8613AEDB57F000041534D8D9B58BEFEFF41FFE3FF35D8FCFFFF49BBB8613AEDB57F000041534D8D9B48BEFEFF41FFE3FF35C4FCFFFF49BBC8613AEDB57F000041534D8D9B38BEFEFF41FFE3FF35B0FCFFFF49BBD8613AEDB57F000041534D8D9B28BEFEFF41FFE3FF35A4FCFFFF49BBE8613AEDB57F000041534D8D9B18BEFEFF41FFE3FF3590FCFFFF49BBF8613AEDB57F000041534D8D9B08BEFEFF41FFE3FF357CFCFFFF49BB08623AEDB57F000041534D8D9BF8BDFEFF41FFE3FF3568FCFFFF49BB18623AEDB57F000041534D8D9BE8BDFEFF41FFE3FF3554FCFFFF49BB28623AEDB57F000041534D8D9BD8BDFEFF41FFE3FF3540FCFFFF49BB38623AEDB57F000041534D8D9BC8BDFEFF41FFE3FF352CFCFFFF49BB48623AEDB57F000041534D8D9BB8BDFEFF41FFE3FF3518FCFFFF49BB58623AEDB57F000041534D8D9BA8BDFEFF41FFE3FF350CFCFFFF49BB68623AEDB57F000041534D8D9B98BDFEFF41FFE3FF35F8FBFFFF49BB78623AEDB57F000041534D8D9B88BDFEFF41FFE3FF35E4FBFFFF49BB88623AEDB57F000041534D8D9B78BDFEFF41FFE3
[86a807725a8e88] jit-backend-dump}
[86a807725b3edb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a6354 +0  25000000
[86a807725b52aa] jit-backend-dump}
[86a807725b9330] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a6545 +0  25000000
[86a807725ba1fb] jit-backend-dump}
[86a807725bd6dd] {jit-backend-addr
bridge out of Guard 0x331f7c0 has address 0x7fb5ed3a6350 to 0x7fb5ed3a6540
       gc table: 0x7fb5ed3a62a0
    jump target: 0x7fb5ed3a6350
         resops: 0x7fb5ed3a635e
       failures: 0x7fb5ed3a6540
            end: 0x7fb5ed3a677a
[86a807725bfc06] jit-backend-addr}
[86a807725c3349] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a636e +0  F4010000
[86a807725c4211] jit-backend-dump}
[86a807725c7676] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a6385 +0  F9010000
[86a807725c83de] jit-backend-dump}
[86a807725cb8c6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a6395 +0  05020000
[86a807725cc5f7] jit-backend-dump}
[86a807725cf93a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a63a1 +0  15020000
[86a807725d068c] jit-backend-dump}
[86a807725d37dc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a63b9 +0  19020000
[86a807725d4528] jit-backend-dump}
[86a807725d765a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a63cb +0  23020000
[86a807725d8375] jit-backend-dump}
[86a807725db48e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a63e7 +0  23020000
[86a807725dc1cb] jit-backend-dump}
[86a807725df2a0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a6401 +0  25020000
[86a807725dffe4] jit-backend-dump}
[86a807725e310c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a6415 +0  2D020000
[86a807725e3e49] jit-backend-dump}
[86a807725e6f6e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a6423 +0  3B020000
[86a807725e7c99] jit-backend-dump}
[86a807725eaece] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a6430 +0  66020000
[86a807725ebc02] jit-backend-dump}
[86a807725eed45] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a643d +0  75020000
[86a807725efa70] jit-backend-dump}
[86a807725f2b24] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a6458 +0  76020000
[86a807725f3830] jit-backend-dump}
[86a807725f6918] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a6475 +0  75020000
[86a807725f7618] jit-backend-dump}
[86a807725fa70f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a648c +0  7A020000
[86a807725fb415] jit-backend-dump}
[86a807725fe503] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a64ae +0  74020000
[86a807725ff234] jit-backend-dump}
[86a80772602309] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a64bb +0  83020000
[86a80772603000] jit-backend-dump}
[86a807726060ba] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a64ce +0  8C020000
[86a80772606dba] jit-backend-dump}
[86a8077260a0e4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed396339 +0  13000100
[86a8077260ada1] jit-backend-dump}
[86a8077260eceb] jit-backend}
[86a807726129d5] {jit-log-opt-bridge
# bridge out of Guard 0x331f7c0 with 55 ops
[p0, p1]
+198: guard_class(p1, 16500368, descr=<Guard0x33af520>) [p0, p1]
+210: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+214: guard_nonnull_class(p3, 16471056, descr=<Guard0x33af580>) [p0, p1]
+240: i6 = instance_ptr_eq(p3, ConstPtr(ptr5))
+243: guard_false(i6, descr=<Guard0x33b4b18>) [p0, p1]
debug_merge_point(0, 0, '(let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))')
+249: guard_class(p0, 16437216, descr=<Guard0x33b4b60>) [p0, p1]
+261: p8 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+265: guard_nonnull_class(p8, ConstClass(ForwardLink), descr=<Guard0x33af5e0>) [p0, p1]
debug_merge_point(0, 0, '(CellRef(ok?) (car x) 1 z)')
+285: p10 = getfield_gc_r(p1, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+289: guard_class(p10, 16478072, descr=<Guard0x33b4ba8>) [p0, p1]
+303: p12 = getfield_gc_r(p10, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+308: p13 = getfield_gc_r(p12, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+312: guard_nonnull_class(p13, 16477696, descr=<Guard0x33af640>) [p0, p1]
+331: i15 = getfield_gc_i(p3, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+335: p16 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+339: guard_nonnull_class(p16, 16471056, descr=<Guard0x33af6a0>) [p0, p1]
+357: p18 = getfield_gc_r(p13, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+368: guard_value(p18, ConstPtr(ptr19), descr=<Guard0x33b4bf0>) [p0, p1]
+377: p20 = getfield_gc_r(p10, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)')
+382: i22 = instance_ptr_eq(p16, ConstPtr(ptr21))
+385: guard_false(i22, descr=<Guard0x33b4c38>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
debug_merge_point(0, 0, '(+ row dist)')
+391: guard_not_invalidated(descr=<Guard0x33b4c80>) [p0, p1]
+391: i24 = int_add_ovf(i15, 1)
+398: guard_no_overflow(descr=<Guard0x33b4cc8>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+404: i25 = getfield_gc_i(p16, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+408: i26 = int_eq(i25, i24)
+411: guard_true(i26, descr=<Guard0x33b4d10>) [p0, p1]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '#f')
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand4)')
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand4)')
+417: p27 = getfield_gc_r(p10, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+422: p28 = getfield_gc_r(p27, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+426: guard_nonnull_class(p28, 16478072, descr=<Guard0x33af700>) [p0, p1]
+444: p30 = getfield_gc_r(p3, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+455: guard_nonnull_class(p30, 16471056, descr=<Guard0x33af760>) [p0, p1]
+473: p32 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+477: guard_nonnull_class(p32, 16471056, descr=<Guard0x33af7c0>) [p0, p1]
+496: p34 = getfield_gc_r(p28, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+521: guard_value(p34, ConstPtr(ptr35), descr=<Guard0x33b4d58>) [p0, p1]
+530: i36 = instance_ptr_eq(p10, p28)
+537: guard_true(i36, descr=<Guard0x33b4da0>) [p0, p1]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+543: i38 = int_le(i25, 9223372036854775806)
+556: guard_true(i38, descr=<Guard0x33af820>) [p32, i15, p16, p30, p10, p0, p20, p8]
+562: jump(p10, p30, i15, p32, p16, p8, p20, p0, p12, p13, i25, p27, p28, p20, descr=TargetToken(53317968))
+672: --end of the loop--
[86a8077264582f] jit-log-opt-bridge}
[86a807727184d6] {jit-backend
[86a8077276a6c2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a68b
[86a807727719a4] jit-backend-dump}
[86a8077277c2ee] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a6954 +0  25000000
[86a80772780c11] jit-backend-dump}
[86a8077278577f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a6b25 +0  25000000
[86a8077278662e] jit-backend-dump}
[86a80772789a62] {jit-backend-addr
bridge out of Guard 0x339a218 has address 0x7fb5ed3a6950 to 0x7fb5ed3a6b20
       gc table: 0x7fb5ed3a68b0
    jump target: 0x7fb5ed3a6950
         resops: 0x7fb5ed3a695e
       failures: 0x7fb5ed3a6b20
            end: 0x7fb5ed3a6d23
[86a8077278bf76] jit-backend-addr}
[86a8077278f7b7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a696e +0  0D020000
[86a807727905c7] jit-backend-dump}
[86a807727938d8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a697f +0  18020000
[86a80772794665] jit-backend-dump}
[86a807727978de] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a698b +0  28020000
[86a8077279861b] jit-backend-dump}
[86a8077279b923] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a699f +0  30020000
[86a8077279c651] jit-backend-dump}
[86a8077279f7ea] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a69b5 +0  36020000
[86a807727a0509] jit-backend-dump}
[86a807727a3814] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a69c7 +0  40020000
[86a807727a4529] jit-backend-dump}
[86a807727a7758] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a69d9 +0  4A020000
[86a807727a846b] jit-backend-dump}
[86a807727ab5ae] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a69f0 +0  4F020000
[86a807727ac2df] jit-backend-dump}
[86a807727af423] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a6a0b +0  50020000
[86a807727b015a] jit-backend-dump}
[86a807727b342b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a6a22 +0  55020000
[86a807727b413a] jit-backend-dump}
[86a807727b7379] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a6a38 +0  5B020000
[86a807727b80b6] jit-backend-dump}
[86a807727bb289] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a6a53 +0  5C020000
[86a807727bbf92] jit-backend-dump}
[86a807727bf125] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a6a60 +0  6B020000
[86a807727bfe3b] jit-backend-dump}
[86a807727c2fe3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a6a7b +0  6C020000
[86a807727c3cec] jit-backend-dump}
[86a807727c6eb0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a6a84 +0  7F020000
[86a807727c7c00] jit-backend-dump}
[86a807727cafde] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a04f0 +0  5C640000
[86a807727cbcbd] jit-backend-dump}
[86a807727cfcbf] jit-backend}
[86a807727d3830] {jit-log-opt-bridge
# bridge out of Guard 0x339a218 with 51 ops
[p0, p1]
+182: guard_not_invalidated(descr=<Guard0x33af880>) [p0, p1]
+182: guard_class(p1, 16503888, descr=<Guard0x33b4de8>) [p0, p1]
+194: i3 = getfield_gc_i(p1, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_0 16 pure>)
+198: i4 = getfield_gc_i(p1, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_1 24 pure>)
+202: i5 = int_add_ovf(i3, i4)
+205: guard_no_overflow(descr=<Guard0x33b4e30>) [p0, p1]
+211: guard_class(p0, 16435920, descr=<Guard0x33b4e78>) [p0, p1]
+223: p7 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+234: guard_value(p7, ConstPtr(ptr8), descr=<Guard0x33b4ec0>) [p0, p1]
+243: p9 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+247: p10 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+251: guard_class(p9, 16500368, descr=<Guard0x33b4f08>) [p0, p1]
+265: p12 = getfield_gc_r(p9, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+269: guard_class(p12, 16478072, descr=<Guard0x33b4f50>) [p0, p1]
+283: p14 = getfield_gc_r(p12, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+288: guard_class(p10, 16435920, descr=<Guard0x33b4f98>) [p0, p1]
+301: p16 = getfield_gc_r(p10, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+305: guard_nonnull_class(p16, ConstClass(ForwardLink), descr=<Guard0x33af8e0>) [p0, p1]
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (+ AppRand2 AppRand3)')
+324: p18 = getfield_gc_r(p12, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+329: p19 = getfield_gc_r(p18, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+333: guard_nonnull_class(p19, 16478072, descr=<Guard0x33af940>) [p0, p1]
+351: p21 = getfield_gc_r(p9, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+355: guard_nonnull_class(p21, 16471056, descr=<Guard0x33af9a0>) [p0, p1]
+374: p23 = getfield_gc_r(p21, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+378: guard_nonnull_class(p23, 16471056, descr=<Guard0x33afa00>) [p0, p1]
+396: i25 = getfield_gc_i(p21, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+400: p26 = getfield_gc_r(p9, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+404: guard_nonnull_class(p26, 16616448, descr=<Guard0x33afa60>) [p0, p1]
+423: p28 = getfield_gc_r(p9, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+427: guard_nonnull(p28, descr=<Guard0x33b4fe0>) [p0, p1]
+436: p29 = getfield_gc_r(p19, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+454: guard_value(p29, ConstPtr(ptr30), descr=<Guard0x33b5028>) [p0, p1]
+463: i31 = instance_ptr_eq(p12, p19)
+466: guard_true(i31, descr=<Guard0x33b5070>) [p0, p1]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+472: p32 = new_with_vtable(descr=<SizeDescr 40>)
+516: p33 = new_with_vtable(descr=<SizeDescr 24>)
+527: setfield_gc(p33, i25, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+531: setfield_gc(p33, p26, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+535: p34 = new_with_vtable(descr=<SizeDescr 48>)
+553: setfield_gc(p34, ConstPtr(ptr35), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+557: setfield_gc(p34, p14, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+561: setfield_gc(p34, p10, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+565: setfield_gc(p32, p12, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+569: setfield_gc(p34, p16, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+573: setfield_gc(p32, p23, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+577: setfield_gc(p32, p33, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+581: setfield_gc(p32, p28, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+585: setfield_gc(p34, i5, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+596: jump(p32, p34, descr=TargetToken(53317888))
+624: --end of the loop--
[86a80772803089] jit-log-opt-bridge}
[86a8077299d27d] {jit-backend
[86a807729fe4f4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a6e90 +0  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8CF201000048FF0425904133038139D00C01000F85000000004C8B79104983FF01720741813F509A00000F85000000004C8B3510FFFFFF4D39F70F8400000000813B101100000F85000000004C8B6B084983FD01720841817D00900F00000F85000000004C8B610841813C24B8B500000F85000000004D8B5424184D8B4A084983F901720741813940B400000F85000000004D8B57084C8B41204983F8017207418138509A00000F8500000000498B79104C8B0DC7FEFFFF4C39CF0F85000000004D8B4C24084D39F00F84000000004D89D64983C2010F8000000000498B78084C39D70F84000000004D89F24983EE010F80000000004C39F70F85000000004D8B742420498B7E084883FF017206813FB8B500000F85000000004D8B77104983FE01720741813E509A00000F85000000004C8B79184983FF01720741813F40D202000F8500000000488B7710488B1584FEFFFF4839D60F85000000004939FC0F8500000000488B0C25F091F900488D5170483B14251092F9000F879E00000048891425F091F90048C701D00C0100488D512848C702509A00004C8952084C897A104C8D7A1849C707201600004C8971104D896F084C8961084C894120488951184D894F1049895F18488B1D20FEFFFF49895F2049C747280000000048898D300100004C89BD3801000049BB506239EDB57F000041FFE39048C7442408FFFFFF0049BB306D3AEDB57F00004C895D204D8D9BC0B5FEFF41FFD3E9E8FDFFFF49BB806E3AEDB57F00004C895D204D8D9B70BCFEFF41FFD3E94DFFFFFFFF35F7FCFFFF49BB406D3AEDB57F000041534D8D9BC0B2FEFF41FFE3FF35E3FCFFFF49BB506D3AEDB57F000041534D8D9BB0B2FEFF41FFE3FF35D7FCFFFF49BB606D3AEDB57F000041534D8D9BA0B2FEFF41FFE3FF35C3FCFFFF49BB706D3AEDB57F000041534D8D9B90B2FEFF41FFE3FF35AFFCFFFF49BB806D3AEDB57F000041534D8D9B80B2FEFF41FFE3FF359BFCFFFF49BB906D3AEDB57F000041534D8D9B70B2FEFF41FFE3FF3587FCFFFF49BBA06D3AEDB57F000041534D8D9B60B2FEFF41FFE3FF3573FCFFFF49BBB06D3AEDB57F000041534D8D9B50B2FEFF41FFE3FF3567FCFFFF49BBC06D3AEDB57F000041534D8D9B40B2FEFF41FFE3FF3553FCFFFF49BBD06D3AEDB57F000041534D8D9B30B2FEFF41FFE3FF353FFCFFFF49BBE06D3AEDB57F000041534D8D9B20B2FEFF41FFE3FF352BFCFFFF49BBF06D3AEDB57F000041534D8D9B10B2FEFF41FFE3FF3517FCFFFF49BB006E3AEDB57F000041534D8D9B00B2FEFF41FFE3FF3503FCFFFF49BB106E3AEDB57F000041534D8D9BF0B1FEFF41FFE3FF35EFFBFFFF49BB206E3AEDB57F000041534D8D9BE0B1FEFF41FFE3FF35DBFBFFFF49BB306E3AEDB57F000041534D8D9BD0B1FEFF41FFE3FF35C7FBFFFF49BB406E3AEDB57F000041534D8D9BC0B1FEFF41FFE3FF35B3FBFFFF49BB506E3AEDB57F000041534D8D9BB0B1FEFF41FFE3FF35A7FBFFFF49BB606E3AEDB57F000041534D8D9BA0B1FEFF41FFE3FF3593FBFFFF49BB706E3AEDB57F000041534D8D9B90B1FEFF41FFE3
[86a80772a061f9] jit-backend-dump}
[86a80772a10827] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a6f54 +0  25000000
[86a80772a11c55] jit-backend-dump}
[86a80772a15b78] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7155 +0  25000000
[86a80772a169de] jit-backend-dump}
[86a80772a19d98] {jit-backend-addr
bridge out of Guard 0x33aec80 has address 0x7fb5ed3a6f50 to 0x7fb5ed3a7150
       gc table: 0x7fb5ed3a6e90
    jump target: 0x7fb5ed3a6f50
         resops: 0x7fb5ed3a6f5e
       failures: 0x7fb5ed3a7150
            end: 0x7fb5ed3a73c3
[86a80772a1c18c] jit-backend-addr}
[86a80772a1f7ac] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a6f6e +0  21020000
[86a80772a2057c] jit-backend-dump}
[86a80772a23872] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a6f85 +0  26020000
[86a80772a24569] jit-backend-dump}
[86a80772a277bd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a6f95 +0  32020000
[86a80772a284a7] jit-backend-dump}
[86a80772a2b6a8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a6fa1 +0  42020000
[86a80772a2c38a] jit-backend-dump}
[86a80772a2f5e1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a6fb9 +0  46020000
[86a80772a302ad] jit-backend-dump}
[86a80772a33516] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a6fcb +0  50020000
[86a80772a341e5] jit-backend-dump}
[86a80772a373b2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a6fe7 +0  50020000
[86a80772a38090] jit-backend-dump}
[86a80772a3b2de] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7002 +0  51020000
[86a80772a3bfea] jit-backend-dump}
[86a80772a3f2d4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7016 +0  59020000
[86a80772a3ffd4] jit-backend-dump}
[86a80772a4328a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7024 +0  67020000
[86a80772a43f90] jit-backend-dump}
[86a80772a472a1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7031 +0  92020000
[86a80772a47f98] jit-backend-dump}
[86a80772a4b275] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a703e +0  A1020000
[86a80772a4bf9a] jit-backend-dump}
[86a80772a4f21f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a704b +0  B0020000
[86a80772a4ff1c] jit-backend-dump}
[86a80772a53132] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7054 +0  C3020000
[86a80772a53e2c] jit-backend-dump}
[86a80772a56ff0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a706f +0  C4020000
[86a80772a57cf3] jit-backend-dump}
[86a80772a5af75] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7086 +0  C9020000
[86a80772a5bca3] jit-backend-dump}
[86a80772a5ef0f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a709d +0  CE020000
[86a80772a5fbdb] jit-backend-dump}
[86a80772a62dd3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a70b1 +0  D6020000
[86a80772a63a9c] jit-backend-dump}
[86a80772a66c60] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a70ba +0  E9020000
[86a80772a6793b] jit-backend-dump}
[86a80772a6ae3f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a5026 +0  261F0000
[86a80772a6baea] jit-backend-dump}
[86a80772a6fb41] jit-backend}
[86a80772a735da] {jit-log-opt-bridge
# bridge out of Guard 0x33aec80 with 76 ops
[p0, p1]
+214: guard_class(p1, 16500368, descr=<Guard0x33afac0>) [p0, p1]
+226: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+230: guard_nonnull_class(p3, 16471056, descr=<Guard0x33afb20>) [p0, p1]
+256: i6 = instance_ptr_eq(p3, ConstPtr(ptr5))
+259: guard_false(i6, descr=<Guard0x33b50b8>) [p0, p1]
debug_merge_point(0, 0, '(let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))')
+265: guard_class(p0, 16435920, descr=<Guard0x33b5100>) [p0, p1]
+277: p8 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+281: guard_nonnull_class(p8, ConstClass(ForwardLink), descr=<Guard0x33afb80>) [p0, p1]
debug_merge_point(0, 0, '(CellRef(ok?) (car x) 1 z)')
+301: p10 = getfield_gc_r(p1, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+305: guard_class(p10, 16478072, descr=<Guard0x33b5148>) [p0, p1]
+319: p12 = getfield_gc_r(p10, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+324: p13 = getfield_gc_r(p12, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+328: guard_nonnull_class(p13, 16477696, descr=<Guard0x33afbe0>) [p0, p1]
+347: i15 = getfield_gc_i(p3, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+351: p16 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+355: guard_nonnull_class(p16, 16471056, descr=<Guard0x33afc40>) [p0, p1]
+374: p18 = getfield_gc_r(p13, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+385: guard_value(p18, ConstPtr(ptr19), descr=<Guard0x33b5190>) [p0, p1]
+394: p20 = getfield_gc_r(p10, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)')
+399: i22 = instance_ptr_eq(p16, ConstPtr(ptr21))
+402: guard_false(i22, descr=<Guard0x33b51d8>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
debug_merge_point(0, 0, '(+ row dist)')
+408: guard_not_invalidated(descr=<Guard0x33b5220>) [p0, p1]
+408: i24 = int_add_ovf(i15, 1)
+415: guard_no_overflow(descr=<Guard0x33b5268>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+421: i25 = getfield_gc_i(p16, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+425: i26 = int_eq(i25, i24)
+428: guard_false(i26, descr=<Guard0x33b52b0>) [p0, p1]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '(let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)))')
debug_merge_point(0, 0, '(- row dist)')
+434: i28 = int_sub_ovf(i15, 1)
+441: guard_no_overflow(descr=<Guard0x33b52f8>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand6)')
+447: i29 = int_eq(i25, i28)
+450: guard_true(i29, descr=<Guard0x33b5340>) [p0, p1]
debug_merge_point(0, 0, '(if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)')
debug_merge_point(0, 0, '#f')
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand6)')
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand6)')
+456: p30 = getfield_gc_r(p10, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+461: p31 = getfield_gc_r(p30, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+465: guard_nonnull_class(p31, 16478072, descr=<Guard0x33afca0>) [p0, p1]
+483: p33 = getfield_gc_r(p3, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+487: guard_nonnull_class(p33, 16471056, descr=<Guard0x33afd00>) [p0, p1]
+506: p35 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+510: guard_nonnull_class(p35, 16616448, descr=<Guard0x33afd60>) [p0, p1]
+529: p37 = getfield_gc_r(p31, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+540: guard_value(p37, ConstPtr(ptr38), descr=<Guard0x33b5388>) [p0, p1]
+549: i39 = instance_ptr_eq(p10, p31)
+552: guard_true(i39, descr=<Guard0x33b53d0>) [p0, p1]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+558: p40 = new_with_vtable(descr=<SizeDescr 40>)
+599: p41 = new_with_vtable(descr=<SizeDescr 24>)
+610: setfield_gc(p41, i15, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+614: setfield_gc(p41, p35, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+618: p42 = new_with_vtable(descr=<SizeDescr 48>)
+629: setfield_gc(p40, p33, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+633: setfield_gc(p42, p8, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+637: setfield_gc(p40, p10, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+641: setfield_gc(p40, p16, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+645: setfield_gc(p40, p41, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+649: setfield_gc(p42, p20, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+653: setfield_gc(p42, p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+664: setfield_gc(p42, ConstPtr(ptr43), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+668: setfield_gc(p42, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+676: jump(p40, p42, descr=TargetToken(53317888))
+704: --end of the loop--
[86a80772aada4a] jit-log-opt-bridge}
[86a80772bc1fb3] {jit-backend
[86a80772c1dad0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a
[86a80772c259c4] jit-backend-dump}
[86a80772c30375] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7624 +0  25000000
[86a80772c31644] jit-backend-dump}
[86a80772c3547e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7855 +0  25000000
[86a80772c3624b] jit-backend-dump}
[86a80772c3992c] {jit-backend-addr
bridge out of Guard 0x339a8d8 has address 0x7fb5ed3a7620 to 0x7fb5ed3a7850
       gc table: 0x7fb5ed3a7550
    jump target: 0x7fb5ed3a7620
         resops: 0x7fb5ed3a762e
       failures: 0x7fb5ed3a7850
            end: 0x7fb5ed3a7adf
[86a80772c3bb46] jit-backend-addr}
[86a80772c3f139] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a763e +0  51020000
[86a80772c3ff6b] jit-backend-dump}
[86a80772c4331e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a764b +0  60020000
[86a80772c44037] jit-backend-dump}
[86a80772c473db] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a765b +0  6C020000
[86a80772c48140] jit-backend-dump}
[86a80772c4b4ed] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7668 +0  7B020000
[86a80772c4c1fa] jit-backend-dump}
[86a80772c4f50e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7671 +0  8E020000
[86a80772c5026d] jit-backend-dump}
[86a80772c535f6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a767e +0  9D020000
[86a80772c542f9] jit-backend-dump}
[86a80772c57626] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7692 +0  A5020000
[86a80772c58360] jit-backend-dump}
[86a80772c5bace] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a76a8 +0  C7020000
[86a80772c5c811] jit-backend-dump}
[86a80772c5fc1d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a76bd +0  CE020000
[86a80772c6097f] jit-backend-dump}
[86a80772c63bb7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a76d4 +0  D3020000
[86a80772c648e2] jit-backend-dump}
[86a80772c67c4c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a76e6 +0  DD020000
[86a80772c689a5] jit-backend-dump}
[86a80772c6bd31] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a76f8 +0  E7020000
[86a80772c6ca80] jit-backend-dump}
[86a80772c72f43] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a770e +0  ED020000
[86a80772c73f12] jit-backend-dump}
[86a80772c77a65] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7729 +0  EE020000
[86a80772c78793] jit-backend-dump}
[86a80772c7bbdc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a773f +0  F4020000
[86a80772c7c8fb] jit-backend-dump}
[86a80772c7fbd2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7755 +0  FA020000
[86a80772c808eb] jit-backend-dump}
[86a80772c83d59] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a776f +0  FC020000
[86a80772c84a7e] jit-backend-dump}
[86a80772c87d98] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7783 +0  04030000
[86a80772c88abd] jit-backend-dump}
[86a80772c8bdce] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a779e +0  05030000
[86a80772c8cafc] jit-backend-dump}
[86a80772c8fd47] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a77a7 +0  18030000
[86a80772c90a5c] jit-backend-dump}
[86a80772c93ef2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a1118 +0  04650000
[86a80772c94c2c] jit-backend-dump}
[86a80772c98d79] jit-backend}
[86a80772c9c943] {jit-log-opt-bridge
# bridge out of Guard 0x339a8d8 with 64 ops
[p0, p1]
+230: guard_class(p1, 16500368, descr=<Guard0x33afdc0>) [p0, p1]
+242: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+246: guard_nonnull(p3, descr=<Guard0x33b5418>) [p0, p1]
+262: i5 = instance_ptr_eq(p3, ConstPtr(ptr4))
+265: guard_true(i5, descr=<Guard0x33b5460>) [p0, p1]
debug_merge_point(0, 0, '(if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0)')
+271: p6 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+275: guard_nonnull(p6, descr=<Guard0x33b54a8>) [p0, p1]
+284: i8 = instance_ptr_eq(p6, ConstPtr(ptr7))
+287: guard_false(i8, descr=<Guard0x33b54f0>) [p0, p1]
debug_merge_point(0, 0, '0')
+293: guard_class(p0, 16437216, descr=<Guard0x33b5538>) [p0, p1]
+306: p10 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+317: guard_value(p10, ConstPtr(ptr11), descr=<Guard0x33b5580>) [p0, p1]
+326: p12 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+326: guard_not_invalidated(descr=<Guard0x33b55c8>) [p0, p1]
+326: i13 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+330: p14 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(+ AppRand2 AppRand3) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+334: guard_class(p14, 16435920, descr=<Guard0x33b5610>) [p0, p1]
+348: p16 = getfield_gc_r(p14, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+360: guard_value(p16, ConstPtr(ptr17), descr=<Guard0x33b5658>) [p0, p1]
+369: p18 = getfield_gc_r(p14, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+374: p19 = getfield_gc_r(p14, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+379: guard_class(p18, 16500368, descr=<Guard0x33b56a0>) [p0, p1]
+392: p21 = getfield_gc_r(p18, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+396: guard_class(p21, 16478072, descr=<Guard0x33b56e8>) [p0, p1]
+410: p23 = getfield_gc_r(p21, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+415: guard_class(p19, 16435920, descr=<Guard0x33b5730>) [p0, p1]
+428: p25 = getfield_gc_r(p19, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+432: guard_nonnull_class(p25, ConstClass(ForwardLink), descr=<Guard0x33afe20>) [p0, p1]
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (+ AppRand2 AppRand3)')
+450: p27 = getfield_gc_r(p21, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+455: p28 = getfield_gc_r(p27, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+459: guard_nonnull_class(p28, 16478072, descr=<Guard0x33afe80>) [p0, p1]
+477: p30 = getfield_gc_r(p18, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+481: guard_nonnull_class(p30, 16471056, descr=<Guard0x33afee0>) [p0, p1]
+499: p32 = getfield_gc_r(p30, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+503: guard_nonnull_class(p32, 16471056, descr=<Guard0x33aff40>) [p0, p1]
+521: i34 = getfield_gc_i(p30, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+525: p35 = getfield_gc_r(p18, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+529: guard_nonnull_class(p35, 16616448, descr=<Guard0x33affa0>) [p0, p1]
+547: p37 = getfield_gc_r(p18, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+558: guard_nonnull(p37, descr=<Guard0x33b5778>) [p0, p1]
+567: p38 = getfield_gc_r(p28, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+585: guard_value(p38, ConstPtr(ptr39), descr=<Guard0x33b57c0>) [p0, p1]
+594: i40 = instance_ptr_eq(p21, p28)
+597: guard_true(i40, descr=<Guard0x33b5808>) [p0, p1]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+603: p41 = new_with_vtable(descr=<SizeDescr 40>)
+647: p42 = new_with_vtable(descr=<SizeDescr 24>)
+658: setfield_gc(p42, i34, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+662: setfield_gc(p42, p35, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+666: p43 = new_with_vtable(descr=<SizeDescr 48>)
+677: setfield_gc(p41, p32, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+681: setfield_gc(p41, p42, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+685: setfield_gc(p43, ConstPtr(ptr44), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+689: setfield_gc(p43, p23, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+693: setfield_gc(p43, i13, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+697: setfield_gc(p43, p19, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+701: setfield_gc(p41, p21, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+705: setfield_gc(p43, p25, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+716: setfield_gc(p41, p37, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+727: jump(p41, p43, descr=TargetToken(53317888))
+768: --end of the loop--
[86a80772cd2242] jit-log-opt-bridge}
[86a80772df7ae4] {jit-backend
[86a80772e5bc8e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7c70 +0  0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8C3202000048FF0425C0FC34038139D00C01000F85000000004C8B79204983FF01720741813F509A00000F85000000004C8B3500FFFFFF4D39F70F8400000000813A101100000F85000000004C8B72084983FE01720741813E900F00000F85000000004C8B71104983FE01720741813E601400000F85000000004C8B69184983FD01720841817D00601400000F85000000004D8B66084D8B75084D01E60F80000000004D8B67084D39F40F85000000004C8B72204C8B25C4FEFFFF4D39E60F85000000004C8B62104C8B721841813E201600000F85000000004D8B7E084983FF01720741813F900F00000F850000000041813C24D00C01000F85000000004D8B6C240841817D00B8B500000F85000000004D8B55084D8B4D204D8B41084983F8017207418138B8B500000F85000000004D8B4C24104983F9017207418139509A00000F8500000000498B79104883FF017206813F40D202000F8500000000498B71084D8B4C24184983F9017207418139509A00000F8500000000498B5C24204885DB0F84000000004D8B6010488B0544FEFFFF4939C40F85000000004D39C50F8500000000488B0C25F091F900488D5170483B14251092F9000F879E00000048891425F091F90048C701D00C0100488D512848C702509A0000488972084C894A104C8D4A1849C70120160000488959204D8979084889791048895118488B15ECFDFFFF498951204D8951104D8971184C89690849C741280000000048898D300100004C898D3801000049BB506239EDB57F000041FFE39048C7442408FFFFFF0049BBE87A3AEDB57F00004C895D204D8D9B08A8FEFF41FFD3E9A8FDFFFF49BB587C3AEDB57F00004C895D204D8D9B98AEFEFF41FFD3E94DFFFFFFFF35A7FCFFFF49BBF87A3AEDB57F000041534D8D9B08A5FEFF41FFE3FF3593FCFFFF49BB087B3AEDB57F000041534D8D9BF8A4FEFF41FFE3FF3587FCFFFF49BB187B3AEDB57F000041534D8D9BE8A4FEFF41FFE3FF3573FCFFFF49BB287B3AEDB57F000041534D8D9BD8A4FEFF41FFE3FF355FFCFFFF49BB387B3AEDB57F000041534D8D9BC8A4FEFF41FFE3FF354BFCFFFF49BB487B3AEDB57F000041534D8D9BB8A4FEFF41FFE3FF3537FCFFFF49BB587B3AEDB57F000041534D8D9BA8A4FEFF41FFE3FF3523FCFFFF49BB687B3AEDB57F000041534D8D9B98A4FEFF41FFE3FF350FFCFFFF49BB787B3AEDB57F000041534D8D9B88A4FEFF41FFE3FF35FBFBFFFF49BB887B3AEDB57F000041534D8D9B78A4FEFF41FFE3FF35EFFBFFFF49BB987B3AEDB57F000041534D8D9B68A4FEFF41FFE3FF35DBFBFFFF49BBA87B3AEDB57F000041534D8D9B58A4FEFF41FFE3FF35C7FBFFFF49BBB87B3AEDB57F000041534D8D9B48A4FEFF41FFE3FF35B3FBFFFF49BBC87B3AEDB57F000041534D8D9B38A4FEFF41FFE3FF359FFBFFFF49BBD87B3AEDB57F000041534D8D9B28A4FEFF41FFE3FF358BFBFFFF49BBE87B3AEDB57F000041534D8D9B18A4FEFF41FFE3FF3577FBFFFF49BBF87B3AEDB57F000041534D8D9B08A4FEFF41FFE3FF3563FBFFFF49BB087C3AEDB57F000041534D8D9BF8A3FEFF41FFE3FF354FFBFFFF49BB187C3AEDB57F000041534D8D9BE8A3FEFF41FFE3FF353BFBFFFF49BB287C3AEDB57F000041534D8D9BD8A3FEFF41FFE3FF352FFBFFFF49BB387C3AEDB57F000041534D8D9BC8A3FEFF41FFE3FF351BFBFFFF49BB487C3AEDB57F000041534D8D9BB8A3FEFF41FFE3
[86a80772e64778] jit-backend-dump}
[86a80772e6f38d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7d44 +0  25000000
[86a80772e707c5] jit-backend-dump}
[86a80772e7460b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7f85 +0  25000000
[86a80772e754c1] jit-backend-dump}
[86a80772e787db] {jit-backend-addr
bridge out of Guard 0x3381c88 has address 0x7fb5ed3a7d40 to 0x7fb5ed3a7f80
       gc table: 0x7fb5ed3a7c70
    jump target: 0x7fb5ed3a7d40
         resops: 0x7fb5ed3a7d4e
       failures: 0x7fb5ed3a7f80
            end: 0x7fb5ed3a822b
[86a80772e7aab0] jit-backend-addr}
[86a80772e7e279] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7d5e +0  61020000
[86a80772e7f0c7] jit-backend-dump}
[86a80772e8240f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7d75 +0  66020000
[86a80772e8318d] jit-backend-dump}
[86a80772e863dd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7d85 +0  72020000
[86a80772e870a6] jit-backend-dump}
[86a80772e8a224] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7d91 +0  82020000
[86a80772e8aef9] jit-backend-dump}
[86a80772e8e141] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7da8 +0  87020000
[86a80772e8edf7] jit-backend-dump}
[86a80772e92189] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7dbf +0  A8020000
[86a80772e92e80] jit-backend-dump}
[86a80772e9618e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7dd7 +0  AC020000
[86a80772e96e6d] jit-backend-dump}
[86a80772e99fb9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7de8 +0  B7020000
[86a80772e9ac79] jit-backend-dump}
[86a80772e9de8a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7df5 +0  C6020000
[86a80772e9eb4c] jit-backend-dump}
[86a80772ea1d3b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7e09 +0  CE020000
[86a80772ea29ec] jit-backend-dump}
[86a80772ea5c95] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7e1e +0  D5020000
[86a80772ea6949] jit-backend-dump}
[86a80772ea9af1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7e35 +0  DA020000
[86a80772eaa7ba] jit-backend-dump}
[86a80772ead9e9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7e43 +0  E8020000
[86a80772eae68d] jit-backend-dump}
[86a80772eb184b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7e56 +0  F1020000
[86a80772eb24ff] jit-backend-dump}
[86a80772eb5725] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7e75 +0  EE020000
[86a80772eb63cf] jit-backend-dump}
[86a80772eb94d8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7e8d +0  F2020000
[86a80772eba186] jit-backend-dump}
[86a80772ebd3a9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7ea3 +0  F8020000
[86a80772ebe056] jit-backend-dump}
[86a80772ec1172] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7ebf +0  F8020000
[86a80772ec1e22] jit-backend-dump}
[86a80772ec5030] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7ecd +0  06030000
[86a80772ec5ccb] jit-backend-dump}
[86a80772ec8ddd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7ee1 +0  0E030000
[86a80772ec9a9d] jit-backend-dump}
[86a80772ecccb1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a7eea +0  21030000
[86a80772ecd93c] jit-backend-dump}
[86a80772ed0d05] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39fa7e +0  BE820000
[86a80772ed19ad] jit-backend-dump}
[86a80772ed5b80] jit-backend}
[86a80772ed988e] {jit-log-opt-bridge
# bridge out of Guard 0x3381c88 with 73 ops
[p0, p1]
+230: guard_class(p1, 16500368, descr=<Guard0x33ce020>) [p0, p1]
+242: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+246: guard_nonnull_class(p3, 16471056, descr=<Guard0x33ce080>) [p0, p1]
+272: i6 = instance_ptr_eq(p3, ConstPtr(ptr5))
+275: guard_false(i6, descr=<Guard0x33b5850>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
+281: guard_class(p0, 16435920, descr=<Guard0x33b5898>) [p0, p1]
+293: p8 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+297: guard_nonnull_class(p8, ConstClass(ForwardLink), descr=<Guard0x33ce0e0>) [p0, p1]
debug_merge_point(0, 0, '(+ row dist)')
+316: guard_not_invalidated(descr=<Guard0x33b58e0>) [p0, p1]
+316: p10 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+320: guard_nonnull_class(p10, ConstClass(W_Fixnum), descr=<Guard0x33ce140>) [p0, p1]
+339: p12 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+343: guard_nonnull_class(p12, ConstClass(W_Fixnum), descr=<Guard0x33ce1a0>) [p0, p1]
+363: i14 = getfield_gc_i(p10, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+367: i15 = getfield_gc_i(p12, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+371: i16 = int_add_ovf(i14, i15)
+374: guard_no_overflow(descr=<Guard0x33b5928>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+380: i17 = getfield_gc_i(p3, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+384: i18 = int_eq(i17, i16)
+387: guard_true(i18, descr=<Guard0x33b5970>) [p0, p1]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '#f')
+393: p19 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+404: guard_value(p19, ConstPtr(ptr20), descr=<Guard0x33b59b8>) [p0, p1]
+413: p21 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+417: p22 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand4)')
+421: guard_class(p22, 16437216, descr=<Guard0x33b5a00>) [p0, p1]
+434: p24 = getfield_gc_r(p22, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+438: guard_nonnull_class(p24, ConstClass(ForwardLink), descr=<Guard0x33ce200>) [p0, p1]
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
+457: guard_class(p21, 16500368, descr=<Guard0x33b5a48>) [p0, p1]
+471: p27 = getfield_gc_r(p21, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+476: guard_class(p27, 16478072, descr=<Guard0x33b5a90>) [p0, p1]
+490: p29 = getfield_gc_r(p27, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand4)')
+494: p30 = getfield_gc_r(p27, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+498: p31 = getfield_gc_r(p30, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+502: guard_nonnull_class(p31, 16478072, descr=<Guard0x33ce260>) [p0, p1]
+521: p33 = getfield_gc_r(p21, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+526: guard_nonnull_class(p33, 16471056, descr=<Guard0x33ce2c0>) [p0, p1]
+545: p35 = getfield_gc_r(p33, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+549: guard_nonnull_class(p35, 16616448, descr=<Guard0x33ce320>) [p0, p1]
+567: i37 = getfield_gc_i(p33, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+571: p38 = getfield_gc_r(p21, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+576: guard_nonnull_class(p38, 16471056, descr=<Guard0x33ce380>) [p0, p1]
+595: p40 = getfield_gc_r(p21, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+600: guard_nonnull(p40, descr=<Guard0x33b5ad8>) [p0, p1]
+609: p41 = getfield_gc_r(p31, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+620: guard_value(p41, ConstPtr(ptr42), descr=<Guard0x33b5b20>) [p0, p1]
+629: i43 = instance_ptr_eq(p27, p31)
+632: guard_true(i43, descr=<Guard0x33b5b68>) [p0, p1]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+638: p44 = new_with_vtable(descr=<SizeDescr 40>)
+679: p45 = new_with_vtable(descr=<SizeDescr 24>)
+690: setfield_gc(p45, i37, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+694: setfield_gc(p45, p38, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+698: p46 = new_with_vtable(descr=<SizeDescr 48>)
+709: setfield_gc(p44, p40, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+713: setfield_gc(p46, p24, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+717: setfield_gc(p44, p35, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+721: setfield_gc(p44, p45, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+732: setfield_gc(p46, ConstPtr(ptr47), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+736: setfield_gc(p46, p29, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+740: setfield_gc(p46, p22, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+744: setfield_gc(p44, p27, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+748: setfield_gc(p46, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+756: jump(p44, p46, descr=TargetToken(53317888))
+784: --end of the loop--
[86a80772f1a9c0] jit-log-opt-bridge}
[86a807730b7f06] {jit-backend
[86a8077310d7fd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a
[86a80773114f49] jit-backend-dump}
[86a8077311f64a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a8424 +0  25000000
[86a8077312097d] jit-backend-dump}
[86a8077312484e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a85d5 +0  25000000
[86a8077312574c] jit-backend-dump}
[86a80773128ccb] {jit-backend-addr
bridge out of Guard 0x323f1c0 has address 0x7fb5ed3a8420 to 0x7fb5ed3a85d0
       gc table: 0x7fb5ed3a8380
    jump target: 0x7fb5ed3a8420
         resops: 0x7fb5ed3a842e
       failures: 0x7fb5ed3a85d0
            end: 0x7fb5ed3a880b
[86a8077312afb5] jit-backend-addr}
[86a8077312e6dc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a843e +0  D1010000
[86a8077312f51a] jit-backend-dump}
[86a807731328f6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a8455 +0  D6010000
[86a80773133614] jit-backend-dump}
[86a80773136910] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a8465 +0  E2010000
[86a80773137666] jit-backend-dump}
[86a8077313a8d2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a8471 +0  F2010000
[86a8077313b5f4] jit-backend-dump}
[86a8077313e851] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a8488 +0  F7010000
[86a8077313f588] jit-backend-dump}
[86a807731428be] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a849f +0  18020000
[86a807731435cd] jit-backend-dump}
[86a8077314686d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a84b7 +0  1C020000
[86a807731475ba] jit-backend-dump}
[86a8077314a9b7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a84cb +0  24020000
[86a8077314b703] jit-backend-dump}
[86a8077314e904] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a84d8 +0  33020000
[86a8077314f635] jit-backend-dump}
[86a80773152818] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a84e1 +0  46020000
[86a8077315355e] jit-backend-dump}
[86a80773156750] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a84ea +0  59020000
[86a8077315748d] jit-backend-dump}
[86a8077315a796] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a84f4 +0  6B020000
[86a8077315b4dc] jit-backend-dump}
[86a8077315e6b2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a8506 +0  75020000
[86a8077315f3e3] jit-backend-dump}
[86a807731656c9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a8522 +0  75020000
[86a80773166621] jit-backend-dump}
[86a8077316a34e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a8539 +0  7A020000
[86a8077316b094] jit-backend-dump}
[86a8077316e316] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a854e +0  81020000
[86a8077316f031] jit-backend-dump}
[86a80773172321] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a8557 +0  94020000
[86a807731730a5] jit-backend-dump}
[86a80773176562] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed394363 +0  B9400100
[86a80773177228] jit-backend-dump}
[86a8077317b24c] jit-backend}
[86a8077317ef2a] {jit-log-opt-bridge
# bridge out of Guard 0x323f1c0 with 59 ops
[p0, p1]
+182: guard_class(p1, 16500368, descr=<Guard0x33ce3e0>) [p0, p1]
+194: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+198: guard_nonnull_class(p3, 16471056, descr=<Guard0x33ce440>) [p0, p1]
+224: i6 = instance_ptr_eq(p3, ConstPtr(ptr5))
+227: guard_false(i6, descr=<Guard0x33b5bb0>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
+233: guard_class(p0, 16435920, descr=<Guard0x33b5bf8>) [p0, p1]
+245: p8 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+249: guard_nonnull_class(p8, ConstClass(ForwardLink), descr=<Guard0x33ce4a0>) [p0, p1]
debug_merge_point(0, 0, '(+ row dist)')
+268: guard_not_invalidated(descr=<Guard0x33b5c40>) [p0, p1]
+268: p10 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+272: guard_nonnull_class(p10, ConstClass(W_Fixnum), descr=<Guard0x33ce500>) [p0, p1]
+291: p12 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+295: guard_nonnull_class(p12, ConstClass(W_Fixnum), descr=<Guard0x33ce560>) [p0, p1]
+315: i14 = getfield_gc_i(p10, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+319: i15 = getfield_gc_i(p12, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+323: i16 = int_add_ovf(i14, i15)
+329: guard_no_overflow(descr=<Guard0x33b5c88>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+335: i17 = getfield_gc_i(p3, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+339: i18 = int_eq(i17, i16)
+342: guard_false(i18, descr=<Guard0x33b5cd0>) [p0, p1]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '(let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)))')
debug_merge_point(0, 0, '(- row dist)')
+348: i19 = int_sub_ovf(i14, i15)
+351: guard_no_overflow(descr=<Guard0x33b5d18>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand6)')
+357: i20 = int_eq(i17, i19)
+360: guard_false(i20, descr=<Guard0x33b5d60>) [p0, p1]
debug_merge_point(0, 0, '(if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)')
debug_merge_point(0, 0, '(let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed)))')
debug_merge_point(0, 0, '(+ dist 1)')
+366: i22 = int_add_ovf(i15, 1)
+370: guard_no_overflow(descr=<Guard0x33b5da8>) [p0, p1]
debug_merge_point(0, 0, '(CellRef(ok?) row AppRand8 (cdr placed))')
+376: p23 = getfield_gc_r(p1, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+380: guard_class(p23, 16477696, descr=<Guard0x33b5df0>) [p0, p1]
+394: p25 = getfield_gc_r(p23, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize1.inst__vals_0 24 pure>)
+398: p26 = getfield_gc_r(p25, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+402: guard_nonnull_class(p26, 16477696, descr=<Guard0x33ce5c0>) [p0, p1]
+422: p28 = getfield_gc_r(p3, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+426: guard_nonnull_class(p28, 16616448, descr=<Guard0x33ce620>) [p0, p1]
+445: p30 = getfield_gc_r(p26, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+457: guard_value(p30, ConstPtr(ptr31), descr=<Guard0x33b5e38>) [p0, p1]
+466: i32 = instance_ptr_eq(p23, p26)
+469: guard_true(i32, descr=<Guard0x33b5e80>) [p0, p1]
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) row AppRand8 (cdr placed))')
+475: p33 = new_with_vtable(descr=<SizeDescr 40>)
+519: p34 = new_with_vtable(descr=<SizeDescr 16>)
+530: setfield_gc(p34, i22, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+534: setfield_gc(p33, p28, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+538: setfield_gc(p33, p10, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+542: setfield_gc(p33, p34, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+546: setfield_gc(p33, p23, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+550: jump(p33, p0, descr=TargetToken(52788128))
+592: --end of the loop--
[86a807731afdd1] jit-log-opt-bridge}
[86a8077335d9cd] {jit-backend
[86a807733c54f9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a
[86a807733cccf9] jit-backend-dump}
[86a807733d7e90] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a89e4 +0  25000000
[86a807733d92da] jit-backend-dump}
[86a807733e0b97] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a8bd5 +0  25000000
[86a807733e1ccc] jit-backend-dump}
[86a807733e580d] {jit-backend-addr
bridge out of Guard 0x3393220 has address 0x7fb5ed3a89e0 to 0x7fb5ed3a8bd0
       gc table: 0x7fb5ed3a8940
    jump target: 0x7fb5ed3a89e0
         resops: 0x7fb5ed3a89ee
       failures: 0x7fb5ed3a8bd0
            end: 0x7fb5ed3a8dd3
[86a807733e7ba5] jit-backend-addr}
[86a807733eb3e9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a89ff +0  2C020000
[86a807733ec1f9] jit-backend-dump}
[86a807733ef5f9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a8a17 +0  30020000
[86a807733f033c] jit-backend-dump}
[86a807733f36aa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a8a24 +0  3F020000
[86a807733f4388] jit-backend-dump}
[86a807733f7701] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a8a39 +0  46020000
[86a807733f8463] jit-backend-dump}
[86a807733fb759] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a8a50 +0  4B020000
[86a807733fc4cd] jit-backend-dump}
[86a807733ff841] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a8a67 +0  50020000
[86a80773400565] jit-backend-dump}
[86a807734037d5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a8a74 +0  5F020000
[86a807734044e1] jit-backend-dump}
[86a807734076ca] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a8a84 +0  6B020000
[86a807734083f4] jit-backend-dump}
[86a8077340b62d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a8aa2 +0  69020000
[86a8077340c348] jit-backend-dump}
[86a8077340f515] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a8ab8 +0  6F020000
[86a80773410268] jit-backend-dump}
[86a8077341350b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a8ace +0  75020000
[86a8077341421e] jit-backend-dump}
[86a80773417471] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a8ae8 +0  77020000
[86a8077341818d] jit-backend-dump}
[86a8077341b382] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a8afc +0  7F020000
[86a8077341c082] jit-backend-dump}
[86a8077341f230] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a8b17 +0  80020000
[86a8077341ff61] jit-backend-dump}
[86a80773423122] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a8b20 +0  93020000
[86a80773423e38] jit-backend-dump}
[86a8077342727e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a17be +0  1E720000
[86a80773427f81] jit-backend-dump}
[86a8077342c0b2] jit-backend}
[86a8077342fef6] {jit-log-opt-bridge
# bridge out of Guard 0x3393220 with 60 ops
[i0, p1, p2, p3, p4, p5]
+182: guard_not_invalidated(descr=<Guard0x33ce680>) [i0, p1, p2, p3, p4, p5]
+182: i6 = getfield_gc_i(p2, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+186: i7 = int_add_ovf(i6, i0)
+189: guard_no_overflow(descr=<Guard0x33b5ec8>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
+195: p8 = getfield_gc_r(p4, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+200: guard_nonnull_class(p8, ConstClass(ForwardLink), descr=<Guard0x33ce6e0>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+219: i10 = getfield_gc_i(p1, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+223: i11 = int_eq(i10, i7)
+226: guard_true(i11, descr=<Guard0x33b5f10>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '#f')
+232: p12 = getfield_gc_r(p4, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+244: guard_value(p12, ConstPtr(ptr13), descr=<Guard0x33b5f58>) [i0, p1, p2, p3, p4, p5]
+253: p14 = getfield_gc_r(p4, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+258: p15 = getfield_gc_r(p4, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand4)')
+263: guard_class(p15, 16435920, descr=<Guard0x33b5fa0>) [i0, p1, p2, p3, p4, p5]
+276: p17 = getfield_gc_r(p15, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+280: guard_nonnull_class(p17, ConstClass(ForwardLink), descr=<Guard0x33ce740>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
+299: guard_class(p14, 16500368, descr=<Guard0x3442020>) [i0, p1, p2, p3, p4, p5]
+312: p20 = getfield_gc_r(p14, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+316: guard_class(p20, 16478072, descr=<Guard0x3442068>) [i0, p1, p2, p3, p4, p5]
+328: p22 = getfield_gc_r(p20, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand4)')
+332: p23 = getfield_gc_r(p20, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+336: p24 = getfield_gc_r(p23, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+340: guard_nonnull_class(p24, 16478072, descr=<Guard0x33ce7a0>) [i0, p1, p2, p3, p4, p5]
+358: p26 = getfield_gc_r(p14, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+362: guard_nonnull_class(p26, 16471056, descr=<Guard0x33ce800>) [i0, p1, p2, p3, p4, p5]
+380: p28 = getfield_gc_r(p26, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+384: guard_nonnull_class(p28, 16471056, descr=<Guard0x33ce860>) [i0, p1, p2, p3, p4, p5]
+402: i30 = getfield_gc_i(p26, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+406: p31 = getfield_gc_r(p14, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+410: guard_nonnull_class(p31, 16616448, descr=<Guard0x33ce8c0>) [i0, p1, p2, p3, p4, p5]
+428: p33 = getfield_gc_r(p14, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+439: guard_nonnull(p33, descr=<Guard0x34420b0>) [i0, p1, p2, p3, p4, p5]
+448: p34 = getfield_gc_r(p24, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+466: guard_value(p34, ConstPtr(ptr35), descr=<Guard0x34420f8>) [i0, p1, p2, p3, p4, p5]
+475: i36 = instance_ptr_eq(p20, p24)
+478: guard_true(i36, descr=<Guard0x3442140>) [i0, p1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+484: p37 = new_with_vtable(descr=<SizeDescr 40>)
+528: p38 = new_with_vtable(descr=<SizeDescr 24>)
+539: setfield_gc(p38, i30, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+543: setfield_gc(p38, p31, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+547: p39 = new_with_vtable(descr=<SizeDescr 48>)
+558: setfield_gc(p39, p17, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+569: setfield_gc(p39, ConstPtr(ptr40), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+573: setfield_gc(p39, p22, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+577: setfield_gc(p39, p15, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+581: setfield_gc(p37, p20, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+585: setfield_gc(p37, p28, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+596: setfield_gc(p37, p38, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+600: setfield_gc(p37, p33, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+611: setfield_gc(p39, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+619: jump(p37, p39, descr=TargetToken(53317888))
+656: --end of the loop--
[86a8077346a8ab] jit-log-opt-bridge}
[86a8077365940b] {jit-backend
[86a807736c0dcb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a8ec
[86a807736c7fa7] jit-backend-dump}
[86a807736d2f5b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a8f44 +0  25000000
[86a807736d44cd] jit-backend-dump}
[86a807736d85cd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a9145 +0  25000000
[86a807736d94b1] jit-backend-dump}
[86a807736dc9c1] {jit-backend-addr
bridge out of Guard 0x331f970 has address 0x7fb5ed3a8f40 to 0x7fb5ed3a9140
       gc table: 0x7fb5ed3a8ec0
    jump target: 0x7fb5ed3a8f40
         resops: 0x7fb5ed3a8f4e
       failures: 0x7fb5ed3a9140
            end: 0x7fb5ed3a92d3
[86a807736def46] jit-backend-addr}
[86a807736e2630] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a8f5f +0  3C020000
[86a807736e3501] jit-backend-dump}
[86a807736e6831] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a8f74 +0  43020000
[86a807736e7568] jit-backend-dump}
[86a807736ea7d1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a8f99 +0  3A020000
[86a807736eb50e] jit-backend-dump}
[86a807736ee70c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a8faf +0  40020000
[86a807736ef453] jit-backend-dump}
[86a807736f2669] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a8fce +0  3D020000
[86a807736f336c] jit-backend-dump}
[86a807736f6592] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a8fdb +0  4C020000
[86a807736f72c9] jit-backend-dump}
[86a807736fa502] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a907f +0  C4010000
[86a807736fb1f2] jit-backend-dump}
[86a807736fe3b6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a909b +0  C4010000
[86a807736ff09b] jit-backend-dump}
[86a807737021f7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a90b1 +0  CA010000
[86a80773702ecc] jit-backend-dump}
[86a80773706087] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a90c5 +0  D2010000
[86a80773706d8d] jit-backend-dump}
[86a80773709f0e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a90dc +0  D7010000
[86a8077370abf8] jit-backend-dump}
[86a8077370e01a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39641e +0  1E2B0100
[86a8077370ec93] jit-backend-dump}
[86a80773712d99] jit-backend}
[86a80773716a49] {jit-log-opt-bridge
# bridge out of Guard 0x331f970 with 45 ops
[p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
+150: guard_not_invalidated(descr=<Guard0x33ce920>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
+150: i11 = int_add_ovf(i6, 1)
+157: guard_no_overflow(descr=<Guard0x3442188>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+163: i12 = getfield_gc_i(p7, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+175: i13 = int_eq(i12, i11)
+178: guard_true(i13, descr=<Guard0x34421d0>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '#f')
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand4)')
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
+184: p14 = getfield_gc_r(p5, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand4)')
+195: p15 = getfield_gc_r(p5, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+199: p16 = getfield_gc_r(p15, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+203: guard_nonnull_class(p16, 16478072, descr=<Guard0x33ce980>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
+221: p18 = getfield_gc_r(p4, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+225: guard_nonnull_class(p18, 16471056, descr=<Guard0x33ce9e0>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
+243: i20 = getfield_gc_i(p4, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+247: p21 = getfield_gc_r(p16, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+265: guard_value(p21, ConstPtr(ptr22), descr=<Guard0x3442218>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
+274: i23 = instance_ptr_eq(p5, p16)
+281: guard_true(i23, descr=<Guard0x3442260>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+287: p24 = new_with_vtable(descr=<SizeDescr 24>)
+334: p25 = new_with_vtable(descr=<SizeDescr 48>)
+385: p26 = getfield_gc_r(p5, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+396: setfield_gc(p24, i3, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+400: setfield_gc(p24, p2, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+404: setfield_gc(p25, p9, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+415: setfield_gc(p25, p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+419: setfield_gc(p25, p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+430: setfield_gc(p25, ConstPtr(ptr27), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+434: setfield_gc(p25, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+442: guard_nonnull(p26, descr=<Guard0x33cea40>) [p24, i20, p18, p25, p14, None, None, None, None, None, p5, None, p7, None, p9]
+451: guard_subclass(p26, ConstClass(W_Cell), descr=<Guard0x33ceaa0>) [p24, i20, p18, p25, p14, None, None, None, None, None, p5, None, p7, None, p9]
+479: p31 = getfield_gc_r(p26, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+483: guard_nonnull_class(p31, 16477696, descr=<Guard0x33ceb00>) [p24, i20, p18, p25, p14, None, None, None, None, None, p5, None, p7, None, p9]
+501: p33 = getfield_gc_r(p31, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+512: guard_value(p33, ConstPtr(ptr34), descr=<Guard0x33ceb60>) [p24, i20, p18, p25, p14, None, None, None, None, None, p5, None, p7, None, p9]
+521: i36 = int_le(i12, 9223372036854775806)
+538: guard_true(i36, descr=<Guard0x33cebc0>) [p24, i20, p18, p25, p14, None, None, None, None, None, p5, None, p7, None, p9]
+544: jump(p5, p18, i20, p24, p7, p9, p14, p25, p26, p31, i12, p15, p16, p14, descr=TargetToken(53317968))
+640: --end of the loop--
[86a8077374737a] jit-log-opt-bridge}
[86a8077397aaae] {jit-backend
[86a807739d6174] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a
[86a807739dd5ba] jit-backend-dump}
[86a807739e886a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a94a4 +0  25000000
[86a807739e9d1c] jit-backend-dump}
[86a807739edc51] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a96b5 +0  25000000
[86a807739eeabd] jit-backend-dump}
[86a807739f1f72] {jit-backend-addr
bridge out of Guard 0x339b610 has address 0x7fb5ed3a94a0 to 0x7fb5ed3a96b0
       gc table: 0x7fb5ed3a9400
    jump target: 0x7fb5ed3a94a0
         resops: 0x7fb5ed3a94ae
       failures: 0x7fb5ed3a96b0
            end: 0x7fb5ed3a9897
[86a807739f429f] jit-backend-addr}
[86a807739f7a81] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a94c4 +0  2B020000
[86a807739f88db] jit-backend-dump}
[86a807739fbc6d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a94d5 +0  52020000
[86a807739fc973] jit-backend-dump}
[86a807739ffc9a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a94f1 +0  52020000
[86a80773a009f8] jit-backend-dump}
[86a80773a03c62] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a9508 +0  57020000
[86a80773a0497d] jit-backend-dump}
[86a80773a07aa8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a9523 +0  58020000
[86a80773a0879f] jit-backend-dump}
[86a80773a0b8d0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a9538 +0  5F020000
[86a80773a0c5b5] jit-backend-dump}
[86a80773a0f7ad] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a9541 +0  72020000
[86a80773a104b3] jit-backend-dump}
[86a80773a1368c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a955d +0  72020000
[86a80773a143a8] jit-backend-dump}
[86a80773a17602] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a9575 +0  76020000
[86a80773a1830b] jit-backend-dump}
[86a80773a1b45e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a9586 +0  81020000
[86a80773a1c136] jit-backend-dump}
[86a80773a1f22a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a958f +0  94020000
[86a80773a1ff36] jit-backend-dump}
[86a80773a2303c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a959c +0  A3020000
[86a80773a23d1e] jit-backend-dump}
[86a80773a26df3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a95a5 +0  B6020000
[86a80773a27aea] jit-backend-dump}
[86a80773a2ab9e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a95bc +0  BB020000
[86a80773a2b87c] jit-backend-dump}
[86a80773a2ebe9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a2f51 +0  4B650000
[86a80773a2f8b5] jit-backend-dump}
[86a80773a33856] jit-backend}
[86a80773a37518] {jit-log-opt-bridge
# bridge out of Guard 0x339b610 with 77 ops
[p0, p1, p2, p3]
+182: guard_nonnull_class(p1, 16471056, descr=<Guard0x33cec20>) [p0, p1, p2, p3]
+200: guard_not_invalidated(descr=<Guard0x34422a8>) [p0, p1, p2, p3]
debug_merge_point(0, 0, '(CellRef(my-try) AppRand1 '() (cons (car x) z))')
+200: p5 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+204: guard_class(p5, 16478072, descr=<Guard0x34422f0>) [p0, p1, p2, p3]
+217: p7 = getfield_gc_r(p5, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+221: p8 = getfield_gc_r(p7, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+225: guard_nonnull_class(p8, 16478072, descr=<Guard0x33cec80>) [p0, p1, p2, p3]
+245: p10 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+249: guard_nonnull_class(p10, 16471056, descr=<Guard0x33cece0>) [p0, p1, p2, p3]
+268: i12 = getfield_gc_i(p10, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+272: p13 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+276: guard_nonnull_class(p13, 16471056, descr=<Guard0x33ced40>) [p0, p1, p2, p3]
+295: p15 = getfield_gc_r(p8, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+307: guard_value(p15, ConstPtr(ptr16), descr=<Guard0x3442338>) [p0, p1, p2, p3]
+316: i17 = instance_ptr_eq(p5, p8)
+319: guard_true(i17, descr=<Guard0x3442380>) [p0, p1, p2, p3]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) AppRand1 '() (cons (car x) z))')
debug_merge_point(0, 0, '(let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))')
debug_merge_point(0, 0, '(CellRef(ok?) (car x) 1 z)')
+325: p18 = getfield_gc_r(p5, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+329: p19 = getfield_gc_r(p18, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+334: guard_nonnull_class(p19, 16477696, descr=<Guard0x33ceda0>) [p0, p1, p2, p3]
+353: i21 = getfield_gc_i(p1, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+357: p22 = getfield_gc_r(p19, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+368: guard_value(p22, ConstPtr(ptr23), descr=<Guard0x34423c8>) [p0, p1, p2, p3]
+377: p24 = getfield_gc_r(p5, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)')
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
debug_merge_point(0, 0, '(+ row dist)')
+381: i26 = int_add_ovf(i21, 1)
+388: guard_no_overflow(descr=<Guard0x3442410>) [p0, p1, p2, p3]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+394: i27 = int_eq(i12, i26)
+397: guard_false(i27, descr=<Guard0x3442458>) [p0, p1, p2, p3]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '(let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)))')
debug_merge_point(0, 0, '(- row dist)')
+403: i29 = int_sub_ovf(i21, 1)
+410: guard_no_overflow(descr=<Guard0x34424a0>) [p0, p1, p2, p3]
debug_merge_point(0, 0, '(let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand6)')
+416: i30 = int_eq(i12, i29)
+419: guard_true(i30, descr=<Guard0x34424e8>) [p0, p1, p2, p3]
debug_merge_point(0, 0, '(if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)')
debug_merge_point(0, 0, '#f')
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand6)')
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand6)')
+425: p31 = getfield_gc_r(p1, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+429: guard_nonnull_class(p31, 16471056, descr=<Guard0x33cee00>) [p0, p1, p2, p3]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+448: p33 = new_with_vtable(descr=<SizeDescr 40>)
+492: p34 = new_with_vtable(descr=<SizeDescr 24>)
+503: setfield_gc(p34, i21, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+514: setfield_gc(p34, ConstPtr(ptr35), descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+518: p36 = new_with_vtable(descr=<SizeDescr 24>)
+530: setfield_gc(p36, i12, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+535: setfield_gc(p36, p13, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+540: p37 = new_with_vtable(descr=<SizeDescr 48>)
+552: p38 = new_with_vtable(descr=<SizeDescr 40>)
+563: setfield_gc(p38, p3, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+574: setfield_gc(p38, p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+578: setfield_gc(p38, p2, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+596: setfield_gc(p38, ConstPtr(ptr39), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+600: setfield_gc(p33, p5, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+604: setfield_gc(p33, p31, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+608: setfield_gc(p33, p36, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+612: setfield_gc(p33, p34, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+616: setfield_gc(p37, p3, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+620: setfield_gc(p37, p24, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+624: setfield_gc(p37, p38, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+635: setfield_gc(p37, ConstPtr(ptr40), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+639: setfield_gc(p37, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+647: jump(p33, p37, descr=TargetToken(53317888))
+688: --end of the loop--
[86a80773a735bb] jit-log-opt-bridge}
[86a80773be111e] {jit-backend
[86a80773c32b3f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a99e
[86a80773c3a222] jit-backend-dump}
[86a80773c44aa2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a9a94 +0  25000000
[86a80773c45e1c] jit-backend-dump}
[86a80773c49bc0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a9c85 +0  25000000
[86a80773c4a9ec] jit-backend-dump}
[86a80773c4dde0] {jit-backend-addr
bridge out of Guard 0x33af760 has address 0x7fb5ed3a9a90 to 0x7fb5ed3a9c80
       gc table: 0x7fb5ed3a99e0
    jump target: 0x7fb5ed3a9a90
         resops: 0x7fb5ed3a9a9e
       failures: 0x7fb5ed3a9c80
            end: 0x7fb5ed3a9ebb
[86a80773c4ff95] jit-backend-addr}
[86a80773c534b1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a9aae +0  11020000
[86a80773c542f2] jit-backend-dump}
[86a80773c57653] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a9ac5 +0  16020000
[86a80773c583d4] jit-backend-dump}
[86a80773c5b658] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a9ad5 +0  22020000
[86a80773c5c36b] jit-backend-dump}
[86a80773c5f639] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a9aea +0  29020000
[86a80773c60339] jit-backend-dump}
[86a80773c635ca] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a9b02 +0  2D020000
[86a80773c642d3] jit-backend-dump}
[86a80773c6755e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a9b13 +0  38020000
[86a80773c68289] jit-backend-dump}
[86a80773c6b5b6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a9b2e +0  39020000
[86a80773c6c2c2] jit-backend-dump}
[86a80773c6f4f7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a9b48 +0  3B020000
[86a80773c70200] jit-backend-dump}
[86a80773c733e3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a9b5c +0  43020000
[86a80773c740e3] jit-backend-dump}
[86a80773c772e4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a9b69 +0  52020000
[86a80773c77fd8] jit-backend-dump}
[86a80773c7b269] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a9b76 +0  7D020000
[86a80773c7bf50] jit-backend-dump}
[86a80773c7f1aa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a9b83 +0  8C020000
[86a80773c7feb0] jit-backend-dump}
[86a80773c830ae] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a9b9d +0  8E020000
[86a80773c83dbe] jit-backend-dump}
[86a80773c86fed] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a9bb4 +0  93020000
[86a80773c87cf0] jit-backend-dump}
[86a80773c8aea4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a9bcb +0  98020000
[86a80773c8bbc3] jit-backend-dump}
[86a80773c8ed87] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a9bdf +0  A0020000
[86a80773c8fa87] jit-backend-dump}
[86a80773c92c26] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a9be8 +0  B3020000
[86a80773c93939] jit-backend-dump}
[86a80773c96e5b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a6475 +0  17360000
[86a80773c97b06] jit-backend-dump}
[86a80773c9bb3c] jit-backend}
[86a80773c9f78d] {jit-log-opt-bridge
# bridge out of Guard 0x33af760 with 67 ops
[p0, p1]
+198: guard_class(p1, 16500368, descr=<Guard0x33cee60>) [p0, p1]
+210: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+214: guard_nonnull_class(p3, 16471056, descr=<Guard0x33ceec0>) [p0, p1]
+240: i6 = instance_ptr_eq(p3, ConstPtr(ptr5))
+243: guard_false(i6, descr=<Guard0x3442530>) [p0, p1]
debug_merge_point(0, 0, '(let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))')
+249: guard_class(p0, 16437216, descr=<Guard0x3442578>) [p0, p1]
+270: p8 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+274: guard_nonnull_class(p8, ConstClass(ForwardLink), descr=<Guard0x33cef20>) [p0, p1]
debug_merge_point(0, 0, '(CellRef(ok?) (car x) 1 z)')
+294: p10 = getfield_gc_r(p1, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+298: guard_class(p10, 16478072, descr=<Guard0x34425c0>) [p0, p1]
+311: p12 = getfield_gc_r(p10, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+315: p13 = getfield_gc_r(p12, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+319: guard_nonnull_class(p13, 16477696, descr=<Guard0x33cef80>) [p0, p1]
+338: i15 = getfield_gc_i(p3, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+342: p16 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+346: guard_nonnull_class(p16, 16471056, descr=<Guard0x33cefe0>) [p0, p1]
+364: p18 = getfield_gc_r(p13, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+375: guard_value(p18, ConstPtr(ptr19), descr=<Guard0x3442608>) [p0, p1]
+384: p20 = getfield_gc_r(p10, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)')
+388: i22 = instance_ptr_eq(p16, ConstPtr(ptr21))
+391: guard_false(i22, descr=<Guard0x3442650>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
debug_merge_point(0, 0, '(+ row dist)')
+397: guard_not_invalidated(descr=<Guard0x3442698>) [p0, p1]
+397: i24 = int_add_ovf(i15, 1)
+404: guard_no_overflow(descr=<Guard0x34426e0>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+410: i25 = getfield_gc_i(p16, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+414: i26 = int_eq(i25, i24)
+417: guard_true(i26, descr=<Guard0x3442728>) [p0, p1]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '#f')
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand4)')
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand4)')
+423: p27 = getfield_gc_r(p10, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+427: p28 = getfield_gc_r(p27, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+431: guard_nonnull_class(p28, 16478072, descr=<Guard0x33cf040>) [p0, p1]
+449: p30 = getfield_gc_r(p3, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+453: guard_nonnull_class(p30, 16616448, descr=<Guard0x33cf0a0>) [p0, p1]
+472: p32 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+476: guard_nonnull_class(p32, 16471056, descr=<Guard0x33cf100>) [p0, p1]
+495: p34 = getfield_gc_r(p28, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+506: guard_value(p34, ConstPtr(ptr35), descr=<Guard0x3442770>) [p0, p1]
+515: i36 = instance_ptr_eq(p10, p28)
+518: guard_true(i36, descr=<Guard0x34427b8>) [p0, p1]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+524: p37 = new_with_vtable(descr=<SizeDescr 40>)
+565: p38 = new_with_vtable(descr=<SizeDescr 24>)
+576: setfield_gc(p38, i15, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+580: setfield_gc(p38, p32, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+584: p39 = new_with_vtable(descr=<SizeDescr 48>)
+595: setfield_gc(p37, p30, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+599: setfield_gc(p39, p8, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+603: setfield_gc(p37, p10, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+607: setfield_gc(p37, p16, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+611: setfield_gc(p37, p38, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+615: setfield_gc(p39, p20, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+619: setfield_gc(p39, p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+630: setfield_gc(p39, ConstPtr(ptr40), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+634: setfield_gc(p39, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+642: jump(p37, p39, descr=TargetToken(53317888))
+672: --end of the loop--
[86a80773cd6ecd] jit-log-opt-bridge}
[86a80773f08b5b] {jit-backend
[86a80773f6f048] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa070 +0  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8C5202000048FF0425F0FD34038139D00C01000F85000000004C8B79204983FF01720741813F509A00000F85000000004C8B35F0FEFFFF4D39F70F8400000000813A101100000F85000000004C8B72084983FE01720741813E900F00000F85000000004C8B71104983FE01720741813E601400000F85000000004C8B69184983FD01720841817D00601400000F85000000004D8B66084D8B75084D89E54D01F40F80000000004D8B57084D39E20F84000000004D29F50F80000000004D39EA0F85000000004C8B6A204C8B15AFFEFFFF4D39D50F85000000004C8B52104C8B6A1841817D00201600000F85000000004D8B75084983FE01720741813E900F00000F850000000041813AD00C01000F85000000004D8B620841813C24B8B500000F85000000004D8B7C24084D8B4C24204D8B41084983F8017207418138B8B500000F85000000004D8B4A104983F9017207418139509A00000F8500000000498B79104883FF017206813F40D202000F8500000000498B71084D8B4A184983F9017207418139509A00000F8500000000498B5A204885DB0F84000000004D8B5010488B0531FEFFFF4939C20F85000000004D39C40F8500000000488B0C25F091F900488D5170483B14251092F9000F87AB00000048891425F091F90048C701D00C0100488D512848C702509A0000488972084C894A104C8D4A1849C70120160000488959204D8971084889791048895118488B15D9FDFFFF498951204D8979104D8969184C89610849C741280000000048898D300100004C898D3801000049BB506239EDB57F000041FFE366666666662E0F1F84000000000048C7442408FFFFFF0049BBD09E3AEDB57F00004C895D204D8D9B2084FEFF41FFD3E988FDFFFF49BB60A03AEDB57F00004C895D204D8D9B908AFEFF41FFD3E940FFFFFFFF3577FCFFFF49BBE09E3AEDB57F000041534D8D9B2081FEFF41FFE3FF3563FCFFFF49BBF09E3AEDB57F000041534D8D9B1081FEFF41FFE3FF3557FCFFFF49BB009F3AEDB57F000041534D8D9B0081FEFF41FFE3FF3543FCFFFF49BB109F3AEDB57F000041534D8D9BF080FEFF41FFE3FF352FFCFFFF49BB209F3AEDB57F000041534D8D9BE080FEFF41FFE3FF351BFCFFFF49BB309F3AEDB57F000041534D8D9BD080FEFF41FFE3FF3507FCFFFF49BB409F3AEDB57F000041534D8D9BC080FEFF41FFE3FF35F3FBFFFF49BB509F3AEDB57F000041534D8D9BB080FEFF41FFE3FF35DFFBFFFF49BB609F3AEDB57F000041534D8D9BA080FEFF41FFE3FF35CBFBFFFF49BB709F3AEDB57F000041534D8D9B9080FEFF41FFE3FF35B7FBFFFF49BB809F3AEDB57F000041534D8D9B8080FEFF41FFE3FF35A3FBFFFF49BB909F3AEDB57F000041534D8D9B7080FEFF41FFE3FF3597FBFFFF49BBA09F3AEDB57F000041534D8D9B6080FEFF41FFE3FF3583FBFFFF49BBB09F3AEDB57F000041534D8D9B5080FEFF41FFE3FF356FFBFFFF49BBC09F3AEDB57F000041534D8D9B4080FEFF41FFE3FF355BFBFFFF49BBD09F3AEDB57F000041534D8D9B3080FEFF41FFE3FF3547FBFFFF49BBE09F3AEDB57F000041534D8D9B2080FEFF41FFE3FF3533FBFFFF49BBF09F3AEDB57F000041534D8D9B1080FEFF41FFE3FF351FFBFFFF49BB00A03AEDB57F000041534D8D9B0080FEFF41FFE3FF350BFBFFFF49BB10A03AEDB57F000041534D8D9BF07FFEFF41FFE3FF35F7FAFFFF49BB20A03AEDB57F000041534D8D9BE07FFEFF41FFE3FF35E3FAFFFF49BB30A03AEDB57F000041534D8D9BD07FFEFF41FFE3FF35D7FAFFFF49BB40A03AEDB57F000041534D8D9BC07FFEFF41FFE3FF35C3FAFFFF49BB50A03AEDB57F000041534D8D9BB07FFEFF41FFE3
[86a80773f78a8f] jit-backend-dump}
[86a80773f8399b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa154 +0  25000000
[86a80773f84d7a] jit-backend-dump}
[86a80773f88afd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa3b5 +0  25000000
[86a80773f89972] jit-backend-dump}
[86a80773f8ce85] {jit-backend-addr
bridge out of Guard 0x33803c8 has address 0x7fb5ed3aa150 to 0x7fb5ed3aa3b0
       gc table: 0x7fb5ed3aa070
    jump target: 0x7fb5ed3aa150
         resops: 0x7fb5ed3aa15e
       failures: 0x7fb5ed3aa3b0
            end: 0x7fb5ed3aa693
[86a80773f8f09c] jit-backend-addr}
[86a80773f928e3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa16e +0  81020000
[86a80773f936e1] jit-backend-dump}
[86a80773f969ec] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa185 +0  86020000
[86a80773f976ef] jit-backend-dump}
[86a80773f9a90f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa195 +0  92020000
[86a80773f9b5fa] jit-backend-dump}
[86a80773f9e7b4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa1a1 +0  A2020000
[86a80773f9f48d] jit-backend-dump}
[86a80773fa25fe] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa1b8 +0  A7020000
[86a80773fa32e6] jit-backend-dump}
[86a80773fa64e7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa1cf +0  C8020000
[86a80773fa71c5] jit-backend-dump}
[86a80773faa377] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa1e7 +0  CC020000
[86a80773fab049] jit-backend-dump}
[86a80773fae18c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa1fb +0  D4020000
[86a80773faee49] jit-backend-dump}
[86a80773fb1f8d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa208 +0  E3020000
[86a80773fb2c65] jit-backend-dump}
[86a80773fb5da2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa211 +0  F6020000
[86a80773fb6a6e] jit-backend-dump}
[86a80773fb9b96] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa21a +0  09030000
[86a80773fba853] jit-backend-dump}
[86a80773fbd9a3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa22e +0  11030000
[86a80773fbe675] jit-backend-dump}
[86a80773fc179d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa244 +0  17030000
[86a80773fc246c] jit-backend-dump}
[86a80773fc55bf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa25b +0  1C030000
[86a80773fc626f] jit-backend-dump}
[86a80773fc93ad] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa268 +0  2B030000
[86a80773fca07f] jit-backend-dump}
[86a80773fcd1db] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa27a +0  35030000
[86a80773fcdea7] jit-backend-dump}
[86a80773fd0fde] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa29b +0  30030000
[86a80773fd1cb0] jit-backend-dump}
[86a80773fd4e18] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa2b2 +0  35030000
[86a80773fd5ae4] jit-backend-dump}
[86a80773fd8bfd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa2c8 +0  3B030000
[86a80773fd9900] jit-backend-dump}
[86a80773fdca7b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa2e3 +0  3C030000
[86a80773fdd734] jit-backend-dump}
[86a80773fe0847] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa2f0 +0  4B030000
[86a80773fe153b] jit-backend-dump}
[86a80773fe46cb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa304 +0  53030000
[86a80773fe53af] jit-backend-dump}
[86a80773fe84ed] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa30d +0  66030000
[86a80773fe91b9] jit-backend-dump}
[86a80773fec58e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39c404 +0  48DD0000
[86a80773fed23e] jit-backend-dump}
[86a80773ff125c] jit-backend}
[86a80773ff4ebc] {jit-log-opt-bridge
# bridge out of Guard 0x33803c8 with 82 ops
[p0, p1]
+246: guard_class(p1, 16500368, descr=<Guard0x33cf160>) [p0, p1]
+258: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+262: guard_nonnull_class(p3, 16471056, descr=<Guard0x33cf1c0>) [p0, p1]
+288: i6 = instance_ptr_eq(p3, ConstPtr(ptr5))
+291: guard_false(i6, descr=<Guard0x3442800>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
+297: guard_class(p0, 16435920, descr=<Guard0x3442848>) [p0, p1]
+309: p8 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+313: guard_nonnull_class(p8, ConstClass(ForwardLink), descr=<Guard0x33cf220>) [p0, p1]
debug_merge_point(0, 0, '(+ row dist)')
+332: guard_not_invalidated(descr=<Guard0x3442890>) [p0, p1]
+332: p10 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+336: guard_nonnull_class(p10, ConstClass(W_Fixnum), descr=<Guard0x33cf280>) [p0, p1]
+355: p12 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+359: guard_nonnull_class(p12, ConstClass(W_Fixnum), descr=<Guard0x33cf2e0>) [p0, p1]
+379: i14 = getfield_gc_i(p10, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+383: i15 = getfield_gc_i(p12, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+387: i16 = int_add_ovf(i14, i15)
+393: guard_no_overflow(descr=<Guard0x34428d8>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+399: i17 = getfield_gc_i(p3, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+403: i18 = int_eq(i17, i16)
+406: guard_false(i18, descr=<Guard0x3442920>) [p0, p1]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '(let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)))')
debug_merge_point(0, 0, '(- row dist)')
+412: i19 = int_sub_ovf(i14, i15)
+415: guard_no_overflow(descr=<Guard0x3442968>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand6)')
+421: i20 = int_eq(i17, i19)
+424: guard_true(i20, descr=<Guard0x34429b0>) [p0, p1]
debug_merge_point(0, 0, '(if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)')
debug_merge_point(0, 0, '#f')
+430: p21 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+441: guard_value(p21, ConstPtr(ptr22), descr=<Guard0x34429f8>) [p0, p1]
+450: p23 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+454: p24 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand6)')
+458: guard_class(p24, 16437216, descr=<Guard0x3442a40>) [p0, p1]
+472: p26 = getfield_gc_r(p24, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+476: guard_nonnull_class(p26, ConstClass(ForwardLink), descr=<Guard0x33cf340>) [p0, p1]
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
+495: guard_class(p23, 16500368, descr=<Guard0x3442a88>) [p0, p1]
+508: p29 = getfield_gc_r(p23, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+512: guard_class(p29, 16478072, descr=<Guard0x3442ad0>) [p0, p1]
+526: p31 = getfield_gc_r(p29, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand6)')
+531: p32 = getfield_gc_r(p29, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+536: p33 = getfield_gc_r(p32, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+540: guard_nonnull_class(p33, 16478072, descr=<Guard0x33cf3a0>) [p0, p1]
+559: p35 = getfield_gc_r(p23, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+563: guard_nonnull_class(p35, 16471056, descr=<Guard0x33cf400>) [p0, p1]
+582: p37 = getfield_gc_r(p35, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+586: guard_nonnull_class(p37, 16616448, descr=<Guard0x33cf460>) [p0, p1]
+604: i39 = getfield_gc_i(p35, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+608: p40 = getfield_gc_r(p23, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+612: guard_nonnull_class(p40, 16471056, descr=<Guard0x33cf4c0>) [p0, p1]
+631: p42 = getfield_gc_r(p23, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+635: guard_nonnull(p42, descr=<Guard0x3442b18>) [p0, p1]
+644: p43 = getfield_gc_r(p33, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+655: guard_value(p43, ConstPtr(ptr44), descr=<Guard0x3442b60>) [p0, p1]
+664: i45 = instance_ptr_eq(p29, p33)
+667: guard_true(i45, descr=<Guard0x3442ba8>) [p0, p1]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+673: p46 = new_with_vtable(descr=<SizeDescr 40>)
+714: p47 = new_with_vtable(descr=<SizeDescr 24>)
+725: setfield_gc(p47, i39, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+729: setfield_gc(p47, p40, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+733: p48 = new_with_vtable(descr=<SizeDescr 48>)
+744: setfield_gc(p46, p42, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+748: setfield_gc(p48, p26, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+752: setfield_gc(p46, p37, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+756: setfield_gc(p46, p47, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+767: setfield_gc(p48, ConstPtr(ptr49), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+771: setfield_gc(p48, p31, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+775: setfield_gc(p48, p24, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+779: setfield_gc(p46, p29, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+783: setfield_gc(p48, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+791: jump(p46, p48, descr=TargetToken(53317888))
+832: --end of the loop--
[86a80774033dfc] jit-log-opt-bridge}
[86a807741cfc10] {jit-backend
[86a8077422cda1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa810 +0  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8CF201000048FF042570FE34038139D00C01000F85000000004C8B79104983FF01720741813F509A00000F85000000004C8B3510FFFFFF4D39F70F8400000000813B201600000F85000000004C8B6B084983FD01720841817D00900F00000F85000000004C8B610841813C24B8B500000F85000000004D8B5424184D8B4A084983F901720741813940B400000F85000000004D8B57084C8B41204983F8017207418138509A00000F8500000000498B79104C8B0DC7FEFFFF4C39CF0F85000000004D8B4C24084D39F00F84000000004D89D64983C2010F8000000000498B78084C39D70F84000000004D89F24983EE010F80000000004C39F70F85000000004D8B742420498B7E084883FF017206813FB8B500000F85000000004D8B77104983FE01720741813E40D202000F85000000004C8B79184983FF01720741813F509A00000F8500000000488B7710488B1584FEFFFF4839D60F85000000004939FC0F8500000000488B0C25F091F900488D5170483B14251092F9000F879E00000048891425F091F90048C701D00C0100488D512848C702509A00004C8952084C897A104C8D7A1849C707201600004C8971104D896F084C8961084C894120488951184D894F1049895F18488B1D20FEFFFF49895F2049C747280000000048898D300100004C89BD3801000049BB506239EDB57F000041FFE39048C7442408FFFFFF0049BBA8A63AEDB57F00004C895D204D8D9B487CFEFF41FFD3E9E8FDFFFF49BBF8A73AEDB57F00004C895D204D8D9BF882FEFF41FFD3E94DFFFFFFFF35F7FCFFFF49BBB8A63AEDB57F000041534D8D9B4879FEFF41FFE3FF35E3FCFFFF49BBC8A63AEDB57F000041534D8D9B3879FEFF41FFE3FF35D7FCFFFF49BBD8A63AEDB57F000041534D8D9B2879FEFF41FFE3FF35C3FCFFFF49BBE8A63AEDB57F000041534D8D9B1879FEFF41FFE3FF35AFFCFFFF49BBF8A63AEDB57F000041534D8D9B0879FEFF41FFE3FF359BFCFFFF49BB08A73AEDB57F000041534D8D9BF878FEFF41FFE3FF3587FCFFFF49BB18A73AEDB57F000041534D8D9BE878FEFF41FFE3FF3573FCFFFF49BB28A73AEDB57F000041534D8D9BD878FEFF41FFE3FF3567FCFFFF49BB38A73AEDB57F000041534D8D9BC878FEFF41FFE3FF3553FCFFFF49BB48A73AEDB57F000041534D8D9BB878FEFF41FFE3FF353FFCFFFF49BB58A73AEDB57F000041534D8D9BA878FEFF41FFE3FF352BFCFFFF49BB68A73AEDB57F000041534D8D9B9878FEFF41FFE3FF3517FCFFFF49BB78A73AEDB57F000041534D8D9B8878FEFF41FFE3FF3503FCFFFF49BB88A73AEDB57F000041534D8D9B7878FEFF41FFE3FF35EFFBFFFF49BB98A73AEDB57F000041534D8D9B6878FEFF41FFE3FF35DBFBFFFF49BBA8A73AEDB57F000041534D8D9B5878FEFF41FFE3FF35C7FBFFFF49BBB8A73AEDB57F000041534D8D9B4878FEFF41FFE3FF35B3FBFFFF49BBC8A73AEDB57F000041534D8D9B3878FEFF41FFE3FF35A7FBFFFF49BBD8A73AEDB57F000041534D8D9B2878FEFF41FFE3FF3593FBFFFF49BBE8A73AEDB57F000041534D8D9B1878FEFF41FFE3
[86a80774234c6d] jit-backend-dump}
[86a8077423f61b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa8d4 +0  25000000
[86a8077424089a] jit-backend-dump}
[86a807742446c2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aaad5 +0  25000000
[86a807742454f7] jit-backend-dump}
[86a807742489b5] {jit-backend-addr
bridge out of Guard 0x323fd60 has address 0x7fb5ed3aa8d0 to 0x7fb5ed3aaad0
       gc table: 0x7fb5ed3aa810
    jump target: 0x7fb5ed3aa8d0
         resops: 0x7fb5ed3aa8de
       failures: 0x7fb5ed3aaad0
            end: 0x7fb5ed3aad43
[86a8077424ab6a] jit-backend-addr}
[86a8077424e2d5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa8ee +0  21020000
[86a8077424f0d6] jit-backend-dump}
[86a8077425252b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa905 +0  26020000
[86a80774253234] jit-backend-dump}
[86a80774256540] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa915 +0  32020000
[86a8077425722d] jit-backend-dump}
[86a8077425a50b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa921 +0  42020000
[86a8077425b1d4] jit-backend-dump}
[86a8077425e48c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa939 +0  46020000
[86a8077425f16e] jit-backend-dump}
[86a807742624b3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa94b +0  50020000
[86a80774263192] jit-backend-dump}
[86a8077426649d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa967 +0  50020000
[86a80774267169] jit-backend-dump}
[86a8077426a462] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa982 +0  51020000
[86a8077426b12b] jit-backend-dump}
[86a8077426e41e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa996 +0  59020000
[86a8077426f0dd] jit-backend-dump}
[86a80774272362] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa9a4 +0  67020000
[86a807742730a8] jit-backend-dump}
[86a807742763d5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa9b1 +0  92020000
[86a8077427708f] jit-backend-dump}
[86a8077427a39d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa9be +0  A1020000
[86a8077427b057] jit-backend-dump}
[86a8077427e328] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa9cb +0  B0020000
[86a8077427efee] jit-backend-dump}
[86a807742822e7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa9d4 +0  C3020000
[86a80774282fc8] jit-backend-dump}
[86a8077428636d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aa9ef +0  C4020000
[86a8077428705a] jit-backend-dump}
[86a8077428a316] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aaa06 +0  C9020000
[86a8077428afe2] jit-backend-dump}
[86a8077428e2a1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aaa1d +0  CE020000
[86a8077428ef6a] jit-backend-dump}
[86a8077429224a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aaa31 +0  D6020000
[86a80774292f0a] jit-backend-dump}
[86a807742961c9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aaa3a +0  E9020000
[86a80774296e95] jit-backend-dump}
[86a8077429a3fe] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed396387 +0  45450100
[86a8077429b0c7] jit-backend-dump}
[86a8077429f1e2] jit-backend}
[86a807742a2ec0] {jit-log-opt-bridge
# bridge out of Guard 0x323fd60 with 76 ops
[p0, p1]
+214: guard_class(p1, 16500368, descr=<Guard0x33cf520>) [p0, p1]
+226: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+230: guard_nonnull_class(p3, 16471056, descr=<Guard0x33cf580>) [p0, p1]
+256: i6 = instance_ptr_eq(p3, ConstPtr(ptr5))
+259: guard_false(i6, descr=<Guard0x3442bf0>) [p0, p1]
debug_merge_point(0, 0, '(let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))')
+265: guard_class(p0, 16437216, descr=<Guard0x3442c38>) [p0, p1]
+277: p8 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+281: guard_nonnull_class(p8, ConstClass(ForwardLink), descr=<Guard0x33cf5e0>) [p0, p1]
debug_merge_point(0, 0, '(CellRef(ok?) (car x) 1 z)')
+301: p10 = getfield_gc_r(p1, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+305: guard_class(p10, 16478072, descr=<Guard0x3442c80>) [p0, p1]
+319: p12 = getfield_gc_r(p10, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+324: p13 = getfield_gc_r(p12, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+328: guard_nonnull_class(p13, 16477696, descr=<Guard0x33cf640>) [p0, p1]
+347: i15 = getfield_gc_i(p3, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+351: p16 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+355: guard_nonnull_class(p16, 16471056, descr=<Guard0x33cf6a0>) [p0, p1]
+374: p18 = getfield_gc_r(p13, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+385: guard_value(p18, ConstPtr(ptr19), descr=<Guard0x3442cc8>) [p0, p1]
+394: p20 = getfield_gc_r(p10, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)')
+399: i22 = instance_ptr_eq(p16, ConstPtr(ptr21))
+402: guard_false(i22, descr=<Guard0x3442d10>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
debug_merge_point(0, 0, '(+ row dist)')
+408: guard_not_invalidated(descr=<Guard0x3442d58>) [p0, p1]
+408: i24 = int_add_ovf(i15, 1)
+415: guard_no_overflow(descr=<Guard0x3442da0>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+421: i25 = getfield_gc_i(p16, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+425: i26 = int_eq(i25, i24)
+428: guard_false(i26, descr=<Guard0x3442de8>) [p0, p1]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '(let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)))')
debug_merge_point(0, 0, '(- row dist)')
+434: i28 = int_sub_ovf(i15, 1)
+441: guard_no_overflow(descr=<Guard0x3442e30>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand6)')
+447: i29 = int_eq(i25, i28)
+450: guard_true(i29, descr=<Guard0x3442e78>) [p0, p1]
debug_merge_point(0, 0, '(if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)')
debug_merge_point(0, 0, '#f')
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand6)')
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand6)')
+456: p30 = getfield_gc_r(p10, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+461: p31 = getfield_gc_r(p30, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+465: guard_nonnull_class(p31, 16478072, descr=<Guard0x33cf700>) [p0, p1]
+483: p33 = getfield_gc_r(p3, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+487: guard_nonnull_class(p33, 16616448, descr=<Guard0x33cf760>) [p0, p1]
+506: p35 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+510: guard_nonnull_class(p35, 16471056, descr=<Guard0x33cf7c0>) [p0, p1]
+529: p37 = getfield_gc_r(p31, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+540: guard_value(p37, ConstPtr(ptr38), descr=<Guard0x3442ec0>) [p0, p1]
+549: i39 = instance_ptr_eq(p10, p31)
+552: guard_true(i39, descr=<Guard0x3442f08>) [p0, p1]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+558: p40 = new_with_vtable(descr=<SizeDescr 40>)
+599: p41 = new_with_vtable(descr=<SizeDescr 24>)
+610: setfield_gc(p41, i15, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+614: setfield_gc(p41, p35, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+618: p42 = new_with_vtable(descr=<SizeDescr 48>)
+629: setfield_gc(p40, p33, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+633: setfield_gc(p42, p8, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+637: setfield_gc(p40, p10, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+641: setfield_gc(p40, p16, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+645: setfield_gc(p40, p41, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+649: setfield_gc(p42, p20, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+653: setfield_gc(p42, p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+664: setfield_gc(p42, ConstPtr(ptr43), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+668: setfield_gc(p42, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+676: jump(p40, p42, descr=TargetToken(53317888))
+704: --end of the loop--
[86a807742e18d3] jit-log-opt-bridge}
[86a807745222c0] {jit-backend
[86a8077457ead7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aaea0 +0  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8CD201000048FF0425801335038139D00C01000F85000000004C8B79104983FF01720741813F509A00000F85000000004C8B3510FFFFFF4D39F70F8400000000813B201600000F85000000004C8B6B084983FD01720841817D00900F00000F85000000004C8B610841813C24B8B500000F85000000004D8B5424184D8B62084983FC01720841813C2440B400000F85000000004D8B57084C8B79204983FF01720741813F509A00000F85000000004D8B4C24104C8B05C5FEFFFF4D39C10F85000000004D39F70F84000000004D89D64983C2010F80000000004D8B4F084D39D10F84000000004D89F24983EE010F80000000004D39F10F84000000004D8B7424184D8B4E084983F901720741813940B400000F85000000004D8B77104983FE01720741813E40D202000F85000000004D8B79104D39C70F85000000004D39CC0F85000000004989CF488B0C25F091F900488D5160483B14251092F9000F879B00000048891425F091F90048C701D00C0100488D512848C702601400004C8952084C8D521049C70210110000488951104D896A084C8961084C8971204C8B353DFEFFFF4C8971184D897A1049895A18488B1D32FEFFFF49895A2048898D300100004C89953801000049BB403B39EDB57F000041FFE30F1F0048C7442408FFFFFF0049BB50AD3AEDB57F00004C895D204D8D9BA075FEFF41FFD3E908FEFFFF49BB90AE3AEDB57F00004C895D204D8D9B607CFEFF41FFD3E950FFFFFFFF3517FDFFFF49BB60AD3AEDB57F000041534D8D9BA072FEFF41FFE3FF3503FDFFFF49BB70AD3AEDB57F000041534D8D9B9072FEFF41FFE3FF35F7FCFFFF49BB80AD3AEDB57F000041534D8D9B8072FEFF41FFE3FF35E3FCFFFF49BB90AD3AEDB57F000041534D8D9B7072FEFF41FFE3FF35CFFCFFFF49BBA0AD3AEDB57F000041534D8D9B6072FEFF41FFE3FF35BBFCFFFF49BBB0AD3AEDB57F000041534D8D9B5072FEFF41FFE3FF35A7FCFFFF49BBC0AD3AEDB57F000041534D8D9B4072FEFF41FFE3FF3593FCFFFF49BBD0AD3AEDB57F000041534D8D9B3072FEFF41FFE3FF3587FCFFFF49BBE0AD3AEDB57F000041534D8D9B2072FEFF41FFE3FF3573FCFFFF49BBF0AD3AEDB57F000041534D8D9B1072FEFF41FFE3FF355FFCFFFF49BB00AE3AEDB57F000041534D8D9B0072FEFF41FFE3FF354BFCFFFF49BB10AE3AEDB57F000041534D8D9BF071FEFF41FFE3FF3537FCFFFF49BB20AE3AEDB57F000041534D8D9BE071FEFF41FFE3FF3523FCFFFF49BB30AE3AEDB57F000041534D8D9BD071FEFF41FFE3FF350FFCFFFF49BB40AE3AEDB57F000041534D8D9BC071FEFF41FFE3FF35FBFBFFFF49BB50AE3AEDB57F000041534D8D9BB071FEFF41FFE3FF35E7FBFFFF49BB60AE3AEDB57F000041534D8D9BA071FEFF41FFE3FF35D3FBFFFF49BB70AE3AEDB57F000041534D8D9B9071FEFF41FFE3FF35BFFBFFFF49BB80AE3AEDB57F000041534D8D9B8071FEFF41FFE3
[86a80774586a98] jit-backend-dump}
[86a80774591a52] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aaf64 +0  25000000
[86a80774592f6f] jit-backend-dump}
[86a80774596e7c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ab145 +0  25000000
[86a80774597d13] jit-backend-dump}
[86a8077459b1f5] {jit-backend-addr
bridge out of Guard 0x3354860 has address 0x7fb5ed3aaf60 to 0x7fb5ed3ab140
       gc table: 0x7fb5ed3aaea0
    jump target: 0x7fb5ed3aaf60
         resops: 0x7fb5ed3aaf6e
       failures: 0x7fb5ed3ab140
            end: 0x7fb5ed3ab397
[86a8077459d762] jit-backend-addr}
[86a807745a0d17] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aaf7e +0  01020000
[86a807745a1b4f] jit-backend-dump}
[86a807745a4e48] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aaf95 +0  06020000
[86a807745a5bad] jit-backend-dump}
[86a807745a8e56] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aafa5 +0  12020000
[86a807745a9b87] jit-backend-dump}
[86a807745ace21] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aafb1 +0  22020000
[86a807745adb1b] jit-backend-dump}
[86a807745b0d78] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aafc9 +0  26020000
[86a807745b1a69] jit-backend-dump}
[86a807745b4db1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aafdb +0  30020000
[86a807745b5aa2] jit-backend-dump}
[86a807745b8cf3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aaff8 +0  2F020000
[86a807745b99da] jit-backend-dump}
[86a807745bcbc3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ab013 +0  30020000
[86a807745bd895] jit-backend-dump}
[86a807745c0a34] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ab028 +0  37020000
[86a807745c1719] jit-backend-dump}
[86a807745c4979] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ab031 +0  4A020000
[86a807745c564b] jit-backend-dump}
[86a807745c889c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ab03e +0  75020000
[86a807745c95a5] jit-backend-dump}
[86a807745cc7fc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ab04b +0  84020000
[86a807745cd4e0] jit-backend-dump}
[86a807745d0633] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ab058 +0  93020000
[86a807745d1324] jit-backend-dump}
[86a807745d453a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ab061 +0  A6020000
[86a807745d521f] jit-backend-dump}
[86a807745d83b2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ab07d +0  A6020000
[86a807745d90a6] jit-backend-dump}
[86a807745dc2b0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ab094 +0  AB020000
[86a807745dcf9e] jit-backend-dump}
[86a807745e0186] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ab0a1 +0  BA020000
[86a807745e0e86] jit-backend-dump}
[86a807745e4063] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ab0aa +0  CD020000
[86a807745e4d19] jit-backend-dump}
[86a807745e8110] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed397a73 +0  E9340100
[86a807745e8dc1] jit-backend-dump}
[86a807745ece56] jit-backend}
[86a807745f0ae1] {jit-log-opt-bridge
# bridge out of Guard 0x3354860 with 70 ops
[p0, p1]
+214: guard_class(p1, 16500368, descr=<Guard0x33cf820>) [p0, p1]
+226: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+230: guard_nonnull_class(p3, 16471056, descr=<Guard0x33cf880>) [p0, p1]
+256: i6 = instance_ptr_eq(p3, ConstPtr(ptr5))
+259: guard_false(i6, descr=<Guard0x3442f50>) [p0, p1]
debug_merge_point(0, 0, '(let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))')
+265: guard_class(p0, 16437216, descr=<Guard0x3442f98>) [p0, p1]
+277: p8 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+281: guard_nonnull_class(p8, ConstClass(ForwardLink), descr=<Guard0x33cf8e0>) [p0, p1]
debug_merge_point(0, 0, '(CellRef(ok?) (car x) 1 z)')
+301: p10 = getfield_gc_r(p1, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+305: guard_class(p10, 16478072, descr=<Guard0x3442fe0>) [p0, p1]
+319: p12 = getfield_gc_r(p10, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+324: p13 = getfield_gc_r(p12, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+328: guard_nonnull_class(p13, 16477696, descr=<Guard0x33cf940>) [p0, p1]
+348: i15 = getfield_gc_i(p3, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+352: p16 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+356: guard_nonnull_class(p16, 16471056, descr=<Guard0x33cf9a0>) [p0, p1]
+375: p18 = getfield_gc_r(p13, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+387: guard_value(p18, ConstPtr(ptr19), descr=<Guard0x3443028>) [p0, p1]
+396: p20 = getfield_gc_r(p10, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)')
+396: i22 = instance_ptr_eq(p16, ConstPtr(ptr21))
+399: guard_false(i22, descr=<Guard0x3443070>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
debug_merge_point(0, 0, '(+ row dist)')
+405: guard_not_invalidated(descr=<Guard0x34430b8>) [p0, p1]
+405: i24 = int_add_ovf(i15, 1)
+412: guard_no_overflow(descr=<Guard0x3443100>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+418: i25 = getfield_gc_i(p16, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+422: i26 = int_eq(i25, i24)
+425: guard_false(i26, descr=<Guard0x3443148>) [p0, p1]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '(let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)))')
debug_merge_point(0, 0, '(- row dist)')
+431: i28 = int_sub_ovf(i15, 1)
+438: guard_no_overflow(descr=<Guard0x3443190>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand6)')
+444: i29 = int_eq(i25, i28)
+447: guard_false(i29, descr=<Guard0x34431d8>) [p0, p1]
debug_merge_point(0, 0, '(if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)')
debug_merge_point(0, 0, '(let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed)))')
debug_merge_point(0, 0, '(+ dist 1)')
debug_merge_point(0, 0, '(CellRef(ok?) row AppRand8 (cdr placed))')
+453: p30 = getfield_gc_r(p13, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize1.inst__vals_0 24 pure>)
+458: p31 = getfield_gc_r(p30, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+462: guard_nonnull_class(p31, 16477696, descr=<Guard0x33cfa00>) [p0, p1]
+481: p33 = getfield_gc_r(p16, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+485: guard_nonnull_class(p33, 16616448, descr=<Guard0x33cfa60>) [p0, p1]
+504: p35 = getfield_gc_r(p31, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+508: guard_value(p35, ConstPtr(ptr36), descr=<Guard0x3443220>) [p0, p1]
+517: i37 = instance_ptr_eq(p13, p31)
+520: guard_true(i37, descr=<Guard0x3443268>) [p0, p1]
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) row AppRand8 (cdr placed))')
+526: p38 = new_with_vtable(descr=<SizeDescr 40>)
+570: p39 = new_with_vtable(descr=<SizeDescr 16>)
+581: setfield_gc(p39, i15, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+585: p40 = new_with_vtable(descr=<SizeDescr 40>)
+596: setfield_gc(p38, p39, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+600: setfield_gc(p40, p8, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+604: setfield_gc(p38, p13, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+608: setfield_gc(p38, p33, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+619: setfield_gc(p38, ConstPtr(ptr41), descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+623: setfield_gc(p40, p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+627: setfield_gc(p40, p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+638: setfield_gc(p40, ConstPtr(ptr42), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+642: jump(p38, p40, descr=TargetToken(52788128))
+672: --end of the loop--
[86a8077462b9b0] jit-log-opt-bridge}
[86a80774820e08] {jit-backend
[86a80774876ccb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ab
[86a8077487cbfd] jit-backend-dump}
[86a80774887ca5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ab494 +0  25000000
[86a80774889215] jit-backend-dump}
[86a8077488d475] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ab605 +0  25000000
[86a8077488e597] jit-backend-dump}
[86a80774891a5b] {jit-backend-addr
bridge out of Guard 0x33ce9e0 has address 0x7fb5ed3ab490 to 0x7fb5ed3ab600
       gc table: 0x7fb5ed3ab440
    jump target: 0x7fb5ed3ab490
         resops: 0x7fb5ed3ab49e
       failures: 0x7fb5ed3ab600
            end: 0x7fb5ed3ab707
[86a80774893e6a] jit-backend-addr}
[86a807748974f9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ab4af +0  AC010000
[86a807748983c4] jit-backend-dump}
[86a8077489b706] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ab4bd +0  BA010000
[86a8077489c434] jit-backend-dump}
[86a8077489f7bd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ab4db +0  B8010000
[86a807748a053d] jit-backend-dump}
[86a807748a385e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ab4f2 +0  BD010000
[86a807748a455e] jit-backend-dump}
[86a807748a7771] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ab511 +0  BA010000
[86a807748a844a] jit-backend-dump}
[86a807748ab65a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ab51a +0  CD010000
[86a807748ac332] jit-backend-dump}
[86a807748af794] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a8faf +0  DD240000
[86a807748b0448] jit-backend-dump}
[86a807748b455a] jit-backend}
[86a807748b8177] {jit-log-opt-bridge
# bridge out of Guard 0x33ce9e0 with 50 ops
[p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
+102: guard_not_invalidated(descr=<Guard0x33cfac0>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
+102: i11 = int_add_ovf(i6, 1)
+109: guard_no_overflow(descr=<Guard0x34432b0>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+115: i12 = getfield_gc_i(p7, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+120: i13 = int_eq(i12, i11)
+123: guard_true(i13, descr=<Guard0x34432f8>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '#f')
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand4)')
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
+129: p14 = getfield_gc_r(p5, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand4)')
+133: p15 = getfield_gc_r(p5, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+137: p16 = getfield_gc_r(p15, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+141: guard_nonnull_class(p16, 16478072, descr=<Guard0x33cfb20>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
+159: p18 = getfield_gc_r(p4, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+163: guard_nonnull_class(p18, 16616448, descr=<Guard0x33cfb80>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
+182: i20 = getfield_gc_i(p4, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+186: p21 = getfield_gc_r(p16, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+204: guard_value(p21, ConstPtr(ptr22), descr=<Guard0x3443340>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
+213: i23 = instance_ptr_eq(p5, p16)
+216: guard_true(i23, descr=<Guard0x3443388>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+222: p24 = new_with_vtable(descr=<SizeDescr 40>)
+269: p25 = new_with_vtable(descr=<SizeDescr 24>)
+280: setfield_gc(p25, i20, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+284: p26 = new_with_vtable(descr=<SizeDescr 24>)
+296: setfield_gc(p26, i3, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+300: setfield_gc(p26, p2, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+304: setfield_gc(p25, p26, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+308: p27 = new_with_vtable(descr=<SizeDescr 48>)
+319: p28 = new_with_vtable(descr=<SizeDescr 48>)
+331: setfield_gc(p28, p9, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+342: setfield_gc(p28, p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+346: setfield_gc(p28, p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+357: setfield_gc(p28, ConstPtr(ptr29), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+361: setfield_gc(p28, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+369: setfield_gc(p24, p5, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+373: setfield_gc(p24, p18, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+377: setfield_gc(p24, p25, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+381: setfield_gc(p24, p7, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+385: setfield_gc(p27, p9, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+389: setfield_gc(p27, p14, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+400: setfield_gc(p27, p28, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+404: setfield_gc(p27, ConstPtr(ptr31), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+408: setfield_gc(p27, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+416: jump(p24, p27, descr=TargetToken(53317888))
+448: --end of the loop--
[86a807748e5065] jit-log-opt-bridge}
[86a80774ae6fb5] {jit-backend
[86a80774b4658c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ab
[86a80774bdaeef] jit-backend-dump}
[86a80774be6441] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ab8c4 +0  25000000
[86a80774be79fd] jit-backend-dump}
[86a80774beb6b6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3abad5 +0  25000000
[86a80774bec61a] jit-backend-dump}
[86a80774befa01] {jit-backend-addr
bridge out of Guard 0x331f460 has address 0x7fb5ed3ab8c0 to 0x7fb5ed3abad0
       gc table: 0x7fb5ed3ab820
    jump target: 0x7fb5ed3ab8c0
         resops: 0x7fb5ed3ab8ce
       failures: 0x7fb5ed3abad0
            end: 0x7fb5ed3abcb7
[86a80774bf1da9] jit-backend-addr}
[86a80774bf54c4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ab8e4 +0  2B020000
[86a80774bf63c0] jit-backend-dump}
[86a80774bf9834] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ab8f5 +0  52020000
[86a80774bfa549] jit-backend-dump}
[86a80774bfd7ed] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ab911 +0  52020000
[86a80774bfe539] jit-backend-dump}
[86a80774c01930] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ab929 +0  56020000
[86a80774c02655] jit-backend-dump}
[86a80774c05982] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ab945 +0  56020000
[86a80774c066d7] jit-backend-dump}
[86a80774c099e6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ab95a +0  5D020000
[86a80774c0a6d9] jit-backend-dump}
[86a80774c0d857] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ab963 +0  70020000
[86a80774c0e576] jit-backend-dump}
[86a80774c11887] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ab97f +0  70020000
[86a80774c12587] jit-backend-dump}
[86a80774c156e0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ab997 +0  74020000
[86a80774c163f5] jit-backend-dump}
[86a80774c196e2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ab9a8 +0  7F020000
[86a80774c1a3e8] jit-backend-dump}
[86a80774c1d538] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ab9b1 +0  92020000
[86a80774c1e24a] jit-backend-dump}
[86a80774c21500] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ab9be +0  A1020000
[86a80774c22206] jit-backend-dump}
[86a80774c25340] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ab9c7 +0  B4020000
[86a80774c26087] jit-backend-dump}
[86a80774c29336] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ab9de +0  B9020000
[86a80774c2a049] jit-backend-dump}
[86a80774c2d42a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39595e +0  5E5F0100
[86a80774c2e121] jit-backend-dump}
[86a80774c3224f] jit-backend}
[86a80774c35f91] {jit-log-opt-bridge
# bridge out of Guard 0x331f460 with 77 ops
[p0, p1, p2, p3, p4, p5]
+182: guard_nonnull_class(p1, 16471056, descr=<Guard0x33cfee0>) [p0, p1, p4, p5]
+200: guard_not_invalidated(descr=<Guard0x3443610>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(CellRef(my-try) AppRand1 '() (cons (car x) z))')
+200: p7 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+204: guard_class(p7, 16478072, descr=<Guard0x34435c8>) [p0, p1, p4, p5]
+217: p9 = getfield_gc_r(p7, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+221: p10 = getfield_gc_r(p9, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+225: guard_nonnull_class(p10, 16478072, descr=<Guard0x33cfe80>) [p0, p1, p4, p5]
+245: p12 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+249: guard_nonnull_class(p12, 16471056, descr=<Guard0x33cfe20>) [p0, p1, p4, p5]
+269: i14 = getfield_gc_i(p12, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+273: p15 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+277: guard_nonnull_class(p15, 16471056, descr=<Guard0x33cfdc0>) [p0, p1, p4, p5]
+297: p17 = getfield_gc_r(p10, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+309: guard_value(p17, ConstPtr(ptr18), descr=<Guard0x3443580>) [p0, p1, p4, p5]
+318: i19 = instance_ptr_eq(p7, p10)
+321: guard_true(i19, descr=<Guard0x3443538>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) AppRand1 '() (cons (car x) z))')
debug_merge_point(0, 0, '(let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))')
debug_merge_point(0, 0, '(CellRef(ok?) (car x) 1 z)')
+327: p20 = getfield_gc_r(p7, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+331: p21 = getfield_gc_r(p20, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+336: guard_nonnull_class(p21, 16477696, descr=<Guard0x33cfd60>) [p0, p1, p4, p5]
+355: i23 = getfield_gc_i(p1, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+359: p24 = getfield_gc_r(p21, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+370: guard_value(p24, ConstPtr(ptr25), descr=<Guard0x34434f0>) [p0, p1, p4, p5]
+379: p26 = getfield_gc_r(p7, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)')
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
debug_merge_point(0, 0, '(+ row dist)')
+383: i28 = int_add_ovf(i23, 1)
+390: guard_no_overflow(descr=<Guard0x34434a8>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+396: i29 = int_eq(i14, i28)
+399: guard_false(i29, descr=<Guard0x3443460>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '(let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)))')
debug_merge_point(0, 0, '(- row dist)')
+405: i31 = int_sub_ovf(i23, 1)
+412: guard_no_overflow(descr=<Guard0x3443418>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand6)')
+418: i32 = int_eq(i14, i31)
+421: guard_true(i32, descr=<Guard0x34433d0>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)')
debug_merge_point(0, 0, '#f')
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand6)')
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand6)')
+427: p33 = getfield_gc_r(p1, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+431: guard_nonnull_class(p33, 16471056, descr=<Guard0x33cfca0>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+450: p35 = new_with_vtable(descr=<SizeDescr 40>)
+494: p36 = new_with_vtable(descr=<SizeDescr 24>)
+505: setfield_gc(p36, i23, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+516: setfield_gc(p36, ConstPtr(ptr37), descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+520: p38 = new_with_vtable(descr=<SizeDescr 24>)
+532: setfield_gc(p38, i14, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+537: setfield_gc(p38, p15, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+542: p39 = new_with_vtable(descr=<SizeDescr 48>)
+555: p40 = new_with_vtable(descr=<SizeDescr 40>)
+566: setfield_gc(p40, p5, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+577: setfield_gc(p40, p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+581: setfield_gc(p40, p4, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+599: setfield_gc(p40, ConstPtr(ptr41), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+603: setfield_gc(p35, p7, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+607: setfield_gc(p35, p33, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+611: setfield_gc(p35, p38, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+615: setfield_gc(p35, p36, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+619: setfield_gc(p39, p5, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+623: setfield_gc(p39, p26, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+627: setfield_gc(p39, p40, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+638: setfield_gc(p39, ConstPtr(ptr42), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+642: setfield_gc(p39, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+650: jump(p35, p39, descr=TargetToken(53317888))
+688: --end of the loop--
[86a80774c6f975] jit-log-opt-bridge}
[86a80774f183df] {jit-backend
[86a80774f7bd57] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3abde
[86a80774f8328e] jit-backend-dump}
[86a80774f8e5d5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3abe84 +0  25000000
[86a80774f8fc4b] jit-backend-dump}
[86a80774f93fe0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ac095 +0  25000000
[86a80774f94f50] jit-backend-dump}
[86a80774f985c6] {jit-backend-addr
bridge out of Guard 0x33cee00 has address 0x7fb5ed3abe80 to 0x7fb5ed3ac090
       gc table: 0x7fb5ed3abde0
    jump target: 0x7fb5ed3abe80
         resops: 0x7fb5ed3abe8e
       failures: 0x7fb5ed3ac090
            end: 0x7fb5ed3ac277
[86a80774f9aad0] jit-backend-addr}
[86a80774f9e201] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3abea4 +0  2B020000
[86a80774f9f0a7] jit-backend-dump}
[86a80774fa252b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3abeb5 +0  52020000
[86a80774fa31fa] jit-backend-dump}
[86a80774fa6573] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3abed1 +0  52020000
[86a80774fa72a7] jit-backend-dump}
[86a80774faa50d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3abee8 +0  57020000
[86a80774fab23e] jit-backend-dump}
[86a80774fae5b2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3abf03 +0  58020000
[86a80774faf299] jit-backend-dump}
[86a80774fb2463] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3abf18 +0  5F020000
[86a80774fb3182] jit-backend-dump}
[86a80774fb63df] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3abf21 +0  72020000
[86a80774fb70f7] jit-backend-dump}
[86a80774fba2c1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3abf3d +0  72020000
[86a80774fbafd7] jit-backend-dump}
[86a80774fbe209] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3abf55 +0  76020000
[86a80774fbef0c] jit-backend-dump}
[86a80774fc2093] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3abf66 +0  81020000
[86a80774fc2d9c] jit-backend-dump}
[86a80774fc5f94] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3abf6f +0  94020000
[86a80774fc6c8e] jit-backend-dump}
[86a80774fc9e33] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3abf7c +0  A3020000
[86a80774fcab49] jit-backend-dump}
[86a80774fcdd5c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3abf85 +0  B6020000
[86a80774fcea34] jit-backend-dump}
[86a80774fd1bef] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3abf9c +0  BB020000
[86a80774fd28e6] jit-backend-dump}
[86a80774fd5d29] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a95bc +0  C0280000
[86a80774fd69ce] jit-backend-dump}
[86a80774fdaa07] jit-backend}
[86a80774fde749] {jit-log-opt-bridge
# bridge out of Guard 0x33cee00 with 77 ops
[p0, p1, p2, p3]
+182: guard_nonnull_class(p1, 16471056, descr=<Guard0x33cffa0>) [p0, p1, p2, p3]
+200: guard_not_invalidated(descr=<Guard0x34436e8>) [p0, p1, p2, p3]
debug_merge_point(0, 0, '(CellRef(my-try) AppRand1 '() (cons (car x) z))')
+200: p5 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+204: guard_class(p5, 16478072, descr=<Guard0x3443730>) [p0, p1, p2, p3]
+217: p7 = getfield_gc_r(p5, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+221: p8 = getfield_gc_r(p7, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+225: guard_nonnull_class(p8, 16478072, descr=<Guard0x345c020>) [p0, p1, p2, p3]
+245: p10 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+249: guard_nonnull_class(p10, 16471056, descr=<Guard0x345c080>) [p0, p1, p2, p3]
+268: i12 = getfield_gc_i(p10, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+272: p13 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+276: guard_nonnull_class(p13, 16471056, descr=<Guard0x345c0e0>) [p0, p1, p2, p3]
+295: p15 = getfield_gc_r(p8, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+307: guard_value(p15, ConstPtr(ptr16), descr=<Guard0x3443778>) [p0, p1, p2, p3]
+316: i17 = instance_ptr_eq(p5, p8)
+319: guard_true(i17, descr=<Guard0x34437c0>) [p0, p1, p2, p3]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) AppRand1 '() (cons (car x) z))')
debug_merge_point(0, 0, '(let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))')
debug_merge_point(0, 0, '(CellRef(ok?) (car x) 1 z)')
+325: p18 = getfield_gc_r(p5, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+329: p19 = getfield_gc_r(p18, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+334: guard_nonnull_class(p19, 16477696, descr=<Guard0x345c140>) [p0, p1, p2, p3]
+353: i21 = getfield_gc_i(p1, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+357: p22 = getfield_gc_r(p19, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+368: guard_value(p22, ConstPtr(ptr23), descr=<Guard0x3443808>) [p0, p1, p2, p3]
+377: p24 = getfield_gc_r(p5, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)')
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
debug_merge_point(0, 0, '(+ row dist)')
+381: i26 = int_add_ovf(i21, 1)
+388: guard_no_overflow(descr=<Guard0x3443850>) [p0, p1, p2, p3]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+394: i27 = int_eq(i12, i26)
+397: guard_false(i27, descr=<Guard0x3443898>) [p0, p1, p2, p3]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '(let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)))')
debug_merge_point(0, 0, '(- row dist)')
+403: i29 = int_sub_ovf(i21, 1)
+410: guard_no_overflow(descr=<Guard0x34438e0>) [p0, p1, p2, p3]
debug_merge_point(0, 0, '(let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand6)')
+416: i30 = int_eq(i12, i29)
+419: guard_true(i30, descr=<Guard0x3443928>) [p0, p1, p2, p3]
debug_merge_point(0, 0, '(if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)')
debug_merge_point(0, 0, '#f')
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand6)')
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand6)')
+425: p31 = getfield_gc_r(p1, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+429: guard_nonnull_class(p31, 16616448, descr=<Guard0x345c1a0>) [p0, p1, p2, p3]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+448: p33 = new_with_vtable(descr=<SizeDescr 40>)
+492: p34 = new_with_vtable(descr=<SizeDescr 24>)
+503: setfield_gc(p34, i21, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+514: setfield_gc(p34, ConstPtr(ptr35), descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+518: p36 = new_with_vtable(descr=<SizeDescr 24>)
+530: setfield_gc(p36, i12, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+535: setfield_gc(p36, p13, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+540: p37 = new_with_vtable(descr=<SizeDescr 48>)
+552: p38 = new_with_vtable(descr=<SizeDescr 40>)
+563: setfield_gc(p38, p3, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+574: setfield_gc(p38, p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+578: setfield_gc(p38, p2, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+596: setfield_gc(p38, ConstPtr(ptr39), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+600: setfield_gc(p33, p5, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+604: setfield_gc(p33, p31, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+608: setfield_gc(p33, p36, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+612: setfield_gc(p33, p34, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+616: setfield_gc(p37, p3, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+620: setfield_gc(p37, p24, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+624: setfield_gc(p37, p38, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+635: setfield_gc(p37, ConstPtr(ptr40), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+639: setfield_gc(p37, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+647: jump(p33, p37, descr=TargetToken(53317888))
+688: --end of the loop--
[86a8077501da09] jit-log-opt-bridge}
[86a807753d1d81] {jit-backend
[86a80775447cf7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ac420 +0  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8C2203000048FF0425100040038139D00C01000F85000000004C8B79104983FF01720741813F509A00000F85000000004C8B35F0FEFFFF4D39F70F8400000000813B201600000F85000000004C8B6B084983FD01720841817D00900F00000F85000000004C8B610841813C24B8B500000F85000000004D8B5424184D8B4A084983F901720741813940B400000F85000000004D8B57084C8B41204983F801720741813840D202000F8500000000498B79104C8B0DA7FEFFFF4C39CF0F85000000004D8B4C24084D39F00F8500000000498B7F104883FF017206813F509A00000F85000000004C8B79184D85FF0F840000000048899D3001000048898D380100004C89B5400100004C89AD480100004C89A5500100004C8985580100004C898D600100004889BD680100004C89BD700100004C8995780100004C89FE49BB60C33AEDB57F00004C895D2041BB5062630041FFD3488B0C258893F900488B69F8F64504010F85E501000048C745200000000048833C2540B35F01000F85000000004883F80172068138509A00000F8500000000488B9D50010000488B4B204C8B71084983FE01720741813EB8B500000F8500000000498B4E104C8B2DE9FDFFFF4C39E90F85000000004C39F30F85000000004C8B70084D89F54983C6010F80000000004C39B5780100000F84000000004D89EE4983ED010F80000000004C39AD780100000F85000000004C8B68104983FD01720841817D00509A00000F8500000000488B0C25F091F900488D91B0000000483B14251092F9000F872201000048891425F091F90048C701D00C0100488D512848C702509A00004C8972084C8BB5400100004C8972104C8D721849C706509A0000488B857801000049894608488B855801000049894610498D461848C700201600004C8D603049C70424101100004C8B85480100004D894424084C8B8D380100004D894C24104C8B8D300100004D894C24184C8B0D1EFDFFFF4D894C24204C8969104C894008488959084C89712048895118488B9560010000488950104C8960184C8B25F7FCFFFF4C89602048C740280000000048898D300100004889853801000049BB506239EDB57F000041FFE30F1F84000000000048C7442408FFFFFF0049BB80C23AEDB57F00004C895D204D8D9B7060FEFF41FFD3E9B8FCFFFF49BB702239EDB57F000041FFD3E909FEFFFF49BB10C43AEDB57F00004C895D204D8D9BE066FEFF41FFD3E9C9FEFFFFFF3595FBFFFF49BB90C23AEDB57F000041534D8D9B705DFEFF41FFE3FF3581FBFFFF49BBA0C23AEDB57F000041534D8D9B605DFEFF41FFE3FF3575FBFFFF49BBB0C23AEDB57F000041534D8D9B505DFEFF41FFE3FF3561FBFFFF49BBC0C23AEDB57F000041534D8D9B405DFEFF41FFE3FF354DFBFFFF49BBD0C23AEDB57F000041534D8D9B305DFEFF41FFE3FF3539FBFFFF49BBE0C23AEDB57F000041534D8D9B205DFEFF41FFE3FF3525FBFFFF49BBF0C23AEDB57F000041534D8D9B105DFEFF41FFE3FF3511FBFFFF49BB00C33AEDB57F000041534D8D9B005DFEFF41FFE3FF3505FBFFFF49BB10C33AEDB57F000041534D8D9BF05CFEFF41FFE3FF35F1FAFFFF49BB20C33AEDB57F000041534D8D9BE05CFEFF41FFE3FF35DDFAFFFF49BB30C33AEDB57F000041534D8D9BD05CFEFF41FFE3FF35C9FAFFFF49BB40C33AEDB57F000041534D8D9BC05CFEFF41FFE3FF35B5FAFFFF49BB50C33AEDB57F000041534D8D9BB05CFEFF41FFE3FF35A1FAFFFF49BB70C33AEDB57F000041534D8D9B405DFEFF41FFE3FF358DFAFFFF49BB80C33AEDB57F000041534D8D9B805CFEFF41FFE3FF3579FAFFFF49BB90C33AEDB57F000041534D8D9B705CFEFF41FFE3FF356DFAFFFF49BBA0C33AEDB57F000041534D8D9B605CFEFF41FFE3FF3559FAFFFF49BBB0C33AEDB57F000041534D8D9B505CFEFF41FFE3FF3545FAFFFF49BBC0C33AEDB57F000041534D8D9B405CFEFF41FFE3FF3531FAFFFF49BBD0C33AEDB57F000041534D8D9B305CFEFF41FFE3FF351DFAFFFF49BBE0C33AEDB57F000041534D8D9B205CFEFF41FFE3FF3509FAFFFF49BBF0C33AEDB57F000041534D8D9B105CFEFF41FFE3FF35F5F9FFFF49BB00C43AEDB57F000041534D8D9B005CFEFF41FFE3
[86a807754510c4] jit-backend-dump}
[86a8077545c95f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ac504 +0  26000000
[86a8077545de92] jit-backend-dump}
[86a807754622b3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ac835 +0  26000000
[86a8077546315c] jit-backend-dump}
[86a807754664f4] {jit-backend-addr
bridge out of Guard 0x323fca0 has address 0x7fb5ed3ac500 to 0x7fb5ed3ac830
       gc table: 0x7fb5ed3ac420
    jump target: 0x7fb5ed3ac500
         resops: 0x7fb5ed3ac50e
       failures: 0x7fb5ed3ac830
            end: 0x7fb5ed3acb09
[86a80775468a11] jit-backend-addr}
[86a8077546bfc6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ac51e +0  63030000
[86a8077546ce2c] jit-backend-dump}
[86a8077547017b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ac535 +0  68030000
[86a80775470e56] jit-backend-dump}
[86a80775474054] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ac545 +0  74030000
[86a80775474d73] jit-backend-dump}
[86a80775477fa2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ac551 +0  84030000
[86a80775478c4f] jit-backend-dump}
[86a8077547bd59] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ac569 +0  88030000
[86a8077547ca49] jit-backend-dump}
[86a8077547fc8e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ac57b +0  92030000
[86a80775480935] jit-backend-dump}
[86a80775483a6c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ac597 +0  92030000
[86a8077548474e] jit-backend-dump}
[86a807754878fc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ac5b2 +0  93030000
[86a807754885d2] jit-backend-dump}
[86a8077548b709] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ac5c6 +0  9B030000
[86a8077548c3ed] jit-backend-dump}
[86a8077548fbee] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ac5d4 +0  A9030000
[86a807754908c3] jit-backend-dump}
[86a80775493cd6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ac5ea +0  CB030000
[86a807754949a8] jit-backend-dump}
[86a80775497ba6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ac5f7 +0  DA030000
[86a807754988d1] jit-backend-dump}
[86a8077549ba82] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ac684 +0  69030000
[86a8077549c7d5] jit-backend-dump}
[86a8077549f965] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ac696 +0  73030000
[86a807754a064c] jit-backend-dump}
[86a807754a371c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ac6b8 +0  6D030000
[86a807754a4437] jit-backend-dump}
[86a807754a757e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ac6cc +0  75030000
[86a807754a8272] jit-backend-dump}
[86a807754ab35c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ac6d5 +0  88030000
[86a807754ac08a] jit-backend-dump}
[86a807754af2d2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ac6e6 +0  93030000
[86a807754b0009] jit-backend-dump}
[86a807754b319c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ac6f3 +0  A2030000
[86a807754b3ea8] jit-backend-dump}
[86a807754b6fc1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ac700 +0  B1030000
[86a807754b7cb5] jit-backend-dump}
[86a807754baf64] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ac70d +0  C0030000
[86a807754bbc80] jit-backend-dump}
[86a807754bee7b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ac725 +0  C4030000
[86a807754bfbdd] jit-backend-dump}
[86a807754c3088] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3962fd +0  FF610100
[86a807754c3d7f] jit-backend-dump}
[86a807754c7dec] jit-backend}
[86a807754cbab1] {jit-log-opt-bridge
# bridge out of Guard 0x323fca0 with 99 ops
[p0, p1]
+246: guard_class(p1, 16500368, descr=<Guard0x345c200>) [p0, p1]
+258: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+262: guard_nonnull_class(p3, 16471056, descr=<Guard0x345c260>) [p0, p1]
+288: i6 = instance_ptr_eq(p3, ConstPtr(ptr5))
+291: guard_false(i6, descr=<Guard0x3443970>) [p0, p1]
debug_merge_point(0, 0, '(let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))')
+297: guard_class(p0, 16437216, descr=<Guard0x34439b8>) [p0, p1]
+309: p8 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+313: guard_nonnull_class(p8, ConstClass(ForwardLink), descr=<Guard0x345c2c0>) [p0, p1]
debug_merge_point(0, 0, '(CellRef(ok?) (car x) 1 z)')
+333: p10 = getfield_gc_r(p1, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+337: guard_class(p10, 16478072, descr=<Guard0x3443a00>) [p0, p1]
+351: p12 = getfield_gc_r(p10, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+356: p13 = getfield_gc_r(p12, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+360: guard_nonnull_class(p13, 16477696, descr=<Guard0x345c320>) [p0, p1]
+379: i15 = getfield_gc_i(p3, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+383: p16 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+387: guard_nonnull_class(p16, 16616448, descr=<Guard0x345c380>) [p0, p1]
+406: p18 = getfield_gc_r(p13, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+417: guard_value(p18, ConstPtr(ptr19), descr=<Guard0x3443a48>) [p0, p1]
+426: p20 = getfield_gc_r(p10, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)')
+431: i22 = instance_ptr_eq(p16, ConstPtr(ptr21))
+434: guard_true(i22, descr=<Guard0x3443a90>) [p0, p1]
debug_merge_point(0, 0, '#t')
+440: guard_not_invalidated(descr=<Guard0x3443ad8>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (CellRef(ok?) (car x) 1 z)')
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '(let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z)))')
debug_merge_point(0, 0, '(append (cdr x) y)')
+440: p23 = getfield_gc_r(p3, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+444: guard_nonnull_class(p23, 16471056, descr=<Guard0x345c3e0>) [p0, p1]
+462: p25 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+466: guard_nonnull(p25, descr=<Guard0x3443b20>) [p0, p1]
+475: p27 = call_r(ConstClass(append_two), p23, p25, descr=<Callr 8 rr EF=5>)
+601: guard_no_exception(descr=<Guard0x345c440>) [p1, p27, p25, p23, p0, p8]
+616: guard_nonnull_class(p27, 16471056, descr=<Guard0x345c4a0>) [p1, p27, p25, p23, p0, p8]
debug_merge_point(0, 0, '(CellRef(my-try) AppRand1 '() (cons (car x) z))')
+634: p29 = getfield_gc_r(p10, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+645: p30 = getfield_gc_r(p29, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+649: guard_nonnull_class(p30, 16478072, descr=<Guard0x345c500>) [p1, p27, p25, p23, p0, p8]
+668: p32 = getfield_gc_r(p30, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+679: guard_value(p32, ConstPtr(ptr33), descr=<Guard0x3443b68>) [p1, p27, p25, p23, p0, p8]
+688: i34 = instance_ptr_eq(p10, p30)
+691: guard_true(i34, descr=<Guard0x3443bb0>) [p1, p27, p25, p23, p0, p8]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) AppRand1 '() (cons (car x) z))')
debug_merge_point(0, 0, '(let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))')
debug_merge_point(0, 0, '(CellRef(ok?) (car x) 1 z)')
+697: i35 = getfield_gc_i(p27, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)')
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
debug_merge_point(0, 0, '(+ row dist)')
+701: i37 = int_add_ovf(i35, 1)
+708: guard_no_overflow(descr=<Guard0x3443bf8>) [p1, p27, p25, p23, p0, p8]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+714: i38 = int_eq(i15, i37)
+721: guard_false(i38, descr=<Guard0x3443c40>) [p1, p27, p25, p23, p0, p8]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '(let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)))')
debug_merge_point(0, 0, '(- row dist)')
+727: i40 = int_sub_ovf(i35, 1)
+734: guard_no_overflow(descr=<Guard0x3443c88>) [p1, p27, p25, p23, p0, p8]
debug_merge_point(0, 0, '(let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand6)')
+740: i41 = int_eq(i15, i40)
+747: guard_true(i41, descr=<Guard0x3443cd0>) [p1, p27, p25, p23, p0, p8]
debug_merge_point(0, 0, '(if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)')
debug_merge_point(0, 0, '#f')
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand6)')
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand6)')
+753: p42 = getfield_gc_r(p27, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+757: guard_nonnull_class(p42, 16471056, descr=<Guard0x345c560>) [p1, p27, p25, p23, p0, p8]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+777: p44 = new_with_vtable(descr=<SizeDescr 40>)
+821: p45 = new_with_vtable(descr=<SizeDescr 24>)
+832: setfield_gc(p45, i35, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+836: setfield_gc(p45, ConstPtr(ptr46), descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+847: p47 = new_with_vtable(descr=<SizeDescr 24>)
+858: setfield_gc(p47, i15, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+869: setfield_gc(p47, p16, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+880: p48 = new_with_vtable(descr=<SizeDescr 48>)
+891: p49 = new_with_vtable(descr=<SizeDescr 40>)
+903: setfield_gc(p49, p8, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+915: setfield_gc(p49, p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+927: setfield_gc(p49, p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+946: setfield_gc(p49, ConstPtr(ptr50), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+951: setfield_gc(p44, p42, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+955: setfield_gc(p48, p8, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+959: setfield_gc(p44, p10, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+963: setfield_gc(p44, p47, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+967: setfield_gc(p44, p45, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+971: setfield_gc(p48, p20, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+982: setfield_gc(p48, p49, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+993: setfield_gc(p48, ConstPtr(ptr51), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+997: setfield_gc(p48, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+1005: jump(p44, p48, descr=TargetToken(53317888))
+1040: --end of the loop--
[86a8077551c452] jit-log-opt-bridge}
[86a807757af380] {jit-backend
[86a8077580f6ac] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3acc
[86a8077581697a] jit-backend-dump}
[86a80775821ada] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3acca4 +0  26000000
[86a80775822fd2] jit-backend-dump}
[86a8077582717a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ace95 +0  26000000
[86a80775828124] jit-backend-dump}
[86a8077582b577] {jit-backend-addr
bridge out of Guard 0x3379760 has address 0x7fb5ed3acca0 to 0x7fb5ed3ace90
       gc table: 0x7fb5ed3acc10
    jump target: 0x7fb5ed3acca0
         resops: 0x7fb5ed3accae
       failures: 0x7fb5ed3ace90
            end: 0x7fb5ed3ad03f
[86a8077582da9d] jit-backend-addr}
[86a807758310d0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3accc4 +0  0B020000
[86a80775831f42] jit-backend-dump}
[86a807758353de] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3accd5 +0  32020000
[86a807758360c2] jit-backend-dump}
[86a807758393f2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3accf1 +0  32020000
[86a8077583a10b] jit-backend-dump}
[86a8077583d358] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3acd08 +0  37020000
[86a8077583e021] jit-backend-dump}
[86a8077584123b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3acd23 +0  38020000
[86a80775841f01] jit-backend-dump}
[86a80775845155] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3acd38 +0  3F020000
[86a80775845e1e] jit-backend-dump}
[86a80775849126] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3acd41 +0  52020000
[86a80775849e2c] jit-backend-dump}
[86a8077584d0c6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3acd5d +0  52020000
[86a8077584ddd8] jit-backend-dump}
[86a80775851216] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3acd75 +0  56020000
[86a80775851f09] jit-backend-dump}
[86a8077585517f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3acd86 +0  61020000
[86a80775855e54] jit-backend-dump}
[86a8077585905e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3acd8f +0  74020000
[86a80775859d3a] jit-backend-dump}
[86a8077585cf50] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3acda7 +0  78020000
[86a8077585dc32] jit-backend-dump}
[86a80775861053] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39dc89 +0  13F00000
[86a80775861cf1] jit-backend-dump}
[86a80775865dd3] jit-backend}
[86a80775869ac0] {jit-log-opt-bridge
# bridge out of Guard 0x3379760 with 68 ops
[p0, p1, p2, p3, p4, p5]
+166: guard_nonnull_class(p1, 16471056, descr=<Guard0x345c5c0>) [p0, p1, p4, p5]
+184: guard_not_invalidated(descr=<Guard0x3443d18>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(CellRef(my-try) AppRand1 '() (cons (car x) z))')
+184: p7 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+188: guard_class(p7, 16478072, descr=<Guard0x3443d60>) [p0, p1, p4, p5]
+201: p9 = getfield_gc_r(p7, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+205: p10 = getfield_gc_r(p9, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+209: guard_nonnull_class(p10, 16478072, descr=<Guard0x345c620>) [p0, p1, p4, p5]
+229: p12 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+233: guard_nonnull_class(p12, 16471056, descr=<Guard0x345c680>) [p0, p1, p4, p5]
+252: i14 = getfield_gc_i(p12, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+256: p15 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+260: guard_nonnull_class(p15, 16471056, descr=<Guard0x345c6e0>) [p0, p1, p4, p5]
+279: p17 = getfield_gc_r(p10, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+291: guard_value(p17, ConstPtr(ptr18), descr=<Guard0x3443da8>) [p0, p1, p4, p5]
+300: i19 = instance_ptr_eq(p7, p10)
+303: guard_true(i19, descr=<Guard0x3443df0>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) AppRand1 '() (cons (car x) z))')
debug_merge_point(0, 0, '(let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))')
debug_merge_point(0, 0, '(CellRef(ok?) (car x) 1 z)')
+309: p20 = getfield_gc_r(p7, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+313: p21 = getfield_gc_r(p20, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+318: guard_nonnull_class(p21, 16477696, descr=<Guard0x345c740>) [p0, p1, p4, p5]
+337: i23 = getfield_gc_i(p1, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+341: p24 = getfield_gc_r(p21, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+352: guard_value(p24, ConstPtr(ptr25), descr=<Guard0x3443e38>) [p0, p1, p4, p5]
+361: p26 = getfield_gc_r(p7, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)')
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
debug_merge_point(0, 0, '(+ row dist)')
+365: i28 = int_add_ovf(i23, 1)
+372: guard_no_overflow(descr=<Guard0x3443e80>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+378: i29 = int_eq(i14, i28)
+381: guard_true(i29, descr=<Guard0x3443ec8>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '#f')
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand4)')
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand4)')
+387: p30 = getfield_gc_r(p1, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+391: guard_nonnull_class(p30, 16616448, descr=<Guard0x345c7a0>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+411: p32 = new_with_vtable(descr=<SizeDescr 40>)
+455: p33 = new_with_vtable(descr=<SizeDescr 24>)
+466: setfield_gc(p33, i23, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+477: setfield_gc(p33, ConstPtr(ptr34), descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+481: p35 = new_with_vtable(descr=<SizeDescr 24>)
+492: setfield_gc(p35, i14, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+496: setfield_gc(p35, p15, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+500: p36 = new_with_vtable(descr=<SizeDescr 48>)
+511: p37 = new_with_vtable(descr=<SizeDescr 40>)
+522: setfield_gc(p37, p5, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+533: setfield_gc(p37, p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+537: setfield_gc(p37, p4, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+555: setfield_gc(p37, ConstPtr(ptr38), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+559: setfield_gc(p32, p7, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+563: setfield_gc(p32, p30, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+567: setfield_gc(p32, p35, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+571: setfield_gc(p32, p33, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+575: setfield_gc(p36, p5, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+579: setfield_gc(p36, p26, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+583: setfield_gc(p36, p37, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+594: setfield_gc(p36, ConstPtr(ptr39), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+598: setfield_gc(p36, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+606: jump(p32, p36, descr=TargetToken(53317888))
+640: --end of the loop--
[86a807758a26f8] jit-log-opt-bridge}
[86a80775a82981] {jit-backend
[86a80775adfa47] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ad160 +0  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8CC201000048FF0425F00535034D89FE4901D70F80000000008139101100000F85000000004C8B69204C8B254FFFFFFF4D39E50F85000000004C8B61104C8B691841813C24D00C01000F85000000004D8B54240841813AB8B500000F85000000004D8B4A0841817D00201600000F85000000004D8B45084983F8017207418138900F00000F8500000000498B7A20488B77084883FE017206813EB8B500000F8500000000498B7C24104883FF017206813F509A00000F8500000000488B5F104883FB017206813B509A00000F8500000000488B4708498B7C24184883FF017206813F509A00000F85000000004C89BD380100004D8B7C24204D85FF0F84000000004C8B66104C89BD400100004C8B3DC4FEFFFF4D39FC0F85000000004939F20F8500000000488B0C25F091F900488D5170483B14251092F9000F87AE00000048891425F091F90048C701D00C0100488D512848C702509A00004889420848897A10488D7A1848C70720160000488B057CFEFFFF488947204C894F104C896F184C8951084C8947084889591048895118488B954001000048895120488B95380100004889572848898D300100004889BD3801000049BB506239EDB57F000041FFE30F1F800000000048C7442408FFFFFF0049BB48D03AEDB57F00004C895D204D8D9BA852FEFF41FFD3E918FEFFFF49BB48D13AEDB57F00004C895D204D8D9BA859FEFF41FFD3E93DFFFFFFFF3557FDFFFF49BB58D03AEDB57F000041534D8D9BA84FFEFF41FFE3FF3543FDFFFF49BB68D03AEDB57F000041534D8D9B984FFEFF41FFE3FF352FFDFFFF49BB78D03AEDB57F000041534D8D9B884FFEFF41FFE3FF3523FDFFFF49BB88D03AEDB57F000041534D8D9B784FFEFF41FFE3FF350FFDFFFF49BB98D03AEDB57F000041534D8D9B684FFEFF41FFE3FF35FBFCFFFF49BBA8D03AEDB57F000041534D8D9B584FFEFF41FFE3FF35E7FCFFFF49BBB8D03AEDB57F000041534D8D9B484FFEFF41FFE3FF35D3FCFFFF49BBC8D03AEDB57F000041534D8D9B384FFEFF41FFE3FF35BFFCFFFF49BBD8D03AEDB57F000041534D8D9B284FFEFF41FFE3FF35ABFCFFFF49BBE8D03AEDB57F000041534D8D9B184FFEFF41FFE3FF3597FCFFFF49BBF8D03AEDB57F000041534D8D9B084FFEFF41FFE3FF3583FCFFFF49BB08D13AEDB57F000041534D8D9BF84EFEFF41FFE3FF356FFCFFFF49BB18D13AEDB57F000041534D8D9BE84EFEFF41FFE3FF3563FCFFFF49BB28D13AEDB57F000041534D8D9BD84EFEFF41FFE3FF354FFCFFFF49BB38D13AEDB57F000041534D8D9BC84EFEFF41FFE3
[86a80775ae6e65] jit-backend-dump}
[86a80775af1e50] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ad1f4 +0  26000000
[86a80775af34c9] jit-backend-dump}
[86a80775af7417] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ad3c5 +0  26000000
[86a80775af8246] jit-backend-dump}
[86a80775afb5c2] {jit-backend-addr
bridge out of Guard 0x3378800 has address 0x7fb5ed3ad1f0 to 0x7fb5ed3ad3c0
       gc table: 0x7fb5ed3ad160
    jump target: 0x7fb5ed3ad1f0
         resops: 0x7fb5ed3ad1fe
       failures: 0x7fb5ed3ad3c0
            end: 0x7fb5ed3ad5a7
[86a80775afda0f] jit-backend-addr}
[86a80775b01161] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ad20e +0  0D020000
[86a80775b01f68] jit-backend-dump}
[86a80775b05280] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ad21a +0  1D020000
[86a80775b05f40] jit-backend-dump}
[86a80775b0917e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ad22e +0  25020000
[86a80775b09ebb] jit-backend-dump}
[86a80775b0d1e8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ad244 +0  2B020000
[86a80775b0dee8] jit-backend-dump}
[86a80775b11170] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ad256 +0  35020000
[86a80775b11e7f] jit-backend-dump}
[86a80775b1514d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ad268 +0  3F020000
[86a80775b15e19] jit-backend-dump}
[86a80775b19021] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ad27f +0  44020000
[86a80775b19d2a] jit-backend-dump}
[86a80775b1cff5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ad299 +0  46020000
[86a80775b1dc96] jit-backend-dump}
[86a80775b20dfe] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ad2b0 +0  4B020000
[86a80775b21ab2] jit-backend-dump}
[86a80775b24d74] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ad2c6 +0  51020000
[86a80775b25a0f] jit-backend-dump}
[86a80775b28bbd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ad2e1 +0  52020000
[86a80775b2984f] jit-backend-dump}
[86a80775b2ca66] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ad2f6 +0  59020000
[86a80775b2d6fe] jit-backend-dump}
[86a80775b30851] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ad311 +0  5A020000
[86a80775b314fb] jit-backend-dump}
[86a80775b34789] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ad31a +0  6D020000
[86a80775b35421] jit-backend-dump}
[86a80775b38849] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39bce7 +0  05150100
[86a80775b394c8] jit-backend-dump}
[86a80775b3d5fc] jit-backend}
[86a80775b4137c] {jit-log-opt-bridge
# bridge out of Guard 0x3378800 with 48 ops
[p0, i1, i2, p3]
+166: guard_not_invalidated(descr=<Guard0x345c800>) [p0, i1, i2, p3]
+166: i4 = int_add_ovf(i2, i1)
+172: guard_no_overflow(descr=<Guard0x3443f10>) [p0, i1, i2, p3]
+178: guard_class(p0, 16435920, descr=<Guard0x3443f58>) [p0, i1, i2, p3]
+190: p6 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+201: guard_value(p6, ConstPtr(ptr7), descr=<Guard0x3443fa0>) [p0, i1, i2, p3]
+210: p8 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+214: p9 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+218: guard_class(p8, 16500368, descr=<Guard0x3466020>) [p0, i1, i2, p3]
+232: p11 = getfield_gc_r(p8, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+237: guard_class(p11, 16478072, descr=<Guard0x3466068>) [p0, i1, i2, p3]
+250: p13 = getfield_gc_r(p11, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+254: guard_class(p9, 16437216, descr=<Guard0x34660b0>) [p0, i1, i2, p3]
+268: p15 = getfield_gc_r(p9, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+272: guard_nonnull_class(p15, ConstClass(ForwardLink), descr=<Guard0x345c860>) [p0, i1, i2, p3]
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (+ AppRand2 AppRand3)')
+291: p17 = getfield_gc_r(p11, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+295: p18 = getfield_gc_r(p17, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+299: guard_nonnull_class(p18, 16478072, descr=<Guard0x345c8c0>) [p0, i1, i2, p3]
+317: p20 = getfield_gc_r(p8, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+322: guard_nonnull_class(p20, 16471056, descr=<Guard0x345c920>) [p0, i1, i2, p3]
+340: p22 = getfield_gc_r(p20, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+344: guard_nonnull_class(p22, 16471056, descr=<Guard0x345c980>) [p0, i1, i2, p3]
+362: i24 = getfield_gc_i(p20, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+366: p25 = getfield_gc_r(p8, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+371: guard_nonnull_class(p25, 16471056, descr=<Guard0x345c9e0>) [p0, i1, i2, p3]
+389: p27 = getfield_gc_r(p8, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+401: guard_nonnull(p27, descr=<Guard0x34660f8>) [p0, i1, i2, p3]
+410: p28 = getfield_gc_r(p18, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+428: guard_value(p28, ConstPtr(ptr29), descr=<Guard0x3466140>) [p0, i1, i2, p3]
+437: i30 = instance_ptr_eq(p11, p18)
+440: guard_true(i30, descr=<Guard0x3466188>) [p0, i1, i2, p3]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+446: p31 = new_with_vtable(descr=<SizeDescr 40>)
+487: p32 = new_with_vtable(descr=<SizeDescr 24>)
+498: setfield_gc(p32, i24, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+502: setfield_gc(p32, p25, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+506: p33 = new_with_vtable(descr=<SizeDescr 48>)
+524: setfield_gc(p33, ConstPtr(ptr34), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+528: setfield_gc(p33, p13, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+532: setfield_gc(p33, p9, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+536: setfield_gc(p31, p11, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+540: setfield_gc(p33, p15, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+544: setfield_gc(p31, p22, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+548: setfield_gc(p31, p32, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+552: setfield_gc(p31, p27, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+563: setfield_gc(p33, i4, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+574: jump(p31, p33, descr=TargetToken(53317888))
+608: --end of the loop--
[86a80775b76a95] jit-log-opt-bridge}
[86a80775e86dda] {jit-backend
[86a80775eeb9e0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ad6c
[86a80775ef3201] jit-backend-dump}
[86a80775efe698] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ad764 +0  26000000
[86a80775effbb2] jit-backend-dump}
[86a80775f03d88] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ad975 +0  26000000
[86a80775f04cda] jit-backend-dump}
[86a80775f08485] {jit-backend-addr
bridge out of Guard 0x33922c0 has address 0x7fb5ed3ad760 to 0x7fb5ed3ad970
       gc table: 0x7fb5ed3ad6c0
    jump target: 0x7fb5ed3ad760
         resops: 0x7fb5ed3ad76e
       failures: 0x7fb5ed3ad970
            end: 0x7fb5ed3adb57
[86a80775f0a8d5] jit-backend-addr}
[86a80775f0e19c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ad784 +0  2B020000
[86a80775f0effc] jit-backend-dump}
[86a80775f12580] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ad795 +0  52020000
[86a80775f132ae] jit-backend-dump}
[86a80775f16634] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ad7b1 +0  52020000
[86a80775f17374] jit-backend-dump}
[86a80775f1a7d6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ad7c8 +0  57020000
[86a80775f1b560] jit-backend-dump}
[86a80775f1e831] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ad7e3 +0  58020000
[86a80775f1f5b4] jit-backend-dump}
[86a80775f22962] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ad7f8 +0  5F020000
[86a80775f2369c] jit-backend-dump}
[86a80775f26882] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ad801 +0  72020000
[86a80775f275b9] jit-backend-dump}
[86a80775f2a7b4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ad81d +0  72020000
[86a80775f2b4e5] jit-backend-dump}
[86a80775f2e6fb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ad835 +0  76020000
[86a80775f2f47c] jit-backend-dump}
[86a80775f32787] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ad846 +0  81020000
[86a80775f334d0] jit-backend-dump}
[86a80775f366e4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ad84f +0  94020000
[86a80775f3741b] jit-backend-dump}
[86a80775f3a632] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ad85c +0  A3020000
[86a80775f3b38d] jit-backend-dump}
[86a80775f3e573] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ad865 +0  B6020000
[86a80775f3f2f0] jit-backend-dump}
[86a80775f42474] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ad87c +0  BB020000
[86a80775f431a8] jit-backend-dump}
[86a80775f46604] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39f31f +0  3DE40000
[86a80775f47369] jit-backend-dump}
[86a80775f4b508] jit-backend}
[86a80775f4f235] {jit-log-opt-bridge
# bridge out of Guard 0x33922c0 with 77 ops
[p0, p1, p2, p3, p4, p5]
+182: guard_nonnull_class(p1, 16471056, descr=<Guard0x345ca40>) [p0, p1, p4, p5]
+200: guard_not_invalidated(descr=<Guard0x34661d0>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(CellRef(my-try) AppRand1 '() (cons (car x) z))')
+200: p7 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+204: guard_class(p7, 16478072, descr=<Guard0x3466218>) [p0, p1, p4, p5]
+217: p9 = getfield_gc_r(p7, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+221: p10 = getfield_gc_r(p9, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+225: guard_nonnull_class(p10, 16478072, descr=<Guard0x345caa0>) [p0, p1, p4, p5]
+245: p12 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+249: guard_nonnull_class(p12, 16471056, descr=<Guard0x345cb00>) [p0, p1, p4, p5]
+268: i14 = getfield_gc_i(p12, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+272: p15 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+276: guard_nonnull_class(p15, 16471056, descr=<Guard0x345cb60>) [p0, p1, p4, p5]
+295: p17 = getfield_gc_r(p10, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+307: guard_value(p17, ConstPtr(ptr18), descr=<Guard0x3466260>) [p0, p1, p4, p5]
+316: i19 = instance_ptr_eq(p7, p10)
+319: guard_true(i19, descr=<Guard0x34662a8>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) AppRand1 '() (cons (car x) z))')
debug_merge_point(0, 0, '(let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))')
debug_merge_point(0, 0, '(CellRef(ok?) (car x) 1 z)')
+325: p20 = getfield_gc_r(p7, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+329: p21 = getfield_gc_r(p20, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+334: guard_nonnull_class(p21, 16477696, descr=<Guard0x345cbc0>) [p0, p1, p4, p5]
+353: i23 = getfield_gc_i(p1, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+357: p24 = getfield_gc_r(p21, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+368: guard_value(p24, ConstPtr(ptr25), descr=<Guard0x34662f0>) [p0, p1, p4, p5]
+377: p26 = getfield_gc_r(p7, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)')
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
debug_merge_point(0, 0, '(+ row dist)')
+381: i28 = int_add_ovf(i23, 1)
+388: guard_no_overflow(descr=<Guard0x3466338>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+394: i29 = int_eq(i14, i28)
+397: guard_false(i29, descr=<Guard0x3466380>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '(let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)))')
debug_merge_point(0, 0, '(- row dist)')
+403: i31 = int_sub_ovf(i23, 1)
+410: guard_no_overflow(descr=<Guard0x34663c8>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand6)')
+416: i32 = int_eq(i14, i31)
+419: guard_true(i32, descr=<Guard0x3466410>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)')
debug_merge_point(0, 0, '#f')
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand6)')
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand6)')
+425: p33 = getfield_gc_r(p1, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+429: guard_nonnull_class(p33, 16616448, descr=<Guard0x345cc20>) [p0, p1, p4, p5]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+448: p35 = new_with_vtable(descr=<SizeDescr 40>)
+492: p36 = new_with_vtable(descr=<SizeDescr 24>)
+503: setfield_gc(p36, i23, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+514: setfield_gc(p36, ConstPtr(ptr37), descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+518: p38 = new_with_vtable(descr=<SizeDescr 24>)
+530: setfield_gc(p38, i14, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+535: setfield_gc(p38, p15, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+540: p39 = new_with_vtable(descr=<SizeDescr 48>)
+552: p40 = new_with_vtable(descr=<SizeDescr 40>)
+563: setfield_gc(p40, p5, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+574: setfield_gc(p40, p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+578: setfield_gc(p40, p4, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+596: setfield_gc(p40, ConstPtr(ptr41), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+600: setfield_gc(p35, p7, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+604: setfield_gc(p35, p33, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+608: setfield_gc(p35, p38, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+612: setfield_gc(p35, p36, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+616: setfield_gc(p39, p5, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+620: setfield_gc(p39, p26, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+624: setfield_gc(p39, p40, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+635: setfield_gc(p39, ConstPtr(ptr42), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+639: setfield_gc(p39, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+647: jump(p35, p39, descr=TargetToken(53317888))
+688: --end of the loop--
[86a80775f8c01c] jit-log-opt-bridge}
[86a80776275eb2] {jit-backend
[86a807762d6029] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3adcb
[86a807762e1320] jit-backend-dump}
[86a807762ec822] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3add64 +0  26000000
[86a807762edcdd] jit-backend-dump}
[86a807762f2104] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3adf55 +0  26000000
[86a807762f30b5] jit-backend-dump}
[86a807762f6673] {jit-backend-addr
bridge out of Guard 0x3354ce0 has address 0x7fb5ed3add60 to 0x7fb5ed3adf50
       gc table: 0x7fb5ed3adcb0
    jump target: 0x7fb5ed3add60
         resops: 0x7fb5ed3add6e
       failures: 0x7fb5ed3adf50
            end: 0x7fb5ed3ae18b
[86a807762f8a86] jit-backend-addr}
[86a807762fc2cd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3add7e +0  11020000
[86a807762fd142] jit-backend-dump}
[86a8077630053f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3add95 +0  16020000
[86a8077630127f] jit-backend-dump}
[86a80776304630] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3adda5 +0  22020000
[86a80776305336] jit-backend-dump}
[86a80776308629] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3addb1 +0  32020000
[86a80776309347] jit-backend-dump}
[86a8077630c6a2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3addc9 +0  36020000
[86a8077630d3c4] jit-backend-dump}
[86a807763105d4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3adddb +0  40020000
[86a80776311321] jit-backend-dump}
[86a80776314559] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3addf7 +0  40020000
[86a80776315253] jit-backend-dump}
[86a80776318521] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ade12 +0  41020000
[86a8077631921e] jit-backend-dump}
[86a8077631c3e5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ade26 +0  49020000
[86a8077631d175] jit-backend-dump}
[86a807763203a1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ade34 +0  57020000
[86a807763210bf] jit-backend-dump}
[86a807763245cc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ade41 +0  82020000
[86a807763252fd] jit-backend-dump}
[86a807763285e1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ade4e +0  91020000
[86a807763292fc] jit-backend-dump}
[86a8077632c4ba] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ade69 +0  92020000
[86a8077632d1d3] jit-backend-dump}
[86a807763303c2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ade80 +0  97020000
[86a807763310a6] jit-backend-dump}
[86a80776334292] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ade97 +0  9C020000
[86a80776334faa] jit-backend-dump}
[86a8077633819c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3adeab +0  A4020000
[86a80776338ed3] jit-backend-dump}
[86a8077633c0ce] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3adeb4 +0  B7020000
[86a8077633cdf9] jit-backend-dump}
[86a80776340328] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed398517 +0  45580100
[86a80776340fe5] jit-backend-dump}
[86a80776345015] jit-backend}
[86a80776348e2d] {jit-log-opt-bridge
# bridge out of Guard 0x3354ce0 with 67 ops
[p0, p1]
+198: guard_class(p1, 16500368, descr=<Guard0x345cc80>) [p0, p1]
+210: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+214: guard_nonnull_class(p3, 16471056, descr=<Guard0x345cce0>) [p0, p1]
+240: i6 = instance_ptr_eq(p3, ConstPtr(ptr5))
+243: guard_false(i6, descr=<Guard0x3466458>) [p0, p1]
debug_merge_point(0, 0, '(let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))')
+249: guard_class(p0, 16435920, descr=<Guard0x34664a0>) [p0, p1]
+261: p8 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+265: guard_nonnull_class(p8, ConstClass(ForwardLink), descr=<Guard0x345cd40>) [p0, p1]
debug_merge_point(0, 0, '(CellRef(ok?) (car x) 1 z)')
+285: p10 = getfield_gc_r(p1, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+289: guard_class(p10, 16478072, descr=<Guard0x34664e8>) [p0, p1]
+303: p12 = getfield_gc_r(p10, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+308: p13 = getfield_gc_r(p12, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+312: guard_nonnull_class(p13, 16477696, descr=<Guard0x345cda0>) [p0, p1]
+331: i15 = getfield_gc_i(p3, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+335: p16 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+339: guard_nonnull_class(p16, 16471056, descr=<Guard0x345ce00>) [p0, p1]
+358: p18 = getfield_gc_r(p13, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+369: guard_value(p18, ConstPtr(ptr19), descr=<Guard0x3466530>) [p0, p1]
+378: p20 = getfield_gc_r(p10, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)')
+383: i22 = instance_ptr_eq(p16, ConstPtr(ptr21))
+386: guard_false(i22, descr=<Guard0x3466578>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
debug_merge_point(0, 0, '(+ row dist)')
+392: guard_not_invalidated(descr=<Guard0x34665c0>) [p0, p1]
+392: i24 = int_add_ovf(i15, 1)
+399: guard_no_overflow(descr=<Guard0x3466608>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+405: i25 = getfield_gc_i(p16, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+409: i26 = int_eq(i25, i24)
+412: guard_true(i26, descr=<Guard0x3466650>) [p0, p1]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '#f')
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand4)')
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand4)')
+418: p27 = getfield_gc_r(p10, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+423: p28 = getfield_gc_r(p27, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+427: guard_nonnull_class(p28, 16478072, descr=<Guard0x345ce60>) [p0, p1]
+445: p30 = getfield_gc_r(p3, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+449: guard_nonnull_class(p30, 16616448, descr=<Guard0x345cec0>) [p0, p1]
+468: p32 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+472: guard_nonnull_class(p32, 16616448, descr=<Guard0x345cf20>) [p0, p1]
+491: p34 = getfield_gc_r(p28, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+502: guard_value(p34, ConstPtr(ptr35), descr=<Guard0x3466698>) [p0, p1]
+511: i36 = instance_ptr_eq(p10, p28)
+514: guard_true(i36, descr=<Guard0x34666e0>) [p0, p1]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+520: p37 = new_with_vtable(descr=<SizeDescr 40>)
+561: p38 = new_with_vtable(descr=<SizeDescr 24>)
+572: setfield_gc(p38, i15, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+576: setfield_gc(p38, p32, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+580: p39 = new_with_vtable(descr=<SizeDescr 48>)
+591: setfield_gc(p37, p30, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+595: setfield_gc(p39, p8, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+599: setfield_gc(p37, p10, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+603: setfield_gc(p37, p16, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+607: setfield_gc(p37, p38, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+611: setfield_gc(p39, p20, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+615: setfield_gc(p39, p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+626: setfield_gc(p39, ConstPtr(ptr40), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+630: setfield_gc(p39, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+638: jump(p37, p39, descr=TargetToken(53317888))
+672: --end of the loop--
[86a80776381bf9] jit-log-opt-bridge}
[86a8077670305f] {jit-backend
[86a8077675d96b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ae
[86a80776763bf8] jit-backend-dump}
[86a8077676f080] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ae2c4 +0  26000000
[86a80776770605] jit-backend-dump}
[86a807767749f5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ae465 +0  26000000
[86a80776775981] jit-backend-dump}
[86a80776779065] {jit-backend-addr
bridge out of Guard 0x3378560 has address 0x7fb5ed3ae2c0 to 0x7fb5ed3ae460
       gc table: 0x7fb5ed3ae250
    jump target: 0x7fb5ed3ae2c0
         resops: 0x7fb5ed3ae2ce
       failures: 0x7fb5ed3ae460
            end: 0x7fb5ed3ae59f
[86a8077677b6ba] jit-backend-addr}
[86a8077677f048] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ae2df +0  DC010000
[86a8077677fedf] jit-backend-dump}
[86a807767832c9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ae2ec +0  EB010000
[86a8077678404a] jit-backend-dump}
[86a80776787352] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ae2f9 +0  FA010000
[86a807767880b7] jit-backend-dump}
[86a8077678b52b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ae302 +0  0D020000
[86a8077678c287] jit-backend-dump}
[86a8077678f53d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ae31e +0  0D020000
[86a807767902b4] jit-backend-dump}
[86a80776793643] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ae336 +0  11020000
[86a8077679434f] jit-backend-dump}
[86a80776797572] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ae34a +0  19020000
[86a807767982bb] jit-backend-dump}
[86a8077679b5eb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ae353 +0  2C020000
[86a8077679c2ee] jit-backend-dump}
[86a8077679f7c1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39b723 +0  992B0100
[86a807767a050b] jit-backend-dump}
[86a807767a46bf] jit-backend}
[86a807767a8448] {jit-log-opt-bridge
# bridge out of Guard 0x3378560 with 58 ops
[p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
+134: guard_not_invalidated(descr=<Guard0x345d0a0>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
+134: i11 = int_add_ovf(i6, 1)
+141: guard_no_overflow(descr=<Guard0x3466728>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+147: i12 = getfield_gc_i(p7, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+151: i13 = int_eq(i12, i11)
+154: guard_false(i13, descr=<Guard0x3466770>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '(let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)))')
debug_merge_point(0, 0, '(- row dist)')
+160: i15 = int_sub_ovf(i6, 1)
+167: guard_no_overflow(descr=<Guard0x34667b8>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
debug_merge_point(0, 0, '(let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand6)')
+173: i16 = int_eq(i12, i15)
+176: guard_false(i16, descr=<Guard0x3466800>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
debug_merge_point(0, 0, '(if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)')
debug_merge_point(0, 0, '(let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed)))')
debug_merge_point(0, 0, '(+ dist 1)')
debug_merge_point(0, 0, '(CellRef(ok?) row AppRand8 (cdr placed))')
+182: p17 = getfield_gc_r(p8, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize1.inst__vals_0 24 pure>)
+186: p18 = getfield_gc_r(p17, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+191: guard_nonnull_class(p18, 16477696, descr=<Guard0x345d100>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
+210: p20 = getfield_gc_r(p7, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+214: guard_nonnull_class(p20, 16616448, descr=<Guard0x345d160>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
+234: p22 = getfield_gc_r(p18, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+245: guard_value(p22, ConstPtr(ptr23), descr=<Guard0x3466848>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
+254: i24 = instance_ptr_eq(p8, p18)
+257: guard_true(i24, descr=<Guard0x3466890>) [p0, p1, p2, i3, p4, p5, i6, p7, p8, p9]
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) row AppRand8 (cdr placed))')
+263: p25 = new_with_vtable(descr=<SizeDescr 40>)
+314: p26 = new_with_vtable(descr=<SizeDescr 16>)
+325: setfield_gc(p26, i6, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+336: p27 = new_with_vtable(descr=<SizeDescr 40>)
+347: p28 = new_with_vtable(descr=<SizeDescr 40>)
+358: setfield_gc(p28, p5, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+369: setfield_gc(p28, p4, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+373: p29 = new_with_vtable(descr=<SizeDescr 24>)
+384: setfield_gc(p29, i3, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+388: setfield_gc(p29, p2, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+392: setfield_gc(p28, p29, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+396: setfield_gc(p28, p7, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+400: p30 = new_with_vtable(descr=<SizeDescr 48>)
+412: setfield_gc(p30, p9, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+423: setfield_gc(p30, p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+427: setfield_gc(p30, p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+438: setfield_gc(p30, ConstPtr(ptr31), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+442: setfield_gc(p30, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+450: setfield_gc(p25, p8, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+454: setfield_gc(p25, p26, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+465: setfield_gc(p25, ConstPtr(ptr33), descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+469: setfield_gc(p25, p20, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+473: setfield_gc(p27, p9, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+477: setfield_gc(p27, p28, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+481: setfield_gc(p27, p30, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+492: setfield_gc(p27, ConstPtr(ptr34), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+496: jump(p25, p27, descr=TargetToken(52788128))
+528: --end of the loop--
[86a807767dd3be] jit-log-opt-bridge}
[86a80776c32f9e] {jit-backend
[86a80776c96436] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ae6a
[86a80776c9da5b] jit-backend-dump}
[86a80776ca8dee] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ae734 +0  26000000
[86a80776caa2b9] jit-backend-dump}
[86a80776cae458] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ae925 +0  26000000
[86a80776caf2f8] jit-backend-dump}
[86a80776cb2934] {jit-backend-addr
bridge out of Guard 0x33aef20 has address 0x7fb5ed3ae730 to 0x7fb5ed3ae920
       gc table: 0x7fb5ed3ae6a0
    jump target: 0x7fb5ed3ae730
         resops: 0x7fb5ed3ae73e
       failures: 0x7fb5ed3ae920
            end: 0x7fb5ed3aeacf
[86a80776cb4ca4] jit-backend-addr}
[86a80776cb8605] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ae754 +0  0B020000
[86a80776cb9471] jit-backend-dump}
[86a80776cbd019] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ae765 +0  32020000
[86a80776cbddc8] jit-backend-dump}
[86a80776cc48f8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ae781 +0  32020000
[86a80776cc5825] jit-backend-dump}
[86a80776cc9212] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ae798 +0  37020000
[86a80776cc9f5c] jit-backend-dump}
[86a80776ccd2bd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ae7b3 +0  38020000
[86a80776ccdfc6] jit-backend-dump}
[86a80776cd12bc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ae7c8 +0  3F020000
[86a80776cd1fea] jit-backend-dump}
[86a80776cd536f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ae7d1 +0  52020000
[86a80776cd6097] jit-backend-dump}
[86a80776cd93ca] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ae7ed +0  52020000
[86a80776cda0a8] jit-backend-dump}
[86a80776cdd3c9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ae805 +0  56020000
[86a80776cde0d5] jit-backend-dump}
[86a80776ce1369] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ae816 +0  61020000
[86a80776ce2097] jit-backend-dump}
[86a80776ce546c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ae81f +0  74020000
[86a80776ce6182] jit-backend-dump}
[86a80776ce9450] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ae837 +0  78020000
[86a80776cea14d] jit-backend-dump}
[86a80776ced7ba] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3a5747 +0  E58F0000
[86a80776cee48c] jit-backend-dump}
[86a80776cf26fb] jit-backend}
[86a80776cf6523] {jit-log-opt-bridge
# bridge out of Guard 0x33aef20 with 68 ops
[p0, p1, p2, p3]
+166: guard_nonnull_class(p1, 16471056, descr=<Guard0x345d1c0>) [p0, p1, p2, p3]
+184: guard_not_invalidated(descr=<Guard0x34668d8>) [p0, p1, p2, p3]
debug_merge_point(0, 0, '(CellRef(my-try) AppRand1 '() (cons (car x) z))')
+184: p5 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+188: guard_class(p5, 16478072, descr=<Guard0x3466920>) [p0, p1, p2, p3]
+201: p7 = getfield_gc_r(p5, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+205: p8 = getfield_gc_r(p7, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+209: guard_nonnull_class(p8, 16478072, descr=<Guard0x345d220>) [p0, p1, p2, p3]
+229: p10 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+233: guard_nonnull_class(p10, 16471056, descr=<Guard0x345d280>) [p0, p1, p2, p3]
+252: i12 = getfield_gc_i(p10, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+256: p13 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+260: guard_nonnull_class(p13, 16471056, descr=<Guard0x345d2e0>) [p0, p1, p2, p3]
+279: p15 = getfield_gc_r(p8, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+291: guard_value(p15, ConstPtr(ptr16), descr=<Guard0x3466968>) [p0, p1, p2, p3]
+300: i17 = instance_ptr_eq(p5, p8)
+303: guard_true(i17, descr=<Guard0x34669b0>) [p0, p1, p2, p3]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) AppRand1 '() (cons (car x) z))')
debug_merge_point(0, 0, '(let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))')
debug_merge_point(0, 0, '(CellRef(ok?) (car x) 1 z)')
+309: p18 = getfield_gc_r(p5, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+313: p19 = getfield_gc_r(p18, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+318: guard_nonnull_class(p19, 16477696, descr=<Guard0x345d340>) [p0, p1, p2, p3]
+337: i21 = getfield_gc_i(p1, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+341: p22 = getfield_gc_r(p19, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+352: guard_value(p22, ConstPtr(ptr23), descr=<Guard0x34669f8>) [p0, p1, p2, p3]
+361: p24 = getfield_gc_r(p5, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)')
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
debug_merge_point(0, 0, '(+ row dist)')
+365: i26 = int_add_ovf(i21, 1)
+372: guard_no_overflow(descr=<Guard0x3466a40>) [p0, p1, p2, p3]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+378: i27 = int_eq(i12, i26)
+381: guard_true(i27, descr=<Guard0x3466a88>) [p0, p1, p2, p3]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '#f')
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand4)')
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand4)')
+387: p28 = getfield_gc_r(p1, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+391: guard_nonnull_class(p28, 16616448, descr=<Guard0x345d3a0>) [p0, p1, p2, p3]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+411: p30 = new_with_vtable(descr=<SizeDescr 40>)
+455: p31 = new_with_vtable(descr=<SizeDescr 24>)
+466: setfield_gc(p31, i21, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+477: setfield_gc(p31, ConstPtr(ptr32), descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+481: p33 = new_with_vtable(descr=<SizeDescr 24>)
+492: setfield_gc(p33, i12, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+496: setfield_gc(p33, p13, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+500: p34 = new_with_vtable(descr=<SizeDescr 48>)
+511: p35 = new_with_vtable(descr=<SizeDescr 40>)
+522: setfield_gc(p35, p3, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+533: setfield_gc(p35, p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+537: setfield_gc(p35, p2, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+555: setfield_gc(p35, ConstPtr(ptr36), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+559: setfield_gc(p30, p5, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+563: setfield_gc(p30, p28, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+567: setfield_gc(p30, p33, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+571: setfield_gc(p30, p31, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+575: setfield_gc(p34, p3, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+579: setfield_gc(p34, p24, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+583: setfield_gc(p34, p35, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+594: setfield_gc(p34, ConstPtr(ptr37), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+598: setfield_gc(p34, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+606: jump(p30, p34, descr=TargetToken(53317888))
+640: --end of the loop--
[86a80776d31947] jit-log-opt-bridge}
[86a807774e6786] {jit-backend
[86a8077752f33a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aebe
[86a80777535fc1] jit-backend-dump}
[86a80777541449] {jit-backend-addr
Loop 76 ((let ([if0 (= i 0)]) (if if0 l (let ([AppRand0 (- i 1)]) (loop AppRand0 (cons i l))))) from (loop AppRand0 (cons i l))) has address 0x7fb5ed3aeced to 0x7fb5ed3aee40 (bootstrap 0x7fb5ed3aec60)
       gc table: 0x7fb5ed3aebe0
       function: 0x7fb5ed3aec60
         resops: 0x7fb5ed3aeced
       failures: 0x7fb5ed3aee40
            end: 0x7fb5ed3aeff7
[86a807775442ae] jit-backend-addr}
[86a80777548915] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aed17 +0  54010000
[86a80777549cd5] jit-backend-dump}
[86a8077754d44f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aed2d +0  5A010000
[86a8077754e2b5] jit-backend-dump}
[86a807775519c4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aed40 +0  7F010000
[86a80777552766] jit-backend-dump}
[86a80777555ca1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aed4e +0  8D010000
[86a807775569ae] jit-backend-dump}
[86a80777559e09] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aed5b +0  9C010000
[86a8077755ab53] jit-backend-dump}
[86a8077755de08] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aed6b +0  A8010000
[86a8077755eb86] jit-backend-dump}
[86a80777561e32] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aed82 +0  AD010000
[86a80777562b91] jit-backend-dump}
[86a80777565e00] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aed99 +0  B2010000
[86a80777566b22] jit-backend-dump}
[86a80777569d7f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aedad +0  BA010000
[86a8077756aaa4] jit-backend-dump}
[86a8077756dd22] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aedba +0  C9010000
[86a8077756ea16] jit-backend-dump}
[86a80777571dba] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aedee +0  CD010000
[86a80777572aeb] jit-backend-dump}
[86a80777575d85] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aedfb +0  DC010000
[86a80777576ab0] jit-backend-dump}
[86a8077757a956] jit-backend}
[86a8077757e8a0] {jit-log-opt-loop
# Loop 76 ((let ([if0 (= i 0)]) (if if0 l (let ([AppRand0 (- i 1)]) (loop AppRand0 (cons i l))))) from (loop AppRand0 (cons i l))) : loop with 46 ops
[p0, p1]
+277: label(p0, p1, descr=TargetToken(54105360))
debug_merge_point(0, 0, '(let ([if0 (= i 0)]) (if if0 l (let ([AppRand0 (- i 1)]) (loop AppRand0 (cons i l))))) from (loop AppRand0 (cons i l))')
+296: guard_class(p1, 16435920, descr=<Guard0x345d460>) [p0, p1]
+315: p3 = getfield_gc_r(p1, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+319: guard_nonnull_class(p3, ConstClass(ForwardLink), descr=<Guard0x345d4c0>) [p0, p1]
debug_merge_point(0, 0, '(= i 0)')
+337: guard_not_invalidated(descr=<Guard0x3466b18>) [p0, p1]
+337: guard_class(p0, 16504240, descr=<Guard0x3466b60>) [p0, p1]
+356: i6 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed10.inst_vals_fixed_0 16 pure>)
+360: i8 = int_eq(i6, 0)
+364: guard_false(i8, descr=<Guard0x3466ba8>) [p0, p1]
debug_merge_point(0, 0, '(if if0 l (let ([AppRand0 (- i 1)]) (loop AppRand0 (cons i l))))')
debug_merge_point(0, 0, '(let ([AppRand0 (- i 1)]) (loop AppRand0 (cons i l)))')
debug_merge_point(0, 0, '(- i 1)')
+370: i10 = int_sub_ovf(i6, 1)
+377: guard_no_overflow(descr=<Guard0x3466bf0>) [p0, p1]
debug_merge_point(0, 0, '(loop AppRand0 (cons i l))')
+383: p11 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+387: guard_class(p11, 16499664, descr=<Guard0x3466c38>) [p0, p1]
+399: p13 = getfield_gc_r(p11, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+403: guard_nonnull_class(p13, 16510992, descr=<Guard0x345d520>) [p0, p1]
+422: p15 = getfield_gc_r(p0, descr=<FieldP pycket.small_list.ConsEnvSize2Fixed10.inst_w_val1 24 pure>)
+426: guard_nonnull_class(p15, 16471056, descr=<Guard0x345d580>) [p0, p1]
+445: p17 = getfield_gc_r(p13, descr=<FieldP pycket.values.W_Closure.inst_caselam 8 pure>)
+456: guard_value(p17, ConstPtr(ptr18), descr=<Guard0x3466c80>) [p0, p1]
+465: p19 = getfield_gc_r(p13, descr=<FieldP rpython.tool.pairtype.W_ClosureSize1.inst__envs_0 16 pure>)
+469: i20 = instance_ptr_eq(p11, p19)
+472: guard_true(i20, descr=<Guard0x3466cc8>) [p0, p1]
debug_merge_point(0, 0, '(let ([if0 (= i 0)]) (if if0 l (let ([AppRand0 (- i 1)]) (loop AppRand0 (cons i l))))) from (loop AppRand0 (cons i l))')
+478: label(p11, i10, i6, p15, p1, p3, p13, descr=TargetToken(54105440))
debug_merge_point(0, 0, '(let ([if0 (= i 0)]) (if if0 l (let ([AppRand0 (- i 1)]) (loop AppRand0 (cons i l))))) from (loop AppRand0 (cons i l))')
debug_merge_point(0, 0, '(= i 0)')
+520: guard_not_invalidated(descr=<Guard0x345d5e0>) [p15, i6, i10, p11, p1, p3]
+520: i22 = int_eq(i10, 0)
+524: guard_false(i22, descr=<Guard0x3466d10>) [p15, i6, i10, p11, p1, p3]
debug_merge_point(0, 0, '(if if0 l (let ([AppRand0 (- i 1)]) (loop AppRand0 (cons i l))))')
debug_merge_point(0, 0, '(let ([AppRand0 (- i 1)]) (loop AppRand0 (cons i l)))')
debug_merge_point(0, 0, '(- i 1)')
+530: i24 = int_sub_ovf(i10, 1)
+537: guard_no_overflow(descr=<Guard0x3466d58>) [p15, i6, i10, p11, p1, p3]
debug_merge_point(0, 0, '(loop AppRand0 (cons i l))')
debug_merge_point(0, 0, '(let ([if0 (= i 0)]) (if if0 l (let ([AppRand0 (- i 1)]) (loop AppRand0 (cons i l))))) from (loop AppRand0 (cons i l))')
+543: p25 = new_with_vtable(descr=<SizeDescr 24>)
+584: setfield_gc(p25, i6, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+588: setfield_gc(p25, p15, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+592: jump(p11, i24, i10, p25, p1, p3, p13, descr=TargetToken(54105440))
+608: --end of the loop--
[86a807775a8945] jit-log-opt-loop}
[86a807781977cc] {jit-backend
[86a80778220087] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3af1d
[86a80778229ce6] jit-backend-dump}
[86a80778235868] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3af2d4 +0  26000000
[86a80778236d4b] jit-backend-dump}
[86a8077823abea] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3af615 +0  26000000
[86a8077823bc64] jit-backend-dump}
[86a8077823f07a] {jit-backend-addr
bridge out of Guard 0x323efe0 has address 0x7fb5ed3af2d0 to 0x7fb5ed3af610
       gc table: 0x7fb5ed3af1d0
    jump target: 0x7fb5ed3af2d0
         resops: 0x7fb5ed3af2de
       failures: 0x7fb5ed3af610
            end: 0x7fb5ed3af93d
[86a80778241443] jit-backend-addr}
[86a80778244a94] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3af2ee +0  73030000
[86a807782458fa] jit-backend-dump}
[86a80778248ca4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3af2fb +0  82030000
[86a80778249983] jit-backend-dump}
[86a8077824cc17] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3af30b +0  8E030000
[86a8077824d8da] jit-backend-dump}
[86a80778250b80] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3af31f +0  96030000
[86a8077825187a] jit-backend-dump}
[86a80778254b85] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3af333 +0  9E030000
[86a80778255842] jit-backend-dump}
[86a80778258c42] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3af349 +0  C0030000
[86a80778259908] jit-backend-dump}
[86a8077825cb9f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3af360 +0  C5030000
[86a8077825d846] jit-backend-dump}
[86a80778260ac5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3af36e +0  D3030000
[86a80778261778] jit-backend-dump}
[86a807782649d5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3af386 +0  D7030000
[86a80778265698] jit-backend-dump}
[86a80778268923] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3af39d +0  DC030000
[86a807782695d6] jit-backend-dump}
[86a8077826c7f9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3af3ab +0  EA030000
[86a8077826d4a0] jit-backend-dump}
[86a80778270710] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3af426 +0  8B030000
[86a807782713e5] jit-backend-dump}
[86a80778274608] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3af438 +0  95030000
[86a807782752b8] jit-backend-dump}
[86a807782784db] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3af451 +0  98030000
[86a80778279192] jit-backend-dump}
[86a8077827c3c7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3af46d +0  98030000
[86a8077827d074] jit-backend-dump}
[86a807782802b9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3af490 +0  91030000
[86a80778280fa6] jit-backend-dump}
[86a8077828425f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3af4a4 +0  99030000
[86a80778284f4a] jit-backend-dump}
[86a80778288202] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3af4ad +0  AC030000
[86a80778288ecb] jit-backend-dump}
[86a8077828c0e8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3af4c8 +0  AD030000
[86a8077828cd8f] jit-backend-dump}
[86a80778290023] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3af4e0 +0  B1030000
[86a80778290cdd] jit-backend-dump}
[86a80778293ee7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3af4f2 +0  BB030000
[86a80778294b7f] jit-backend-dump}
[86a80778297dbe] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3af4fb +0  CE030000
[86a80778298a99] jit-backend-dump}
[86a8077829bced] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3af508 +0  DD030000
[86a8077829c994] jit-backend-dump}
[86a8077829fc28] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3af511 +0  F0030000
[86a807782a08e5] jit-backend-dump}
[86a807782a3b45] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3af528 +0  F5030000
[86a807782a47f5] jit-backend-dump}
[86a807782a7d1b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed39427a +0  52B00100
[86a807782a8985] jit-backend-dump}
[86a807782acbeb] jit-backend}
[86a807782b0a4a] {jit-log-opt-bridge
# bridge out of Guard 0x323efe0 with 102 ops
[p0, p1]
+278: guard_class(p1, 16500368, descr=<Guard0x345d6a0>) [p0, p1]
+290: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+294: guard_nonnull(p3, descr=<Guard0x3466de8>) [p0, p1]
+310: i5 = instance_ptr_eq(p3, ConstPtr(ptr4))
+313: guard_true(i5, descr=<Guard0x3466e30>) [p0, p1]
debug_merge_point(0, 0, '#t')
+319: guard_class(p0, 16435920, descr=<Guard0x3466e78>) [p0, p1]
+339: p7 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+350: guard_value(p7, ConstPtr(ptr8), descr=<Guard0x3466ec0>) [p0, p1]
+359: p9 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+363: guard_not_invalidated(descr=<Guard0x3466f08>) [p0, p1]
+363: p10 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (CellRef(ok?) (car x) 1 z)')
+367: guard_class(p10, 16435208, descr=<Guard0x3466f50>) [p0, p1]
+381: p12 = getfield_gc_r(p10, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+385: guard_nonnull_class(p12, ConstClass(ForwardLink), descr=<Guard0x345d700>) [p0, p1]
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '(let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z)))')
debug_merge_point(0, 0, '(append (cdr x) y)')
+404: guard_class(p9, 16500368, descr=<Guard0x3466f98>) [p0, p1]
+418: p15 = getfield_gc_r(p9, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+423: guard_nonnull_class(p15, 16471056, descr=<Guard0x345d760>) [p0, p1]
+442: p17 = getfield_gc_r(p15, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+446: guard_nonnull_class(p17, 16471056, descr=<Guard0x345d7c0>) [p0, p1]
+465: p19 = getfield_gc_r(p9, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+470: guard_nonnull(p19, descr=<Guard0x3466fe0>) [p0, p1]
+479: p21 = call_r(ConstClass(append_two), p17, p19, descr=<Callr 8 rr EF=5>)
+587: guard_no_exception(descr=<Guard0x345d820>) [p9, p21, p19, p17, p10, p12]
+602: guard_nonnull_class(p21, 16471056, descr=<Guard0x345d880>) [p9, p21, p19, p17, p10, p12]
debug_merge_point(0, 0, '(CellRef(my-try) AppRand1 '() (cons (car x) z))')
+620: p23 = getfield_gc_r(p9, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+631: guard_class(p23, 16478072, descr=<Guard0x3467028>) [p9, p21, p19, p17, p10, p12]
+645: p25 = getfield_gc_r(p23, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+650: p26 = getfield_gc_r(p25, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+654: guard_nonnull_class(p26, 16478072, descr=<Guard0x345d8e0>) [p9, p21, p19, p17, p10, p12]
+673: i28 = getfield_gc_i(p15, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+684: p29 = getfield_gc_r(p9, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+688: guard_nonnull_class(p29, 16616448, descr=<Guard0x345d940>) [p9, p21, p19, p17, p10, p12]
+708: p31 = getfield_gc_r(p26, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+719: guard_value(p31, ConstPtr(ptr32), descr=<Guard0x3467070>) [p9, p21, p19, p17, p10, p12]
+728: i33 = instance_ptr_eq(p23, p26)
+731: guard_true(i33, descr=<Guard0x34670b8>) [p9, p21, p19, p17, p10, p12]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) AppRand1 '() (cons (car x) z))')
debug_merge_point(0, 0, '(let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))')
debug_merge_point(0, 0, '(CellRef(ok?) (car x) 1 z)')
+737: p34 = getfield_gc_r(p23, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+742: p35 = getfield_gc_r(p34, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+746: guard_nonnull_class(p35, 16477696, descr=<Guard0x345d9a0>) [p9, p21, p19, p17, p10, p12]
+764: i37 = getfield_gc_i(p21, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+768: p38 = getfield_gc_r(p35, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+779: guard_value(p38, ConstPtr(ptr39), descr=<Guard0x3467100>) [p9, p21, p19, p17, p10, p12]
+788: p40 = getfield_gc_r(p23, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)')
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
debug_merge_point(0, 0, '(+ row dist)')
+793: i42 = int_add_ovf(i37, 1)
+800: guard_no_overflow(descr=<Guard0x3467148>) [p9, p21, p19, p17, p10, p12]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+806: i43 = int_eq(i28, i42)
+809: guard_false(i43, descr=<Guard0x3467190>) [p9, p21, p19, p17, p10, p12]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '(let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)))')
debug_merge_point(0, 0, '(- row dist)')
+815: i45 = int_sub_ovf(i37, 1)
+822: guard_no_overflow(descr=<Guard0x34671d8>) [p9, p21, p19, p17, p10, p12]
debug_merge_point(0, 0, '(let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand6)')
+828: i46 = int_eq(i28, i45)
+831: guard_true(i46, descr=<Guard0x3467220>) [p9, p21, p19, p17, p10, p12]
debug_merge_point(0, 0, '(if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)')
debug_merge_point(0, 0, '#f')
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand6)')
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand6)')
+837: p47 = getfield_gc_r(p21, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+841: guard_nonnull_class(p47, 16471056, descr=<Guard0x345da00>) [p9, p21, p19, p17, p10, p12]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+860: p49 = new_with_vtable(descr=<SizeDescr 40>)
+904: p50 = new_with_vtable(descr=<SizeDescr 24>)
+915: setfield_gc(p50, i37, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+919: setfield_gc(p50, ConstPtr(ptr51), descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+930: p52 = new_with_vtable(descr=<SizeDescr 24>)
+941: setfield_gc(p52, i28, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+945: setfield_gc(p52, p29, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+949: p53 = new_with_vtable(descr=<SizeDescr 48>)
+961: p54 = new_with_vtable(descr=<SizeDescr 40>)
+972: setfield_gc(p54, p12, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+983: setfield_gc(p54, p9, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+987: setfield_gc(p54, p10, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1005: setfield_gc(p54, ConstPtr(ptr55), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+1009: setfield_gc(p49, p52, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+1020: setfield_gc(p53, ConstPtr(ptr56), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+1024: setfield_gc(p53, p40, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1028: setfield_gc(p53, p54, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1032: setfield_gc(p53, p12, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1036: setfield_gc(p49, p47, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+1040: setfield_gc(p49, p50, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+1044: setfield_gc(p49, p23, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1048: setfield_gc(p53, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+1056: jump(p49, p53, descr=TargetToken(53317888))
+1088: --end of the loop--
[86a80778308a38] jit-log-opt-bridge}
[86a80779adccfa] {jit-backend
[86a80779b33f28] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3afa
[86a80779b3ac91] jit-backend-dump}
[86a80779b467c4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3afaf4 +0  26000000
[86a80779b47ddc] jit-backend-dump}
[86a80779b4bfca] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3afcc5 +0  26000000
[86a80779b4cf71] jit-backend-dump}
[86a80779b504a0] {jit-backend-addr
bridge out of Guard 0x335b460 has address 0x7fb5ed3afaf0 to 0x7fb5ed3afcc0
       gc table: 0x7fb5ed3afa60
    jump target: 0x7fb5ed3afaf0
         resops: 0x7fb5ed3afafe
       failures: 0x7fb5ed3afcc0
            end: 0x7fb5ed3afea7
[86a80779b528b3] jit-backend-addr}
[86a80779b5646e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3afb0e +0  0D020000
[86a80779b572d7] jit-backend-dump}
[86a80779b5a77c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3afb1a +0  1D020000
[86a80779b5b4b0] jit-backend-dump}
[86a80779b5e78d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3afb2e +0  25020000
[86a80779b5f4b2] jit-backend-dump}
[86a80779b62768] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3afb44 +0  2B020000
[86a80779b63446] jit-backend-dump}
[86a80779b666c2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3afb56 +0  35020000
[86a80779b673a0] jit-backend-dump}
[86a80779b6a6b4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3afb68 +0  3F020000
[86a80779b6b3a8] jit-backend-dump}
[86a80779b6e5cb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3afb7f +0  44020000
[86a80779b6f2a9] jit-backend-dump}
[86a80779b724e2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3afb99 +0  46020000
[86a80779b731c0] jit-backend-dump}
[86a80779b7640e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3afbb0 +0  4B020000
[86a80779b77101] jit-backend-dump}
[86a80779b7a32d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3afbc6 +0  51020000
[86a80779b7b015] jit-backend-dump}
[86a80779b7e287] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3afbe1 +0  52020000
[86a80779b7ef66] jit-backend-dump}
[86a80779b82176] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3afbf6 +0  59020000
[86a80779b82e51] jit-backend-dump}
[86a80779b8607d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3afc11 +0  5A020000
[86a80779b86d5f] jit-backend-dump}
[86a80779b89f97] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3afc1a +0  6D020000
[86a80779b8ac6c] jit-backend-dump}
[86a80779b8e133] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed399ee8 +0  045C0100
[86a80779b8edf3] jit-backend-dump}
[86a80779b92ff1] jit-backend}
[86a80779b96d9e] {jit-log-opt-bridge
# bridge out of Guard 0x335b460 with 48 ops
[p0, i1, i2, p3]
+166: guard_not_invalidated(descr=<Guard0x345da60>) [p0, i1, i2, p3]
+166: i4 = int_add_ovf(i2, i1)
+172: guard_no_overflow(descr=<Guard0x3467268>) [p0, i1, i2, p3]
+178: guard_class(p0, 16435920, descr=<Guard0x34672b0>) [p0, i1, i2, p3]
+190: p6 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+201: guard_value(p6, ConstPtr(ptr7), descr=<Guard0x34672f8>) [p0, i1, i2, p3]
+210: p8 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+214: p9 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+218: guard_class(p8, 16500368, descr=<Guard0x3467340>) [p0, i1, i2, p3]
+232: p11 = getfield_gc_r(p8, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+237: guard_class(p11, 16478072, descr=<Guard0x3467388>) [p0, i1, i2, p3]
+250: p13 = getfield_gc_r(p11, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+254: guard_class(p9, 16435208, descr=<Guard0x34673d0>) [p0, i1, i2, p3]
+268: p15 = getfield_gc_r(p9, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+272: guard_nonnull_class(p15, ConstClass(ForwardLink), descr=<Guard0x345dac0>) [p0, i1, i2, p3]
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (+ AppRand2 AppRand3)')
+291: p17 = getfield_gc_r(p11, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+295: p18 = getfield_gc_r(p17, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+299: guard_nonnull_class(p18, 16478072, descr=<Guard0x345db20>) [p0, i1, i2, p3]
+317: p20 = getfield_gc_r(p8, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+322: guard_nonnull_class(p20, 16471056, descr=<Guard0x345db80>) [p0, i1, i2, p3]
+340: p22 = getfield_gc_r(p20, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+344: guard_nonnull_class(p22, 16471056, descr=<Guard0x345dbe0>) [p0, i1, i2, p3]
+362: i24 = getfield_gc_i(p20, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+366: p25 = getfield_gc_r(p8, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+371: guard_nonnull_class(p25, 16616448, descr=<Guard0x345dc40>) [p0, i1, i2, p3]
+389: p27 = getfield_gc_r(p8, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+401: guard_nonnull(p27, descr=<Guard0x3467418>) [p0, i1, i2, p3]
+410: p28 = getfield_gc_r(p18, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+428: guard_value(p28, ConstPtr(ptr29), descr=<Guard0x3467460>) [p0, i1, i2, p3]
+437: i30 = instance_ptr_eq(p11, p18)
+440: guard_true(i30, descr=<Guard0x34674a8>) [p0, i1, i2, p3]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+446: p31 = new_with_vtable(descr=<SizeDescr 40>)
+487: p32 = new_with_vtable(descr=<SizeDescr 24>)
+498: setfield_gc(p32, i24, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+502: setfield_gc(p32, p25, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+506: p33 = new_with_vtable(descr=<SizeDescr 48>)
+524: setfield_gc(p33, ConstPtr(ptr34), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+528: setfield_gc(p33, p13, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+532: setfield_gc(p33, p9, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+536: setfield_gc(p31, p11, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+540: setfield_gc(p33, p15, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+544: setfield_gc(p31, p22, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+548: setfield_gc(p31, p32, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+552: setfield_gc(p31, p27, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+563: setfield_gc(p33, i4, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+574: jump(p31, p33, descr=TargetToken(53317888))
+608: --end of the loop--
[86a80779bc72c6] jit-log-opt-bridge}
[86a80779ee40a4] {jit-backend
[86a80779f5dae1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3affb
[86a80779f64f29] jit-backend-dump}
[86a80779f700e8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b0064 +0  20000000
[86a80779f7172e] jit-backend-dump}
[86a80779f758f2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b02a5 +0  20000000
[86a80779f76a05] jit-backend-dump}
[86a80779f7a101] {jit-backend-addr
bridge out of Guard 0x331fd18 has address 0x7fb5ed3b0060 to 0x7fb5ed3b02a0
       gc table: 0x7fb5ed3affb0
    jump target: 0x7fb5ed3b0060
         resops: 0x7fb5ed3b006e
       failures: 0x7fb5ed3b02a0
            end: 0x7fb5ed3b044f
[86a80779f7c58e] jit-backend-addr}
[86a80779f7fe50] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b007e +0  7D020000
[86a80779f80c91] jit-backend-dump}
[86a80779f84097] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b008a +0  8D020000
[86a80779f84db6] jit-backend-dump}
[86a80779f8813e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b009e +0  95020000
[86a80779f88e44] jit-backend-dump}
[86a80779f8c162] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b00b3 +0  9C020000
[86a80779f8ce53] jit-backend-dump}
[86a80779f900fc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b00c4 +0  A7020000
[86a80779f90dc5] jit-backend-dump}
[86a80779f940da] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b00db +0  AC020000
[86a80779f94dac] jit-backend-dump}
[86a80779f98009] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b00e9 +0  BA020000
[86a80779f98cb3] jit-backend-dump}
[86a80779f9bf66] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b00fd +0  C2020000
[86a80779f9cc0a] jit-backend-dump}
[86a80779f9fe64] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b010a +0  D1020000
[86a80779fa0b64] jit-backend-dump}
[86a80779fa3df5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b0118 +0  DF020000
[86a80779fa4aa5] jit-backend-dump}
[86a80779fa7d02] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b012f +0  E4020000
[86a80779fa89a9] jit-backend-dump}
[86a80779fabc74] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b013c +0  F3020000
[86a80779fac93a] jit-backend-dump}
[86a80779fafdf5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed396cfa +0  62930100
[86a80779fb0a7e] jit-backend-dump}
[86a80779fb4ca9] jit-backend}
[86a80779fb8b5b] {jit-log-opt-bridge
# bridge out of Guard 0x331fd18 with 88 ops
[p0, i1, i2, p3]
+198: guard_not_invalidated(descr=<Guard0x345dca0>) [p0, i1, i2, p3]
+198: i4 = int_add_ovf(i2, i1)
+204: guard_no_overflow(descr=<Guard0x34674f0>) [p0, i1, i2, p3]
+210: guard_class(p0, 16435208, descr=<Guard0x3467538>) [p0, i1, i2, p3]
+222: p6 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+233: guard_value(p6, ConstPtr(ptr7), descr=<Guard0x3467580>) [p0, i1, i2, p3]
+242: p8 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+246: p9 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(doloop4904 (add1 i4906)) from (+ AppRand2 AppRand3)')
+250: guard_class(p8, 16504944, descr=<Guard0x34675c8>) [p0, i1, i2, p3]
+263: p11 = getfield_gc_r(p8, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+267: guard_class(p11, 16499664, descr=<Guard0x3467610>) [p0, i1, i2, p3]
+280: p13 = getfield_gc_r(p11, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+284: guard_nonnull_class(p13, 16510992, descr=<Guard0x345dd00>) [p0, i1, i2, p3]
+303: i15 = getfield_gc_i(p8, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+307: i17 = int_add_ovf(i15, 1)
+311: guard_no_overflow(descr=<Guard0x3467658>) [p0, i1, i2, p3]
+317: p18 = getfield_gc_r(p13, descr=<FieldP pycket.values.W_Closure.inst_caselam 8 pure>)
+328: guard_value(p18, ConstPtr(ptr19), descr=<Guard0x34676a0>) [p0, i1, i2, p3]
+337: p20 = getfield_gc_r(p13, descr=<FieldP rpython.tool.pairtype.W_ClosureSize1.inst__envs_0 16 pure>)
+341: i21 = instance_ptr_eq(p11, p20)
+344: guard_true(i21, descr=<Guard0x34676e8>) [p0, i1, i2, p3]
debug_merge_point(0, 0, '(let ([if3 (> i4906 nqueens-iters)]) (if if3 (begin (void) (void)) (begin (nqueens 8) (doloop4904 (add1 i4906))))) from (doloop4904 (add1 i4906))')
+350: guard_class(p9, 16528368, descr=<Guard0x3467730>) [p0, i1, i2, p3]
+364: p23 = getfield_gc_r(p9, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+369: guard_nonnull_class(p23, ConstClass(ForwardLink), descr=<Guard0x345dd60>) [p0, i1, i2, p3]
debug_merge_point(0, 0, '(> i4906 nqueens-iters)')
+387: i26 = int_gt(i17, 7500)
+394: guard_false(i26, descr=<Guard0x3467778>) [p0, i1, i2, p3]
debug_merge_point(0, 0, '(if if3 (begin (void) (void)) (begin (nqueens 8) (doloop4904 (add1 i4906))))')
debug_merge_point(0, 0, '(begin (nqueens 8) (doloop4904 (add1 i4906)))')
debug_merge_point(0, 0, '(nqueens 8)')
+400: p27 = getfield_gc_r(p11, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([_1-to (lambda (n4845) (let ([loop (lambda (i l) (let ([if0 (= i 0)]) (if if0 l (let ([AppRand0 (- i 1)]) (loop AppRand0 (cons i l))))))]) (loop n4845 '())))]) (letrec ([(my-try) (lambda (x y z) (if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))))] [(ok?) (lambda (row dist placed) (if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))))]) (let ([AppRand9 (_1-to n)]) (CellRef(my-try) AppRand9 '() '()))))')
debug_merge_point(0, 0, '(lambda (n4845) (let ([loop (lambda (i l) (let ([if0 (= i 0)]) (if if0 l (let ([AppRand0 (- i 1)]) (loop AppRand0 (cons i l))))))]) (loop n4845 '())))')
debug_merge_point(0, 0, '(letrec ([(my-try) (lambda (x y z) (if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))))] [(ok?) (lambda (row dist placed) (if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))))]) (let ([AppRand9 (_1-to n)]) (CellRef(my-try) AppRand9 '() '())))')
debug_merge_point(0, 0, '(lambda (x y z) (if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))))')
debug_merge_point(0, 0, '(lambda (row dist placed) (if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))))')
debug_merge_point(0, 0, '(let ([AppRand9 (_1-to n)]) (CellRef(my-try) AppRand9 '() '()))')
debug_merge_point(0, 0, '(_1-to n)')
debug_merge_point(0, 0, '(let ([loop (lambda (i l) (let ([if0 (= i 0)]) (if if0 l (let ([AppRand0 (- i 1)]) (loop AppRand0 (cons i l))))))]) (loop n4845 '()))')
debug_merge_point(0, 0, '(lambda (i l) (let ([if0 (= i 0)]) (if if0 l (let ([AppRand0 (- i 1)]) (loop AppRand0 (cons i l))))))')
debug_merge_point(0, 0, '(loop n4845 '())')
debug_merge_point(0, 0, '(let ([if0 (= i 0)]) (if if0 l (let ([AppRand0 (- i 1)]) (loop AppRand0 (cons i l))))) from (loop n4845 '())')
debug_merge_point(0, 0, '(= i 0)')
debug_merge_point(0, 0, '(if if0 l (let ([AppRand0 (- i 1)]) (loop AppRand0 (cons i l))))')
debug_merge_point(0, 0, '(let ([AppRand0 (- i 1)]) (loop AppRand0 (cons i l)))')
debug_merge_point(0, 0, '(- i 1)')
debug_merge_point(0, 0, '(loop AppRand0 (cons i l))')
debug_merge_point(0, 0, '(let ([if0 (= i 0)]) (if if0 l (let ([AppRand0 (- i 1)]) (loop AppRand0 (cons i l))))) from (loop AppRand0 (cons i l))')
+400: p28 = new_with_vtable(descr=<SizeDescr 32>)
+444: p29 = new_with_vtable(descr=<SizeDescr 24>)
+455: setfield_gc(p29, 8, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+470: setfield_gc(p29, ConstPtr(ptr31), descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+474: p32 = new_with_vtable(descr=<SizeDescr 40>)
+485: p33 = new_with_vtable(descr=<SizeDescr 32>)
+503: setfield_gc(p33, ConstPtr(ptr34), descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+507: p35 = new_with_vtable(descr=<SizeDescr 16>)
+518: p36 = new_with_vtable(descr=<SizeDescr 40>)
+536: setfield_gc(p36, ConstPtr(ptr37), descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+547: setfield_gc(p36, ConstPtr(ptr38), descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+551: p39 = new_with_vtable(descr=<SizeDescr 16>)
+562: p40 = new_with_vtable(descr=<SizeDescr 32>)
+580: setfield_gc(p40, ConstPtr(ptr41), descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+591: setfield_gc(p40, ConstPtr(ptr42), descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+595: setfield_gc(p40, p39, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize1.inst__vals_0 24 pure>)
+599: setfield_gc(p39, p40, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+603: setfield_gc(p36, p39, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+607: setfield_gc(p36, p35, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+611: setfield_gc(p35, p36, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+615: setfield_gc(p33, p35, descr=<FieldP rpython.tool.pairtype.ConsEnvSize2.inst__vals_0 16 pure>)
+619: setfield_gc(p33, p39, descr=<FieldP rpython.tool.pairtype.ConsEnvSize2.inst__vals_1 24 pure>)
+623: p43 = new_with_vtable(descr=<SizeDescr 40>)
+634: setfield_gc(p43, p23, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+638: p44 = new_with_vtable(descr=<SizeDescr 24>)
+649: setfield_gc(p44, p11, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+653: setfield_gc(p44, i17, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+657: setfield_gc(p43, p44, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+661: setfield_gc(p43, p9, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+665: setfield_gc(p43, ConstPtr(ptr45), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+669: setfield_gc(p32, p33, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+673: setfield_gc(p32, p43, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+684: setfield_gc(p28, ConstPtr(ptr46), descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+695: setfield_gc(p32, p23, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+699: setfield_gc(p28, 7, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed10.inst_vals_fixed_0 16 pure>)
+707: setfield_gc(p28, p29, descr=<FieldP pycket.small_list.ConsEnvSize2Fixed10.inst_w_val1 24 pure>)
+718: setfield_gc(p32, ConstPtr(ptr48), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+722: jump(p28, p32, descr=TargetToken(54105360))
+752: --end of the loop--
[86a8077a00d1a6] jit-log-opt-bridge}
[86a8077b0f61e3] {jit-backend
[86a8077b184306] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b
[86a8077b18de8b] jit-backend-dump}
[86a8077b19a212] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b0704 +0  26000000
[86a8077b19b7e3] jit-backend-dump}
[86a8077b19fc14] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b0a65 +0  26000000
[86a8077b1a0aeb] jit-backend-dump}
[86a8077b1a4105] {jit-backend-addr
bridge out of Guard 0x3466d10 has address 0x7fb5ed3b0700 to 0x7fb5ed3b0a60
       gc table: 0x7fb5ed3b0610
    jump target: 0x7fb5ed3b0700
         resops: 0x7fb5ed3b070e
       failures: 0x7fb5ed3b0a60
            end: 0x7fb5ed3b0d55
[86a8077b1a6779] jit-backend-addr}
[86a8077b1a9fba] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b071c +0  B1030000
[86a8077b1aadcd] jit-backend-dump}
[86a8077b1ae247] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b0737 +0  B2030000
[86a8077b1aefb5] jit-backend-dump}
[86a8077b1b2240] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b074d +0  B8030000
[86a8077b1b2f65] jit-backend-dump}
[86a8077b1b628f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b0769 +0  B8030000
[86a8077b1b6f79] jit-backend-dump}
[86a8077b1ba260] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b077d +0  C0030000
[86a8077b1baf82] jit-backend-dump}
[86a8077b1be219] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b078f +0  CA030000
[86a8077b1bef6b] jit-backend-dump}
[86a8077b1c21b0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b07a2 +0  D3030000
[86a8077b1c2eea] jit-backend-dump}
[86a8077b1c608c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b07b4 +0  DD030000
[86a8077b1c6deb] jit-backend-dump}
[86a8077b1ca082] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b07c1 +0  EC030000
[86a8077b1cadaa] jit-backend-dump}
[86a8077b1cdf83] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b07d9 +0  F0030000
[86a8077b1cecba] jit-backend-dump}
[86a8077b1d209c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b07f3 +0  F2030000
[86a8077b1d2db7] jit-backend-dump}
[86a8077b1d5fa9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b0807 +0  FA030000
[86a8077b1d6ce6] jit-backend-dump}
[86a8077b1d9f5c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b081e +0  FF030000
[86a8077b1daca8] jit-backend-dump}
[86a8077b1ddeb9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b08a3 +0  96030000
[86a8077b1debb9] jit-backend-dump}
[86a8077b1e1dee] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b08b5 +0  A0030000
[86a8077b1e2b0c] jit-backend-dump}
[86a8077b1e5d45] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b08d7 +0  9A030000
[86a8077b1e6a82] jit-backend-dump}
[86a8077b1e9ca8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b08e8 +0  A5030000
[86a8077b1ea9ba] jit-backend-dump}
[86a8077b1edc05] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b08f1 +0  B8030000
[86a8077b1ee917] jit-backend-dump}
[86a8077b1f1b21] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b0902 +0  C3030000
[86a8077b1f281e] jit-backend-dump}
[86a8077b1f5a0d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b090b +0  D6030000
[86a8077b1f6729] jit-backend-dump}
[86a8077b1f9952] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b0918 +0  E5030000
[86a8077b1fa67c] jit-backend-dump}
[86a8077b1fd884] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b0921 +0  F8030000
[86a8077b1fe599] jit-backend-dump}
[86a8077b2017fc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b0938 +0  FD030000
[86a8077b20597a] jit-backend-dump}
[86a8077b209cc5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3aedee +0  0E190000
[86a8077b20aa30] jit-backend-dump}
[86a8077b20f111] jit-backend}
[86a8077b21306b] {jit-log-opt-bridge
# bridge out of Guard 0x3466d10 with 114 ops
[p0, i1, i2, p3, p4, p5]
+262: guard_not_invalidated(descr=<Guard0x345ddc0>) [p0, i1, i2, p3, p4, p5]
+262: i7 = int_eq(i2, 0)
+266: guard_true(i7, descr=<Guard0x3467808>) [p0, i1, i2, p3, p4, p5]
debug_merge_point(0, 0, '(if if0 l (let ([AppRand0 (- i 1)]) (loop AppRand0 (cons i l))))')
debug_merge_point(0, 0, 'l')
+272: p8 = getfield_gc_r(p4, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+290: guard_value(p8, ConstPtr(ptr9), descr=<Guard0x3467850>) [p0, i1, i2, p3, p4, p5]
+299: p10 = getfield_gc_r(p4, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+303: p11 = getfield_gc_r(p4, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(CellRef(my-try) AppRand9 '() '())')
+307: guard_class(p10, 16500016, descr=<Guard0x3467898>) [p0, i1, i2, p3, p4, p5]
+321: p13 = getfield_gc_r(p10, descr=<FieldP rpython.tool.pairtype.ConsEnvSize2.inst__vals_0 16 pure>)
+325: p14 = getfield_gc_r(p13, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+330: guard_nonnull_class(p14, 16478072, descr=<Guard0x345de20>) [p0, i1, i2, p3, p4, p5]
+349: p16 = getfield_gc_r(p14, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+360: guard_value(p16, ConstPtr(ptr17), descr=<Guard0x34678e0>) [p0, i1, i2, p3, p4, p5]
+369: p18 = getfield_gc_r(p10, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+373: guard_class(p18, 16499664, descr=<Guard0x3467928>) [p0, i1, i2, p3, p4, p5]
+387: p20 = getfield_gc_r(p18, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+392: guard_class(p20, 16504944, descr=<Guard0x3467970>) [p0, i1, i2, p3, p4, p5]
+406: p22 = getfield_gc_r(p20, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+410: guard_class(p22, 16505296, descr=<Guard0x34679b8>) [p0, i1, i2, p3, p4, p5]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) AppRand9 '() '())')
debug_merge_point(0, 0, '(let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))')
+424: guard_class(p11, 16435208, descr=<Guard0x3467a00>) [p0, i1, i2, p3, p4, p5]
+437: p25 = getfield_gc_r(p11, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+441: guard_nonnull_class(p25, ConstClass(ForwardLink), descr=<Guard0x345de80>) [p0, i1, i2, p3, p4, p5]
debug_merge_point(0, 0, '(CellRef(ok?) (car x) 1 z)')
+461: p27 = getfield_gc_r(p14, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+465: p28 = getfield_gc_r(p27, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+469: guard_nonnull_class(p28, 16477696, descr=<Guard0x345dee0>) [p0, i1, i2, p3, p4, p5]
+487: p30 = getfield_gc_r(p28, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+498: guard_value(p30, ConstPtr(ptr31), descr=<Guard0x3467a48>) [p0, i1, i2, p3, p4, p5]
+507: p32 = getfield_gc_r(p14, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)')
debug_merge_point(0, 0, '#t')
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (CellRef(ok?) (car x) 1 z)')
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '(let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z)))')
debug_merge_point(0, 0, '(append (cdr x) y)')
+511: guard_nonnull_class(p0, 16471056, descr=<Guard0x345df40>) [p0, i1, i2, p3, p4, p5]
+537: p36 = call_r(ConstClass(append_two), p0, ConstPtr(ptr35), descr=<Callr 8 rr EF=5>)
+648: guard_no_exception(descr=<Guard0x345dfa0>) [p36, p11, p14, p25, p0, i1, None, None, None, None]
+663: guard_nonnull_class(p36, 16471056, descr=<Guard0x3480020>) [p36, p11, p14, p25, p0, i1, None, None, None, None]
debug_merge_point(0, 0, '(CellRef(my-try) AppRand1 '() (cons (car x) z))')
+681: p39 = getfield_gc_r(p14, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+692: p40 = getfield_gc_r(p39, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+696: guard_nonnull_class(p40, 16478072, descr=<Guard0x3480080>) [p36, p11, p14, p25, p0, i1, None, None, None, None]
+715: p42 = getfield_gc_r(p40, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+719: guard_value(p42, ConstPtr(ptr43), descr=<Guard0x3467a90>) [p36, p11, p14, p25, p0, i1, None, None, None, None]
+732: i44 = instance_ptr_eq(p14, p40)
+735: guard_true(i44, descr=<Guard0x3467ad8>) [p36, p11, p14, p25, p0, i1, None, None, None, None]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) AppRand1 '() (cons (car x) z))')
debug_merge_point(0, 0, '(let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))')
debug_merge_point(0, 0, '(CellRef(ok?) (car x) 1 z)')
+741: i45 = getfield_gc_i(p36, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)')
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
debug_merge_point(0, 0, '(+ row dist)')
+745: i47 = int_add_ovf(i45, 1)
+752: guard_no_overflow(descr=<Guard0x3467b20>) [p36, p11, p14, p25, p0, i1, None, None, None, None]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+758: i48 = int_eq(i1, i47)
+761: guard_false(i48, descr=<Guard0x3467b68>) [p36, p11, p14, p25, p0, i1, None, None, None, None]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '(let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)))')
debug_merge_point(0, 0, '(- row dist)')
+767: i50 = int_sub_ovf(i45, 1)
+774: guard_no_overflow(descr=<Guard0x3467bb0>) [p36, p11, p14, p25, p0, i1, None, None, None, None]
debug_merge_point(0, 0, '(let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand6)')
+780: i51 = int_eq(i1, i50)
+783: guard_true(i51, descr=<Guard0x3467bf8>) [p36, p11, p14, p25, p0, i1, None, None, None, None]
debug_merge_point(0, 0, '(if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f)')
debug_merge_point(0, 0, '#f')
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand6)')
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand6)')
+789: p52 = getfield_gc_r(p36, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+793: guard_nonnull_class(p52, 16471056, descr=<Guard0x34800e0>) [p36, p11, p14, p25, p0, i1, None, None, None, None]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+812: p54 = new_with_vtable(descr=<SizeDescr 40>)
+856: p55 = new_with_vtable(descr=<SizeDescr 24>)
+867: setfield_gc(p55, i45, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+871: setfield_gc(p55, ConstPtr(ptr56), descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+882: p57 = new_with_vtable(descr=<SizeDescr 24>)
+893: setfield_gc(p57, i1, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+897: setfield_gc(p57, ConstPtr(ptr58), descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+901: p59 = new_with_vtable(descr=<SizeDescr 48>)
+912: p60 = new_with_vtable(descr=<SizeDescr 40>)
+924: setfield_gc(p60, p25, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+936: p61 = new_with_vtable(descr=<SizeDescr 40>)
+948: setfield_gc(p61, p14, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+952: p62 = new_with_vtable(descr=<SizeDescr 24>)
+963: setfield_gc(p62, i1, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+967: setfield_gc(p62, p0, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+978: setfield_gc(p61, p62, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+982: setfield_gc(p61, ConstPtr(ptr35), descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+986: setfield_gc(p61, ConstPtr(ptr58), descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+990: setfield_gc(p60, p61, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+995: setfield_gc(p60, p11, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1014: setfield_gc(p60, ConstPtr(ptr63), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+1026: setfield_gc(p59, ConstPtr(ptr64), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+1030: setfield_gc(p59, p32, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1041: setfield_gc(p59, p60, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1045: setfield_gc(p54, p14, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1049: setfield_gc(p59, p25, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1053: setfield_gc(p54, p52, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+1057: setfield_gc(p54, p55, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+1061: setfield_gc(p54, p57, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+1065: setfield_gc(p59, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+1073: jump(p54, p59, descr=TargetToken(53317888))
+1104: --end of the loop--
[86a8077b2725c7] jit-log-opt-bridge}
[86a8077bcbac61] {jit-backend
[86a8077bd37483] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b0f
[86a8077bd4043d] jit-backend-dump}
[86a8077bd4be9a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b1004 +0  26000000
[86a8077bd4d380] jit-backend-dump}
[86a8077bd5165d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b1325 +0  26000000
[86a8077bd52764] jit-backend-dump}
[86a8077bd56081] {jit-backend-addr
bridge out of Guard 0x3466f50 has address 0x7fb5ed3b1000 to 0x7fb5ed3b1320
       gc table: 0x7fb5ed3b0f10
    jump target: 0x7fb5ed3b1000
         resops: 0x7fb5ed3b100e
       failures: 0x7fb5ed3b1320
            end: 0x7fb5ed3b1615
[86a8077bd5859e] jit-backend-addr}
[86a8077bd5bed6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b101e +0  53030000
[86a8077bd5cd33] jit-backend-dump}
[86a8077bd6022e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b102b +0  62030000
[86a8077bd60fa2] jit-backend-dump}
[86a8077bd64340] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b103b +0  6E030000
[86a8077bd65062] jit-backend-dump}
[86a8077bd682c8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b1048 +0  7D030000
[86a8077bd69002] jit-backend-dump}
[86a8077bd6c22e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b105c +0  85030000
[86a8077bd6cf59] jit-backend-dump}
[86a8077bd704ea] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b1071 +0  A8030000
[86a8077bd7127c] jit-backend-dump}
[86a8077bd74658] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b1088 +0  AD030000
[86a8077bd753ad] jit-backend-dump}
[86a8077bd78711] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b1096 +0  BB030000
[86a8077bd79479] jit-backend-dump}
[86a8077bd7c769] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b10ae +0  BF030000
[86a8077bd7d429] jit-backend-dump}
[86a8077bd8066a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b10c5 +0  C4030000
[86a8077bd8134f] jit-backend-dump}
[86a8077bd845a9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b10d3 +0  D2030000
[86a8077bd8524a] jit-backend-dump}
[86a8077bd885ab] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b114e +0  73030000
[86a8077bd892b1] jit-backend-dump}
[86a8077bd8c6ee] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b1160 +0  7D030000
[86a8077bd8d453] jit-backend-dump}
[86a8077bd90712] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b1179 +0  80030000
[86a8077bd91412] jit-backend-dump}
[86a8077bd94644] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b1195 +0  80030000
[86a8077bd95344] jit-backend-dump}
[86a8077bd9853f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b11b7 +0  7A030000
[86a8077bd9926d] jit-backend-dump}
[86a8077bd9c608] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b11cb +0  82030000
[86a8077bd9d336] jit-backend-dump}
[86a8077bda06cb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b11d4 +0  95030000
[86a8077bda142d] jit-backend-dump}
[86a8077bda46f2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b11ef +0  96030000
[86a8077bda5401] jit-backend-dump}
[86a8077bda8630] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b1207 +0  9A030000
[86a8077bda9352] jit-backend-dump}
[86a8077bdac5e9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b1219 +0  A4030000
[86a8077bdad2f2] jit-backend-dump}
[86a8077bdb057a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b1222 +0  B7030000
[86a8077bdb12b1] jit-backend-dump}
[86a8077bdb45a0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b1239 +0  BC030000
[86a8077bdb52de] jit-backend-dump}
[86a8077bdb87f7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3af349 +0  B31C0000
[86a8077bdb94d2] jit-backend-dump}
[86a8077bdbd699] jit-backend}
[86a8077bdc1554] {jit-log-opt-bridge
# bridge out of Guard 0x3466f50 with 93 ops
[p0, p1]
+262: guard_class(p1, 16500368, descr=<Guard0x34803e0>) [p0, p1]
+274: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+278: guard_nonnull(p3, descr=<Guard0x3488068>) [p0, p1]
+294: i5 = instance_ptr_eq(p3, ConstPtr(ptr4))
+297: guard_true(i5, descr=<Guard0x3488020>) [p0, p1]
debug_merge_point(0, 0, '#t')
+303: guard_class(p0, 16435920, descr=<Guard0x3467fa0>) [p0, p1]
+316: p7 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+327: guard_value(p7, ConstPtr(ptr8), descr=<Guard0x3467f58>) [p0, p1]
+336: p9 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+340: guard_not_invalidated(descr=<Guard0x3467f10>) [p0, p1]
+340: p10 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (CellRef(ok?) (car x) 1 z)')
+344: guard_class(p10, 16437216, descr=<Guard0x3467ec8>) [p0, p1]
+357: p12 = getfield_gc_r(p10, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+361: guard_nonnull_class(p12, ConstClass(ForwardLink), descr=<Guard0x3480500>) [p0, p1]
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '(let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z)))')
debug_merge_point(0, 0, '(append (cdr x) y)')
+380: guard_class(p9, 16500368, descr=<Guard0x3467e80>) [p0, p1]
+394: p15 = getfield_gc_r(p9, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+399: guard_nonnull_class(p15, 16471056, descr=<Guard0x34804a0>) [p0, p1]
+418: p17 = getfield_gc_r(p15, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+422: guard_nonnull_class(p17, 16616448, descr=<Guard0x3480440>) [p0, p1]
+441: p19 = getfield_gc_r(p9, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+446: guard_nonnull(p19, descr=<Guard0x3467e38>) [p0, p1]
+455: p21 = call_r(ConstClass(append_two), p17, p19, descr=<Callr 8 rr EF=5>)
+563: guard_no_exception(descr=<Guard0x3480200>) [p9, p21, p19, p17, p10, p12]
+578: guard_nonnull_class(p21, 16471056, descr=<Guard0x3480380>) [p9, p21, p19, p17, p10, p12]
debug_merge_point(0, 0, '(CellRef(my-try) AppRand1 '() (cons (car x) z))')
+596: p23 = getfield_gc_r(p9, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+607: guard_class(p23, 16478072, descr=<Guard0x3467df0>) [p9, p21, p19, p17, p10, p12]
+621: p25 = getfield_gc_r(p23, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+626: p26 = getfield_gc_r(p25, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+630: guard_nonnull_class(p26, 16478072, descr=<Guard0x3480320>) [p9, p21, p19, p17, p10, p12]
+649: i28 = getfield_gc_i(p15, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+660: p29 = getfield_gc_r(p9, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+664: guard_nonnull_class(p29, 16616448, descr=<Guard0x34802c0>) [p9, p21, p19, p17, p10, p12]
+683: p31 = getfield_gc_r(p26, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+694: guard_value(p31, ConstPtr(ptr32), descr=<Guard0x3467da8>) [p9, p21, p19, p17, p10, p12]
+703: i33 = instance_ptr_eq(p23, p26)
+706: guard_true(i33, descr=<Guard0x3467d60>) [p9, p21, p19, p17, p10, p12]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) AppRand1 '() (cons (car x) z))')
debug_merge_point(0, 0, '(let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))')
debug_merge_point(0, 0, '(CellRef(ok?) (car x) 1 z)')
+712: p34 = getfield_gc_r(p23, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+717: p35 = getfield_gc_r(p34, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+721: guard_nonnull_class(p35, 16477696, descr=<Guard0x3480260>) [p9, p21, p19, p17, p10, p12]
+739: i37 = getfield_gc_i(p21, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+743: p38 = getfield_gc_r(p35, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+754: guard_value(p38, ConstPtr(ptr39), descr=<Guard0x3467d18>) [p9, p21, p19, p17, p10, p12]
+763: p40 = getfield_gc_r(p23, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)')
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
debug_merge_point(0, 0, '(+ row dist)')
+768: i42 = int_add_ovf(i37, 1)
+775: guard_no_overflow(descr=<Guard0x34880f8>) [p9, p21, p19, p17, p10, p12]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+781: i43 = int_eq(i28, i42)
+784: guard_true(i43, descr=<Guard0x3488140>) [p9, p21, p19, p17, p10, p12]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '#f')
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand4)')
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand4)')
+790: p44 = getfield_gc_r(p21, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+794: guard_nonnull_class(p44, 16471056, descr=<Guard0x3480560>) [p9, p21, p19, p17, p10, p12]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+813: p46 = new_with_vtable(descr=<SizeDescr 40>)
+857: p47 = new_with_vtable(descr=<SizeDescr 24>)
+868: setfield_gc(p47, i37, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+872: setfield_gc(p47, ConstPtr(ptr48), descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+883: p49 = new_with_vtable(descr=<SizeDescr 24>)
+894: setfield_gc(p49, i28, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+898: setfield_gc(p49, p29, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+902: p50 = new_with_vtable(descr=<SizeDescr 48>)
+913: p51 = new_with_vtable(descr=<SizeDescr 40>)
+924: setfield_gc(p51, p12, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+935: setfield_gc(p51, p9, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+939: setfield_gc(p51, p10, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+957: setfield_gc(p51, ConstPtr(ptr52), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+961: setfield_gc(p46, p49, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+972: setfield_gc(p50, ConstPtr(ptr53), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+976: setfield_gc(p50, p40, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+980: setfield_gc(p50, p51, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+984: setfield_gc(p50, p12, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+988: setfield_gc(p46, p44, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+992: setfield_gc(p46, p47, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+996: setfield_gc(p46, p23, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1000: setfield_gc(p50, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+1008: jump(p46, p50, descr=TargetToken(53317888))
+1040: --end of the loop--
[86a8077be09f7a] jit-log-opt-bridge}
[86a8077c1744d1] {jit-backend
[86a8077c2018ba] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b17b0 +0  0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8C0203000048FF042500AD4B038139D00C01000F85000000004C8B79104983FF01720741813F509A00000F85000000004C8B3500FFFFFF4D39F70F8400000000813B201600000F85000000004C8B6B084983FD01720841817D00900F00000F85000000004C8B610841813C24B8B500000F85000000004D8B5424184D8B4A084983F901720741813940B400000F85000000004D8B57084C8B41204983F801720741813840D202000F8500000000498B79104C8B0DB7FEFFFF4C39CF0F85000000004D8B4C24084D39F00F8500000000498B7F104883FF017206813F40D202000F85000000004C8B79184D85FF0F840000000048899D3001000048898D380100004C89B5400100004C89AD480100004C89A5500100004C8985580100004C898D600100004889BD680100004C89BD700100004C8995780100004C89FE49BB08173BEDB57F00004C895D2041BB5062630041FFD3488B0C258893F900488B69F8F64504010F85C501000048C745200000000048833C2540B35F01000F85000000004883F80172068138509A00000F8500000000488B9D50010000488B4B204C8B71084983FE01720741813EB8B500000F8500000000498B4E104C8B2DF9FDFFFF4C39E90F85000000004C39F30F85000000004C8B70084D89F54983C6010F80000000004C39B5780100000F85000000004C8B70104983FE01720741813E509A00000F8500000000488B0C25F091F900488D91B0000000483B14251092F9000F871D01000048891425F091F90048C701D00C0100488D512848C702509A00004C896A084C8BAD400100004C896A104C8D6A1849C74500509A0000488B857801000049894508488B855801000049894510498D451848C700201600004C8D603049C70424101100004C8B85480100004D894424084C8B8D380100004D894C24104C8B8D300100004D894C24184C8B0D38FDFFFF4D894C24204C8971104C894008488959084C89692048895118488B9560010000488950104C8960184C8B2511FDFFFF4C89602048C740280000000048898D300100004889853801000049BB506239EDB57F000041FFE3669048C7442408FFFFFF0049BB28163BEDB57F00004C895D204D8D9BC80CFEFF41FFD3E9D8FCFFFF49BB702239EDB57F000041FFD3E929FEFFFF49BB98173BEDB57F00004C895D204D8D9B5813FEFF41FFD3E9CEFEFFFFFF35C5FBFFFF49BB38163BEDB57F000041534D8D9BC809FEFF41FFE3FF35B1FBFFFF49BB48163BEDB57F000041534D8D9BB809FEFF41FFE3FF35A5FBFFFF49BB58163BEDB57F000041534D8D9BA809FEFF41FFE3FF3591FBFFFF49BB68163BEDB57F000041534D8D9B9809FEFF41FFE3FF357DFBFFFF49BB78163BEDB57F000041534D8D9B8809FEFF41FFE3FF3569FBFFFF49BB88163BEDB57F000041534D8D9B7809FEFF41FFE3FF3555FBFFFF49BB98163BEDB57F000041534D8D9B6809FEFF41FFE3FF3541FBFFFF49BBA8163BEDB57F000041534D8D9B5809FEFF41FFE3FF3535FBFFFF49BBB8163BEDB57F000041534D8D9B4809FEFF41FFE3FF3521FBFFFF49BBC8163BEDB57F000041534D8D9B3809FEFF41FFE3FF350DFBFFFF49BBD8163BEDB57F000041534D8D9B2809FEFF41FFE3FF35F9FAFFFF49BBE8163BEDB57F000041534D8D9B1809FEFF41FFE3FF35E5FAFFFF49BBF8163BEDB57F000041534D8D9B0809FEFF41FFE3FF35D1FAFFFF49BB18173BEDB57F000041534D8D9B9809FEFF41FFE3FF35BDFAFFFF49BB28173BEDB57F000041534D8D9BD808FEFF41FFE3FF35A9FAFFFF49BB38173BEDB57F000041534D8D9BC808FEFF41FFE3FF359DFAFFFF49BB48173BEDB57F000041534D8D9BB808FEFF41FFE3FF3589FAFFFF49BB58173BEDB57F000041534D8D9BA808FEFF41FFE3FF3575FAFFFF49BB68173BEDB57F000041534D8D9B9808FEFF41FFE3FF3561FAFFFF49BB78173BEDB57F000041534D8D9B8808FEFF41FFE3FF354DFAFFFF49BB88173BEDB57F000041534D8D9B7808FEFF41FFE3
[86a8077c20a219] jit-backend-dump}
[86a8077c2159f6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b1884 +0  26000000
[86a8077c216de7] jit-backend-dump}
[86a8077c21ae9b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b1b95 +0  26000000
[86a8077c21bd66] jit-backend-dump}
[86a8077c21f172] {jit-backend-addr
bridge out of Guard 0x345c3e0 has address 0x7fb5ed3b1880 to 0x7fb5ed3b1b90
       gc table: 0x7fb5ed3b17b0
    jump target: 0x7fb5ed3b1880
         resops: 0x7fb5ed3b188e
       failures: 0x7fb5ed3b1b90
            end: 0x7fb5ed3b1e31
[86a8077c2214a8] jit-backend-addr}
[86a8077c224afd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b189e +0  43030000
[86a8077c225938] jit-backend-dump}
[86a8077c228dd1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b18b5 +0  48030000
[86a8077c229b4e] jit-backend-dump}
[86a8077c22cf26] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b18c5 +0  54030000
[86a8077c22dca1] jit-backend-dump}
[86a8077c230f3b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b18d1 +0  64030000
[86a8077c231c47] jit-backend-dump}
[86a8077c234f49] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b18e9 +0  68030000
[86a8077c235c4f] jit-backend-dump}
[86a8077c238eb5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b18fb +0  72030000
[86a8077c239bce] jit-backend-dump}
[86a8077c23cdbd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b1917 +0  72030000
[86a8077c23dab0] jit-backend-dump}
[86a8077c240d20] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b1932 +0  73030000
[86a8077c241a54] jit-backend-dump}
[86a8077c244ccc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b1946 +0  7B030000
[86a8077c2459e2] jit-backend-dump}
[86a8077c248c94] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b1954 +0  89030000
[86a8077c24997c] jit-backend-dump}
[86a8077c24d082] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b196a +0  AB030000
[86a8077c24ddb9] jit-backend-dump}
[86a8077c251132] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b1977 +0  BA030000
[86a8077c251e63] jit-backend-dump}
[86a8077c2550bd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b1a04 +0  49030000
[86a8077c255d8f] jit-backend-dump}
[86a8077c258f8d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b1a16 +0  53030000
[86a8077c259c59] jit-backend-dump}
[86a8077c25ce4e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b1a38 +0  4D030000
[86a8077c25db14] jit-backend-dump}
[86a8077c260d15] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b1a4c +0  55030000
[86a8077c2619d8] jit-backend-dump}
[86a8077c264c4a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b1a55 +0  68030000
[86a8077c265926] jit-backend-dump}
[86a8077c268b39] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b1a66 +0  73030000
[86a8077c269802] jit-backend-dump}
[86a8077c26ca50] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b1a73 +0  82030000
[86a8077c26d71c] jit-backend-dump}
[86a8077c27095a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3b1a8a +0  87030000
[86a8077c271642] jit-backend-dump}
[86a8077c274af3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7fb5ed3ac5ea +0  92520000
[86a8077c2757b3] jit-backend-dump}
[86a8077c279879] jit-backend}
[86a8077c27d67c] {jit-log-opt-bridge
# bridge out of Guard 0x345c3e0 with 90 ops
[p0, p1]
+230: guard_class(p1, 16500368, descr=<Guard0x34805c0>) [p0, p1]
+242: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+246: guard_nonnull_class(p3, 16471056, descr=<Guard0x3480620>) [p0, p1]
+272: i6 = instance_ptr_eq(p3, ConstPtr(ptr5))
+275: guard_false(i6, descr=<Guard0x3488188>) [p0, p1]
debug_merge_point(0, 0, '(let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))')
+281: guard_class(p0, 16437216, descr=<Guard0x34881d0>) [p0, p1]
+293: p8 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+297: guard_nonnull_class(p8, ConstClass(ForwardLink), descr=<Guard0x3480680>) [p0, p1]
debug_merge_point(0, 0, '(CellRef(ok?) (car x) 1 z)')
+317: p10 = getfield_gc_r(p1, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+321: guard_class(p10, 16478072, descr=<Guard0x3488218>) [p0, p1]
+335: p12 = getfield_gc_r(p10, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+340: p13 = getfield_gc_r(p12, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+344: guard_nonnull_class(p13, 16477696, descr=<Guard0x34806e0>) [p0, p1]
+363: i15 = getfield_gc_i(p3, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+367: p16 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+371: guard_nonnull_class(p16, 16616448, descr=<Guard0x3480740>) [p0, p1]
+390: p18 = getfield_gc_r(p13, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+401: guard_value(p18, ConstPtr(ptr19), descr=<Guard0x3488260>) [p0, p1]
+410: p20 = getfield_gc_r(p10, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)')
+415: i22 = instance_ptr_eq(p16, ConstPtr(ptr21))
+418: guard_true(i22, descr=<Guard0x34882a8>) [p0, p1]
debug_merge_point(0, 0, '#t')
+424: guard_not_invalidated(descr=<Guard0x34882f0>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (CellRef(ok?) (car x) 1 z)')
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '(let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z)))')
debug_merge_point(0, 0, '(append (cdr x) y)')
+424: p23 = getfield_gc_r(p3, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+428: guard_nonnull_class(p23, 16616448, descr=<Guard0x34807a0>) [p0, p1]
+446: p25 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+450: guard_nonnull(p25, descr=<Guard0x3488338>) [p0, p1]
+459: p27 = call_r(ConstClass(append_two), p23, p25, descr=<Callr 8 rr EF=5>)
+585: guard_no_exception(descr=<Guard0x3480800>) [p1, p27, p25, p23, p0, p8]
+600: guard_nonnull_class(p27, 16471056, descr=<Guard0x3480860>) [p1, p27, p25, p23, p0, p8]
debug_merge_point(0, 0, '(CellRef(my-try) AppRand1 '() (cons (car x) z))')
+618: p29 = getfield_gc_r(p10, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+629: p30 = getfield_gc_r(p29, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+633: guard_nonnull_class(p30, 16478072, descr=<Guard0x34808c0>) [p1, p27, p25, p23, p0, p8]
+652: p32 = getfield_gc_r(p30, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+663: guard_value(p32, ConstPtr(ptr33), descr=<Guard0x3488380>) [p1, p27, p25, p23, p0, p8]
+672: i34 = instance_ptr_eq(p10, p30)
+675: guard_true(i34, descr=<Guard0x34883c8>) [p1, p27, p25, p23, p0, p8]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) AppRand1 '() (cons (car x) z))')
debug_merge_point(0, 0, '(let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))')
debug_merge_point(0, 0, '(CellRef(ok?) (car x) 1 z)')
+681: i35 = getfield_gc_i(p27, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
debug_merge_point(0, 0, '(if (null? placed) #t (let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))) from (CellRef(ok?) (car x) 1 z)')
debug_merge_point(0, 0, '(let ([AppRand4 (+ row dist)]) (let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)))')
debug_merge_point(0, 0, '(+ row dist)')
+685: i37 = int_add_ovf(i35, 1)
+692: guard_no_overflow(descr=<Guard0x3488410>) [p1, p27, p25, p23, p0, p8]
debug_merge_point(0, 0, '(let ([AppRand5 (= (car placed) AppRand4)]) (if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f))')
debug_merge_point(0, 0, '(= (car placed) AppRand4)')
+698: i38 = int_eq(i15, i37)
+705: guard_true(i38, descr=<Guard0x3488458>) [p1, p27, p25, p23, p0, p8]
debug_merge_point(0, 0, '(if (not AppRand5) (let ([AppRand6 (- row dist)]) (let ([AppRand7 (= (car placed) AppRand6)]) (if (not AppRand7) (let ([AppRand8 (+ dist 1)]) (CellRef(ok?) row AppRand8 (cdr placed))) #f))) #f)')
debug_merge_point(0, 0, '#f')
debug_merge_point(0, 0, '(let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)) from (= (car placed) AppRand4)')
debug_merge_point(0, 0, '(if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)')
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(CellRef(my-try) (cdr x) (cons (car x) y) z) from (= (car placed) AppRand4)')
+711: p39 = getfield_gc_r(p27, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+715: guard_nonnull_class(p39, 16471056, descr=<Guard0x3480920>) [p1, p27, p25, p23, p0, p8]
debug_merge_point(0, 0, '(if (null? x) (if (null? y) (begin (if trace? (begin (write z) (newline)) (void)) 1) 0) (let ([if1 (CellRef(ok?) (car x) 1 z)]) (let ([AppRand2 (if if1 (let ([AppRand1 (append (cdr x) y)]) (CellRef(my-try) AppRand1 '() (cons (car x) z))) 0)][AppRand3 (CellRef(my-try) (cdr x) (cons (car x) y) z)]) (+ AppRand2 AppRand3)))) from (CellRef(my-try) (cdr x) (cons (car x) y) z)')
+734: p41 = new_with_vtable(descr=<SizeDescr 40>)
+778: p42 = new_with_vtable(descr=<SizeDescr 24>)
+789: setfield_gc(p42, i35, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+793: setfield_gc(p42, ConstPtr(ptr43), descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+804: p44 = new_with_vtable(descr=<SizeDescr 24>)
+816: setfield_gc(p44, i15, descr=<FieldS pycket.values.W_UnwrappedFixnumCons.inst__car 8 pure>)
+827: setfield_gc(p44, p16, descr=<FieldP pycket.values.W_UnwrappedFixnumCons.inst__cdr 16 pure>)
+838: p45 = new_with_vtable(descr=<SizeDescr 48>)
+849: p46 = new_with_vtable(descr=<SizeDescr 40>)
+861: setfield_gc(p46, p8, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+873: setfield_gc(p46, p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+885: setfield_gc(p46, p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+904: setfield_gc(p46, ConstPtr(ptr47), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+909: setfield_gc(p41, p39, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+913: setfield_gc(p45, p8, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+917: setfield_gc(p41, p10, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+921: setfield_gc(p41, p44, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+925: setfield_gc(p41, p42, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+929: setfield_gc(p45, p20, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+940: setfield_gc(p45, p46, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+951: setfield_gc(p45, ConstPtr(ptr48), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+955: setfield_gc(p45, 0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+963: jump(p41, p45, descr=TargetToken(53317888))
+992: --end of the loop--
[86a8077c2c6292] jit-log-opt-bridge}
[86a816dbc31018] {jit-summary
Tracing:      	79	0.052794
Backend:      	79	0.025580
TOTAL:      		25.576641
ops:             	66171
recorded ops:    	11851
  calls:         	11
guards:          	4250
opt ops:         	5941
opt guards:      	1961
opt guards shared:	1335
forcings:        	0
abort: trace too long:	0
abort: compiling:	0
abort: vable escape:	0
abort: bad loop: 	0
abort: force quasi-immut:	0
nvirtuals:       	152
nvholes:         	0
nvreused:        	1
vecopt tried:    	0
vecopt success:  	0
Total # of loops:	12
Total # of bridges:	67
Freed # of loops:	0
Freed # of bridges:	0
[86a816dbc44e7a] jit-summary}
[86a816dd2c2ed9] {jit-backend-counts
entry 1:237
TargetToken(52788128):153600100
TargetToken(52788208):877799756
entry 2:1011
bridge 52686048:150449952
entry 5:63
TargetToken(53317728):63
TargetToken(53317808):265724838
bridge 53265280:81749916
bridge 52685376:153599906
entry 9:428
TargetToken(53317888):252599767
TargetToken(53317968):123974783
bridge 52689792:120374896
bridge 53603168:123974884
entry 12:240
bridge 53606480:114374819
entry 14:71
entry 15:873
bridge 53265136:81749926
bridge 53822240:58
entry 18:139
bridge 53607992:102074852
bridge 53823968:25
entry 21:368
entry 22:66
bridge 53848064:415
bridge 53606912:107474765
bridge 53828384:62099887
bridge 53601944:112
bridge 52690560:5549987
bridge 53608280:60
bridge 53605328:36824918
bridge 53604608:37649926
bridge 52688448:31199899
bridge 53603672:23549922
bridge 52688928:54299872
bridge 53601800:195
bridge 53969216:22
entry 36:72
bridge 53825408:27074918
bridge 53607488:23399921
bridge 53848496:24524930
bridge 53829440:42
bridge 53851808:123
bridge 54008464:29399890
bridge 54005800:24374897
bridge 53605184:13199937
bridge 53849432:21
bridge 53976704:5999964
bridge 53972384:14
bridge 53853320:205
bridge 53971040:17324889
bridge 54008320:12599920
bridge 53974304:6899950
bridge 53606336:8774927
bridge 54108696:5
bridge 54193280:98
bridge 54110424:8924920
bridge 54008968:14
bridge 52687296:30
bridge 54080032:18524817
bridge 53606768:6674931
bridge 54113808:4874939
bridge 54196064:2924961
bridge 54002632:1
bridge 52690272:3524942
bridge 53823584:2474946
bridge 54323680:3524924
bridge 53605472:2099948
bridge 54324736:824976
bridge 52690080:524979
bridge 53974880:899963
bridge 53970944:449977
bridge 54076096:1424910
bridge 53824736:70
bridge 53970272:674935
bridge 54193952:1349831
entry 76:45
TargetToken(54105360):74984
TargetToken(54105440):524880
bridge 52686816:89
bridge 53851232:74949
bridge 53607704:74949
bridge 54947088:74933
bridge 54947664:0
bridge 54903776:74924
[86a816dd2d4f7d] jit-backend-counts}
