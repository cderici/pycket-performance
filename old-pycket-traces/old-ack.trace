[3e4c161480b5945] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba324000 +0  48894D50488945584889556048895D684889757048897D784C8985800000004C898D880000004C8995900000004C89A5980000004C89ADA00000004C89B5A80000004C89BDB00000008F45208F4510488B9424B0000000488B842498000000488942384889E848832C258893F900104C8BBC24880000004C8BB424800000004C8B6C24784C8B642470488B5C2468488B6C24604881C4B8000000C3
[3e4c161480cc56a] jit-backend-dump}
[3e4c1614811e248] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba3240b0 +0  48894D50488945584889556048895D684889757048897D784C8985800000004C898D880000004C8995900000004C89A5980000004C89ADA00000004C89B5A80000004C89BDB0000000488B1C2548B35F0148C7042540B35F010000000048C7042548B35F010000000048895D388F45208F4510488B9424B0000000488B842498000000488942384889E848832C258893F900104C8BBC24880000004C8BB424800000004C8B6C24784C8B642470488B5C2468488B6C24604881C4B8000000C3
[3e4c16148121c1c] jit-backend-dump}
[3e4c16148138f3e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba324180 +0  4889455848894D50488955604889757048897D784C8985800000004C898D880000004C899590000000488B7C240841BB80EFA60041FFD3488B4558488B4D50488B5560488B7570488B7D784C8B85800000004C8B8D880000004C8B9590000000C20800
[3e4c1614813b2f2] jit-backend-dump}
[3e4c16148148e86] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba3241f0 +0  4889455848894D50488955604889757048897D784C8985800000004C898D880000004C899590000000488B7C240841BB601DA80041FFD3488B442408F6400480488B4558488B4D50488B5560488B7570488B7D784C8B85800000004C8B8D880000004C8B9590000000C20800
[3e4c1614814af37] jit-backend-dump}
[3e4c1614815a185] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba324270 +0  4883EC384889442408F20F114424104889EF48895C24284C89642430488B1C2548B35F014C8B242540B35F0148C7042540B35F010000000048C7042548B35F010000000041BB80EFA60041FFD3F20F10442410488B44240848891C2548B35F014C89242540B35F01488B5C24284C8B642430488D642438C3
[3e4c1614815c26a] jit-backend-dump}
[3e4c1614816bd34] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba3242f
[3e4c16148170871] jit-backend-dump}
[3e4c1614817653f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba
[3e4c16148178933] jit-backend-dump}
[3e4c1614817d657] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba
[3e4c1614817fd57] jit-backend-dump}
[3e4c161482270c8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba
[3e4c16148229d0a] jit-backend-dump}
[3e4c1614822fe7e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba3248f0 +0  4889455848894D50488955604889757048897D784C8985800000004C898D880000004C899590000000F20F1185B8000000F20F118DC0000000F20F1195C8000000F20F119DD0000000F20F11A5D8000000F20F11ADE0000000F20F11B5E8000000F20F11BDF0000000F2440F1185F8000000F2440F118D00010000F2440F119508010000F2440F119D10010000F2440F11A518010000F2440F11AD20010000F2440F11B528010000488B7C240841BB601DA80041FFD3488B442408F6400480488B4558488B4D50488B5560488B7570488B7D784C8B85800000004C8B8D880000004C8B9590000000F20F1085B8000000F20F108DC0000000F20F1095C8000000F20F109DD0000000F20F10A5D8000000F20F10ADE0000000F20F10B5E8000000F20F10BDF0000000F2440F1085F8000000F2440F108D00010000F2440F109508010000F2440F109D10010000F2440F10A518010000F2440F10AD20010000F2440F10B528010000C20800
[3e4c161482328df] jit-backend-dump}
[3e4c161482377ce] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba324a70 +0  488B042548B35F0148C7042540B35F010000000048C7042548B35F01000000004889453848C74510A002F900488B9424B0000000488B842498000000488942384889E848832C258893F900104C8BBC24880000004C8BB424800000004C8B6C24784C8B642470488B5C2468488B6C24604881C4B8000000C3
[3e4c161482394a3] jit-backend-dump}
[3e4c16148268a11] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba324af
[3e4c1614826c649] jit-backend-dump}
[3e4c161482793e2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba324ce
[3e4c1614827ca06] jit-backend-dump}
[3e4c161482872e1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba324ee
[3e4c1614828a566] jit-backend-dump}
[3e4c16148290638] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba3250d
[3e4c16148293876] jit-backend-dump}
[3e4c161482aee13] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba3252c0 +0  48895D684C8985800000004C898D880000004C8995900000004C89A5980000004C89ADA00000004C89B5A80000004C89BDB00000004883EC08FFD0488B0C258893F900488B69F8F64504010F85520000004883C40848C7452000000000488B4D50488B5560488B5D68488B7570488B7D784C8B85800000004C8B8D880000004C8B95900000004C8BA5980000004C8BADA00000004C8BB5A80000004C8BBDB0000000C349BB704232BAF17F000041FFD3E99CFFFFFF
[3e4c161482b1d52] jit-backend-dump}
[3e4c161482b881b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba325380 +0  4C8985800000004C898D880000004C8995900000004883EC08FFD0488B0C258893F900488B69F8F64504010F85320000004883C40848C7452000000000488B4D50488B5560488B7570488B7D784C8B85800000004C8B8D880000004C8B9590000000C349BB704232BAF17F000041FFD3E9BCFFFFFF
[3e4c161482ba1ce] jit-backend-dump}
[3e4c161482bf468] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba
[3e4c161482c25be] jit-backend-dump}
[3e4c161482c772f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba3255c
[3e4c161482ca11f] jit-backend-dump}
[3e4c1615067f3e3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba325750 +0  4889E74883EC0841BBC027A90041FFD34883C408488B042540B35F014885C07501C34883C40849BB704A32BAF17F000041FFE3
[3e4c16150681a07] jit-backend-dump}
[3e4c1616d98a07b] {jit-backend
[3e4c1616dba2e1c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba
[3e4c1616dbabb1a] jit-backend-dump}
[3e4c1616dbc1f28] {jit-backend-addr
Loop 1 ((let ([if0 (= m 0)]) (if if0 (+ n 1) (let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))))) from (ack m AppRand2)) has address 0x7ff1ba325a1d to 0x7ff1ba325b60 (bootstrap 0x7ff1ba325990)
       gc table: 0x7ff1ba325910
       function: 0x7ff1ba325990
         resops: 0x7ff1ba325a1d
       failures: 0x7ff1ba325b60
            end: 0x7ff1ba325cfb
[3e4c1616dbca2a0] jit-backend-addr}
[3e4c1616dbcf8d6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba325a47 +0  44010000
[3e4c1616dbd0d3e] jit-backend-dump}
[3e4c1616dbd41f0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba325a5d +0  4A010000
[3e4c1616dbd50b4] jit-backend-dump}
[3e4c1616dbd8406] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba325a70 +0  6F010000
[3e4c1616dbd91e2] jit-backend-dump}
[3e4c1616dbdc1b7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba325a7e +0  7D010000
[3e4c1616dbdcf50] jit-backend-dump}
[3e4c1616dbdfdf5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba325a8c +0  8B010000
[3e4c1616dbe0b85] jit-backend-dump}
[3e4c1616dbe3a83] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba325a99 +0  9A010000
[3e4c1616dbe482c] jit-backend-dump}
[3e4c1616dbe7718] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba325aa3 +0  AC010000
[3e4c1616dbe84ba] jit-backend-dump}
[3e4c1616dbeb51e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba325ab4 +0  B7010000
[3e4c1616dbec2c9] jit-backend-dump}
[3e4c1616dbef2d8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba325ac4 +0  C3010000
[3e4c1616dbf00a8] jit-backend-dump}
[3e4c1616dbf308c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba325aee +0  D1010000
[3e4c1616dbf3e0f] jit-backend-dump}
[3e4c1616dbf6cef] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba325afb +0  E0010000
[3e4c1616dbf7a7f] jit-backend-dump}
[3e4c1616dbfb579] jit-backend}
[3e4c1616dbff0e8] {jit-log-opt-loop
# Loop 1 ((let ([if0 (= m 0)]) (if if0 (+ n 1) (let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))))) from (ack m AppRand2)) : loop with 60 ops
[p0, p1]
+277: label(p0, p1, descr=TargetToken(67468192))
debug_merge_point(0, 0, '(let ([if0 (= m 0)]) (if if0 (+ n 1) (let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))))) from (ack m AppRand2)')
+296: guard_class(p1, 16437216, descr=<Guard0x4070260>) [p0, p1]
+315: p3 = getfield_gc_r(p1, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+319: guard_nonnull_class(p3, ConstClass(ForwardLink), descr=<Guard0x40702c0>) [p0, p1]
debug_merge_point(0, 0, '(= m 0)')
+337: guard_not_invalidated(descr=<Guard0x40bd388>) [p0, p1]
+337: guard_class(p0, 16503888, descr=<Guard0x40bd3d0>) [p0, p1]
+356: i6 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_0 16 pure>)
+360: i8 = int_eq(i6, 0)
+364: guard_false(i8, descr=<Guard0x40bd418>) [p0, p1]
debug_merge_point(0, 0, '(if if0 (+ n 1) (let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))))')
debug_merge_point(0, 0, '(let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3)))))')
debug_merge_point(0, 0, '(= n 0)')
+370: i9 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_1 24 pure>)
+374: i11 = int_eq(i9, 0)
+378: guard_false(i11, descr=<Guard0x40bd460>) [p0, p1]
debug_merge_point(0, 0, '(if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))')
debug_merge_point(0, 0, '(let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3)))')
debug_merge_point(0, 0, '(- m 1)')
+384: i13 = int_sub_ovf(i6, 1)
+391: guard_no_overflow(descr=<Guard0x40bd4a8>) [p0, p1]
debug_merge_point(0, 0, '(- n 1)')
+397: i15 = int_sub_ovf(i9, 1)
+401: guard_no_overflow(descr=<Guard0x40bd4f0>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))')
debug_merge_point(0, 0, 'AppRand1')
+407: p16 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+411: guard_class(p16, 16505296, descr=<Guard0x40bd538>) [p0, p1]
debug_merge_point(0, 0, '(ack m AppRand2)')
+431: i19 = instance_ptr_eq(p16, ConstPtr(ptr18))
+434: guard_true(i19, descr=<Guard0x40bd580>) [p0, p1]
debug_merge_point(0, 0, '(let ([if0 (= m 0)]) (if if0 (+ n 1) (let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))))) from (ack m AppRand2)')
+440: i20 = same_as_i(i13)
+443: label(p16, i6, i15, p3, p1, i13, i20, descr=TargetToken(67468272))
debug_merge_point(0, 0, '(let ([if0 (= m 0)]) (if if0 (+ n 1) (let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))))) from (ack m AppRand2)')
debug_merge_point(0, 0, '(= m 0)')
+472: guard_not_invalidated(descr=<Guard0x4070320>) [i13, p1, i15, i6, p16, p3]
debug_merge_point(0, 0, '(if if0 (+ n 1) (let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))))')
debug_merge_point(0, 0, '(let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3)))))')
debug_merge_point(0, 0, '(= n 0)')
+472: i22 = int_eq(i15, 0)
+476: guard_false(i22, descr=<Guard0x40bd5c8>) [i13, p1, i15, i6, p16, p3]
debug_merge_point(0, 0, '(if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))')
debug_merge_point(0, 0, '(let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3)))')
debug_merge_point(0, 0, '(- m 1)')
debug_merge_point(0, 0, '(- n 1)')
+482: i24 = int_sub_ovf(i15, 1)
+489: guard_no_overflow(descr=<Guard0x40bd610>) [i13, p1, i15, i6, p16, p3]
debug_merge_point(0, 0, '(let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))')
debug_merge_point(0, 0, 'AppRand1')
debug_merge_point(0, 0, '(ack m AppRand2)')
debug_merge_point(0, 0, '(let ([if0 (= m 0)]) (if if0 (+ n 1) (let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))))) from (ack m AppRand2)')
+495: p25 = new_with_vtable(descr=<SizeDescr 48>)
+539: setfield_gc(p25, p3, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+543: setfield_gc(p25, p16, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+547: setfield_gc(p25, p1, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+558: setfield_gc(p25, ConstPtr(ptr26), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+562: setfield_gc(p25, i13, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+566: jump(p16, i6, i24, p3, p25, i20, i20, descr=TargetToken(67468272))
+592: --end of the loop--
[3e4c1616dc9dc53] jit-log-opt-loop}
[3e4c1616de62288] {jit-backend
[3e4c1616debf6f9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba325df
[3e4c1616dec821a] jit-backend-dump}
[3e4c1616ded13b8] {jit-backend-addr
Loop 2 ((ack AppRand1 AppRand3) from (+ n 1)) has address 0x7ff1ba325eed to 0x7ff1ba326010 (bootstrap 0x7ff1ba325e60)
       gc table: 0x7ff1ba325df0
       function: 0x7ff1ba325e60
         resops: 0x7ff1ba325eed
       failures: 0x7ff1ba326010
            end: 0x7ff1ba32618e
[3e4c1616ded40e5] jit-backend-addr}
[3e4c1616ded80aa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba325f17 +0  23010000
[3e4c1616ded92e3] jit-backend-dump}
[3e4c1616dedc7f6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba325f32 +0  24010000
[3e4c1616dedd7e7] jit-backend-dump}
[3e4c1616dee0829] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba325f48 +0  2A010000
[3e4c1616dee15a7] jit-backend-dump}
[3e4c1616dee45e3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba325f52 +0  3C010000
[3e4c1616dee5379] jit-backend-dump}
[3e4c1616dee8296] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba325f5c +0  4E010000
[3e4c1616dee90ce] jit-backend-dump}
[3e4c1616deebff4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba325f70 +0  56010000
[3e4c1616deecd47] jit-backend-dump}
[3e4c1616deefc79] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba325fa0 +0  5E010000
[3e4c1616def09e4] jit-backend-dump}
[3e4c1616def38f8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba325fb6 +0  64010000
[3e4c1616def4660] jit-backend-dump}
[3e4c1616def7543] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba325fc0 +0  76010000
[3e4c1616def8283] jit-backend-dump}
[3e4c1616defb3d0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba325fcd +0  85010000
[3e4c1616defc110] jit-backend-dump}
[3e4c1616deff149] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba325fe1 +0  8D010000
[3e4c1616deffed9] jit-backend-dump}
[3e4c1616df03ac5] jit-backend}
[3e4c1616df07624] {jit-log-opt-loop
# Loop 2 ((ack AppRand1 AppRand3) from (+ n 1)) : loop with 45 ops
[p0, p1]
+261: label(p0, p1, descr=TargetToken(67468352))
debug_merge_point(0, 0, '(ack AppRand1 AppRand3) from (+ n 1)')
+280: guard_not_invalidated(descr=<Guard0x4070380>) [p1, p0]
+280: guard_class(p0, 16503888, descr=<Guard0x40bd658>) [p1, p0]
+299: i3 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_0 16 pure>)
+303: i4 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_1 24 pure>)
+307: p5 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([if0 (= m 0)]) (if if0 (+ n 1) (let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))))) from (ack AppRand1 AppRand3)')
+307: guard_class(p1, 16437216, descr=<Guard0x40bd6a0>) [p1, p0]
+326: p7 = getfield_gc_r(p1, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+330: guard_nonnull_class(p7, ConstClass(ForwardLink), descr=<Guard0x40703e0>) [p1, p0]
debug_merge_point(0, 0, '(= m 0)')
+348: i10 = int_eq(i3, 0)
+352: guard_true(i10, descr=<Guard0x40bd6e8>) [p1, p0]
debug_merge_point(0, 0, '(if if0 (+ n 1) (let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))))')
debug_merge_point(0, 0, '(+ n 1)')
+358: i12 = int_add_ovf(i4, 1)
+362: guard_no_overflow(descr=<Guard0x40bd730>) [p1, p0]
+368: p13 = getfield_gc_r(p1, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+379: guard_value(p13, ConstPtr(ptr14), descr=<Guard0x40bd778>) [p1, p0]
+388: p15 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+392: i16 = getfield_gc_i(p1, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+396: p17 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(ack AppRand1 AppRand3) from (+ n 1)')
+400: label(p15, i16, i12, p17, descr=TargetToken(67468432))
debug_merge_point(0, 0, '(ack AppRand1 AppRand3) from (+ n 1)')
+424: guard_not_invalidated(descr=<Guard0x4070440>) [p17, i12, i16, p15]
debug_merge_point(0, 0, '(let ([if0 (= m 0)]) (if if0 (+ n 1) (let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))))) from (ack AppRand1 AppRand3)')
+424: guard_class(p17, 16437216, descr=<Guard0x40bd7c0>) [p17, i12, i16, p15]
+436: p19 = getfield_gc_r(p17, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+440: guard_nonnull_class(p19, ConstClass(ForwardLink), descr=<Guard0x40704a0>) [p17, i12, i16, p15]
debug_merge_point(0, 0, '(= m 0)')
+458: i22 = int_eq(i16, 0)
+462: guard_true(i22, descr=<Guard0x40bd808>) [p17, i12, i16, p15]
debug_merge_point(0, 0, '(if if0 (+ n 1) (let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))))')
debug_merge_point(0, 0, '(+ n 1)')
+468: i24 = int_add_ovf(i12, 1)
+475: guard_no_overflow(descr=<Guard0x40bd850>) [p17, i12, i16, p15]
+481: p25 = getfield_gc_r(p17, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+492: guard_value(p25, ConstPtr(ptr26), descr=<Guard0x40bd898>) [p17, i12, i16, p15]
+501: p27 = getfield_gc_r(p17, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+505: i28 = getfield_gc_i(p17, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+509: p29 = getfield_gc_r(p17, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(ack AppRand1 AppRand3) from (+ n 1)')
+513: jump(p27, i28, i24, p29, descr=TargetToken(67468432))
+544: --end of the loop--
[3e4c1616df36e42] jit-log-opt-loop}
[3e4c1616e5bef0a] {jit-backend
[3e4c1616e605812] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba326200 +0  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8C6200000048FF0425100C57034883BD30010000000F84000000004883FE000F85000000004C8BBD300100004983EF010F80000000004983FF000F85000000004C8985300100004889D8BA0200000049BB905F32BAF17F000041FFE366662E0F1F84000000000048C7442408FFFFFF0049BBA06132BAF17F00004C895D204D8D9B50E1FFFF41FFD3E978FFFFFFFF3534FFFFFF49BBB06132BAF17F000041534D8D9B50DEFFFF41FFE3FF3520FFFFFF49BBC06132BAF17F000041534D8D9B40DEFFFF41FFE3FF350CFFFFFF49BBD06132BAF17F000041534D8D9B30DEFFFF41FFE3FF35F8FEFFFF49BBE06132BAF17F000041534D8D9B20DEFFFF41FFE3FF35E4FEFFFF49BBF06132BAF17F000041534D8D9B10DEFFFF41FFE3
[3e4c1616e60a389] jit-backend-dump}
[3e4c1616e61432b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba326234 +0  1E000000
[3e4c1616e61584e] jit-backend-dump}
[3e4c1616e619496] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba3262a5 +0  1E000000
[3e4c1616e61a43d] jit-backend-dump}
[3e4c1616e61d694] {jit-backend-addr
bridge out of Guard 0x40bd5c8 has address 0x7ff1ba326230 to 0x7ff1ba3262a0
       gc table: 0x7ff1ba326200
    jump target: 0x7ff1ba326230
         resops: 0x7ff1ba32623e
       failures: 0x7ff1ba3262a0
            end: 0x7ff1ba326352
[3e4c1616e61fc5c] jit-backend-addr}
[3e4c1616e62303d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba326250 +0  8E000000
[3e4c1616e623f4e] jit-backend-dump}
[3e4c1616e627150] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba32625a +0  A0000000
[3e4c1616e627edf] jit-backend-dump}
[3e4c1616e62af3a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba32626b +0  AB000000
[3e4c1616e62bc9c] jit-backend-dump}
[3e4c1616e62ecc3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba326275 +0  BD000000
[3e4c1616e62faf8] jit-backend-dump}
[3e4c1616e638c50] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba325aee +0  3E070000
[3e4c1616e639d23] jit-backend-dump}
[3e4c1616e64a598] jit-backend}
[3e4c1616e64f91a] {jit-log-opt-bridge
# bridge out of Guard 0x40bd5c8 with 22 ops
[i0, p1, i2, i3, p4, p5]
+70: guard_not_invalidated(descr=<Guard0x40707a0>) [i0, p1, i2, i3, p4, p5]
+70: i7 = int_eq(i3, 0)
+78: guard_false(i7, descr=<Guard0x410ba00>) [i0, p1, i2, i3, p4, p5]
debug_merge_point(0, 0, '(if if0 (+ n 1) (let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))))')
debug_merge_point(0, 0, '(let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3)))))')
debug_merge_point(0, 0, '(= n 0)')
+84: i9 = int_eq(i2, 0)
+88: guard_true(i9, descr=<Guard0x410ba48>) [i0, p1, i2, i3, p4, p5]
debug_merge_point(0, 0, '(if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))')
debug_merge_point(0, 0, '(let ([AppRand0 (- m 1)]) (ack AppRand0 1))')
debug_merge_point(0, 0, '(- m 1)')
+94: i11 = int_sub_ovf(i3, 1)
+105: guard_no_overflow(descr=<Guard0x410ba90>) [i0, p1, i2, i3, p4, p5]
debug_merge_point(0, 0, '(ack AppRand0 1)')
debug_merge_point(0, 0, '(let ([if0 (= m 0)]) (if if0 (+ n 1) (let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))))) from (ack AppRand0 1)')
debug_merge_point(0, 0, '(= m 0)')
+111: i13 = int_eq(i11, 0)
+115: guard_true(i13, descr=<Guard0x410bad8>) [i0, p1, i2, i3, p4, p5]
debug_merge_point(0, 0, '(if if0 (+ n 1) (let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))))')
debug_merge_point(0, 0, '(+ n 1)')
debug_merge_point(0, 0, '(ack AppRand1 AppRand3) from (+ n 1)')
+121: jump(p4, i0, 2, p1, descr=TargetToken(67468432))
+160: --end of the loop--
[3e4c1616e665481] jit-log-opt-bridge}
[3e4c1616e7a96e2] {jit-backend
[3e4c1616e7ce12c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba3263f0 +0  0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8C9200000048FF0425B01057038139201600000F85000000004C8B79084983FF01720741813F900F00000F85000000004883F8000F84000000004883FA000F84000000004989C64883E8010F80000000004989D54883EA010F80000000004C8B2D8AFFFFFF4D89E84C89B5300100004889D64889C3488985400100004C89F849BBE05A32BAF17F000041FFE366662E0F1F84000000000048C7442408FFFFFF0049BB686332BAF17F00004C895D204D8D9B88DFFFFF41FFD3E948FFFFFFFF35F4FEFFFF49BB786332BAF17F000041534D8D9B88DCFFFF41FFE3FF35E0FEFFFF49BB886332BAF17F000041534D8D9B78DCFFFF41FFE3FF35CCFEFFFF49BB986332BAF17F000041534D8D9B68DCFFFF41FFE3FF35B8FEFFFF49BBA86332BAF17F000041534D8D9B58DCFFFF41FFE3FF35A4FEFFFF49BBB86332BAF17F000041534D8D9B48DCFFFF41FFE3FF3590FEFFFF49BBC86332BAF17F000041534D8D9B38DCFFFF41FFE3FF357CFEFFFF49BBD86332BAF17F000041534D8D9B28DCFFFF41FFE3
[3e4c1616e7d348a] jit-backend-dump}
[3e4c1616e7dcaf5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba326434 +0  1F000000
[3e4c1616e7ddf82] jit-backend-dump}
[3e4c1616e7e1c51] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba3264d5 +0  1F000000
[3e4c1616e7e2bd6] jit-backend-dump}
[3e4c1616e7e5e0e] {jit-backend-addr
bridge out of Guard 0x40bd808 has address 0x7ff1ba326430 to 0x7ff1ba3264d0
       gc table: 0x7ff1ba3263f0
    jump target: 0x7ff1ba326430
         resops: 0x7ff1ba32643e
       failures: 0x7ff1ba3264d0
            end: 0x7ff1ba3265ba
[3e4c1616e7e8407] jit-backend-addr}
[3e4c1616e7eb86f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba32644e +0  C0000000
[3e4c1616e7ec728] jit-backend-dump}
[3e4c1616e7ef786] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba326465 +0  C5000000
[3e4c1616e7f0528] jit-backend-dump}
[3e4c1616e7f36e3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba32646f +0  D7000000
[3e4c1616e7f4577] jit-backend-dump}
[3e4c1616e7f78b9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba326479 +0  E9000000
[3e4c1616e7f86b1] jit-backend-dump}
[3e4c1616e7fb942] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba326486 +0  F8000000
[3e4c1616e7fc6ce] jit-backend-dump}
[3e4c1616e7ff6a0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba326493 +0  07010000
[3e4c1616e8003e0] jit-backend-dump}
[3e4c1616e8036cd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba325fc0 +0  6C040000
[3e4c1616e80441f] jit-backend-dump}
[3e4c1616e808159] jit-backend}
[3e4c1616e80b956] {jit-log-opt-bridge
# bridge out of Guard 0x40bd808 with 26 ops
[p0, i1, i2, p3]
+86: guard_not_invalidated(descr=<Guard0x4070800>) [p0, i1, i2, p3]
debug_merge_point(0, 0, '(let ([if0 (= m 0)]) (if if0 (+ n 1) (let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))))) from (ack AppRand1 AppRand3)')
+86: guard_class(p0, 16437216, descr=<Guard0x410bb20>) [p0, i1, i2, p3]
+98: p5 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+102: guard_nonnull_class(p5, ConstClass(ForwardLink), descr=<Guard0x4070860>) [p0, i1, i2, p3]
debug_merge_point(0, 0, '(= m 0)')
+121: i8 = int_eq(i2, 0)
+125: guard_false(i8, descr=<Guard0x410bb68>) [p0, i1, i2, p3]
debug_merge_point(0, 0, '(if if0 (+ n 1) (let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))))')
debug_merge_point(0, 0, '(let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3)))))')
debug_merge_point(0, 0, '(= n 0)')
+131: i10 = int_eq(i1, 0)
+135: guard_false(i10, descr=<Guard0x410bbb0>) [p0, i1, i2, p3]
debug_merge_point(0, 0, '(if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))')
debug_merge_point(0, 0, '(let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3)))')
debug_merge_point(0, 0, '(- m 1)')
+141: i12 = int_sub_ovf(i2, 1)
+148: guard_no_overflow(descr=<Guard0x410bbf8>) [p0, i1, i2, p3]
debug_merge_point(0, 0, '(- n 1)')
+154: i14 = int_sub_ovf(i1, 1)
+161: guard_no_overflow(descr=<Guard0x410bc40>) [p0, i1, i2, p3]
debug_merge_point(0, 0, '(let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))')
debug_merge_point(0, 0, 'AppRand1')
debug_merge_point(0, 0, '(ack m AppRand2)')
debug_merge_point(0, 0, '(let ([if0 (= m 0)]) (if if0 (+ n 1) (let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))))) from (ack m AppRand2)')
+174: jump(ConstPtr(ptr15), i2, i14, p5, p0, i12, i12, descr=TargetToken(67468272))
+224: --end of the loop--
[3e4c1616e824db0] jit-log-opt-bridge}
[3e4c16188c85daf] {jit-backend
[3e4c16188cc352b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba
[3e4c16188cc95ad] jit-backend-dump}
[3e4c16188cd8acd] {jit-backend-addr
Loop 5 ((let ([if0 (= m 0)]) (if if0 (+ n 1) (let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))))) from (ack AppRand0 1)) has address 0x7ff1ba32676d to 0x7ff1ba326820 (bootstrap 0x7ff1ba3266e0)
       gc table: 0x7ff1ba326680
       function: 0x7ff1ba3266e0
         resops: 0x7ff1ba32676d
       failures: 0x7ff1ba326820
            end: 0x7ff1ba32694a
[3e4c16188cdbb22] jit-backend-addr}
[3e4c16188cdfef7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba326784 +0  AA000000
[3e4c16188ce11a4] jit-backend-dump}
[3e4c16188ce45cf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba32679a +0  B0000000
[3e4c16188ce5585] jit-backend-dump}
[3e4c16188ce8890] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba3267ad +0  D5000000
[3e4c16188ce965d] jit-backend-dump}
[3e4c16188cec858] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba3267bb +0  E3000000
[3e4c16188ced5fa] jit-backend-dump}
[3e4c16188cf05c9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba3267c9 +0  F1000000
[3e4c16188cf1337] jit-backend-dump}
[3e4c16188cf4428] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba3267d6 +0  00010000
[3e4c16188cf518d] jit-backend-dump}
[3e4c16188cf81f4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba3267e0 +0  12010000
[3e4c16188cf8f53] jit-backend-dump}
[3e4c16188cfbe57] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba3267f1 +0  1D010000
[3e4c16188cfcbbf] jit-backend-dump}
[3e4c16188cffb32] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba326801 +0  29010000
[3e4c16188d0087e] jit-backend-dump}
[3e4c16188d041c6] jit-backend}
[3e4c16188d07e17] {jit-log-opt-loop
# Loop 5 ((let ([if0 (= m 0)]) (if if0 (+ n 1) (let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))))) from (ack AppRand0 1)) : entry bridge with 33 ops
[p0, p1]
debug_merge_point(0, 0, '(let ([if0 (= m 0)]) (if if0 (+ n 1) (let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))))) from (ack AppRand0 1)')
+245: guard_class(p1, 16437216, descr=<Guard0x40708c0>) [p0, p1]
+264: p3 = getfield_gc_r(p1, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+268: guard_nonnull_class(p3, ConstClass(ForwardLink), descr=<Guard0x4070920>) [p0, p1]
debug_merge_point(0, 0, '(= m 0)')
+286: guard_not_invalidated(descr=<Guard0x410bc88>) [p0, p1]
+286: guard_class(p0, 16503888, descr=<Guard0x410bcd0>) [p0, p1]
+305: i6 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_0 16 pure>)
+309: i8 = int_eq(i6, 0)
+313: guard_false(i8, descr=<Guard0x410bd18>) [p0, p1]
debug_merge_point(0, 0, '(if if0 (+ n 1) (let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))))')
debug_merge_point(0, 0, '(let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3)))))')
debug_merge_point(0, 0, '(= n 0)')
+319: i9 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_1 24 pure>)
+323: i11 = int_eq(i9, 0)
+327: guard_false(i11, descr=<Guard0x410bd60>) [p0, p1]
debug_merge_point(0, 0, '(if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))')
debug_merge_point(0, 0, '(let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3)))')
debug_merge_point(0, 0, '(- m 1)')
+333: i13 = int_sub_ovf(i6, 1)
+340: guard_no_overflow(descr=<Guard0x410bda8>) [p0, p1]
debug_merge_point(0, 0, '(- n 1)')
+346: i15 = int_sub_ovf(i9, 1)
+350: guard_no_overflow(descr=<Guard0x410bdf0>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))')
debug_merge_point(0, 0, 'AppRand1')
+356: p16 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+360: guard_class(p16, 16505296, descr=<Guard0x410be38>) [p0, p1]
debug_merge_point(0, 0, '(ack m AppRand2)')
+380: i19 = instance_ptr_eq(p16, ConstPtr(ptr18))
+383: guard_true(i19, descr=<Guard0x410be80>) [p0, p1]
debug_merge_point(0, 0, '(let ([if0 (= m 0)]) (if if0 (+ n 1) (let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))))) from (ack m AppRand2)')
+389: jump(p16, i6, i15, p3, p1, i13, i13, descr=TargetToken(67468272))
+416: --end of the loop--
[3e4c16188d2fb73] jit-log-opt-loop}
[3e4c1619aa5f42c] {jit-backend
[3e4c1619aa98f0e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba3269e
[3e4c1619aa9e16d] jit-backend-dump}
[3e4c1619aaac7c2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba326a24 +0  1F000000
[3e4c1619aaaddf2] jit-backend-dump}
[3e4c1619aab1c42] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba326af5 +0  1F000000
[3e4c1619aab2b07] jit-backend-dump}
[3e4c1619aab5c04] {jit-backend-addr
bridge out of Guard 0x410bad8 has address 0x7ff1ba326a20 to 0x7ff1ba326af0
       gc table: 0x7ff1ba3269e0
    jump target: 0x7ff1ba326a20
         resops: 0x7ff1ba326a2e
       failures: 0x7ff1ba326af0
            end: 0x7ff1ba326bdb
[3e4c1619aab850c] jit-backend-addr}
[3e4c1619aabbb3f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba326a40 +0  0B010000
[3e4c1619aabc9d9] jit-backend-dump}
[3e4c1619aabfb1f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba326a4a +0  1D010000
[3e4c1619aac0887] jit-backend-dump}
[3e4c1619aac3893] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba326a5b +0  28010000
[3e4c1619aac45d6] jit-backend-dump}
[3e4c1619aac75b4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba326a65 +0  3A010000
[3e4c1619aac8356] jit-backend-dump}
[3e4c1619aacb340] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba326a72 +0  49010000
[3e4c1619aacc052] jit-backend-dump}
[3e4c1619aacf1fe] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba326275 +0  A7070000
[3e4c1619aacff47] jit-backend-dump}
[3e4c1619aad3fc4] jit-backend}
[3e4c1619aad791b] {jit-log-opt-bridge
# bridge out of Guard 0x410bad8 with 38 ops
[i0, p1, i2, i3, p4, p5]
+86: guard_not_invalidated(descr=<Guard0x4070980>) [i0, p1, i2, i3, p4, p5]
+86: i7 = int_eq(i3, 0)
+94: guard_false(i7, descr=<Guard0x410bec8>) [i0, p1, i2, i3, p4, p5]
debug_merge_point(0, 0, '(if if0 (+ n 1) (let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))))')
debug_merge_point(0, 0, '(let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3)))))')
debug_merge_point(0, 0, '(= n 0)')
+100: i9 = int_eq(i2, 0)
+104: guard_true(i9, descr=<Guard0x410bf10>) [i0, p1, i2, i3, p4, p5]
debug_merge_point(0, 0, '(if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))')
debug_merge_point(0, 0, '(let ([AppRand0 (- m 1)]) (ack AppRand0 1))')
debug_merge_point(0, 0, '(- m 1)')
+110: i11 = int_sub_ovf(i3, 1)
+121: guard_no_overflow(descr=<Guard0x410bf58>) [i0, p1, i2, i3, p4, p5]
debug_merge_point(0, 0, '(ack AppRand0 1)')
debug_merge_point(0, 0, '(let ([if0 (= m 0)]) (if if0 (+ n 1) (let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))))) from (ack AppRand0 1)')
debug_merge_point(0, 0, '(= m 0)')
+127: i13 = int_eq(i11, 0)
+131: guard_false(i13, descr=<Guard0x410bfa0>) [i0, p1, i2, i3, p4, p5]
debug_merge_point(0, 0, '(if if0 (+ n 1) (let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))))')
debug_merge_point(0, 0, '(let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3)))))')
debug_merge_point(0, 0, '(= n 0)')
debug_merge_point(0, 0, '(if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))')
debug_merge_point(0, 0, '(let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3)))')
debug_merge_point(0, 0, '(- m 1)')
+137: i15 = int_sub_ovf(i11, 1)
+144: guard_no_overflow(descr=<Guard0x48f0020>) [i0, p1, i2, i3, p4, p5]
debug_merge_point(0, 0, '(- n 1)')
debug_merge_point(0, 0, '(let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))')
debug_merge_point(0, 0, 'AppRand1')
debug_merge_point(0, 0, '(ack m AppRand2)')
debug_merge_point(0, 0, '(let ([if0 (= m 0)]) (if if0 (+ n 1) (let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))))) from (ack m AppRand2)')
+150: p16 = new_with_vtable(descr=<SizeDescr 48>)
+194: setfield_gc(p16, p5, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+198: setfield_gc(p16, p4, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+202: setfield_gc(p16, p1, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+213: setfield_gc(p16, ConstPtr(ptr17), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+217: setfield_gc(p16, i0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+228: jump(ConstPtr(ptr18), i11, 0, p5, p16, i15, i15, descr=TargetToken(67468272))
+272: --end of the loop--
[3e4c1619aafb081] jit-log-opt-bridge}
[3e4c1623e3678b2] {jit-backend
[3e4c1623e3e2fd0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba326d
[3e4c1623e3eb749] jit-backend-dump}
[3e4c1623e4007be] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba326da4 +0  1F000000
[3e4c1623e401d74] jit-backend-dump}
[3e4c1623e405e59] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba326f45 +0  1F000000
[3e4c1623e406e37] jit-backend-dump}
[3e4c1623e40a268] {jit-backend-addr
bridge out of Guard 0x40bd7c0 has address 0x7ff1ba326da0 to 0x7ff1ba326f40
       gc table: 0x7ff1ba326d00
    jump target: 0x7ff1ba326da0
         resops: 0x7ff1ba326dae
       failures: 0x7ff1ba326f40
            end: 0x7ff1ba327127
[3e4c1623e40d05c] jit-backend-addr}
[3e4c1623e41094e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba326dbe +0  DD010000
[3e4c1623e411866] jit-backend-dump}
[3e4c1623e414bab] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba326dd5 +0  E2010000
[3e4c1623e415984] jit-backend-dump}
[3e4c1623e418b70] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba326ddf +0  F4010000
[3e4c1623e41990f] jit-backend-dump}
[3e4c1623e41cbe6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba326dec +0  03020000
[3e4c1623e41d92a] jit-backend-dump}
[3e4c1623e420a55] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba326e00 +0  0B020000
[3e4c1623e42181c] jit-backend-dump}
[3e4c1623e4249ec] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba326e14 +0  13020000
[3e4c1623e42576f] jit-backend-dump}
[3e4c1623e428876] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba326e26 +0  1D020000
[3e4c1623e4295fc] jit-backend-dump}
[3e4c1623e42c6ea] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba326e3e +0  21020000
[3e4c1623e42d424] jit-backend-dump}
[3e4c1623e430476] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba326e4c +0  2F020000
[3e4c1623e4311d5] jit-backend-dump}
[3e4c1623e434337] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba326e60 +0  37020000
[3e4c1623e435087] jit-backend-dump}
[3e4c1623e4380dc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba326e6d +0  46020000
[3e4c1623e438e44] jit-backend-dump}
[3e4c1623e43bed9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba326e7b +0  54020000
[3e4c1623e43cc19] jit-backend-dump}
[3e4c1623e43fc49] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba326e92 +0  59020000
[3e4c1623e4409a8] jit-backend-dump}
[3e4c1623e443a62] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba326e9c +0  6B020000
[3e4c1623e4447b8] jit-backend-dump}
[3e4c1623e447b37] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba325fa0 +0  FC0D0000
[3e4c1623e4488a2] jit-backend-dump}
[3e4c1623e44cf00] jit-backend}
[3e4c1623e450942] {jit-log-opt-bridge
# bridge out of Guard 0x40bd7c0 with 69 ops
[p0, i1, i2, p3]
+182: guard_not_invalidated(descr=<Guard0x40709e0>) [p0, i1, i2, p3]
debug_merge_point(0, 0, '(let ([if0 (= m 0)]) (if if0 (+ n 1) (let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))))) from (ack AppRand1 AppRand3)')
+182: guard_class(p0, 16435208, descr=<Guard0x48f0068>) [p0, i1, i2, p3]
+194: p5 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+198: guard_nonnull_class(p5, ConstClass(ForwardLink), descr=<Guard0x4070a40>) [p0, i1, i2, p3]
debug_merge_point(0, 0, '(= m 0)')
+217: i8 = int_eq(i2, 0)
+221: guard_true(i8, descr=<Guard0x48f00b0>) [p0, i1, i2, p3]
debug_merge_point(0, 0, '(if if0 (+ n 1) (let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))))')
debug_merge_point(0, 0, '(+ n 1)')
+227: i10 = int_add_ovf(i1, 1)
+234: guard_no_overflow(descr=<Guard0x48f00f8>) [p0, i1, i2, p3]
+240: p11 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+251: guard_value(p11, ConstPtr(ptr12), descr=<Guard0x48f0140>) [p0, i1, i2, p3]
+260: p13 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+264: p14 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(doloop4835 (add1 i4837)) from (+ n 1)')
+268: guard_class(p13, 16504944, descr=<Guard0x48f0188>) [p0, i1, i2, p3]
+280: p16 = getfield_gc_r(p13, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+284: guard_class(p16, 16499664, descr=<Guard0x48f01d0>) [p0, i1, i2, p3]
+298: p18 = getfield_gc_r(p16, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+303: guard_nonnull_class(p18, 16510992, descr=<Guard0x4070aa0>) [p0, i1, i2, p3]
+322: i20 = getfield_gc_i(p13, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+326: i22 = int_add_ovf(i20, 1)
+330: guard_no_overflow(descr=<Guard0x48f0218>) [p0, i1, i2, p3]
+336: p23 = getfield_gc_r(p18, descr=<FieldP pycket.values.W_Closure.inst_caselam 8 pure>)
+347: guard_value(p23, ConstPtr(ptr24), descr=<Guard0x48f0260>) [p0, i1, i2, p3]
+356: p25 = getfield_gc_r(p18, descr=<FieldP rpython.tool.pairtype.W_ClosureSize1.inst__envs_0 16 pure>)
+360: i26 = instance_ptr_eq(p16, p25)
+363: guard_true(i26, descr=<Guard0x48f02a8>) [p0, i1, i2, p3]
debug_merge_point(0, 0, '(let ([if3 (> i4837 ack-iters)]) (if if3 (begin (void) (void)) (begin (ack 3 9) (doloop4835 (add1 i4837))))) from (doloop4835 (add1 i4837))')
+369: guard_class(p14, 16528368, descr=<Guard0x48f02f0>) [p0, i1, i2, p3]
+383: p28 = getfield_gc_r(p14, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+387: guard_nonnull_class(p28, ConstClass(ForwardLink), descr=<Guard0x4070b00>) [p0, i1, i2, p3]
debug_merge_point(0, 0, '(> i4837 ack-iters)')
+406: i31 = int_gt(i22, 80)
+410: guard_false(i31, descr=<Guard0x48f0338>) [p0, i1, i2, p3]
debug_merge_point(0, 0, '(if if3 (begin (void) (void)) (begin (ack 3 9) (doloop4835 (add1 i4837))))')
debug_merge_point(0, 0, '(begin (ack 3 9) (doloop4835 (add1 i4837)))')
debug_merge_point(0, 0, '(ack 3 9)')
+416: p32 = getfield_gc_r(p16, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([if0 (= m 0)]) (if if0 (+ n 1) (let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))))) from (ack 3 9)')
debug_merge_point(0, 0, '(= m 0)')
debug_merge_point(0, 0, '(if if0 (+ n 1) (let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))))')
debug_merge_point(0, 0, '(let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3)))))')
debug_merge_point(0, 0, '(= n 0)')
debug_merge_point(0, 0, '(if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))')
debug_merge_point(0, 0, '(let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3)))')
debug_merge_point(0, 0, '(- m 1)')
debug_merge_point(0, 0, '(- n 1)')
debug_merge_point(0, 0, '(let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))')
debug_merge_point(0, 0, 'AppRand1')
debug_merge_point(0, 0, '(ack m AppRand2)')
debug_merge_point(0, 0, '(let ([if0 (= m 0)]) (if if0 (+ n 1) (let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))))) from (ack m AppRand2)')
+416: p33 = new_with_vtable(descr=<SizeDescr 48>)
+457: p34 = new_with_vtable(descr=<SizeDescr 40>)
+468: setfield_gc(p34, p28, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+472: p35 = new_with_vtable(descr=<SizeDescr 24>)
+483: setfield_gc(p35, p16, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+487: setfield_gc(p35, i22, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+491: setfield_gc(p34, p35, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+495: setfield_gc(p34, p14, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+499: setfield_gc(p34, ConstPtr(ptr36), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+503: setfield_gc(p33, p28, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+514: setfield_gc(p33, ConstPtr(ptr37), descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+518: setfield_gc(p33, p34, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+529: setfield_gc(p33, ConstPtr(ptr38), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+533: setfield_gc(p33, 2, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+548: jump(ConstPtr(ptr40), p33, descr=TargetToken(67468192))
+576: --end of the loop--
[3e4c1623e4a0134] jit-log-opt-bridge}
[3e4c163e98ce345] {jit-backend
[3e4c163e9927deb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba3271c
[3e4c163e992e19b] jit-backend-dump}
[3e4c163e994e905] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba327214 +0  1F000000
[3e4c163e994fe68] jit-backend-dump}
[3e4c163e9953c16] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba327305 +0  1F000000
[3e4c163e9954af9] jit-backend-dump}
[3e4c163e9957e1a] {jit-backend-addr
bridge out of Guard 0x48f00b0 has address 0x7ff1ba327210 to 0x7ff1ba327300
       gc table: 0x7ff1ba3271c0
    jump target: 0x7ff1ba327210
         resops: 0x7ff1ba32721e
       failures: 0x7ff1ba327300
            end: 0x7ff1ba327407
[3e4c163e995ad6b] jit-backend-addr}
[3e4c163e995ea79] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba32722e +0  2D010000
[3e4c163e995f92c] jit-backend-dump}
[3e4c163e99629ec] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba327245 +0  32010000
[3e4c163e9963754] jit-backend-dump}
[3e4c163e99667be] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba32724f +0  44010000
[3e4c163e996754b] jit-backend-dump}
[3e4c163e996a5a0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba327259 +0  56010000
[3e4c163e996b320] jit-backend-dump}
[3e4c163e996e4e4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba327266 +0  65010000
[3e4c163e996f283] jit-backend-dump}
[3e4c163e9972416] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba327273 +0  74010000
[3e4c163e9973163] jit-backend-dump}
[3e4c163e9976452] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7ff1ba326ddf +0  2D040000
[3e4c163e997719f] jit-backend-dump}
[3e4c163e997b77f] jit-backend}
[3e4c163e997f1bc] {jit-log-opt-bridge
# bridge out of Guard 0x48f00b0 with 36 ops
[p0, i1, i2, p3]
+102: guard_not_invalidated(descr=<Guard0x4070080>) [p0, i1, i2, p3]
debug_merge_point(0, 0, '(let ([if0 (= m 0)]) (if if0 (+ n 1) (let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))))) from (ack AppRand1 AppRand3)')
+102: guard_class(p0, 16435208, descr=<Guard0x48f03c8>) [p0, i1, i2, p3]
+114: p5 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+118: guard_nonnull_class(p5, ConstClass(ForwardLink), descr=<Guard0x40700e0>) [p0, i1, i2, p3]
debug_merge_point(0, 0, '(= m 0)')
+137: i8 = int_eq(i2, 0)
+141: guard_false(i8, descr=<Guard0x48f0410>) [p0, i1, i2, p3]
debug_merge_point(0, 0, '(if if0 (+ n 1) (let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))))')
debug_merge_point(0, 0, '(let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3)))))')
debug_merge_point(0, 0, '(= n 0)')
+147: i10 = int_eq(i1, 0)
+151: guard_false(i10, descr=<Guard0x48f0458>) [p0, i1, i2, p3]
debug_merge_point(0, 0, '(if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))')
debug_merge_point(0, 0, '(let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3)))')
debug_merge_point(0, 0, '(- m 1)')
+157: i12 = int_sub_ovf(i2, 1)
+164: guard_no_overflow(descr=<Guard0x48f04a0>) [p0, i1, i2, p3]
debug_merge_point(0, 0, '(- n 1)')
+170: i14 = int_sub_ovf(i1, 1)
+177: guard_no_overflow(descr=<Guard0x48f04e8>) [p0, i1, i2, p3]
debug_merge_point(0, 0, '(let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))')
debug_merge_point(0, 0, 'AppRand1')
debug_merge_point(0, 0, '(ack m AppRand2)')
debug_merge_point(0, 0, '(let ([if0 (= m 0)]) (if if0 (+ n 1) (let ([if1 (= n 0)]) (if if1 (let ([AppRand0 (- m 1)]) (ack AppRand0 1)) (let ([AppRand1 (- m 1)][AppRand2 (- n 1)]) (let ([AppRand1 AppRand1][AppRand3 (ack m AppRand2)]) (ack AppRand1 AppRand3))))))) from (ack m AppRand2)')
+183: p15 = new_with_vtable(descr=<SizeDescr 32>)
+230: p16 = new_with_vtable(descr=<SizeDescr 48>)
+241: setfield_gc(p16, p5, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+252: setfield_gc(p15, ConstPtr(ptr17), descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+256: setfield_gc(p15, i2, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_0 16 pure>)
+260: setfield_gc(p15, i14, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_1 24 pure>)
+264: setfield_gc(p16, ConstPtr(ptr17), descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+268: setfield_gc(p16, p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+279: setfield_gc(p16, ConstPtr(ptr18), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+283: setfield_gc(p16, i12, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+287: jump(p15, p16, descr=TargetToken(67468192))
+320: --end of the loop--
[3e4c163e99a69dc] jit-log-opt-bridge}
[3e4c17c833019a6] {jit-summary
Tracing:      	8	0.195560
Backend:      	8	0.002680
TOTAL:      		45.037794
ops:             	6245
recorded ops:    	1328
  calls:         	0
guards:          	267
opt ops:         	333
opt guards:      	85
opt guards shared:	66
forcings:        	0
abort: trace too long:	0
abort: compiling:	0
abort: vable escape:	0
abort: bad loop: 	0
abort: force quasi-immut:	0
nvirtuals:       	15
nvholes:         	0
nvreused:        	0
vecopt tried:    	0
vecopt success:  	0
Total # of loops:	3
Total # of bridges:	5
Freed # of loops:	0
Freed # of bridges:	0
[3e4c17c8332d567] jit-summary}
[3e4c17c83337d87] {jit-backend-counts
entry 1:269
TargetToken(67468192):2488
TargetToken(67468272):4464111775
entry 2:85
TargetToken(67468352):85
TargetToken(67468432):4464114177
bridge 67884488:3266290
bridge 67885064:3255133
entry 5:24
bridge 68205272:8735
bridge 67884992:2328
bridge 76480688:1453
[3e4c17c8333c263] jit-backend-counts}
