[3e4c20e3735c401] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6be8000 +0  48894D50488945584889556048895D684889757048897D784C8985800000004C898D880000004C8995900000004C89A5980000004C89ADA00000004C89B5A80000004C89BDB00000008F45208F4510488B9424B0000000488B842498000000488942384889E848832C258893F900104C8BBC24880000004C8BB424800000004C8B6C24784C8B642470488B5C2468488B6C24604881C4B8000000C3
[3e4c20e3736f97f] jit-backend-dump}
[3e4c20e373ab643] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6be80b0 +0  48894D50488945584889556048895D684889757048897D784C8985800000004C898D880000004C8995900000004C89A5980000004C89ADA00000004C89B5A80000004C89BDB0000000488B1C2548B35F0148C7042540B35F010000000048C7042548B35F010000000048895D388F45208F4510488B9424B0000000488B842498000000488942384889E848832C258893F900104C8BBC24880000004C8BB424800000004C8B6C24784C8B642470488B5C2468488B6C24604881C4B8000000C3
[3e4c20e373ae406] jit-backend-dump}
[3e4c20e373bb4e6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6be8180 +0  4889455848894D50488955604889757048897D784C8985800000004C898D880000004C899590000000488B7C240841BB80EFA60041FFD3488B4558488B4D50488B5560488B7570488B7D784C8B85800000004C8B8D880000004C8B9590000000C20800
[3e4c20e373bcf26] jit-backend-dump}
[3e4c20e373c3956] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6be81f0 +0  4889455848894D50488955604889757048897D784C8985800000004C898D880000004C899590000000488B7C240841BB601DA80041FFD3488B442408F6400480488B4558488B4D50488B5560488B7570488B7D784C8B85800000004C8B8D880000004C8B9590000000C20800
[3e4c20e373c5432] jit-backend-dump}
[3e4c20e373ce540] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6be8270 +0  4883EC384889442408F20F114424104889EF48895C24284C89642430488B1C2548B35F014C8B242540B35F0148C7042540B35F010000000048C7042548B35F010000000041BB80EFA60041FFD3F20F10442410488B44240848891C2548B35F014C89242540B35F01488B5C24284C8B642430488D642438C3
[3e4c20e373d0117] jit-backend-dump}
[3e4c20e373d98a5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6be82f
[3e4c20e373dd70a] jit-backend-dump}
[3e4c20e373e2b35] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6be
[3e4c20e373e4f2f] jit-backend-dump}
[3e4c20e373e9c34] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6be
[3e4c20e373ec1c2] jit-backend-dump}
[3e4c20e3747f9d2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6be
[3e4c20e37482565] jit-backend-dump}
[3e4c20e37488766] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6be88f
[3e4c20e3748ad96] jit-backend-dump}
[3e4c20e3748f929] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6be8a70 +0  488B042548B35F0148C7042540B35F010000000048C7042548B35F01000000004889453848C74510A002F900488B9424B0000000488B842498000000488942384889E848832C258893F900104C8BBC24880000004C8BB424800000004C8B6C24784C8B642470488B5C2468488B6C24604881C4B8000000C3
[3e4c20e374911fd] jit-backend-dump}
[3e4c20e374a520e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6be8af
[3e4c20e374abd57] jit-backend-dump}
[3e4c20e374b4a89] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6be8ce
[3e4c20e374b7b15] jit-backend-dump}
[3e4c20e374c1efe] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6be8ee
[3e4c20e374c5183] jit-backend-dump}
[3e4c20e374cb649] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6be90d
[3e4c20e374ce510] jit-backend-dump}
[3e4c20e374d8784] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6be92c0 +0  48895D684C8985800000004C898D880000004C8995900000004C89A5980000004C89ADA00000004C89B5A80000004C89BDB00000004883EC08FFD0488B0C258893F900488B69F8F64504010F85520000004883C40848C7452000000000488B4D50488B5560488B5D68488B7570488B7D784C8B85800000004C8B8D880000004C8B95900000004C8BA5980000004C8BADA00000004C8BB5A80000004C8BBDB0000000C349BB7082BEB64E7F000041FFD3E99CFFFFFF
[3e4c20e374da5c5] jit-backend-dump}
[3e4c20e374df717] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6be9380 +0  4C8985800000004C898D880000004C8995900000004883EC08FFD0488B0C258893F900488B69F8F64504010F85320000004883C40848C7452000000000488B4D50488B5560488B7570488B7D784C8B85800000004C8B8D880000004C8B9590000000C349BB7082BEB64E7F000041FFD3E9BCFFFFFF
[3e4c20e374e0f80] jit-backend-dump}
[3e4c20e374e6015] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6be
[3e4c20e374e8994] jit-backend-dump}
[3e4c20e374eddfc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6be95c
[3e4c20e374f04ce] jit-backend-dump}
[3e4c20e37501352] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6be9750 +0  4889E74883EC0841BBC027A90041FFD34883C408488B042540B35F014885C07501C34883C40849BB708ABEB64E7F000041FFE3
[3e4c20e37502ba2] jit-backend-dump}
[3e4c20e37d4828e] {jit-backend
[3e4c20e37fb1bcf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6be9d
[3e4c20e37fcb978] jit-backend-dump}
[3e4c20e37fdbece] {jit-backend-addr
Loop 1 ((if (zero? h5329) null (let ([res (vector 0 0 0)][SetBang0 (+ CellRef(nodes5320) 1)]) (set! nodes5320 SetBang0) (let ([AppRand22 (- h5329 1)]) (let ([res res][AppRand23 (makeTree AppRand22)]) (vector-set! res 0 AppRand23))) (let ([AppRand24 (- h5329 1)]) (let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25))) (vector-set! res 2 h5329) res)) from (makeTree AppRand24)) has address 0x7f4eb6bea0cd to 0x7f4eb6bea900 (bootstrap 0x7f4eb6bea040)
       gc table: 0x7f4eb6be9d80
       function: 0x7f4eb6bea040
         resops: 0x7f4eb6bea0cd
       failures: 0x7f4eb6bea900
            end: 0x7f4eb6beb319
[3e4c20e37fe0698] jit-backend-addr}
[3e4c20e37fe555b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea0f7 +0  42090000
[3e4c20e37fe6a75] jit-backend-dump}
[3e4c20e37fe9e7b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea104 +0  51090000
[3e4c20e37feac9e] jit-backend-dump}
[3e4c20e37fedd4f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea114 +0  5D090000
[3e4c20e37feeabd] jit-backend-dump}
[3e4c20e37ff1a91] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea128 +0  65090000
[3e4c20e37ff27a7] jit-backend-dump}
[3e4c20e37ff56b4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea13f +0  6A090000
[3e4c20e37ff63eb] jit-backend-dump}
[3e4c20e37ff943d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea153 +0  72090000
[3e4c20e37ffa128] jit-backend-dump}
[3e4c20e37ffd195] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea16e +0  8F090000
[3e4c20e37ffdf10] jit-backend-dump}
[3e4c20e38000e70] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea183 +0  96090000
[3e4c20e38001b3f] jit-backend-dump}
[3e4c20e38004a3a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea191 +0  A4090000
[3e4c20e3800573a] jit-backend-dump}
[3e4c20e38008673] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea1a6 +0  AB090000
[3e4c20e3800935d] jit-backend-dump}
[3e4c20e3800c1a4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea1ba +0  B3090000
[3e4c20e3800cec9] jit-backend-dump}
[3e4c20e3800fe23] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea1cf +0  BA090000
[3e4c20e38010b82] jit-backend-dump}
[3e4c20e38013a3a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea1e7 +0  BE090000
[3e4c20e3801479f] jit-backend-dump}
[3e4c20e3801774e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea1f3 +0  CE090000
[3e4c20e3801848f] jit-backend-dump}
[3e4c20e3801b34d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea20b +0  D2090000
[3e4c20e3801c0b5] jit-backend-dump}
[3e4c20e3801f04c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea21d +0  DC090000
[3e4c20e3801fd5b] jit-backend-dump}
[3e4c20e38022c54] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea234 +0  E1090000
[3e4c20e38023963] jit-backend-dump}
[3e4c20e38026880] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea243 +0  EE090000
[3e4c20e3802757d] jit-backend-dump}
[3e4c20e3802a40a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea259 +0  F4090000
[3e4c20e3802b14a] jit-backend-dump}
[3e4c20e3802e0eb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea274 +0  F5090000
[3e4c20e3802edaa] jit-backend-dump}
[3e4c20e38031c7e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea289 +0  FC090000
[3e4c20e38032962] jit-backend-dump}
[3e4c20e38035805] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea297 +0  0A0A0000
[3e4c20e380364dd] jit-backend-dump}
[3e4c20e3803937a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea2b5 +0  080A0000
[3e4c20e3803a055] jit-backend-dump}
[3e4c20e3803ce80] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea2c2 +0  170A0000
[3e4c20e3803db49] jit-backend-dump}
[3e4c20e380409bb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea2d6 +0  1F0A0000
[3e4c20e38041696] jit-backend-dump}
[3e4c20e380444da] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea2ec +0  250A0000
[3e4c20e380451a6] jit-backend-dump}
[3e4c20e38048027] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea2f8 +0  350A0000
[3e4c20e38048d2a] jit-backend-dump}
[3e4c20e3804bb68] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea30e +0  3B0A0000
[3e4c20e3804c83d] jit-backend-dump}
[3e4c20e3804f6b8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea31f +0  460A0000
[3e4c20e38050396] jit-backend-dump}
[3e4c20e380531e3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea334 +0  4D0A0000
[3e4c20e38053eb2] jit-backend-dump}
[3e4c20e38056d08] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea342 +0  5B0A0000
[3e4c20e380579da] jit-backend-dump}
[3e4c20e3805a80f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea35a +0  5F0A0000
[3e4c20e3805b4db] jit-backend-dump}
[3e4c20e3805e30c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea375 +0  600A0000
[3e4c20e3805effa] jit-backend-dump}
[3e4c20e38061f35] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea389 +0  680A0000
[3e4c20e38062c2c] jit-backend-dump}
[3e4c20e38065aad] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea397 +0  760A0000
[3e4c20e3806678e] jit-backend-dump}
[3e4c20e3806960f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea446 +0  E3090000
[3e4c20e3806a2de] jit-backend-dump}
[3e4c20e3806d11c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea48e +0  B7090000
[3e4c20e3806ddf7] jit-backend-dump}
[3e4c20e38070c26] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea4a2 +0  BF090000
[3e4c20e380718ef] jit-backend-dump}
[3e4c20e3807472c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea4b7 +0  C6090000
[3e4c20e38075408] jit-backend-dump}
[3e4c20e3807824e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea4cf +0  CA090000
[3e4c20e38078f14] jit-backend-dump}
[3e4c20e3807bd61] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea4dc +0  D9090000
[3e4c20e3807ca46] jit-backend-dump}
[3e4c20e3807f880] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea4ed +0  E4090000
[3e4c20e3808054f] jit-backend-dump}
[3e4c20e380833e3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea4fb +0  F2090000
[3e4c20e380840b5] jit-backend-dump}
[3e4c20e38086ee9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea512 +0  F7090000
[3e4c20e38087bc8] jit-backend-dump}
[3e4c20e3808aa05] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea522 +0  030A0000
[3e4c20e3808b6ed] jit-backend-dump}
[3e4c20e3808e524] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea537 +0  0A0A0000
[3e4c20e3808f1ea] jit-backend-dump}
[3e4c20e38092040] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea57d +0  E0090000
[3e4c20e38092d1f] jit-backend-dump}
[3e4c20e38095c2c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea592 +0  030A0000
[3e4c20e380968fb] jit-backend-dump}
[3e4c20e38099c62] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea5a0 +0  110A0000
[3e4c20e3809a93e] jit-backend-dump}
[3e4c20e3809d879] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea5b9 +0  140A0000
[3e4c20e3809e53f] jit-backend-dump}
[3e4c20e380a13c0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea5c7 +0  220A0000
[3e4c20e380a209e] jit-backend-dump}
[3e4c20e380a5023] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea5e7 +0  1E0A0000
[3e4c20e380a5d0b] jit-backend-dump}
[3e4c20e380a8d35] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea601 +0  200A0000
[3e4c20e380a9a6f] jit-backend-dump}
[3e4c20e380ac9fd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea616 +0  270A0000
[3e4c20e380ad6ee] jit-backend-dump}
[3e4c20e380b05d4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea624 +0  350A0000
[3e4c20e380b12d4] jit-backend-dump}
[3e4c20e380b41f7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea642 +0  330A0000
[3e4c20e380b4ecc] jit-backend-dump}
[3e4c20e380b7d50] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea656 +0  3B0A0000
[3e4c20e380b8a28] jit-backend-dump}
[3e4c20e380bb8cb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea66a +0  430A0000
[3e4c20e380bc5bf] jit-backend-dump}
[3e4c20e380bf54d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea681 +0  480A0000
[3e4c20e380c0234] jit-backend-dump}
[3e4c20e380c3114] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea68e +0  570A0000
[3e4c20e380c3dec] jit-backend-dump}
[3e4c20e380c6c89] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea6a5 +0  5C0A0000
[3e4c20e380c7976] jit-backend-dump}
[3e4c20e380ca80a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea6b6 +0  670A0000
[3e4c20e380cb4ee] jit-backend-dump}
[3e4c20e380ce369] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea6cb +0  6E0A0000
[3e4c20e380cf054] jit-backend-dump}
[3e4c20e380d1ec2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea6d9 +0  7C0A0000
[3e4c20e380d2b91] jit-backend-dump}
[3e4c20e380d5a80] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea6f1 +0  800A0000
[3e4c20e380d675f] jit-backend-dump}
[3e4c20e380d95ec] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea70b +0  820A0000
[3e4c20e380da2c1] jit-backend-dump}
[3e4c20e380dd188] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea71f +0  8A0A0000
[3e4c20e380dde82] jit-backend-dump}
[3e4c20e380e0e35] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea72d +0  980A0000
[3e4c20e380e1afe] jit-backend-dump}
[3e4c20e380e4a15] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea7cf +0  120A0000
[3e4c20e380e56ce] jit-backend-dump}
[3e4c20e380e8604] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea818 +0  E5090000
[3e4c20e380e92cd] jit-backend-dump}
[3e4c20e380ec224] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea82c +0  ED090000
[3e4c20e380eceff] jit-backend-dump}
[3e4c20e380efd77] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea840 +0  F5090000
[3e4c20e380f0a49] jit-backend-dump}
[3e4c20e380f38d9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea856 +0  FB090000
[3e4c20e380f45a8] jit-backend-dump}
[3e4c20e380f742f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea864 +0  090A0000
[3e4c20e380f80fe] jit-backend-dump}
[3e4c20e380fb012] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea875 +0  140A0000
[3e4c20e380fbce4] jit-backend-dump}
[3e4c20e380feb9c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea883 +0  220A0000
[3e4c20e380ff868] jit-backend-dump}
[3e4c20e38102708] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea89b +0  260A0000
[3e4c20e381033e3] jit-backend-dump}
[3e4c20e3810a089] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea8ab +0  320A0000
[3e4c20e3810af23] jit-backend-dump}
[3e4c20e3810e2e9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea8c3 +0  360A0000
[3e4c20e3810f029] jit-backend-dump}
[3e4c20e38112ec5] jit-backend}
[3e4c20e38116b78] {jit-log-opt-loop
# Loop 1 ((if (zero? h5329) null (let ([res (vector 0 0 0)][SetBang0 (+ CellRef(nodes5320) 1)]) (set! nodes5320 SetBang0) (let ([AppRand22 (- h5329 1)]) (let ([res res][AppRand23 (makeTree AppRand22)]) (vector-set! res 0 AppRand23))) (let ([AppRand24 (- h5329 1)]) (let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25))) (vector-set! res 2 h5329) res)) from (makeTree AppRand24)) : loop with 242 ops
[p0, p1]
+853: label(p0, p1, descr=TargetToken(79354624))
+872: guard_class(p0, 16504944, descr=<Guard0x4b9b400>) [p1, p0]
+891: i3 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+895: i4 = int_is_zero(i3)
+898: guard_true(i4, descr=<Guard0x4bd7bb0>) [p1, p0]
debug_merge_point(0, 0, 'null')
+904: p5 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+908: guard_class(p5, 16481456, descr=<Guard0x4bd7bf8>) [p1, p0]
+920: p7 = getfield_gc_r(p5, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+931: guard_value(p7, ConstPtr(ptr8), descr=<Guard0x4bd7c40>) [p1, p0]
+940: i9 = getfield_gc_i(p5, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_vals_fixed_1 24 pure>)
+944: guard_class(p1, 16437352, descr=<Guard0x4bd7c88>) [p1, p0]
+963: p11 = getfield_gc_r(p1, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+974: guard_value(p11, ConstPtr(ptr12), descr=<Guard0x4bd7cd0>) [p1, p0]
+983: p13 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+987: guard_not_invalidated(descr=<Guard0x4bd7d18>) [p1, p0]
+987: p14 = getfield_gc_r(p1, descr=<FieldP pycket.small_list.LetContSize1.inst__vals_w_0 40 pure>)
+991: guard_nonnull_class(p14, ConstClass(W_Vector), descr=<Guard0x4b9b460>) [p1, p0]
+1010: p16 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(vector-set! res 1 AppRand25) from (makeTree AppRand24)')
+1014: p17 = getfield_gc_r(p14, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1018: guard_class(p17, 16623792, descr=<Guard0x4bd7d60>) [p1, p0]
+1031: i19 = getfield_gc_i(p14, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1035: i21 = int_lt(1, i19)
+1039: guard_true(i21, descr=<Guard0x4bd7da8>) [p1, p0]
+1045: p22 = getfield_gc_r(p14, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1049: setarrayitem_gc(p22, 1, i9, descr=<ArrayS 8>)
+1053: guard_class(p16, 16435208, descr=<Guard0x4b9b4c0>) [p16, p14, i9, p13]
+1066: p25 = getfield_gc_r(p16, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+1077: guard_value(p25, ConstPtr(ptr26), descr=<Guard0x4bd7df0>) [p16, p14, i9, p13]
+1086: p27 = getfield_gc_r(p16, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1090: p28 = getfield_gc_r(p16, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1094: guard_class(p28, 16437352, descr=<Guard0x4bd7e38>) [p16, p14, i9, p13]
+1107: p30 = getfield_gc_r(p28, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1111: guard_nonnull_class(p30, ConstClass(ForwardLink), descr=<Guard0x4b9b520>) [p16, p14, i9, p13]
debug_merge_point(0, 0, '(vector-set! res 2 h5329)')
+1131: guard_class(p27, 16503536, descr=<Guard0x4bd7e80>) [p16, p14, i9, p13]
+1143: p33 = getfield_gc_r(p27, descr=<FieldP pycket.small_list.ConsEnvSize2Fixed01.inst_w_val0 24 pure>)
+1147: guard_nonnull_class(p33, ConstClass(W_Vector), descr=<Guard0x4b9b580>) [p16, p14, i9, p13]
+1167: p35 = getfield_gc_r(p27, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1171: guard_class(p35, 16504944, descr=<Guard0x4bd7ec8>) [p16, p14, i9, p13]
+1185: i37 = getfield_gc_i(p35, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1189: p38 = getfield_gc_r(p33, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1194: guard_class(p38, 16623792, descr=<Guard0x4bd7f10>) [p16, p14, i9, p13]
+1208: i40 = getfield_gc_i(p33, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1213: i42 = int_lt(2, i40)
+1217: guard_true(i42, descr=<Guard0x4bd7f58>) [p16, p14, i9, p13]
+1223: p43 = getfield_gc_r(p33, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
debug_merge_point(0, 0, 'res')
+1228: p44 = getfield_gc_r(p28, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+1232: setarrayitem_gc(p43, 2, i37, descr=<ArrayS 8>)
+1236: guard_value(p44, ConstPtr(ptr46), descr=<Guard0x4b9b5e0>) [p28, p27, p33, p44, None, None, None]
+1245: p48 = getfield_gc_r(p28, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1249: p49 = getfield_gc_r(p28, descr=<FieldP pycket.small_list.LetContSize1.inst__vals_w_0 40 pure>)
+1253: guard_nonnull_class(p49, ConstClass(W_Vector), descr=<Guard0x4b9b640>) [p28, p27, p33, p44, None, None, None]
+1272: p51 = getfield_gc_r(p28, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(vector-set! res 1 AppRand25) from (vector-set! res 2 h5329)')
+1276: p52 = getfield_gc_r(p49, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1280: guard_class(p52, 16622984, descr=<Guard0x4bd7fa0>) [p28, p27, p33, p44, None, None, None]
+1293: i54 = getfield_gc_i(p49, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1297: i56 = int_lt(1, i54)
+1301: guard_true(i56, descr=<Guard0x4c30020>) [p28, p27, p33, p44, None, None, None]
+1307: p57 = getfield_gc_r(p49, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1321: setarrayitem_gc(p57, 1, p33, descr=<ArrayP 8>)
+1325: guard_class(p51, 16435208, descr=<Guard0x4b9b6a0>) [p51, p33, p49, p48, None, None, None]
+1337: p60 = getfield_gc_r(p51, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+1341: guard_value(p60, ConstPtr(ptr61), descr=<Guard0x4c30068>) [p51, p33, p49, p48, None, None, None]
+1350: p62 = getfield_gc_r(p51, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1354: p63 = getfield_gc_r(p51, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1358: guard_class(p63, 16437352, descr=<Guard0x4c300b0>) [p51, p33, p49, p48, None, None, None]
+1370: p65 = getfield_gc_r(p63, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1374: guard_nonnull_class(p65, ConstClass(ForwardLink), descr=<Guard0x4b9b700>) [p51, p33, p49, p48, None, None, None]
debug_merge_point(0, 0, '(vector-set! res 2 h5329)')
+1392: guard_class(p62, 16503536, descr=<Guard0x4c300f8>) [p51, p33, p49, p48, None, None, None]
+1404: p68 = getfield_gc_r(p62, descr=<FieldP pycket.small_list.ConsEnvSize2Fixed01.inst_w_val0 24 pure>)
+1408: guard_nonnull_class(p68, ConstClass(W_Vector), descr=<Guard0x4b9b760>) [p51, p33, p49, p48, None, None, None]
+1426: p70 = getfield_gc_r(p62, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1430: guard_class(p70, 16504944, descr=<Guard0x4c30140>) [p51, p33, p49, p48, None, None, None]
+1443: i72 = getfield_gc_i(p70, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1447: p73 = getfield_gc_r(p68, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1451: guard_class(p73, 16622984, descr=<Guard0x4c30188>) [p51, p33, p49, p48, None, None, None]
+1464: i75 = getfield_gc_i(p68, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1468: i77 = int_lt(2, i75)
+1472: guard_true(i77, descr=<Guard0x4c301d0>) [p51, p33, p49, p48, None, None, None]
+1478: p78 = getfield_gc_r(p68, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
debug_merge_point(0, 0, 'res')
+1482: p79 = getfield_gc_r(p63, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+1493: guard_value(p79, ConstPtr(ptr80), descr=<Guard0x4c30218>) [p51, p33, p49, p48, None, None, None]
+1502: p81 = getfield_gc_r(p63, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1506: p82 = getfield_gc_r(p63, descr=<FieldP pycket.small_list.LetContSize1.inst__vals_w_0 40 pure>)
+1510: guard_nonnull_class(p82, ConstClass(W_Vector), descr=<Guard0x4b9b7c0>) [p51, p33, p49, p48, None, None, None]
+1529: p84 = getfield_gc_r(p63, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(vector-set! res 0 AppRand23) from (vector-set! res 2 h5329)')
+1533: p85 = getfield_gc_r(p82, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1537: guard_class(p85, 16623792, descr=<Guard0x4c30260>) [p51, p33, p49, p48, None, None, None]
+1549: i87 = getfield_gc_i(p82, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1553: i89 = int_lt(0, i87)
+1557: guard_true(i89, descr=<Guard0x4c302a8>) [p51, p33, p49, p48, None, None, None]
+1563: p90 = new_with_vtable(descr=<SizeDescr 16>)
+1610: setfield_gc(p90, i72, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1625: setarrayitem_gc(p78, 2, p90, descr=<ArrayP 8>)
+1629: p93 = call_r(7464704, p85, p82, descr=<Callr 8 rr EF=5>)
+1723: guard_no_exception(descr=<Guard0x4b9b820>) [p84, p68, p82, p93, p81, None, None, None, None, None, None]
+1762: setfield_gc(p82, ConstPtr(ptr94), descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1766: setfield_gc(p82, p93, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1780: setarrayitem_gc(p93, 0, p68, descr=<ArrayP 8>)
+1791: guard_class(p84, 16435208, descr=<Guard0x4b9b880>) [p84, p68, p82, p81, None, None, None, None, None, None]
+1810: p97 = getfield_gc_r(p84, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+1821: guard_value(p97, ConstPtr(ptr98), descr=<Guard0x4c302f0>) [p84, p68, p82, p81, None, None, None, None, None, None]
+1830: p99 = getfield_gc_r(p84, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1834: p100 = getfield_gc_r(p84, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1838: guard_class(p100, 16437352, descr=<Guard0x4c30338>) [p84, p68, p82, p81, None, None, None, None, None, None]
+1851: p102 = getfield_gc_r(p100, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1855: guard_nonnull_class(p102, ConstClass(ForwardLink), descr=<Guard0x4b9b8e0>) [p84, p68, p82, p81, None, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([AppRand24 (- h5329 1)]) (let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25)))')
debug_merge_point(0, 0, '(- h5329 1)')
+1875: guard_class(p99, 16503536, descr=<Guard0x4c30380>) [p84, p68, p82, p81, None, None, None, None, None, None]
+1888: p105 = getfield_gc_r(p99, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1892: guard_class(p105, 16504944, descr=<Guard0x4c303c8>) [p84, p68, p82, p81, None, None, None, None, None, None]
+1905: i107 = getfield_gc_i(p105, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1909: i109 = int_sub_ovf(i107, 1)
+1913: guard_no_overflow(descr=<Guard0x4c30410>) [p84, p68, p82, p81, None, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25))')
debug_merge_point(0, 0, 'res')
+1919: p110 = getfield_gc_r(p99, descr=<FieldP pycket.small_list.ConsEnvSize2Fixed01.inst_w_val0 24 pure>)
+1923: guard_nonnull_class(p110, ConstClass(W_Vector), descr=<Guard0x4b9b940>) [p84, p68, p82, p81, None, None, None, None, None, None]
+1942: p112 = getfield_gc_r(p105, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1946: guard_class(p112, 16481456, descr=<Guard0x4c30458>) [p84, p68, p82, p81, None, None, None, None, None, None]
+1958: p114 = getfield_gc_r(p112, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(makeTree AppRand24)')
+1962: p115 = getfield_gc_r(p112, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1966: guard_value(p115, ConstPtr(ptr116), descr=<Guard0x4c304a0>) [p84, p68, p82, p81, None, None, None, None, None, None]
debug_merge_point(0, 0, '(if (zero? h5329) null (let ([res (vector 0 0 0)][SetBang0 (+ CellRef(nodes5320) 1)]) (set! nodes5320 SetBang0) (let ([AppRand22 (- h5329 1)]) (let ([res res][AppRand23 (makeTree AppRand22)]) (vector-set! res 0 AppRand23))) (let ([AppRand24 (- h5329 1)]) (let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25))) (vector-set! res 2 h5329) res)) from (makeTree AppRand24)')
+1979: p117 = same_as_r(p110)
+1982: p118 = same_as_r(p102)
+1985: label(p112, i109, p102, p114, p99, p100, p110, p105, p117, p118, descr=TargetToken(79354704))
+2040: i119 = int_is_zero(i109)
+2043: guard_true(i119, descr=<Guard0x4b9b9a0>) [i109, p112, p100, p99, p110, p114, p102]
debug_merge_point(0, 0, 'null')
+2049: i120 = getfield_gc_i(p112, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_vals_fixed_1 24 pure>)
+2053: guard_not_invalidated(descr=<Guard0x4c304e8>) [i109, p112, p100, p99, p110, p114, p102]
debug_merge_point(0, 0, '(vector-set! res 1 AppRand25) from (makeTree AppRand24)')
+2053: p121 = getfield_gc_r(p110, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+2057: guard_class(p121, 16623792, descr=<Guard0x4c30530>) [i109, p112, p100, p99, p110, p114, p102]
+2070: i123 = getfield_gc_i(p110, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+2074: i125 = int_lt(1, i123)
+2078: guard_true(i125, descr=<Guard0x4c30578>) [i109, p112, p100, p99, p110, p114, p102]
+2084: p126 = getfield_gc_r(p110, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
debug_merge_point(0, 0, '(vector-set! res 2 h5329)')
+2088: p127 = getfield_gc_r(p117, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+2092: setarrayitem_gc(p126, 1, i120, descr=<ArrayS 8>)
+2096: guard_class(p127, 16623792, descr=<Guard0x4b9ba00>) [p99, p117, p127, p118, None, p100, None, None, None, None]
+2109: i130 = getfield_gc_i(p117, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+2113: i132 = int_lt(2, i130)
+2117: guard_true(i132, descr=<Guard0x4c305c0>) [p99, p117, p127, p118, None, p100, None, None, None, None]
+2123: p133 = getfield_gc_r(p117, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
debug_merge_point(0, 0, 'res')
+2127: p134 = getfield_gc_r(p100, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+2131: setarrayitem_gc(p133, 2, 1, descr=<ArrayS 8>)
+2146: guard_value(p134, ConstPtr(ptr137), descr=<Guard0x4b9ba60>) [p100, p99, p117, p134, None, None, None, None, None, None, None]
+2155: p138 = getfield_gc_r(p100, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+2159: p139 = getfield_gc_r(p100, descr=<FieldP pycket.small_list.LetContSize1.inst__vals_w_0 40 pure>)
+2163: guard_nonnull_class(p139, ConstClass(W_Vector), descr=<Guard0x4b9bac0>) [p100, p99, p117, p134, None, None, None, None, None, None, None]
+2181: p141 = getfield_gc_r(p100, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(vector-set! res 1 AppRand25) from (vector-set! res 2 h5329)')
+2185: p142 = getfield_gc_r(p139, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+2189: guard_class(p142, 16622984, descr=<Guard0x4c30608>) [p100, p99, p117, p134, None, None, None, None, None, None, None]
+2202: i144 = getfield_gc_i(p139, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+2206: i146 = int_lt(1, i144)
+2210: guard_true(i146, descr=<Guard0x4c30650>) [p100, p99, p117, p134, None, None, None, None, None, None, None]
+2216: p147 = getfield_gc_r(p139, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+2230: setarrayitem_gc(p147, 1, p117, descr=<ArrayP 8>)
+2234: guard_class(p141, 16435208, descr=<Guard0x4b9bb20>) [p141, p117, p139, p138, None, None, None, None, None, None, None]
+2246: p150 = getfield_gc_r(p141, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+2257: guard_value(p150, ConstPtr(ptr151), descr=<Guard0x4c30698>) [p141, p117, p139, p138, None, None, None, None, None, None, None]
+2266: p152 = getfield_gc_r(p141, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+2270: p153 = getfield_gc_r(p141, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+2274: guard_class(p153, 16437352, descr=<Guard0x4c306e0>) [p141, p117, p139, p138, None, None, None, None, None, None, None]
+2286: p155 = getfield_gc_r(p153, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+2290: guard_nonnull_class(p155, ConstClass(ForwardLink), descr=<Guard0x4b9bb80>) [p141, p117, p139, p138, None, None, None, None, None, None, None]
debug_merge_point(0, 0, '(vector-set! res 2 h5329)')
+2309: guard_class(p152, 16503536, descr=<Guard0x4c30728>) [p141, p117, p139, p138, None, None, None, None, None, None, None]
+2322: p158 = getfield_gc_r(p152, descr=<FieldP pycket.small_list.ConsEnvSize2Fixed01.inst_w_val0 24 pure>)
+2326: guard_nonnull_class(p158, ConstClass(W_Vector), descr=<Guard0x4b9bbe0>) [p141, p117, p139, p138, None, None, None, None, None, None, None]
+2345: p160 = getfield_gc_r(p152, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+2349: guard_class(p160, 16504944, descr=<Guard0x4c30770>) [p141, p117, p139, p138, None, None, None, None, None, None, None]
+2362: i162 = getfield_gc_i(p160, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+2366: p163 = getfield_gc_r(p158, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+2370: guard_class(p163, 16622984, descr=<Guard0x4c307b8>) [p141, p117, p139, p138, None, None, None, None, None, None, None]
+2383: i165 = getfield_gc_i(p158, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+2387: i167 = int_lt(2, i165)
+2391: guard_true(i167, descr=<Guard0x4c30800>) [p141, p117, p139, p138, None, None, None, None, None, None, None]
+2397: p168 = getfield_gc_r(p158, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
debug_merge_point(0, 0, 'res')
+2401: p169 = getfield_gc_r(p153, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+2412: guard_value(p169, ConstPtr(ptr170), descr=<Guard0x4c30848>) [p141, p117, p139, p138, None, None, None, None, None, None, None]
+2421: p171 = getfield_gc_r(p153, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+2425: p172 = getfield_gc_r(p153, descr=<FieldP pycket.small_list.LetContSize1.inst__vals_w_0 40 pure>)
+2429: guard_nonnull_class(p172, ConstClass(W_Vector), descr=<Guard0x4b9bc40>) [p141, p117, p139, p138, None, None, None, None, None, None, None]
+2447: p174 = getfield_gc_r(p153, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(vector-set! res 0 AppRand23) from (vector-set! res 2 h5329)')
+2451: p175 = getfield_gc_r(p172, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+2455: guard_class(p175, 16623792, descr=<Guard0x4c30890>) [p141, p117, p139, p138, None, None, None, None, None, None, None]
+2467: i177 = getfield_gc_i(p172, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+2471: i179 = int_lt(0, i177)
+2475: guard_true(i179, descr=<Guard0x4c308d8>) [p141, p117, p139, p138, None, None, None, None, None, None, None]
+2481: p180 = new_with_vtable(descr=<SizeDescr 16>)
+2522: setfield_gc(p180, i162, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+2537: setarrayitem_gc(p168, 2, p180, descr=<ArrayP 8>)
+2541: p183 = call_r(7464704, p175, p172, descr=<Callr 8 rr EF=5>)
+2628: guard_no_exception(descr=<Guard0x4b9bca0>) [p174, p158, p172, p183, p171, None, None, None, None, None, None, None, None, None, None]
+2668: setfield_gc(p172, ConstPtr(ptr184), descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+2672: setfield_gc(p172, p183, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+2686: setarrayitem_gc(p183, 0, p158, descr=<ArrayP 8>)
+2697: guard_class(p174, 16435208, descr=<Guard0x4b9bd00>) [p174, p158, p172, p171, None, None, None, None, None, None, None, None, None, None]
+2716: p187 = getfield_gc_r(p174, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+2727: guard_value(p187, ConstPtr(ptr188), descr=<Guard0x4c30920>) [p174, p158, p172, p171, None, None, None, None, None, None, None, None, None, None]
+2736: p189 = getfield_gc_r(p174, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+2740: p190 = getfield_gc_r(p174, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+2744: guard_class(p190, 16437352, descr=<Guard0x4c30968>) [p174, p158, p172, p171, None, None, None, None, None, None, None, None, None, None]
+2756: p192 = getfield_gc_r(p190, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+2760: guard_nonnull_class(p192, ConstClass(ForwardLink), descr=<Guard0x4b9bd60>) [p174, p158, p172, p171, None, None, None, None, None, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([AppRand24 (- h5329 1)]) (let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25)))')
debug_merge_point(0, 0, '(- h5329 1)')
+2778: guard_class(p189, 16503536, descr=<Guard0x4c309b0>) [p174, p158, p172, p171, None, None, None, None, None, None, None, None, None, None]
+2792: p195 = getfield_gc_r(p189, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+2797: guard_class(p195, 16504944, descr=<Guard0x4c309f8>) [p174, p158, p172, p171, None, None, None, None, None, None, None, None, None, None]
+2809: i197 = getfield_gc_i(p195, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+2813: i199 = int_sub_ovf(i197, 1)
+2817: guard_no_overflow(descr=<Guard0x4c30a40>) [p174, p158, p172, p171, None, None, None, None, None, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25))')
debug_merge_point(0, 0, 'res')
+2823: p200 = getfield_gc_r(p189, descr=<FieldP pycket.small_list.ConsEnvSize2Fixed01.inst_w_val0 24 pure>)
+2828: guard_nonnull_class(p200, ConstClass(W_Vector), descr=<Guard0x4b9bdc0>) [p174, p158, p172, p171, None, None, None, None, None, None, None, None, None, None]
+2847: p202 = getfield_gc_r(p195, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+2851: guard_class(p202, 16481456, descr=<Guard0x4c30a88>) [p174, p158, p172, p171, None, None, None, None, None, None, None, None, None, None]
+2863: p204 = getfield_gc_r(p202, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(makeTree AppRand24)')
+2867: p205 = getfield_gc_r(p202, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+2878: guard_value(p205, ConstPtr(ptr206), descr=<Guard0x4c30ad0>) [p174, p158, p172, p171, None, None, None, None, None, None, None, None, None, None]
debug_merge_point(0, 0, '(if (zero? h5329) null (let ([res (vector 0 0 0)][SetBang0 (+ CellRef(nodes5320) 1)]) (set! nodes5320 SetBang0) (let ([AppRand22 (- h5329 1)]) (let ([res res][AppRand23 (makeTree AppRand22)]) (vector-set! res 0 AppRand23))) (let ([AppRand24 (- h5329 1)]) (let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25))) (vector-set! res 2 h5329) res)) from (makeTree AppRand24)')
+2887: jump(p202, i199, p192, p204, p189, p190, p200, p195, p200, p192, descr=TargetToken(79354704))
+2944: --end of the loop--
[3e4c20e38237ac6] jit-log-opt-loop}
[3e4c20e3866598d] {jit-backend
[3e4c20e386d9871] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6beb
[3e4c20e386e2098] jit-backend-dump}
[3e4c20e386ec594] {jit-backend-addr
Loop 2 ((if (zero? h5329) null (let ([res (vector 0 0 0)][SetBang0 (+ CellRef(nodes5320) 1)]) (set! nodes5320 SetBang0) (let ([AppRand22 (- h5329 1)]) (let ([res res][AppRand23 (makeTree AppRand22)]) (vector-set! res 0 AppRand23))) (let ([AppRand24 (- h5329 1)]) (let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25))) (vector-set! res 2 h5329) res)) from (makeTree AppRand22)) has address 0x7f4eb6beb54d to 0x7f4eb6beb770 (bootstrap 0x7f4eb6beb4c0)
       gc table: 0x7f4eb6beb430
       function: 0x7f4eb6beb4c0
         resops: 0x7f4eb6beb54d
       failures: 0x7f4eb6beb770
            end: 0x7f4eb6beb927
[3e4c20e386ef60e] jit-backend-addr}
[3e4c20e386f3950] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6beb577 +0  24020000
[3e4c20e386f4d6f] jit-backend-dump}
[3e4c20e386f8208] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6beb584 +0  33020000
[3e4c20e386f9110] jit-backend-dump}
[3e4c20e386fc204] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6beb597 +0  3C020000
[3e4c20e386fcfa0] jit-backend-dump}
[3e4c20e386ffecf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6beb5ad +0  42020000
[3e4c20e38700bf7] jit-backend-dump}
[3e4c20e38703ce8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6beb5bd +0  6A020000
[3e4c20e38704a5c] jit-backend-dump}
[3e4c20e38707a80] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6beb5d1 +0  72020000
[3e4c20e387087b7] jit-backend-dump}
[3e4c20e3870b6f9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6beb5eb +0  74020000
[3e4c20e3870c442] jit-backend-dump}
[3e4c20e3870f304] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6beb5f9 +0  82020000
[3e4c20e38710016] jit-backend-dump}
[3e4c20e38712ed1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6beb60a +0  8D020000
[3e4c20e38713be0] jit-backend-dump}
[3e4c20e38716a30] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6beb63d +0  76020000
[3e4c20e38717736] jit-backend-dump}
[3e4c20e3871a6ef] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6beb647 +0  A4020000
[3e4c20e3871b442] jit-backend-dump}
[3e4c20e3871e32b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6beb658 +0  AF020000
[3e4c20e3871f02e] jit-backend-dump}
[3e4c20e38722b78] jit-backend}
[3e4c20e38726742] {jit-log-opt-loop
# Loop 2 ((if (zero? h5329) null (let ([res (vector 0 0 0)][SetBang0 (+ CellRef(nodes5320) 1)]) (set! nodes5320 SetBang0) (let ([AppRand22 (- h5329 1)]) (let ([res res][AppRand23 (makeTree AppRand22)]) (vector-set! res 0 AppRand23))) (let ([AppRand24 (- h5329 1)]) (let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25))) (vector-set! res 2 h5329) res)) from (makeTree AppRand22)) : loop with 81 ops
[p0, p1]
+293: label(p0, p1, descr=TargetToken(79354784))
+312: guard_class(p0, 16504944, descr=<Guard0x4b9be20>) [p1, p0]
+331: i3 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+335: i4 = int_is_zero(i3)
+338: guard_false(i4, descr=<Guard0x4c30ba8>) [p1, p0]
debug_merge_point(0, 0, '(let ([res (vector 0 0 0)][SetBang0 (+ CellRef(nodes5320) 1)]) (set! nodes5320 SetBang0) (let ([AppRand22 (- h5329 1)]) (let ([res res][AppRand23 (makeTree AppRand22)]) (vector-set! res 0 AppRand23))) (let ([AppRand24 (- h5329 1)]) (let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25))) (vector-set! res 2 h5329) res)')
+344: guard_class(p1, 16437352, descr=<Guard0x4c30bf0>) [p1, p0]
+363: p6 = getfield_gc_r(p1, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+367: guard_nonnull_class(p6, ConstClass(ForwardLink), descr=<Guard0x4b9be80>) [p1, p0]
debug_merge_point(0, 0, '(vector 0 0 0)')
+385: guard_not_invalidated(descr=<Guard0x4c30c38>) [p1, p0]
debug_merge_point(0, 0, '(+ CellRef(nodes5320) 1)')
+385: p8 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+389: guard_class(p8, 16481456, descr=<Guard0x4c30c80>) [p1, p0]
+401: p10 = getfield_gc_r(p8, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+412: guard_value(p10, ConstPtr(ptr11), descr=<Guard0x4c30cc8>) [p1, p0]
+421: p12 = getfield_gc_r(p8, descr=<FieldP pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_w_val0 32 pure>)
+425: p13 = getfield_gc_r(p12, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+429: guard_nonnull_class(p13, ConstClass(W_CellIntegerStrategy), descr=<Guard0x4b9bee0>) [p1, p0]
+447: i15 = getfield_gc_i(p13, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+451: i17 = int_add_ovf(i15, 1)
+455: guard_no_overflow(descr=<Guard0x4c30d10>) [p1, p0]
debug_merge_point(0, 0, '(set! nodes5320 SetBang0)')
debug_merge_point(0, 0, '(let ([AppRand22 (- h5329 1)]) (let ([res res][AppRand23 (makeTree AppRand22)]) (vector-set! res 0 AppRand23)))')
debug_merge_point(0, 0, '(- h5329 1)')
+461: setfield_gc(p13, i17, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+465: i19 = int_sub_ovf(i3, 1)
+472: guard_no_overflow(descr=<Guard0x4b9bf40>) [i3, p1, i17, p0, p6]
debug_merge_point(0, 0, '(let ([res res][AppRand23 (makeTree AppRand22)]) (vector-set! res 0 AppRand23))')
debug_merge_point(0, 0, 'res')
+478: p20 = getfield_gc_r(p8, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(makeTree AppRand22)')
debug_merge_point(0, 0, '(if (zero? h5329) null (let ([res (vector 0 0 0)][SetBang0 (+ CellRef(nodes5320) 1)]) (set! nodes5320 SetBang0) (let ([AppRand22 (- h5329 1)]) (let ([res res][AppRand23 (makeTree AppRand22)]) (vector-set! res 0 AppRand23))) (let ([AppRand24 (- h5329 1)]) (let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25))) (vector-set! res 2 h5329) res)) from (makeTree AppRand22)')
+482: i21 = same_as_i(i17)
+485: p22 = same_as_r(p20)
+488: label(p8, i19, p6, p20, p0, i17, p1, p12, p13, i21, p22, descr=TargetToken(79354864))
+520: i23 = int_is_zero(i19)
+523: guard_false(i23, descr=<Guard0x4b9bfa0>) [i19, p8, i17, p0, p1, p20, p6]
debug_merge_point(0, 0, '(let ([res (vector 0 0 0)][SetBang0 (+ CellRef(nodes5320) 1)]) (set! nodes5320 SetBang0) (let ([AppRand22 (- h5329 1)]) (let ([res res][AppRand23 (makeTree AppRand22)]) (vector-set! res 0 AppRand23))) (let ([AppRand24 (- h5329 1)]) (let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25))) (vector-set! res 2 h5329) res)')
debug_merge_point(0, 0, '(vector 0 0 0)')
+529: guard_not_invalidated(descr=<Guard0x4c30d58>) [i19, p8, i17, p0, p1, p20, p6]
debug_merge_point(0, 0, '(+ CellRef(nodes5320) 1)')
+529: i25 = int_add_ovf(i21, 1)
+533: guard_no_overflow(descr=<Guard0x4c30da0>) [i19, p8, i17, p0, p1, p20, p6]
debug_merge_point(0, 0, '(set! nodes5320 SetBang0)')
debug_merge_point(0, 0, '(let ([AppRand22 (- h5329 1)]) (let ([res res][AppRand23 (makeTree AppRand22)]) (vector-set! res 0 AppRand23)))')
debug_merge_point(0, 0, '(- h5329 1)')
+539: setfield_gc(p13, i25, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+543: i27 = int_sub_ovf(i19, 1)
+550: guard_no_overflow(descr=<Guard0x4c36020>) [i19, i25, p8, i17, p0, p1, p20, p6]
debug_merge_point(0, 0, '(let ([res res][AppRand23 (makeTree AppRand22)]) (vector-set! res 0 AppRand23))')
debug_merge_point(0, 0, 'res')
debug_merge_point(0, 0, '(makeTree AppRand22)')
debug_merge_point(0, 0, '(if (zero? h5329) null (let ([res (vector 0 0 0)][SetBang0 (+ CellRef(nodes5320) 1)]) (set! nodes5320 SetBang0) (let ([AppRand22 (- h5329 1)]) (let ([res res][AppRand23 (makeTree AppRand22)]) (vector-set! res 0 AppRand23))) (let ([AppRand24 (- h5329 1)]) (let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25))) (vector-set! res 2 h5329) res)) from (makeTree AppRand22)')
+556: p28 = new_with_vtable(descr=<SizeDescr 24>)
+606: p29 = new_with_vtable(descr=<SizeDescr 48>)
+617: p30 = new_with_vtable(descr=<SizeDescr 40>)
+628: setfield_gc(p30, p6, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+632: p31 = new_with_vtable(descr=<SizeDescr 32>)
+650: setfield_gc(p31, p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+654: setfield_gc(p31, i17, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed01.inst_vals_fixed_1 16 pure>)
+658: p32 = new_with_vtable(descr=<SizeDescr 32>)
+669: setfield_gc(p32, 3, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+677: p35 = new_array(3, descr=<ArrayS 8>)
+696: setarrayitem_gc(p35, 0, 0, descr=<ArrayS 8>)
+704: setarrayitem_gc(p35, 1, 0, descr=<ArrayS 8>)
+712: setarrayitem_gc(p35, 2, 0, descr=<ArrayS 8>)
+720: setfield_gc(p32, p35, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+731: setfield_gc(p32, ConstPtr(ptr42), descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+735: setfield_gc(p31, p32, descr=<FieldP pycket.small_list.ConsEnvSize2Fixed01.inst_w_val0 24 pure>)
+739: setfield_gc(p30, p31, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+743: setfield_gc(p30, p1, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+754: setfield_gc(p30, ConstPtr(ptr43), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+758: setfield_gc(p28, p8, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+762: setfield_gc(p28, i19, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+766: setfield_gc(p29, p6, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+777: setfield_gc(p29, p20, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+781: setfield_gc(p29, p30, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+792: setfield_gc(p29, ConstPtr(ptr44), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+796: setfield_gc(p29, p32, descr=<FieldP pycket.small_list.LetContSize1.inst__vals_w_0 40 pure>)
+800: jump(p8, i27, p6, p22, p28, i25, p29, p12, p13, i25, p22, descr=TargetToken(79354864))
+832: --end of the loop--
[3e4c20e38769a26] jit-log-opt-loop}
[3e4c20e38887e2a] {jit-backend
[3e4c20e388c854c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6beba
[3e4c20e388cf9de] jit-backend-dump}
[3e4c20e388d9a2b] {jit-backend-addr
Loop 3 ((vector-set! res 0 AppRand23) from (makeTree AppRand22)) has address 0x7f4eb6bebb4d to 0x7f4eb6bebcb0 (bootstrap 0x7f4eb6bebac0)
       gc table: 0x7f4eb6beba30
       function: 0x7f4eb6bebac0
         resops: 0x7f4eb6bebb4d
       failures: 0x7f4eb6bebcb0
            end: 0x7f4eb6bebe66
[3e4c20e388dc639] jit-backend-addr}
[3e4c20e388e0919] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bebb64 +0  76010000
[3e4c20e388e1c9c] jit-backend-dump}
[3e4c20e388e536b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bebb7a +0  7C010000
[3e4c20e388e61ff] jit-backend-dump}
[3e4c20e388e9318] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bebb8e +0  84010000
[3e4c20e388ea0b4] jit-backend-dump}
[3e4c20e388ed0c5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bebb9c +0  92010000
[3e4c20e388ede43] jit-backend-dump}
[3e4c20e388f0d69] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bebbb7 +0  93010000
[3e4c20e388f1a81] jit-backend-dump}
[3e4c20e388f49c0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bebbcb +0  9B010000
[3e4c20e388f56d2] jit-backend-dump}
[3e4c20e388f8575] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bebbdf +0  A3010000
[3e4c20e388f92a9] jit-backend-dump}
[3e4c20e388fc11a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bebbf5 +0  A9010000
[3e4c20e388fce0b] jit-backend-dump}
[3e4c20e388ffcae] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bebc01 +0  B9010000
[3e4c20e3890099b] jit-backend-dump}
[3e4c20e3890383b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bebc11 +0  C5010000
[3e4c20e38904535] jit-backend-dump}
[3e4c20e3890739a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bebc1f +0  D3010000
[3e4c20e389080f6] jit-backend-dump}
[3e4c20e3890af86] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bebc36 +0  D8010000
[3e4c20e3890bc86] jit-backend-dump}
[3e4c20e3890eb07] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bebc47 +0  E3010000
[3e4c20e3890f7fe] jit-backend-dump}
[3e4c20e3891268b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bebc5f +0  E7010000
[3e4c20e38913366] jit-backend-dump}
[3e4c20e38916d5a] jit-backend}
[3e4c20e3891a9e2] {jit-log-opt-loop
# Loop 3 ((vector-set! res 0 AppRand23) from (makeTree AppRand22)) : entry bridge with 41 ops
[p0, p1]
debug_merge_point(0, 0, '(vector-set! res 0 AppRand23) from (makeTree AppRand22)')
+293: guard_not_invalidated(descr=<Guard0x4c36080>) [p1, p0]
+293: guard_class(p0, 16503536, descr=<Guard0x4c30de8>) [p1, p0]
+312: p3 = getfield_gc_r(p0, descr=<FieldP pycket.small_list.ConsEnvSize2Fixed01.inst_w_val0 24 pure>)
+316: guard_nonnull_class(p3, ConstClass(W_Vector), descr=<Guard0x4c360e0>) [p1, p0]
+334: i5 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed01.inst_vals_fixed_1 16 pure>)
+338: p6 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+342: guard_class(p6, 16623792, descr=<Guard0x4c30e30>) [p1, p0]
+354: i8 = getfield_gc_i(p3, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+358: i10 = int_lt(0, i8)
+362: guard_true(i10, descr=<Guard0x4c30e78>) [p1, p0]
+368: p11 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+372: setarrayitem_gc(p11, 0, i5, descr=<ArrayS 8>)
+376: guard_class(p1, 16435208, descr=<Guard0x4c36140>) [p1, p0]
+395: p14 = getfield_gc_r(p1, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+406: guard_value(p14, ConstPtr(ptr15), descr=<Guard0x4c30ec0>) [p1, p0]
+415: p16 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+419: p17 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+423: guard_class(p17, 16437352, descr=<Guard0x4c30f08>) [p1, p0]
+435: p19 = getfield_gc_r(p17, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+439: guard_nonnull_class(p19, ConstClass(ForwardLink), descr=<Guard0x4c361a0>) [p1, p0]
debug_merge_point(0, 0, '(let ([AppRand24 (- h5329 1)]) (let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25)))')
debug_merge_point(0, 0, '(- h5329 1)')
+457: guard_class(p16, 16503536, descr=<Guard0x4c30f50>) [p1, p0]
+469: p22 = getfield_gc_r(p16, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+473: guard_class(p22, 16504944, descr=<Guard0x4c30f98>) [p1, p0]
+485: i24 = getfield_gc_i(p22, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+489: i26 = int_sub_ovf(i24, 1)
+493: guard_no_overflow(descr=<Guard0x4c30fe0>) [p1, p0]
debug_merge_point(0, 0, '(let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25))')
debug_merge_point(0, 0, 'res')
+499: p27 = getfield_gc_r(p16, descr=<FieldP pycket.small_list.ConsEnvSize2Fixed01.inst_w_val0 24 pure>)
+503: guard_nonnull_class(p27, ConstClass(W_Vector), descr=<Guard0x4c36200>) [p1, p0]
+522: p29 = getfield_gc_r(p22, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+526: guard_class(p29, 16481456, descr=<Guard0x4c31028>) [p1, p0]
+539: p31 = getfield_gc_r(p29, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(makeTree AppRand24)')
+543: p32 = getfield_gc_r(p29, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+554: guard_value(p32, ConstPtr(ptr33), descr=<Guard0x4c31070>) [p1, p0]
debug_merge_point(0, 0, '(if (zero? h5329) null (let ([res (vector 0 0 0)][SetBang0 (+ CellRef(nodes5320) 1)]) (set! nodes5320 SetBang0) (let ([AppRand22 (- h5329 1)]) (let ([res res][AppRand23 (makeTree AppRand22)]) (vector-set! res 0 AppRand23))) (let ([AppRand24 (- h5329 1)]) (let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25))) (vector-set! res 2 h5329) res)) from (makeTree AppRand24)')
+563: jump(p29, i26, p19, p31, p16, p17, p27, p22, p27, p19, descr=TargetToken(79354704))
+640: --end of the loop--
[3e4c20e389417b8] jit-log-opt-loop}
[3e4c20e38b921b7] {jit-backend
[3e4c20e38bd4c34] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bebf30 +0  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8CF200000048FF042550045F048139B01E01000F85000000004C8B79104D85FF0F84000000004C8BB53801000041813EA81600000F85000000004D8B6E084983FD01720841817D00900F00000F85000000004C8B610841813C24F0C200000F85000000004D8B5424104C8B0D57FFFFFF4D39CA0F85000000004D8B4C24204D8B51084983FA01720741813AF08900000F85000000004D8B42084983C0010F80000000004D8942084C89FF4983EF010F8000000000498B7C24084C89E64C89F84C89EB4C89F24C898D400100004D89C44889BD480100004D89C141524989FA5F49BB30B6BEB64E7F000041FFE366662E0F1F84000000000048C7442408FFFFFF0049BB78BEBEB64E7F00004C895D204D8D9B78C4FFFF41FFD3E9E8FEFFFFFF3574FEFFFF49BB88BEBEB64E7F000041534D8D9B78C1FFFF41FFE3FF3560FEFFFF49BB98BEBEB64E7F000041534D8D9B68C1FFFF41FFE3FF354CFEFFFF49BBA8BEBEB64E7F000041534D8D9B58C1FFFF41FFE3FF3538FEFFFF49BBB8BEBEB64E7F000041534D8D9B48C1FFFF41FFE3FF3524FEFFFF49BBC8BEBEB64E7F000041534D8D9B38C1FFFF41FFE3FF3510FEFFFF49BBD8BEBEB64E7F000041534D8D9B28C1FFFF41FFE3FF3504FEFFFF49BBE8BEBEB64E7F000041534D8D9B18C1FFFF41FFE3FF35F0FDFFFF49BBF8BEBEB64E7F000041534D8D9B08C1FFFF41FFE3FF35DCFDFFFF49BB08BFBEB64E7F000041534D8D9BF8C0FFFF41FFE3FF35C8FDFFFF49BB18BFBEB64E7F000041534D8D9BE8C0FFFF41FFE3
[3e4c20e38bda89a] jit-backend-dump}
[3e4c20e38be4ac1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bebf94 +0  20000000
[3e4c20e38be5d59] jit-backend-dump}
[3e4c20e38be9d18] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bec095 +0  20000000
[3e4c20e38beab1c] jit-backend-dump}
[3e4c20e38bedf96] {jit-backend-addr
bridge out of Guard 0x4bd7bb0 has address 0x7f4eb6bebf90 to 0x7f4eb6bec090
       gc table: 0x7f4eb6bebf30
    jump target: 0x7f4eb6bebf90
         resops: 0x7f4eb6bebf9e
       failures: 0x7f4eb6bec090
            end: 0x7f4eb6bec1ce
[3e4c20e38bf025e] jit-backend-addr}
[3e4c20e38bf36fa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bebfae +0  04010000
[3e4c20e38bf44b8] jit-backend-dump}
[3e4c20e38bf752e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bebfbb +0  13010000
[3e4c20e38bf824d] jit-backend-dump}
[3e4c20e38bfb2df] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bebfcf +0  1B010000
[3e4c20e38bfc044] jit-backend-dump}
[3e4c20e38bff068] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bebfe7 +0  1F010000
[3e4c20e38bffd74] jit-backend-dump}
[3e4c20e38c02e50] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bebff9 +0  45010000
[3e4c20e38c03b62] jit-backend-dump}
[3e4c20e38c06c16] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bec00e +0  4C010000
[3e4c20e38c0795c] jit-backend-dump}
[3e4c20e38c0a971] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bec02a +0  4C010000
[3e4c20e38c0b65c] jit-backend-dump}
[3e4c20e38c0e6c0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bec038 +0  5A010000
[3e4c20e38c0f3eb] jit-backend-dump}
[3e4c20e38c122d4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bec049 +0  65010000
[3e4c20e38c12fb2] jit-backend-dump}
[3e4c20e38c17f36] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea104 +0  881E0000
[3e4c20e38c18cdc] jit-backend-dump}
[3e4c20e38c1fb4c] jit-backend}
[3e4c20e38c236ac] {jit-log-opt-bridge
# bridge out of Guard 0x4bd7bb0 with 33 ops
[p0, p1]
+118: guard_class(p1, 16504944, descr=<Guard0x4c36260>) [p0, p1]
+130: i3 = getfield_gc_i(p1, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+134: i4 = int_is_zero(i3)
+137: guard_false(i4, descr=<Guard0x4c31100>) [p0, p1]
debug_merge_point(0, 0, '(let ([res (vector 0 0 0)][SetBang0 (+ CellRef(nodes5320) 1)]) (set! nodes5320 SetBang0) (let ([AppRand22 (- h5329 1)]) (let ([res res][AppRand23 (makeTree AppRand22)]) (vector-set! res 0 AppRand23))) (let ([AppRand24 (- h5329 1)]) (let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25))) (vector-set! res 2 h5329) res)')
+143: guard_class(p0, 16437352, descr=<Guard0x4c31148>) [p0, p1]
+163: p6 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+167: guard_nonnull_class(p6, ConstClass(ForwardLink), descr=<Guard0x4c362c0>) [p0, p1]
debug_merge_point(0, 0, '(vector 0 0 0)')
+187: guard_not_invalidated(descr=<Guard0x4c31190>) [p0, p1]
debug_merge_point(0, 0, '(+ CellRef(nodes5320) 1)')
+187: p8 = getfield_gc_r(p1, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+191: guard_class(p8, 16481456, descr=<Guard0x4c311d8>) [p0, p1]
+205: p10 = getfield_gc_r(p8, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+217: guard_value(p10, ConstPtr(ptr11), descr=<Guard0x4c31220>) [p0, p1]
+226: p12 = getfield_gc_r(p8, descr=<FieldP pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_w_val0 32 pure>)
+231: p13 = getfield_gc_r(p12, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+235: guard_nonnull_class(p13, ConstClass(W_CellIntegerStrategy), descr=<Guard0x4c36320>) [p0, p1]
+254: i15 = getfield_gc_i(p13, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+258: i17 = int_add_ovf(i15, 1)
+262: guard_no_overflow(descr=<Guard0x4c31268>) [p0, p1]
debug_merge_point(0, 0, '(set! nodes5320 SetBang0)')
debug_merge_point(0, 0, '(let ([AppRand22 (- h5329 1)]) (let ([res res][AppRand23 (makeTree AppRand22)]) (vector-set! res 0 AppRand23)))')
debug_merge_point(0, 0, '(- h5329 1)')
+268: setfield_gc(p13, i17, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+272: i19 = int_sub_ovf(i3, 1)
+279: guard_no_overflow(descr=<Guard0x4c36380>) [i3, p0, i17, p1, p6]
debug_merge_point(0, 0, '(let ([res res][AppRand23 (makeTree AppRand22)]) (vector-set! res 0 AppRand23))')
debug_merge_point(0, 0, 'res')
+285: p20 = getfield_gc_r(p8, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(makeTree AppRand22)')
debug_merge_point(0, 0, '(if (zero? h5329) null (let ([res (vector 0 0 0)][SetBang0 (+ CellRef(nodes5320) 1)]) (set! nodes5320 SetBang0) (let ([AppRand22 (- h5329 1)]) (let ([res res][AppRand23 (makeTree AppRand22)]) (vector-set! res 0 AppRand23))) (let ([AppRand24 (- h5329 1)]) (let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25))) (vector-set! res 2 h5329) res)) from (makeTree AppRand22)')
+290: jump(p8, i19, p6, p20, p1, i17, p0, p12, p13, i17, p20, descr=TargetToken(79354864))
+352: --end of the loop--
[3e4c20e38c43d36] jit-log-opt-bridge}
[3e4c20e38d8b969] {jit-backend
[3e4c20e38dd36e8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bec
[3e4c20e38dd922b] jit-backend-dump}
[3e4c20e38de2eda] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bec2c4 +0  21000000
[3e4c20e38de423e] jit-backend-dump}
[3e4c20e38de7c84] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bec415 +0  21000000
[3e4c20e38de8a76] jit-backend-dump}
[3e4c20e38debb54] {jit-backend-addr
bridge out of Guard 0x4b9bfa0 has address 0x7f4eb6bec2c0 to 0x7f4eb6bec410
       gc table: 0x7f4eb6bec270
    jump target: 0x7f4eb6bec2c0
         resops: 0x7f4eb6bec2ce
       failures: 0x7f4eb6bec410
            end: 0x7f4eb6bec517
[3e4c20e38dedd5c] jit-backend-addr}
[3e4c20e38df0f8b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bec2db +0  74010000
[3e4c20e38df1d8f] jit-backend-dump}
[3e4c20e38df4e83] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bec2ef +0  7C010000
[3e4c20e38df5bc6] jit-backend-dump}
[3e4c20e38df8e3c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bec30b +0  98010000
[3e4c20e38df9bcb] jit-backend-dump}
[3e4c20e38dfcb04] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bec319 +0  A6010000
[3e4c20e38dfd841] jit-backend-dump}
[3e4c20e38e006b9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bec32a +0  B1010000
[3e4c20e38e013da] jit-backend-dump}
[3e4c20e38e0422a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bec342 +0  B5010000
[3e4c20e38e04f12] jit-backend-dump}
[3e4c20e38e08080] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6beb63d +0  7F0C0000
[3e4c20e38e08d6e] jit-backend-dump}
[3e4c20e38e0cb22] jit-backend}
[3e4c20e38e103b8] {jit-log-opt-bridge
# bridge out of Guard 0x4b9bfa0 with 37 ops
[i0, p1, i2, p3, p4, p5, p6]
+102: i7 = int_is_zero(i0)
+105: guard_true(i7, descr=<Guard0x4c363e0>) [i0, p1, i2, p3, p4, p5, p6]
debug_merge_point(0, 0, 'null')
+111: p8 = getfield_gc_r(p1, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+122: guard_value(p8, ConstPtr(ptr9), descr=<Guard0x4c312f8>) [i0, p1, i2, p3, p4, p5, p6]
+131: i10 = getfield_gc_i(p1, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_vals_fixed_1 24 pure>)
+135: guard_not_invalidated(descr=<Guard0x4c31340>) [i0, p1, i2, p3, p4, p5, p6]
debug_merge_point(0, 0, '(vector-set! res 0 AppRand23) from (makeTree AppRand22)')
+135: p11 = getfield_gc_r(p4, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+139: guard_nonnull_class(p11, ConstClass(ForwardLink), descr=<Guard0x4c36440>) [i0, p1, i2, p3, p4, p5, p6]
debug_merge_point(0, 0, '(let ([AppRand24 (- h5329 1)]) (let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25)))')
debug_merge_point(0, 0, '(- h5329 1)')
+159: i13 = getfield_gc_i(p3, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+163: i15 = int_sub_ovf(i13, 1)
+167: guard_no_overflow(descr=<Guard0x4c31388>) [i0, p1, i2, p3, p4, p5, p6]
debug_merge_point(0, 0, '(let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25))')
debug_merge_point(0, 0, 'res')
+173: p16 = getfield_gc_r(p3, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+177: guard_class(p16, 16481456, descr=<Guard0x4c313d0>) [i0, p1, i2, p3, p4, p5, p6]
+190: p18 = getfield_gc_r(p16, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(makeTree AppRand24)')
+194: p19 = getfield_gc_r(p16, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+205: guard_value(p19, ConstPtr(ptr20), descr=<Guard0x4c31418>) [i0, p1, i2, p3, p4, p5, p6]
debug_merge_point(0, 0, '(if (zero? h5329) null (let ([res (vector 0 0 0)][SetBang0 (+ CellRef(nodes5320) 1)]) (set! nodes5320 SetBang0) (let ([AppRand22 (- h5329 1)]) (let ([res res][AppRand23 (makeTree AppRand22)]) (vector-set! res 0 AppRand23))) (let ([AppRand24 (- h5329 1)]) (let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25))) (vector-set! res 2 h5329) res)) from (makeTree AppRand24)')
+214: p21 = new_with_vtable(descr=<SizeDescr 32>)
+258: p22 = new_with_vtable(descr=<SizeDescr 32>)
+269: setfield_gc(p22, 3, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+277: p25 = new_array(3, descr=<ArrayS 8>)
+296: setarrayitem_gc(p25, 0, i10, descr=<ArrayS 8>)
+300: setarrayitem_gc(p25, 1, 0, descr=<ArrayS 8>)
+308: setarrayitem_gc(p25, 2, 0, descr=<ArrayS 8>)
+316: setfield_gc(p22, p25, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+327: setfield_gc(p22, ConstPtr(ptr31), descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+331: setfield_gc(p21, p3, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+342: setfield_gc(p21, i2, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed01.inst_vals_fixed_1 16 pure>)
+346: setfield_gc(p21, p22, descr=<FieldP pycket.small_list.ConsEnvSize2Fixed01.inst_w_val0 24 pure>)
+350: jump(p16, i15, p11, p18, p21, p4, p22, p3, p22, p11, descr=TargetToken(79354704))
+416: --end of the loop--
[3e4c20e38e349c5] jit-log-opt-bridge}
[3e4c20e38f60e2d] {jit-backend
[3e4c20e38fe303b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bec
[3e4c20e38feeedc] jit-backend-dump}
[3e4c20e38ff9382] {jit-backend-addr
Loop 6 ((vector-set! res 1 AppRand25) from (vector-set! res 2 h5329)) has address 0x7f4eb6bec8dd to 0x7f4eb6becbf0 (bootstrap 0x7f4eb6bec850)
       gc table: 0x7f4eb6bec740
       function: 0x7f4eb6bec850
         resops: 0x7f4eb6bec8dd
       failures: 0x7f4eb6becbf0
            end: 0x7f4eb6bed00e
[3e4c20e38ffbf25] jit-backend-addr}
[3e4c20e38fffecf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bec907 +0  BB030000
[3e4c20e3900105f] jit-backend-dump}
[3e4c20e3900444a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bec91d +0  C1030000
[3e4c20e390051c7] jit-backend-dump}
[3e4c20e3900825f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bec92a +0  D0030000
[3e4c20e39008f62] jit-backend-dump}
[3e4c20e3900bf43] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bec93a +0  DC030000
[3e4c20e3900cc9f] jit-backend-dump}
[3e4c20e3900fc95] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bec948 +0  EA030000
[3e4c20e39010973] jit-backend-dump}
[3e4c20e39013932] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bec96d +0  E1030000
[3e4c20e390145fe] jit-backend-dump}
[3e4c20e39017571] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bec981 +0  E9030000
[3e4c20e39018265] jit-backend-dump}
[3e4c20e3901b0fb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bec995 +0  F1030000
[3e4c20e3901bdc7] jit-backend-dump}
[3e4c20e3901ec70] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bec9ab +0  F7030000
[3e4c20e3901f954] jit-backend-dump}
[3e4c20e390227fa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bec9b7 +0  07040000
[3e4c20e390234cc] jit-backend-dump}
[3e4c20e3902637b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bec9cd +0  0D040000
[3e4c20e3902705c] jit-backend-dump}
[3e4c20e39029ed4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bec9dd +0  19040000
[3e4c20e3902abc8] jit-backend-dump}
[3e4c20e3902db53] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bec9f1 +0  21040000
[3e4c20e3902e859] jit-backend-dump}
[3e4c20e3903174e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bec9ff +0  2F040000
[3e4c20e39032423] jit-backend-dump}
[3e4c20e390352c9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6beca17 +0  33040000
[3e4c20e39035fba] jit-backend-dump}
[3e4c20e39038e47] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6beca32 +0  34040000
[3e4c20e39039b0d] jit-backend-dump}
[3e4c20e3903ca64] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6beca95 +0  09040000
[3e4c20e3903d75e] jit-backend-dump}
[3e4c20e3904062e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6becaa3 +0  17040000
[3e4c20e3904134d] jit-backend-dump}
[3e4c20e39044358] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6becac2 +0  14040000
[3e4c20e39045027] jit-backend-dump}
[3e4c20e39047f88] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6becad6 +0  1C040000
[3e4c20e39048c41] jit-backend-dump}
[3e4c20e3904baed] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6becaeb +0  23040000
[3e4c20e3904c7f3] jit-backend-dump}
[3e4c20e3904f67d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6becb01 +0  29040000
[3e4c20e3905033d] jit-backend-dump}
[3e4c20e390531e0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6becb0d +0  39040000
[3e4c20e39053ec1] jit-backend-dump}
[3e4c20e39056e12] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6becb23 +0  3F040000
[3e4c20e39057aea] jit-backend-dump}
[3e4c20e3905aa01] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6becb33 +0  4B040000
[3e4c20e3905b6df] jit-backend-dump}
[3e4c20e3905e54b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6becb47 +0  53040000
[3e4c20e3905f1fb] jit-backend-dump}
[3e4c20e39062079] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6becb55 +0  61040000
[3e4c20e39062d58] jit-backend-dump}
[3e4c20e39065be8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6becb6d +0  65040000
[3e4c20e390668a8] jit-backend-dump}
[3e4c20e39069716] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6becb87 +0  67040000
[3e4c20e3906a3eb] jit-backend-dump}
[3e4c20e3906de53] jit-backend}
[3e4c20e390719d1] {jit-log-opt-loop
# Loop 6 ((vector-set! res 1 AppRand25) from (vector-set! res 2 h5329)) : loop with 90 ops
[p0, p1]
+421: label(p0, p1, descr=TargetToken(79354944))
debug_merge_point(0, 0, '(vector-set! res 1 AppRand25) from (vector-set! res 2 h5329)')
+440: guard_not_invalidated(descr=<Guard0x4c364a0>) [p1, p0]
+440: guard_class(p0, 16500016, descr=<Guard0x4c31460>) [p1, p0]
+459: p3 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize2.inst__vals_0 16 pure>)
+463: guard_nonnull_class(p3, ConstClass(W_Vector), descr=<Guard0x4c36500>) [p1, p0]
+481: p5 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize2.inst__vals_1 24 pure>)
+485: guard_nonnull(p5, descr=<Guard0x4c314a8>) [p1, p0]
+494: p6 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+498: guard_class(p6, 16622984, descr=<Guard0x4c314f0>) [p1, p0]
+510: i8 = getfield_gc_i(p3, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+514: i10 = int_lt(1, i8)
+518: guard_true(i10, descr=<Guard0x4c31538>) [p1, p0]
+524: p11 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+538: setarrayitem_gc(p11, 1, p5, descr=<ArrayP 8>)
+542: guard_class(p1, 16435208, descr=<Guard0x4c36560>) [p1, p0]
+561: p14 = getfield_gc_r(p1, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+572: guard_value(p14, ConstPtr(ptr15), descr=<Guard0x4c31580>) [p1, p0]
+581: p16 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+585: p17 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+589: guard_class(p17, 16437352, descr=<Guard0x4c315c8>) [p1, p0]
+601: p19 = getfield_gc_r(p17, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+605: guard_nonnull_class(p19, ConstClass(ForwardLink), descr=<Guard0x4c365c0>) [p1, p0]
debug_merge_point(0, 0, '(vector-set! res 2 h5329)')
+623: guard_class(p16, 16503536, descr=<Guard0x4c31610>) [p1, p0]
+635: p22 = getfield_gc_r(p16, descr=<FieldP pycket.small_list.ConsEnvSize2Fixed01.inst_w_val0 24 pure>)
+639: guard_nonnull_class(p22, ConstClass(W_Vector), descr=<Guard0x4c36620>) [p1, p0]
+657: p24 = getfield_gc_r(p16, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+661: guard_class(p24, 16504944, descr=<Guard0x4c31658>) [p1, p0]
+673: i26 = getfield_gc_i(p24, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+677: p27 = getfield_gc_r(p22, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+681: guard_class(p27, 16622984, descr=<Guard0x4c316a0>) [p1, p0]
+693: i29 = getfield_gc_i(p22, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+697: i31 = int_lt(2, i29)
+701: guard_true(i31, descr=<Guard0x4c316e8>) [p1, p0]
+707: p32 = getfield_gc_r(p22, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
debug_merge_point(0, 0, 'res')
+711: p33 = getfield_gc_r(p17, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+722: guard_value(p33, ConstPtr(ptr34), descr=<Guard0x4c31730>) [p1, p0]
+731: p35 = getfield_gc_r(p17, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+735: p36 = getfield_gc_r(p17, descr=<FieldP pycket.small_list.LetContSize1.inst__vals_w_0 40 pure>)
+739: guard_nonnull_class(p36, ConstClass(W_Vector), descr=<Guard0x4c36680>) [p1, p0]
+758: p38 = getfield_gc_r(p17, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(vector-set! res 1 AppRand25) from (vector-set! res 2 h5329)')
+762: p39 = new_with_vtable(descr=<SizeDescr 16>)
+806: setfield_gc(p39, i26, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+820: setarrayitem_gc(p32, 2, p39, descr=<ArrayP 8>)
+824: label(p35, p36, p22, p38, descr=TargetToken(79355024))
debug_merge_point(0, 0, '(vector-set! res 1 AppRand25) from (vector-set! res 2 h5329)')
+840: guard_not_invalidated(descr=<Guard0x4c366e0>) [p38, p22, p36, p35]
+840: p41 = getfield_gc_r(p36, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+844: guard_class(p41, 16622984, descr=<Guard0x4c31778>) [p38, p22, p36, p35]
+857: i43 = getfield_gc_i(p36, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+861: i45 = int_lt(1, i43)
+865: guard_true(i45, descr=<Guard0x4c317c0>) [p38, p22, p36, p35]
+871: p46 = getfield_gc_r(p36, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+886: setarrayitem_gc(p46, 1, p22, descr=<ArrayP 8>)
+890: guard_class(p38, 16435208, descr=<Guard0x4c36740>) [p38, p22, p36, p35]
+902: p49 = getfield_gc_r(p38, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+913: guard_value(p49, ConstPtr(ptr50), descr=<Guard0x4c31808>) [p38, p22, p36, p35]
+922: p51 = getfield_gc_r(p38, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+926: p52 = getfield_gc_r(p38, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+930: guard_class(p52, 16437352, descr=<Guard0x4c31850>) [p38, p22, p36, p35]
+943: p54 = getfield_gc_r(p52, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+947: guard_nonnull_class(p54, ConstClass(ForwardLink), descr=<Guard0x4c367a0>) [p38, p22, p36, p35]
debug_merge_point(0, 0, '(vector-set! res 2 h5329)')
+965: guard_class(p51, 16503536, descr=<Guard0x4c31898>) [p38, p22, p36, p35]
+977: p57 = getfield_gc_r(p51, descr=<FieldP pycket.small_list.ConsEnvSize2Fixed01.inst_w_val0 24 pure>)
+981: guard_nonnull_class(p57, ConstClass(W_Vector), descr=<Guard0x4c36800>) [p38, p22, p36, p35]
+999: p59 = getfield_gc_r(p51, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1003: guard_class(p59, 16504944, descr=<Guard0x4c318e0>) [p38, p22, p36, p35]
+1015: i61 = getfield_gc_i(p59, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1019: p62 = getfield_gc_r(p57, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1023: guard_class(p62, 16622984, descr=<Guard0x4c31928>) [p38, p22, p36, p35]
+1035: i64 = getfield_gc_i(p57, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1039: i66 = int_lt(2, i64)
+1043: guard_true(i66, descr=<Guard0x4c31970>) [p38, p22, p36, p35]
+1049: p67 = getfield_gc_r(p57, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
debug_merge_point(0, 0, 'res')
+1053: p68 = getfield_gc_r(p52, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+1064: guard_value(p68, ConstPtr(ptr69), descr=<Guard0x4c319b8>) [p38, p22, p36, p35]
+1073: p70 = getfield_gc_r(p52, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1077: p71 = getfield_gc_r(p52, descr=<FieldP pycket.small_list.LetContSize1.inst__vals_w_0 40 pure>)
+1081: guard_nonnull_class(p71, ConstClass(W_Vector), descr=<Guard0x4c36860>) [p38, p22, p36, p35]
+1099: p73 = getfield_gc_r(p52, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(vector-set! res 1 AppRand25) from (vector-set! res 2 h5329)')
+1103: p74 = new_with_vtable(descr=<SizeDescr 16>)
+1150: setfield_gc(p74, i61, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1164: setarrayitem_gc(p67, 2, p74, descr=<ArrayP 8>)
+1168: jump(p70, p71, p57, p73, descr=TargetToken(79355024))
+1200: --end of the loop--
[3e4c20e390bcd89] jit-log-opt-loop}
[3e4c20e391e57ca] {jit-backend
[3e4c20e3923762c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bed
[3e4c20e3923fc08] jit-backend-dump}
[3e4c20e3924a603] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bed1e4 +0  21000000
[3e4c20e3924b9f4] jit-backend-dump}
[3e4c20e3924f6d5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bed3e5 +0  21000000
[3e4c20e392504e8] jit-backend-dump}
[3e4c20e392535cd] {jit-backend-addr
bridge out of Guard 0x4b9ba60 has address 0x7f4eb6bed1e0 to 0x7f4eb6bed3e0
       gc table: 0x7f4eb6bed140
    jump target: 0x7f4eb6bed1e0
         resops: 0x7f4eb6bed1ee
       failures: 0x7f4eb6bed3e0
            end: 0x7f4eb6bed606
[3e4c20e3925910a] jit-backend-addr}
[3e4c20e3925ccc2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bed202 +0  40020000
[3e4c20e3925db9f] jit-backend-dump}
[3e4c20e39260c9f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bed21d +0  5D020000
[3e4c20e392619ac] jit-backend-dump}
[3e4c20e39264906] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bed233 +0  63020000
[3e4c20e39265668] jit-backend-dump}
[3e4c20e39268532] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bed241 +0  71020000
[3e4c20e39269210] jit-backend-dump}
[3e4c20e3926c079] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bed2a7 +0  27020000
[3e4c20e3926cd23] jit-backend-dump}
[3e4c20e3926fc00] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bed2ef +0  FB010000
[3e4c20e392708c9] jit-backend-dump}
[3e4c20e392736fd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bed303 +0  03020000
[3e4c20e392743bd] jit-backend-dump}
[3e4c20e39277201] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bed318 +0  0A020000
[3e4c20e39277ec4] jit-backend-dump}
[3e4c20e3927ad7f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bed330 +0  0E020000
[3e4c20e3927ba2c] jit-backend-dump}
[3e4c20e3927e839] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bed33e +0  1C020000
[3e4c20e3927f508] jit-backend-dump}
[3e4c20e39282324] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bed34e +0  28020000
[3e4c20e39282fda] jit-backend-dump}
[3e4c20e39285df6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bed35c +0  36020000
[3e4c20e39286ad2] jit-backend-dump}
[3e4c20e3928991f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bed373 +0  3B020000
[3e4c20e3928a5d2] jit-backend-dump}
[3e4c20e3928d447] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bed384 +0  46020000
[3e4c20e3928e113] jit-backend-dump}
[3e4c20e39290f78] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bed39c +0  4A020000
[3e4c20e39291c94] jit-backend-dump}
[3e4c20e39294dbf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea5e7 +0  F52B0000
[3e4c20e39295a91] jit-backend-dump}
[3e4c20e3929980e] jit-backend}
[3e4c20e3929d03f] {jit-log-opt-bridge
# bridge out of Guard 0x4b9ba60 with 45 ops
[p0, p1, p2, p3]
+189: guard_value(p3, ConstPtr(ptr4), descr=<Guard0x4c368c0>) [p0, p1, p2, p3]
+198: p5 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+202: guard_not_invalidated(descr=<Guard0x4c31a00>) [p0, p1, p2, p3]
+202: p6 = getfield_gc_r(p0, descr=<FieldP pycket.small_list.LetContSize1.inst__vals_w_0 40 pure>)
+206: guard_nonnull_class(p6, ConstClass(W_Vector), descr=<Guard0x4c36920>) [p0, p1, p2, p3]
+225: p8 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(vector-set! res 0 AppRand23) from (vector-set! res 2 h5329)')
+229: p9 = getfield_gc_r(p6, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+233: guard_class(p9, 16623792, descr=<Guard0x4c31a48>) [p0, p1, p2, p3]
+247: i11 = getfield_gc_i(p6, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+251: i13 = int_lt(0, i11)
+255: guard_true(i13, descr=<Guard0x4c31a90>) [p0, p1, p2, p3]
+261: p15 = call_r(7464704, p9, p6, descr=<Callr 8 rr EF=5>)
+348: guard_no_exception(descr=<Guard0x4c36980>) [p8, p2, p6, p15, p5]
+387: setfield_gc(p6, ConstPtr(ptr16), descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+391: setfield_gc(p6, p15, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+405: setarrayitem_gc(p15, 0, p2, descr=<ArrayP 8>)
+416: guard_class(p8, 16435208, descr=<Guard0x4c369e0>) [p8, p2, p6, p5]
+435: p19 = getfield_gc_r(p8, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+446: guard_value(p19, ConstPtr(ptr20), descr=<Guard0x4c31ad8>) [p8, p2, p6, p5]
+455: p21 = getfield_gc_r(p8, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+459: p22 = getfield_gc_r(p8, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+463: guard_class(p22, 16437352, descr=<Guard0x4c31b20>) [p8, p2, p6, p5]
+476: p24 = getfield_gc_r(p22, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+480: guard_nonnull_class(p24, ConstClass(ForwardLink), descr=<Guard0x4c36a40>) [p8, p2, p6, p5]
debug_merge_point(0, 0, '(let ([AppRand24 (- h5329 1)]) (let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25)))')
debug_merge_point(0, 0, '(- h5329 1)')
+500: guard_class(p21, 16503536, descr=<Guard0x4c31b68>) [p8, p2, p6, p5]
+514: p27 = getfield_gc_r(p21, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+518: guard_class(p27, 16504944, descr=<Guard0x4c31bb0>) [p8, p2, p6, p5]
+530: i29 = getfield_gc_i(p27, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+534: i31 = int_sub_ovf(i29, 1)
+538: guard_no_overflow(descr=<Guard0x4c31bf8>) [p8, p2, p6, p5]
debug_merge_point(0, 0, '(let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25))')
debug_merge_point(0, 0, 'res')
+544: p32 = getfield_gc_r(p21, descr=<FieldP pycket.small_list.ConsEnvSize2Fixed01.inst_w_val0 24 pure>)
+548: guard_nonnull_class(p32, ConstClass(W_Vector), descr=<Guard0x4c36aa0>) [p8, p2, p6, p5]
+567: p34 = getfield_gc_r(p27, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+571: guard_class(p34, 16481456, descr=<Guard0x4c31c40>) [p8, p2, p6, p5]
+584: p36 = getfield_gc_r(p34, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(makeTree AppRand24)')
+588: p37 = getfield_gc_r(p34, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+599: guard_value(p37, ConstPtr(ptr38), descr=<Guard0x4c31c88>) [p8, p2, p6, p5]
debug_merge_point(0, 0, '(if (zero? h5329) null (let ([res (vector 0 0 0)][SetBang0 (+ CellRef(nodes5320) 1)]) (set! nodes5320 SetBang0) (let ([AppRand22 (- h5329 1)]) (let ([res res][AppRand23 (makeTree AppRand22)]) (vector-set! res 0 AppRand23))) (let ([AppRand24 (- h5329 1)]) (let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25))) (vector-set! res 2 h5329) res)) from (makeTree AppRand24)')
+608: jump(p34, i31, p24, p36, p21, p22, p32, p27, p32, p24, descr=TargetToken(79354704))
+672: --end of the loop--
[3e4c20e392c9a6f] jit-log-opt-bridge}
[3e4c20e3940383c] {jit-backend
[3e4c20e394490c9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bed6a
[3e4c20e3944ee08] jit-backend-dump}
[3e4c20e39458899] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bed6f4 +0  21000000
[3e4c20e39459da1] jit-backend-dump}
[3e4c20e3945d852] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bed835 +0  21000000
[3e4c20e3945e693] jit-backend-dump}
[3e4c20e394618e7] {jit-backend-addr
bridge out of Guard 0x4b9b9a0 has address 0x7f4eb6bed6f0 to 0x7f4eb6bed830
       gc table: 0x7f4eb6bed6a0
    jump target: 0x7f4eb6bed6f0
         resops: 0x7f4eb6bed6fe
       failures: 0x7f4eb6bed830
            end: 0x7f4eb6bed91b
[3e4c20e39463c42] jit-backend-addr}
[3e4c20e39466f3b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bed70b +0  64010000
[3e4c20e39467d0b] jit-backend-dump}
[3e4c20e3946b1aa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bed71f +0  88010000
[3e4c20e3946bf30] jit-backend-dump}
[3e4c20e3946efbc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bed73a +0  89010000
[3e4c20e3946fcb3] jit-backend-dump}
[3e4c20e39472b93] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bed748 +0  97010000
[3e4c20e39473843] jit-backend-dump}
[3e4c20e394766dd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bed759 +0  A2010000
[3e4c20e3947738d] jit-backend-dump}
[3e4c20e3947a43e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea57d +0  6F310000
[3e4c20e3947b0ee] jit-backend-dump}
[3e4c20e3947f207] jit-backend}
[3e4c20e39482b0f] {jit-log-opt-bridge
# bridge out of Guard 0x4b9b9a0 with 40 ops
[i0, p1, p2, p3, p4, p5, p6]
+102: i7 = int_is_zero(i0)
+105: guard_false(i7, descr=<Guard0x4c36b00>) [i0, p1, p2, p3, p4, p5, p6]
debug_merge_point(0, 0, '(let ([res (vector 0 0 0)][SetBang0 (+ CellRef(nodes5320) 1)]) (set! nodes5320 SetBang0) (let ([AppRand22 (- h5329 1)]) (let ([res res][AppRand23 (makeTree AppRand22)]) (vector-set! res 0 AppRand23))) (let ([AppRand24 (- h5329 1)]) (let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25))) (vector-set! res 2 h5329) res)')
debug_merge_point(0, 0, '(vector 0 0 0)')
+111: guard_not_invalidated(descr=<Guard0x4c31d18>) [i0, p1, p2, p3, p4, p5, p6]
debug_merge_point(0, 0, '(+ CellRef(nodes5320) 1)')
+111: p8 = getfield_gc_r(p1, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+122: guard_value(p8, ConstPtr(ptr9), descr=<Guard0x4c31d60>) [i0, p1, p2, p3, p4, p5, p6]
+131: p10 = getfield_gc_r(p1, descr=<FieldP pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_w_val0 32 pure>)
+135: p11 = getfield_gc_r(p10, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+139: guard_nonnull_class(p11, ConstClass(W_CellIntegerStrategy), descr=<Guard0x4c36b60>) [i0, p1, p2, p3, p4, p5, p6]
+158: i13 = getfield_gc_i(p11, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+162: i15 = int_add_ovf(i13, 1)
+166: guard_no_overflow(descr=<Guard0x4c31da8>) [i0, p1, p2, p3, p4, p5, p6]
debug_merge_point(0, 0, '(set! nodes5320 SetBang0)')
debug_merge_point(0, 0, '(let ([AppRand22 (- h5329 1)]) (let ([res res][AppRand23 (makeTree AppRand22)]) (vector-set! res 0 AppRand23)))')
debug_merge_point(0, 0, '(- h5329 1)')
+172: setfield_gc(p11, i15, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+176: i17 = int_sub_ovf(i0, 1)
+183: guard_no_overflow(descr=<Guard0x4c36bc0>) [i0, i15, p1, p2, p3, p4, p5, p6]
debug_merge_point(0, 0, '(let ([res res][AppRand23 (makeTree AppRand22)]) (vector-set! res 0 AppRand23))')
debug_merge_point(0, 0, 'res')
+189: p18 = getfield_gc_r(p1, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(makeTree AppRand22)')
debug_merge_point(0, 0, '(if (zero? h5329) null (let ([res (vector 0 0 0)][SetBang0 (+ CellRef(nodes5320) 1)]) (set! nodes5320 SetBang0) (let ([AppRand22 (- h5329 1)]) (let ([res res][AppRand23 (makeTree AppRand22)]) (vector-set! res 0 AppRand23))) (let ([AppRand24 (- h5329 1)]) (let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25))) (vector-set! res 2 h5329) res)) from (makeTree AppRand22)')
+193: p19 = new_with_vtable(descr=<SizeDescr 24>)
+244: p20 = new_with_vtable(descr=<SizeDescr 48>)
+255: p21 = new_with_vtable(descr=<SizeDescr 40>)
+266: setfield_gc(p21, p6, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+277: setfield_gc(p21, p3, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+288: setfield_gc(p21, p2, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+299: setfield_gc(p21, ConstPtr(ptr22), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+303: setfield_gc(p19, p1, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+307: setfield_gc(p19, i0, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+311: setfield_gc(p20, p6, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+315: setfield_gc(p20, p5, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+326: setfield_gc(p20, p21, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+337: setfield_gc(p20, ConstPtr(ptr23), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+341: setfield_gc(p20, p4, descr=<FieldP pycket.small_list.LetContSize1.inst__vals_w_0 40 pure>)
+345: jump(p1, i17, p6, p18, p19, i15, p20, p10, p11, i15, p18, descr=TargetToken(79354864))
+400: --end of the loop--
[3e4c20e394a6917] jit-log-opt-bridge}
[3e4c20e39581667] {jit-backend
[3e4c20e395c0d6b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6beda
[3e4c20e395c859f] jit-backend-dump}
[3e4c20e395d23a7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6beda84 +0  1E000000
[3e4c20e395d38d9] jit-backend-dump}
[3e4c20e395d732e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bedbe5 +0  1E000000
[3e4c20e395d8188] jit-backend-dump}
[3e4c20e395db291] {jit-backend-addr
bridge out of Guard 0x4c30848 has address 0x7f4eb6beda80 to 0x7f4eb6bedbe0
       gc table: 0x7f4eb6beda10
    jump target: 0x7f4eb6beda80
         resops: 0x7f4eb6beda8e
       failures: 0x7f4eb6bedbe0
            end: 0x7f4eb6bedd91
[3e4c20e395dd712] jit-backend-addr}
[3e4c20e395e08dc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6beda9e +0  9F010000
[3e4c20e395e16dd] jit-backend-dump}
[3e4c20e395e4791] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bedab2 +0  A7010000
[3e4c20e395e548b] jit-backend-dump}
[3e4c20e395e8386] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bedac7 +0  AE010000
[3e4c20e395e9061] jit-backend-dump}
[3e4c20e395ebfb8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bedadf +0  B2010000
[3e4c20e395ecc94] jit-backend-dump}
[3e4c20e395efc6e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bedaec +0  DD010000
[3e4c20e395f0999] jit-backend-dump}
[3e4c20e395f38c2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bedb04 +0  E1010000
[3e4c20e395f4594] jit-backend-dump}
[3e4c20e395f7499] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bedb16 +0  EB010000
[3e4c20e395f8165] jit-backend-dump}
[3e4c20e395fb03b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bedb2d +0  F0010000
[3e4c20e395fbcfe] jit-backend-dump}
[3e4c20e395febd8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bedb3b +0  FE010000
[3e4c20e395ff8b0] jit-backend-dump}
[3e4c20e396027c7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bedb53 +0  02020000
[3e4c20e39603490] jit-backend-dump}
[3e4c20e39606360] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bedb6e +0  03020000
[3e4c20e39607032] jit-backend-dump}
[3e4c20e3960a151] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bea6f1 +0  8B330000
[3e4c20e3960ae0e] jit-backend-dump}
[3e4c20e3960ecb0] jit-backend}
[3e4c20e396129c2] {jit-log-opt-bridge
# bridge out of Guard 0x4c30848 with 34 ops
[p0, p1, p2, p3]
+134: guard_class(p0, 16435208, descr=<Guard0x4c36c20>) [p0, p1, p2, p3]
+146: p5 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+157: guard_value(p5, ConstPtr(ptr6), descr=<Guard0x4c31df0>) [p0, p1, p2, p3]
+166: p7 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+170: p8 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+174: guard_class(p8, 16437352, descr=<Guard0x4c31e38>) [p0, p1, p2, p3]
+187: p10 = getfield_gc_r(p8, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+191: guard_nonnull_class(p10, ConstClass(ForwardLink), descr=<Guard0x4c36c80>) [p0, p1, p2, p3]
debug_merge_point(0, 0, '(vector-set! res 2 h5329)')
+211: guard_not_invalidated(descr=<Guard0x4c31e80>) [p0, p1, p2, p3]
+211: guard_class(p7, 16503536, descr=<Guard0x4c31ec8>) [p0, p1, p2, p3]
+224: p13 = getfield_gc_r(p7, descr=<FieldP pycket.small_list.ConsEnvSize2Fixed01.inst_w_val0 24 pure>)
+228: guard_nonnull_class(p13, ConstClass(W_Vector), descr=<Guard0x4c36ce0>) [p0, p1, p2, p3]
+248: p15 = getfield_gc_r(p7, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+252: guard_class(p15, 16504944, descr=<Guard0x4c31f10>) [p0, p1, p2, p3]
+266: i17 = getfield_gc_i(p15, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+271: p18 = getfield_gc_r(p13, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+275: guard_class(p18, 16622984, descr=<Guard0x4c31f58>) [p0, p1, p2, p3]
+289: i20 = getfield_gc_i(p13, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+293: i22 = int_lt(2, i20)
+297: guard_true(i22, descr=<Guard0x4c31fa0>) [p0, p1, p2, p3]
+303: p23 = getfield_gc_r(p13, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
debug_merge_point(0, 0, 'res')
+307: p24 = getfield_gc_r(p8, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+318: guard_value(p24, ConstPtr(ptr25), descr=<Guard0x4c3e020>) [p0, p1, p2, p3]
+327: p26 = getfield_gc_r(p8, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+331: p27 = getfield_gc_r(p8, descr=<FieldP pycket.small_list.LetContSize1.inst__vals_w_0 40 pure>)
+335: guard_nonnull_class(p27, ConstClass(W_Vector), descr=<Guard0x4c36d40>) [p0, p1, p2, p3]
+354: p29 = getfield_gc_r(p8, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(vector-set! res 1 AppRand25) from (vector-set! res 2 h5329)')
+358: p30 = new_with_vtable(descr=<SizeDescr 16>)
+399: setfield_gc(p30, i17, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+415: setarrayitem_gc(p23, 2, p30, descr=<ArrayP 8>)
+420: jump(p26, p27, p13, p29, descr=TargetToken(79355024))
+464: --end of the loop--
[3e4c20e3963742b] jit-log-opt-bridge}
[3e4c20e39739d34] {jit-backend
[3e4c20e3978ccbb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6beded
[3e4c20e399f550b] jit-backend-dump}
[3e4c20e39a0002f] {jit-backend-addr
Loop 10 ((vector-set! res 0 AppRand23) from (vector-set! res 2 h5329)) has address 0x7f4eb6bedffd to 0x7f4eb6bee1f0 (bootstrap 0x7f4eb6bedf70)
       gc table: 0x7f4eb6beded0
       function: 0x7f4eb6bedf70
         resops: 0x7f4eb6bedffd
       failures: 0x7f4eb6bee1f0
            end: 0x7f4eb6bee41e
[3e4c20e39a02e29] jit-backend-addr}
[3e4c20e39a07223] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee014 +0  46020000
[3e4c20e39a08556] jit-backend-dump}
[3e4c20e39a0b9ec] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee02a +0  4C020000
[3e4c20e39a0c892] jit-backend-dump}
[3e4c20e39a0f918] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee040 +0  52020000
[3e4c20e39a10640] jit-backend-dump}
[3e4c20e39a135a0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee050 +0  5E020000
[3e4c20e39a142cb] jit-backend-dump}
[3e4c20e39a17124] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee05e +0  6C020000
[3e4c20e39a17e40] jit-backend-dump}
[3e4c20e39a1ad3b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee0b6 +0  30020000
[3e4c20e39a1ba4a] jit-backend-dump}
[3e4c20e39a1e8a6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee0fe +0  04020000
[3e4c20e39a1f5da] jit-backend-dump}
[3e4c20e39a22418] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee112 +0  0C020000
[3e4c20e39a2312a] jit-backend-dump}
[3e4c20e39a25f84] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee126 +0  14020000
[3e4c20e39a26c9f] jit-backend-dump}
[3e4c20e39a29b23] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee13c +0  1A020000
[3e4c20e39a2a832] jit-backend-dump}
[3e4c20e39a2d664] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee148 +0  2A020000
[3e4c20e39a2e39b] jit-backend-dump}
[3e4c20e39a31198] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee158 +0  36020000
[3e4c20e39a31ebd] jit-backend-dump}
[3e4c20e39a34cd0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee166 +0  44020000
[3e4c20e39a35a10] jit-backend-dump}
[3e4c20e39a38835] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee17d +0  49020000
[3e4c20e39a3955d] jit-backend-dump}
[3e4c20e39a3c370] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee18e +0  54020000
[3e4c20e39a3d08e] jit-backend-dump}
[3e4c20e39a3fef1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee1a6 +0  58020000
[3e4c20e39a40c03] jit-backend-dump}
[3e4c20e39a44704] jit-backend}
[3e4c20e39a48244] {jit-log-opt-loop
# Loop 10 ((vector-set! res 0 AppRand23) from (vector-set! res 2 h5329)) : entry bridge with 45 ops
[p0, p1]
debug_merge_point(0, 0, '(vector-set! res 0 AppRand23) from (vector-set! res 2 h5329)')
+309: guard_not_invalidated(descr=<Guard0x4c37100>) [p1, p0]
+309: guard_class(p0, 16500016, descr=<Guard0x4c3e338>) [p1, p0]
+328: p3 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize2.inst__vals_0 16 pure>)
+332: guard_nonnull_class(p3, ConstClass(W_Vector), descr=<Guard0x4c371c0>) [p1, p0]
+350: p5 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize2.inst__vals_1 24 pure>)
+354: guard_nonnull_class(p5, ConstClass(W_Vector), descr=<Guard0x4c37160>) [p1, p0]
+372: p7 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+376: guard_class(p7, 16623792, descr=<Guard0x4c3e2f0>) [p1, p0]
+388: i9 = getfield_gc_i(p3, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+392: i11 = int_lt(0, i9)
+396: guard_true(i11, descr=<Guard0x4c3e2a8>) [p1, p0]
+402: p13 = call_r(7464704, p7, p3, descr=<Callr 8 rr EF=5>)
+475: guard_no_exception(descr=<Guard0x4c370a0>) [p1, p0, p5, p3, p13]
+514: setfield_gc(p3, ConstPtr(ptr14), descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+518: setfield_gc(p3, p13, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+532: setarrayitem_gc(p13, 0, p5, descr=<ArrayP 8>)
+543: guard_class(p1, 16435208, descr=<Guard0x4c36f80>) [p1, p0]
+562: p17 = getfield_gc_r(p1, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+573: guard_value(p17, ConstPtr(ptr18), descr=<Guard0x4c3e260>) [p1, p0]
+582: p19 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+586: p20 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+590: guard_class(p20, 16437352, descr=<Guard0x4c3e218>) [p1, p0]
+602: p22 = getfield_gc_r(p20, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+606: guard_nonnull_class(p22, ConstClass(ForwardLink), descr=<Guard0x4c37040>) [p1, p0]
debug_merge_point(0, 0, '(let ([AppRand24 (- h5329 1)]) (let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25)))')
debug_merge_point(0, 0, '(- h5329 1)')
+624: guard_class(p19, 16503536, descr=<Guard0x4c3e1d0>) [p1, p0]
+636: p25 = getfield_gc_r(p19, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+640: guard_class(p25, 16504944, descr=<Guard0x4c3e188>) [p1, p0]
+652: i27 = getfield_gc_i(p25, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+656: i29 = int_sub_ovf(i27, 1)
+660: guard_no_overflow(descr=<Guard0x4c3e140>) [p1, p0]
debug_merge_point(0, 0, '(let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25))')
debug_merge_point(0, 0, 'res')
+666: p30 = getfield_gc_r(p19, descr=<FieldP pycket.small_list.ConsEnvSize2Fixed01.inst_w_val0 24 pure>)
+670: guard_nonnull_class(p30, ConstClass(W_Vector), descr=<Guard0x4c36fe0>) [p1, p0]
+689: p32 = getfield_gc_r(p25, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+693: guard_class(p32, 16481456, descr=<Guard0x4c3e0f8>) [p1, p0]
+706: p34 = getfield_gc_r(p32, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(makeTree AppRand24)')
+710: p35 = getfield_gc_r(p32, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+721: guard_value(p35, ConstPtr(ptr36), descr=<Guard0x4c3e0b0>) [p1, p0]
debug_merge_point(0, 0, '(if (zero? h5329) null (let ([res (vector 0 0 0)][SetBang0 (+ CellRef(nodes5320) 1)]) (set! nodes5320 SetBang0) (let ([AppRand22 (- h5329 1)]) (let ([res res][AppRand23 (makeTree AppRand22)]) (vector-set! res 0 AppRand23))) (let ([AppRand24 (- h5329 1)]) (let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25))) (vector-set! res 2 h5329) res)) from (makeTree AppRand24)')
+730: jump(p32, i29, p22, p34, p19, p20, p30, p25, p30, p22, descr=TargetToken(79354704))
+800: --end of the loop--
[3e4c20e39a6fd05] jit-log-opt-loop}
[3e4c20e39becf99] {jit-backend
[3e4c20e39c62c90] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee5f
[3e4c20e39c6c3a4] jit-backend-dump}
[3e4c20e39c76b72] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee6e4 +0  21000000
[3e4c20e39c781d0] jit-backend-dump}
[3e4c20e39c7bde7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee9d5 +0  21000000
[3e4c20e39c7cd3b] jit-backend-dump}
[3e4c20e39c800cd] {jit-backend-addr
bridge out of Guard 0x4c319b8 has address 0x7f4eb6bee6e0 to 0x7f4eb6bee9d0
       gc table: 0x7f4eb6bee5f0
    jump target: 0x7f4eb6bee6e0
         resops: 0x7f4eb6bee6ee
       failures: 0x7f4eb6bee9d0
            end: 0x7f4eb6beed2e
[3e4c20e39c8224b] jit-backend-addr}
[3e4c20e39c8572a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee6fe +0  70030000
[3e4c20e39c86556] jit-backend-dump}
[3e4c20e39c896e3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee712 +0  78030000
[3e4c20e39c8a466] jit-backend-dump}
[3e4c20e39c8d48a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee727 +0  7F030000
[3e4c20e39c8e197] jit-backend-dump}
[3e4c20e39c91238] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee73f +0  83030000
[3e4c20e39c91f10] jit-backend-dump}
[3e4c20e39c950c2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee74c +0  AE030000
[3e4c20e39c95df3] jit-backend-dump}
[3e4c20e39c98e42] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee764 +0  B2030000
[3e4c20e39c99b8b] jit-backend-dump}
[3e4c20e39c9cb0d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee776 +0  BC030000
[3e4c20e39c9d80a] jit-backend-dump}
[3e4c20e39ca0767] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee78d +0  C1030000
[3e4c20e39ca1452] jit-backend-dump}
[3e4c20e39ca43d4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee79b +0  CF030000
[3e4c20e39ca50ca] jit-backend-dump}
[3e4c20e39ca7fea] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee7b3 +0  D3030000
[3e4c20e39ca8d12] jit-backend-dump}
[3e4c20e39cabc5a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee7ce +0  D4030000
[3e4c20e39cac960] jit-backend-dump}
[3e4c20e39caf889] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee7e3 +0  DB030000
[3e4c20e39cb0574] jit-backend-dump}
[3e4c20e39cb34bc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee7f1 +0  E9030000
[3e4c20e39cb41ce] jit-backend-dump}
[3e4c20e39cb7168] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee895 +0  61030000
[3e4c20e39cb7e5c] jit-backend-dump}
[3e4c20e39cbadbf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee8de +0  34030000
[3e4c20e39cbbabc] jit-backend-dump}
[3e4c20e39cbea07] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee8f2 +0  3C030000
[3e4c20e39cbf6f8] jit-backend-dump}
[3e4c20e39cc2649] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee907 +0  43030000
[3e4c20e39cc3346] jit-backend-dump}
[3e4c20e39cc6278] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee91e +0  48030000
[3e4c20e39cc6f69] jit-backend-dump}
[3e4c20e39cc9e9e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee92a +0  58030000
[3e4c20e39ccab9b] jit-backend-dump}
[3e4c20e39ccdada] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee93a +0  64030000
[3e4c20e39cce7d7] jit-backend-dump}
[3e4c20e39cd1715] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee948 +0  72030000
[3e4c20e39cd2418] jit-backend-dump}
[3e4c20e39cd5357] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee95f +0  77030000
[3e4c20e39cd604b] jit-backend-dump}
[3e4c20e39cd8f86] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee96f +0  83030000
[3e4c20e39cd9c9c] jit-backend-dump}
[3e4c20e39cdcbff] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee987 +0  87030000
[3e4c20e39cdd8f0] jit-backend-dump}
[3e4c20e39ce0aa1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6becb6d +0  6F1B0000
[3e4c20e39ce17c3] jit-backend-dump}
[3e4c20e39ce5603] jit-backend}
[3e4c20e39ce8dd6] {jit-log-opt-bridge
# bridge out of Guard 0x4c319b8 with 71 ops
[p0, p1, p2, p3]
+262: guard_class(p0, 16435208, descr=<Guard0x4c37a00>) [p0, p1, p2, p3]
+274: p5 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+285: guard_value(p5, ConstPtr(ptr6), descr=<Guard0x4c7ce78>) [p0, p1, p2, p3]
+294: p7 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+298: p8 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+302: guard_class(p8, 16437352, descr=<Guard0x4c7cec0>) [p0, p1, p2, p3]
+315: p10 = getfield_gc_r(p8, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+319: guard_nonnull_class(p10, ConstClass(ForwardLink), descr=<Guard0x4c37a60>) [p0, p1, p2, p3]
debug_merge_point(0, 0, '(vector-set! res 2 h5329)')
+339: guard_not_invalidated(descr=<Guard0x4c7cf08>) [p0, p1, p2, p3]
+339: guard_class(p7, 16503536, descr=<Guard0x4c7cf50>) [p0, p1, p2, p3]
+352: p13 = getfield_gc_r(p7, descr=<FieldP pycket.small_list.ConsEnvSize2Fixed01.inst_w_val0 24 pure>)
+356: guard_nonnull_class(p13, ConstClass(W_Vector), descr=<Guard0x4c37ac0>) [p0, p1, p2, p3]
+376: p15 = getfield_gc_r(p7, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+380: guard_class(p15, 16504944, descr=<Guard0x4c7cf98>) [p0, p1, p2, p3]
+394: i17 = getfield_gc_i(p15, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+399: p18 = getfield_gc_r(p13, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+403: guard_class(p18, 16622984, descr=<Guard0x4c7cfe0>) [p0, p1, p2, p3]
+417: i20 = getfield_gc_i(p13, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+421: i22 = int_lt(2, i20)
+425: guard_true(i22, descr=<Guard0x4c7d028>) [p0, p1, p2, p3]
+431: p23 = getfield_gc_r(p13, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
debug_merge_point(0, 0, 'res')
+435: p24 = getfield_gc_r(p8, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+446: guard_value(p24, ConstPtr(ptr25), descr=<Guard0x4c7d070>) [p0, p1, p2, p3]
+455: p26 = getfield_gc_r(p8, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+459: p27 = getfield_gc_r(p8, descr=<FieldP pycket.small_list.LetContSize1.inst__vals_w_0 40 pure>)
+463: guard_nonnull_class(p27, ConstClass(W_Vector), descr=<Guard0x4c37b20>) [p0, p1, p2, p3]
+482: p29 = getfield_gc_r(p8, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(vector-set! res 0 AppRand23) from (vector-set! res 2 h5329)')
+486: p30 = getfield_gc_r(p27, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+490: guard_class(p30, 16623792, descr=<Guard0x4c7d0b8>) [p0, p1, p2, p3]
+503: i32 = getfield_gc_i(p27, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+507: i34 = int_lt(0, i32)
+511: guard_true(i34, descr=<Guard0x4c7d100>) [p0, p1, p2, p3]
+517: p35 = new_with_vtable(descr=<SizeDescr 16>)
+558: setfield_gc(p35, i17, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+574: setarrayitem_gc(p23, 2, p35, descr=<ArrayP 8>)
+579: p38 = call_r(7464704, p30, p27, descr=<Callr 8 rr EF=5>)
+666: guard_no_exception(descr=<Guard0x4c37b80>) [p29, p13, p27, p38, p26, None, None, None]
+706: setfield_gc(p27, ConstPtr(ptr40), descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+710: setfield_gc(p27, p38, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+724: setarrayitem_gc(p38, 0, p13, descr=<ArrayP 8>)
+735: guard_class(p29, 16435208, descr=<Guard0x4c37be0>) [p29, p13, p27, p26, None, None, None]
+754: p43 = getfield_gc_r(p29, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+765: guard_value(p43, ConstPtr(ptr44), descr=<Guard0x4c7d148>) [p29, p13, p27, p26, None, None, None]
+774: p45 = getfield_gc_r(p29, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+778: p46 = getfield_gc_r(p29, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+782: guard_class(p46, 16437352, descr=<Guard0x4c7d190>) [p29, p13, p27, p26, None, None, None]
+795: p48 = getfield_gc_r(p46, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+799: guard_nonnull_class(p48, ConstClass(ForwardLink), descr=<Guard0x4c37c40>) [p29, p13, p27, p26, None, None, None]
debug_merge_point(0, 0, '(let ([AppRand24 (- h5329 1)]) (let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25)))')
debug_merge_point(0, 0, '(- h5329 1)')
+818: guard_class(p45, 16503536, descr=<Guard0x4c7d1d8>) [p29, p13, p27, p26, None, None, None]
+830: p51 = getfield_gc_r(p45, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+834: guard_class(p51, 16504944, descr=<Guard0x4c7d220>) [p29, p13, p27, p26, None, None, None]
+846: i53 = getfield_gc_i(p51, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+850: i55 = int_sub_ovf(i53, 1)
+854: guard_no_overflow(descr=<Guard0x4c7d268>) [p29, p13, p27, p26, None, None, None]
debug_merge_point(0, 0, '(let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25))')
debug_merge_point(0, 0, 'res')
+860: p56 = getfield_gc_r(p45, descr=<FieldP pycket.small_list.ConsEnvSize2Fixed01.inst_w_val0 24 pure>)
+864: guard_nonnull_class(p56, ConstClass(W_Vector), descr=<Guard0x4c37ca0>) [p29, p13, p27, p26, None, None, None]
+883: p58 = getfield_gc_r(p51, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+887: guard_class(p58, 16481456, descr=<Guard0x4c7d2b0>) [p29, p13, p27, p26, None, None, None]
+899: p60 = getfield_gc_r(p58, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(makeTree AppRand24)')
+903: p61 = getfield_gc_r(p58, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+914: guard_value(p61, ConstPtr(ptr62), descr=<Guard0x4c7d2f8>) [p29, p13, p27, p26, None, None, None]
debug_merge_point(0, 0, '(if (zero? h5329) null (let ([res (vector 0 0 0)][SetBang0 (+ CellRef(nodes5320) 1)]) (set! nodes5320 SetBang0) (let ([AppRand22 (- h5329 1)]) (let ([res res][AppRand23 (makeTree AppRand22)]) (vector-set! res 0 AppRand23))) (let ([AppRand24 (- h5329 1)]) (let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25))) (vector-set! res 2 h5329) res)) from (makeTree AppRand24)')
+923: jump(p58, i55, p48, p60, p45, p46, p56, p51, p56, p48, descr=TargetToken(79354704))
+992: --end of the loop--
[3e4c20e39d2bb72] jit-log-opt-bridge}
[3e4c20e3a0cff18] {jit-backend
[3e4c20e3a15bd2c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6beee
[3e4c20e3a163f35] jit-backend-dump}
[3e4c20e3a16de6c] {jit-backend-addr
Loop 12 ((let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))) from (doloop5608 AppRand59)) has address 0x7f4eb6beef9d to 0x7f4eb6bef1c0 (bootstrap 0x7f4eb6beef10)
       gc table: 0x7f4eb6beee70
       function: 0x7f4eb6beef10
         resops: 0x7f4eb6beef9d
       failures: 0x7f4eb6bef1c0
            end: 0x7f4eb6bef3f4
[3e4c20e3a170cad] jit-backend-addr}
[3e4c20e3a174f84] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6beefc7 +0  69020000
[3e4c20e3a176280] jit-backend-dump}
[3e4c20e3a17969c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6beefdd +0  6F020000
[3e4c20e3a17a511] jit-backend-dump}
[3e4c20e3a17d749] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6beeff0 +0  94020000
[3e4c20e3a17e4e2] jit-backend-dump}
[3e4c20e3a1815d0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bef004 +0  9C020000
[3e4c20e3a1822c1] jit-backend-dump}
[3e4c20e3a18542f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bef018 +0  A4020000
[3e4c20e3a18616f] jit-backend-dump}
[3e4c20e3a18917e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bef02f +0  A9020000
[3e4c20e3a189e7b] jit-backend-dump}
[3e4c20e3a18ced0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bef03c +0  B8020000
[3e4c20e3a18dc04] jit-backend-dump}
[3e4c20e3a190bd2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bef053 +0  BD020000
[3e4c20e3a1918eb] jit-backend-dump}
[3e4c20e3a194885] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bef061 +0  CB020000
[3e4c20e3a1955db] jit-backend-dump}
[3e4c20e3a198575] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bef06a +0  DE020000
[3e4c20e3a199281] jit-backend-dump}
[3e4c20e3a19c271] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bef086 +0  DE020000
[3e4c20e3a19cfa2] jit-backend-dump}
[3e4c20e3a19ff67] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bef093 +0  ED020000
[3e4c20e3a1a0c74] jit-backend-dump}
[3e4c20e3a1a3d74] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bef13d +0  7B020000
[3e4c20e3a1a4aab] jit-backend-dump}
[3e4c20e3a1a7ae1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bef149 +0  8B020000
[3e4c20e3a1a87e4] jit-backend-dump}
[3e4c20e3a1ac35f] jit-backend}
[3e4c20e3a1b000f] {jit-log-opt-loop
# Loop 12 ((let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))) from (doloop5608 AppRand59)) : loop with 70 ops
[p0, p1]
+309: label(p0, p1, descr=TargetToken(80545216))
debug_merge_point(0, 0, '(let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))) from (doloop5608 AppRand59)')
+328: guard_class(p1, 16435208, descr=<Guard0x4c37d00>) [p0, p1]
+347: p3 = getfield_gc_r(p1, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+351: guard_nonnull_class(p3, ConstClass(ForwardLink), descr=<Guard0x4c37d60>) [p0, p1]
debug_merge_point(0, 0, '(>= allocated n5602)')
+369: guard_not_invalidated(descr=<Guard0x4c7d340>) [p0, p1]
+369: guard_class(p0, 16504944, descr=<Guard0x4c7d388>) [p0, p1]
+388: i6 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+392: p7 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+396: guard_class(p7, 16479200, descr=<Guard0x4c7d3d0>) [p0, p1]
+408: p9 = getfield_gc_r(p7, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+419: guard_value(p9, ConstPtr(ptr10), descr=<Guard0x4c7d418>) [p0, p1]
+428: p11 = getfield_gc_r(p7, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_4 56 pure>)
+432: guard_nonnull_class(p11, ConstClass(W_Fixnum), descr=<Guard0x4c37dc0>) [p0, p1]
+451: i13 = getfield_gc_i(p11, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+455: i14 = int_ge(i6, i13)
+458: guard_false(i14, descr=<Guard0x4c7d460>) [p0, p1]
debug_merge_point(0, 0, '(if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))')
debug_merge_point(0, 0, '(let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59)))')
debug_merge_point(0, 0, '(make-vector nwords 0)')
+464: p15 = getfield_gc_r(p7, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_3 48 pure>)
+468: guard_nonnull_class(p15, ConstClass(W_Fixnum), descr=<Guard0x4c37e20>) [p0, p1]
+487: i17 = getfield_gc_i(p15, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+491: i19 = int_lt(i17, 0)
+495: guard_false(i19, descr=<Guard0x4c7d4a8>) [p0, p1]
+501: i20 = int_is_zero(i17)
+504: guard_false(i20, descr=<Guard0x4c7d4f0>) [p0, p1]
debug_merge_point(0, 0, '(set! aexport SetBang10)')
+510: p21 = getfield_gc_r(p7, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_1 32 pure>)
debug_merge_point(0, 0, '(let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))')
debug_merge_point(0, 0, '(+ allocated nbytes)')
+514: p22 = getfield_gc_r(p7, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_2 40 pure>)
+518: guard_nonnull_class(p22, ConstClass(W_Fixnum), descr=<Guard0x4c37e80>) [p0, p1]
+538: i24 = getfield_gc_i(p22, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+542: i25 = int_add_ovf(i6, i24)
+545: guard_no_overflow(descr=<Guard0x4c7d538>) [p0, p1]
debug_merge_point(0, 0, '(doloop5608 AppRand59)')
debug_merge_point(0, 0, '(let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))) from (doloop5608 AppRand59)')
+551: p26 = new_with_vtable(descr=<SizeDescr 32>)
+595: setfield_gc(p26, i17, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+599: p28 = new_array_clear(1, descr=<ArrayP 8>)
+625: setarrayitem_gc(p28, 0, ConstPtr(ptr30), descr=<ArrayP 8>)
+629: setfield_gc(p26, p28, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+640: setfield_gc(p26, ConstPtr(ptr31), descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+656: setfield_gc(p21, p26, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+661: label(p7, i25, p1, p3, p11, i13, p15, p22, i24, p21, i17, descr=TargetToken(80545296))
debug_merge_point(0, 0, '(let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))) from (doloop5608 AppRand59)')
debug_merge_point(0, 0, '(>= allocated n5602)')
+712: guard_not_invalidated(descr=<Guard0x4c37ee0>) [i25, p7, p1, p3]
+712: i32 = int_ge(i25, i13)
+715: guard_false(i32, descr=<Guard0x4c7d580>) [i25, p7, p1, p3]
debug_merge_point(0, 0, '(if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))')
debug_merge_point(0, 0, '(let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59)))')
debug_merge_point(0, 0, '(make-vector nwords 0)')
debug_merge_point(0, 0, '(set! aexport SetBang10)')
debug_merge_point(0, 0, '(let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))')
debug_merge_point(0, 0, '(+ allocated nbytes)')
+721: i33 = int_add_ovf(i25, i24)
+727: guard_no_overflow(descr=<Guard0x4c7d5c8>) [i25, p7, p1, p3]
debug_merge_point(0, 0, '(doloop5608 AppRand59)')
debug_merge_point(0, 0, '(let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))) from (doloop5608 AppRand59)')
+733: p34 = new_with_vtable(descr=<SizeDescr 32>)
+774: setfield_gc(p34, i17, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+778: p36 = new_array_clear(1, descr=<ArrayP 8>)
+804: setarrayitem_gc(p36, 0, ConstPtr(ptr38), descr=<ArrayP 8>)
+808: setfield_gc(p34, p36, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+819: setfield_gc(p34, ConstPtr(ptr39), descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+835: setfield_gc(p21, p34, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+840: jump(p7, i33, p1, p3, p11, i13, p15, p22, i24, p21, i17, descr=TargetToken(80545296))
+848: --end of the loop--
[3e4c20e3a1eac62] jit-log-opt-loop}
[3e4c20e7dfc187b] {jit-backend
[3e4c20e7e042645] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bef4d
[3e4c20e7e049417] jit-backend-dump}
[3e4c20e7e06791e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bef554 +0  21000000
[3e4c20e7e068e75] jit-backend-dump}
[3e4c20e7e06cf53] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bef6c5 +0  21000000
[3e4c20e7e06de0f] jit-backend-dump}
[3e4c20e7e0711b3] {jit-backend-addr
bridge out of Guard 0x4c7d190 has address 0x7f4eb6bef550 to 0x7f4eb6bef6c0
       gc table: 0x7f4eb6bef4d0
    jump target: 0x7f4eb6bef550
         resops: 0x7f4eb6bef55e
       failures: 0x7f4eb6bef6c0
            end: 0x7f4eb6bef837
[3e4c20e7e073d8d] jit-backend-addr}
[3e4c20e7e07715f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bef56e +0  91010000
[3e4c20e7e077f38] jit-backend-dump}
[3e4c20e7e07afef] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bef582 +0  99010000
[3e4c20e7e07bcb5] jit-backend-dump}
[3e4c20e7e07ecba] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bef597 +0  A0010000
[3e4c20e7e07f9df] jit-backend-dump}
[3e4c20e7e082a5c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bef5af +0  A4010000
[3e4c20e7e083749] jit-backend-dump}
[3e4c20e7e08698e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bef5bc +0  CF010000
[3e4c20e7e087688] jit-backend-dump}
[3e4c20e7e08a63a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bef5cd +0  DA010000
[3e4c20e7e08b328] jit-backend-dump}
[3e4c20e7e08e273] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bef5db +0  E8010000
[3e4c20e7e08ef57] jit-backend-dump}
[3e4c20e7e091e87] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bef5f1 +0  EE010000
[3e4c20e7e092b62] jit-backend-dump}
[3e4c20e7e095a91] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bef601 +0  FA010000
[3e4c20e7e09677c] jit-backend-dump}
[3e4c20e7e0996d6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bef619 +0  FE010000
[3e4c20e7e09a3a8] jit-backend-dump}
[3e4c20e7e09d731] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bee907 +0  450C0000
[3e4c20e7e09e480] jit-backend-dump}
[3e4c20e7e0a2c62] jit-backend}
[3e4c20e7e0a65c3] {jit-log-opt-bridge
# bridge out of Guard 0x4c7d190 with 43 ops
[p0, p1, p2, p3]
+150: guard_class(p0, 16435208, descr=<Guard0x4c36e00>) [p0, p1, p2, p3]
+162: p5 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+173: guard_value(p5, ConstPtr(ptr6), descr=<Guard0x4c7d658>) [p0, p1, p2, p3]
+182: p7 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+186: p8 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+190: guard_class(p8, 16435920, descr=<Guard0x4c7d6a0>) [p0, p1, p2, p3]
+203: p10 = getfield_gc_r(p8, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+207: guard_nonnull_class(p10, ConstClass(ForwardLink), descr=<Guard0x4c36ec0>) [p0, p1, p2, p3]
debug_merge_point(0, 0, '(let ([AppRand24 (- h5329 1)]) (let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25)))')
debug_merge_point(0, 0, '(- h5329 1)')
+227: guard_not_invalidated(descr=<Guard0x4c7d6e8>) [p0, p1, p2, p3]
+227: guard_class(p7, 16503536, descr=<Guard0x4c7d730>) [p0, p1, p2, p3]
+240: p13 = getfield_gc_r(p7, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+244: guard_class(p13, 16504944, descr=<Guard0x4c7d778>) [p0, p1, p2, p3]
+257: i15 = getfield_gc_i(p13, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+261: i17 = int_sub_ovf(i15, 1)
+265: guard_no_overflow(descr=<Guard0x4c7d7c0>) [p0, p1, p2, p3]
debug_merge_point(0, 0, '(let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25))')
debug_merge_point(0, 0, 'res')
+271: p18 = getfield_gc_r(p7, descr=<FieldP pycket.small_list.ConsEnvSize2Fixed01.inst_w_val0 24 pure>)
+275: guard_nonnull_class(p18, ConstClass(W_Vector), descr=<Guard0x4c36f20>) [p0, p1, p2, p3]
+293: p20 = getfield_gc_r(p13, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+297: guard_class(p20, 16481456, descr=<Guard0x4c7d808>) [p0, p1, p2, p3]
+309: p22 = getfield_gc_r(p20, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(makeTree AppRand24)')
+313: p23 = getfield_gc_r(p20, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+324: guard_value(p23, ConstPtr(ptr24), descr=<Guard0x4c7d850>) [p0, p1, p2, p3]
debug_merge_point(0, 0, '(if (zero? h5329) null (let ([res (vector 0 0 0)][SetBang0 (+ CellRef(nodes5320) 1)]) (set! nodes5320 SetBang0) (let ([AppRand22 (- h5329 1)]) (let ([res res][AppRand23 (makeTree AppRand22)]) (vector-set! res 0 AppRand23))) (let ([AppRand24 (- h5329 1)]) (let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25))) (vector-set! res 2 h5329) res)) from (makeTree AppRand24)')
+333: p25 = new_with_vtable(descr=<SizeDescr 24>)
+374: p26 = new_with_vtable(descr=<SizeDescr 48>)
+385: p27 = new_with_vtable(descr=<SizeDescr 40>)
+396: setfield_gc(p27, p10, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+400: setfield_gc(p27, p7, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+404: setfield_gc(p27, p8, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+415: setfield_gc(p27, ConstPtr(ptr28), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+419: setfield_gc(p26, p22, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+423: setfield_gc(p26, p27, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+427: setfield_gc(p26, p10, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+431: setfield_gc(p25, p20, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+435: setfield_gc(p25, i17, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+446: setfield_gc(p26, ConstPtr(ptr29), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+450: setfield_gc(p26, p18, descr=<FieldP pycket.small_list.LetContSize1.inst__vals_w_0 40 pure>)
+454: jump(p25, p26, descr=TargetToken(79354624))
+496: --end of the loop--
[3e4c20e7e0d74e4] jit-log-opt-bridge}
[3e4c20e7e47da9e] {jit-backend
[3e4c20e7e570bb8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6befb00 +0  0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8CA204000048FF0425E0F05203813B480E00000F85000000004C8B7B204C8B354BFEFFFF4D39F70F85000000004C8B73104C8B7B1841813F101100000F85000000004D8B6F084983FD01720841817D00900F00000F850000000041813E301901000F85000000004D8B6E184983FD01720841817D00F08C00000F85000000004D8B660841813C24B01E01000F85000000004D8B7424104D8B651841813C24C8EB02000F85000000004D8B65084983FC020F8E000000004D8B65104D8B57204C8B0DFAFDFFFF4D39CA0F85000000004D8B4F104D8B571841813A480E00000F85000000004D8B7A084983FF01720741813F900F00000F8500000000418139B01E01000F8500000000498B7908813F88BE00000F8500000000488B5710488B05CDFDFFFF4839C20F8500000000488B4738488B50084883FA017206813AF08C00000F8500000000498B4110488B4A188139C8EB02000F85000000004883F8000F8C00000000488B4A084839C80F8D000000004C8B4210488B0C25F091F900488D91E0000000483B14251092F9000F873C03000048891425F091F90048C701601400004C89710841F6442404810F853A03000049894C242041F64004810F85480300004D896CC0104C8B6F184983FD01720841817D00601400000F8500000000488B47484883F80172068138601400000F85000000004C8B47204983F8017207418138601400000F85000000004D8B65084D85E40F84000000004C8B70084D85F60F84000000004D0FAFF40F80000000004D85F60F84000000004D8B60084D85E40F84000000004D0FAFE60F80000000004C8B77504D8B46084983F801720741813830B700000F85000000004C8B77304983FE01720741813E601400000F8500000000498B4010488B15ECFCFFFF4839D00F8500000000498B56084D8B70204983FE01720741813E601400000F85000000004885D20F8400000000498B46084885C00F8400000000480FAFC20F80000000004D8B7008498B7018498B582841813E102001000F85000000004983FC000F8E000000004883FA000F8C000000004C8D691049C74500F08C000049895508498D4D2048C701080E000048C7410801000000488B3D99FCFFFF4889791049894D10488B3D92FCFFFF49897D18F64304010F85EC0100004C896B084C8D691849C7450020BA0000498D4D4048C7016014000048894108488D791048C7076014000048895708488D571048C702601400004C8962084C8D621049C70424480E000049C745080000000049C745100000000049C745180000000049C745200000000049C745280000000049C745300000000049C745380000000049C74424080000000049C74424100000000049C74424180000000049C7442420000000004C8B42084C89BD300100004C8B3DD5FBFFFF4D897C24204D894C24104D895424184C8B95300100004D895424084D8975084C8B35B7FBFFFF4D8975104989751849895D2049894D2849897D304989553849BB01000000000000804D39D80F8C00000000488B77084883FE010F8C000000004C8B71084C89AD300100004C89A5380100004C899540010000488995480100004889BD5001000048898D580100004989DC4989F24889C34C89C749BB30F1BEB64E7F000041FFE30F1F800000000048C7442408FFFFFF0049BB48F8BEB64E7F00004C895D204D8D9BA88AFFFF41FFD3E938FBFFFF49BB98F9BEB64E7F00004C895D204D8D9B5891FFFF41FFD3E9AFFCFFFF7811415449BBF081BEB64E7F000041FFD3790641804C24FF01E9A8FCFFFF7811415049BBF081BEB64E7F000041FFD3790F4989C349C1EB074983F3F84D0FAB18E991FCFFFF5349BB8081BEB64E7F000041FFD3E901FEFFFFFF351FF9FFFF49BB58F8BEB64E7F000041534D8D9BA887FFFF41FFE3FF3513F9FFFF49BB68F8BEB64E7F000041534D8D9B9887FFFF41FFE3FF35FFF8FFFF49BB78F8BEB64E7F000041534D8D9B8887FFFF41FFE3FF35EBF8FFFF49BB88F8BEB64E7F000041534D8D9B7887FFFF41FFE3FF35D7F8FFFF49BB98F8BEB64E7F000041534D8D9B6887FFFF41FFE3FF35C3F8FFFF49BBA8F8BEB64E7F000041534D8D9B5887FFFF41FFE3FF35AFF8FFFF49BBB8F8BEB64E7F000041534D8D9B4887FFFF41FFE3FF359BF8FFFF49BBC8F8BEB64E7F000041534D8D9B3887FFFF41FFE3FF3587F8FFFF49BBD8F8BEB64E7F000041534D8D9B2887FFFF41FFE3FF3573F8FFFF49BBE8F8BEB64E7F000041534D8D9B1887FFFF41FFE3FF3567F8FFFF49BBF8F8BEB64E7F000041534D8D9B0887FFFF41FFE3FF3553F8FFFF49BB08F9BEB64E7F000041534D8D9BF886FFFF41FFE3FF353FF8FFFF49BB18F9BEB64E7F000041534D8D9BE886FFFF41FFE3FF352BF8FFFF49BB28F9BEB64E7F000041534D8D9BD886FFFF41FFE3FF3517F8FFFF49BB38F9BEB64E7F000041534D8D9BC886FFFF41FFE3FF350BF8FFFF49BB48F9BEB64E7F000041534D8D9BB886FFFF41FFE3FF35F7F7FFFF49BB58F9BEB64E7F000041534D8D9BA886FFFF41FFE3FF35E3F7FFFF49BB68F9BEB64E7F000041534D8D9B9886FFFF41FFE3FF35CFF7FFFF49BB78F9BEB64E7F000041534D8D9B8886FFFF41FFE3FF35BBF7FFFF49BB88F9BEB64E7F000041534D8D9B7886FFFF41FFE3FF35A7F7FFFF49BBA8F9BEB64E7F000041534D8D9B5886FFFF41FFE3FF3593F7FFFF49BBB8F9BEB64E7F000041534D8D9B4886FFFF41FFE3FF357FF7FFFF49BBC8F9BEB64E7F000041534D8D9B3886FFFF41FFE3FF356BF7FFFF49BBD8F9BEB64E7F000041534D8D9B2886FFFF41FFE3FF3557F7FFFF49BBE8F9BEB64E7F000041534D8D9B1886FFFF41FFE3FF3543F7FFFF49BBF8F9BEB64E7F000041534D8D9B0886FFFF41FFE3FF352FF7FFFF49BB08FABEB64E7F000041534D8D9BF885FFFF41FFE3FF351BF7FFFF49BB18FABEB64E7F000041534D8D9BE885FFFF41FFE3FF3507F7FFFF49BB28FABEB64E7F000041534D8D9BD885FFFF41FFE3FF35F3F6FFFF49BB38FABEB64E7F000041534D8D9BC885FFFF41FFE3FF35DFF6FFFF49BB48FABEB64E7F000041534D8D9BB885FFFF41FFE3FF35D3F6FFFF49BB58FABEB64E7F000041534D8D9BA885FFFF41FFE3FF35BFF6FFFF49BB68FABEB64E7F000041534D8D9B9885FFFF41FFE3FF35ABF6FFFF49BB78FABEB64E7F000041534D8D9B8885FFFF41FFE3FF3597F6FFFF49BB88FABEB64E7F000041534D8D9B7885FFFF41FFE3FF3583F6FFFF49BB98FABEB64E7F000041534D8D9B6885FFFF41FFE3FF356FF6FFFF49BBA8FABEB64E7F000041534D8D9B5885FFFF41FFE3FF355BF6FFFF49BBB8FABEB64E7F000041534D8D9B4885FFFF41FFE3FF3547F6FFFF49BBC8FABEB64E7F000041534D8D9B3885FFFF41FFE3FF3553F6FFFF49BBD8FABEB64E7F000041534D8D9B2885FFFF41FFE3FF353FF6FFFF49BBE8FABEB64E7F000041534D8D9B1885FFFF41FFE3
[3e4c20e7e57dcb3] jit-backend-dump}
[3e4c20e7e587cfa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6befc94 +0  22000000
[3e4c20e7e589297] jit-backend-dump}
[3e4c20e7e58cfff] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf0145 +0  22000000
[3e4c20e7e58debd] jit-backend-dump}
[3e4c20e7e591227] {jit-backend-addr
bridge out of Guard 0x4c31850 has address 0x7f4eb6befc90 to 0x7f4eb6bf0140
       gc table: 0x7f4eb6befb00
    jump target: 0x7f4eb6befc90
         resops: 0x7f4eb6befc9e
       failures: 0x7f4eb6bf0140
            end: 0x7f4eb6bf0657
[3e4c20e7e5937ff] jit-backend-addr}
[3e4c20e7e596b60] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6befcae +0  29050000
[3e4c20e7e5979d8] jit-backend-dump}
[3e4c20e7e59ab90] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6befcc2 +0  31050000
[3e4c20e7e59b901] jit-backend-dump}
[3e4c20e7e59e99c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6befcd7 +0  38050000
[3e4c20e7e59f6e2] jit-backend-dump}
[3e4c20e7e5a25e4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6befcef +0  3C050000
[3e4c20e7e5a32f0] jit-backend-dump}
[3e4c20e7e5a662c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6befcfc +0  67050000
[3e4c20e7e5a7382] jit-backend-dump}
[3e4c20e7e5aa3e0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6befd14 +0  6B050000
[3e4c20e7e5ab0ec] jit-backend-dump}
[3e4c20e7e5ae02b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6befd26 +0  75050000
[3e4c20e7e5aed25] jit-backend-dump}
[3e4c20e7e5b1ba3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6befd3d +0  7A050000
[3e4c20e7e5b2890] jit-backend-dump}
[3e4c20e7e5b56f0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6befd4b +0  88050000
[3e4c20e7e5b63e3] jit-backend-dump}
[3e4c20e7e5b9252] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6befd63 +0  8C050000
[3e4c20e7e5b9f83] jit-backend-dump}
[3e4c20e7e5bce04] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6befd78 +0  93050000
[3e4c20e7e5bdb01] jit-backend-dump}
[3e4c20e7e5c093b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6befd8f +0  98050000
[3e4c20e7e5c1632] jit-backend-dump}
[3e4c20e7e5c448e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6befd9c +0  A7050000
[3e4c20e7e5c517c] jit-backend-dump}
[3e4c20e7e5c7fcf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6befdac +0  B3050000
[3e4c20e7e5c8cee] jit-backend-dump}
[3e4c20e7e5cbb5c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6befdc0 +0  BB050000
[3e4c20e7e5cc853] jit-backend-dump}
[3e4c20e7e5cf688] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6befdda +0  BD050000
[3e4c20e7e5d03bf] jit-backend-dump}
[3e4c20e7e5d3243] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6befdee +0  C5050000
[3e4c20e7e5d3f4f] jit-backend-dump}
[3e4c20e7e5d6dd0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6befdf8 +0  D7050000
[3e4c20e7e5d7ad0] jit-backend-dump}
[3e4c20e7e5da923] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6befe05 +0  E6050000
[3e4c20e7e5db61a] jit-backend-dump}
[3e4c20e7e5de457] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6befe72 +0  95050000
[3e4c20e7e5df148] jit-backend-dump}
[3e4c20e7e5e1fc6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6befe88 +0  9B050000
[3e4c20e7e5e2cc0] jit-backend-dump}
[3e4c20e7e5e5b1f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6befe9f +0  A0050000
[3e4c20e7e5e67fa] jit-backend-dump}
[3e4c20e7e5e9663] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6befeac +0  AF050000
[3e4c20e7e5ea35a] jit-backend-dump}
[3e4c20e7e5ed1b6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6befeb9 +0  BE050000
[3e4c20e7e5edec5] jit-backend-dump}
[3e4c20e7e5f0d1b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6befec3 +0  D0050000
[3e4c20e7e5f1a2b] jit-backend-dump}
[3e4c20e7e5f4887] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6befecc +0  E3050000
[3e4c20e7e5f5584] jit-backend-dump}
[3e4c20e7e5f848b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6befed9 +0  F2050000
[3e4c20e7e5f9179] jit-backend-dump}
[3e4c20e7e5fbfeb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6befee3 +0  04060000
[3e4c20e7e5fcce8] jit-backend-dump}
[3e4c20e7e5ffb8a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6befefe +0  05060000
[3e4c20e7e600881] jit-backend-dump}
[3e4c20e7e6036ce] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6beff15 +0  0A060000
[3e4c20e7e6043b2] jit-backend-dump}
[3e4c20e7e607227] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6beff29 +0  12060000
[3e4c20e7e607f1e] jit-backend-dump}
[3e4c20e7e60ad4c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6beff44 +0  13060000
[3e4c20e7e60ba43] jit-backend-dump}
[3e4c20e7e60e8ac] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6beff4d +0  26060000
[3e4c20e7e60f59c] jit-backend-dump}
[3e4c20e7e6123e3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6beff5a +0  35060000
[3e4c20e7e6130d1] jit-backend-dump}
[3e4c20e7e615f73] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6beff64 +0  47060000
[3e4c20e7e616c73] jit-backend-dump}
[3e4c20e7e619aba] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6beff7d +0  4A060000
[3e4c20e7e61a7ab] jit-backend-dump}
[3e4c20e7e61d5df] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6beff87 +0  5C060000
[3e4c20e7e61e2d9] jit-backend-dump}
[3e4c20e7e621142] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6beff91 +0  6E060000
[3e4c20e7e621e26] jit-backend-dump}
[3e4c20e7e624cad] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf00e0 +0  3B050000
[3e4c20e7e6259b0] jit-backend-dump}
[3e4c20e7e628800] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf00ee +0  49050000
[3e4c20e7e6294ee] jit-backend-dump}
[3e4c20e7e62c693] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6becaeb +0  A1310000
[3e4c20e7e62d3ac] jit-backend-dump}
[3e4c20e7e6310ee] jit-backend}
[3e4c20e7e634adc] {jit-log-opt-bridge
# bridge out of Guard 0x4c31850 with 151 ops
[p0, p1, p2, p3]
+422: guard_class(p0, 16435208, descr=<Guard0x4c37460>) [p0, p1, p2, p3]
+434: p5 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+445: guard_value(p5, ConstPtr(ptr6), descr=<Guard0x4c7d898>) [p0, p1, p2, p3]
+454: p7 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+458: p8 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+462: guard_class(p8, 16435920, descr=<Guard0x4c7d8e0>) [p0, p1, p2, p3]
+475: p10 = getfield_gc_r(p8, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+479: guard_nonnull_class(p10, ConstClass(ForwardLink), descr=<Guard0x4c374c0>) [p0, p1, p2, p3]
debug_merge_point(0, 0, '(vector-set! res 2 h5329)')
+499: guard_not_invalidated(descr=<Guard0x4c7d928>) [p0, p1, p2, p3]
+499: guard_class(p7, 16503536, descr=<Guard0x4c7d970>) [p0, p1, p2, p3]
+512: p13 = getfield_gc_r(p7, descr=<FieldP pycket.small_list.ConsEnvSize2Fixed01.inst_w_val0 24 pure>)
+516: guard_nonnull_class(p13, ConstClass(W_Vector), descr=<Guard0x4c37520>) [p0, p1, p2, p3]
+536: p15 = getfield_gc_r(p7, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+540: guard_class(p15, 16504944, descr=<Guard0x4c7d9b8>) [p0, p1, p2, p3]
+554: i17 = getfield_gc_i(p15, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+559: p18 = getfield_gc_r(p13, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+563: guard_class(p18, 16622984, descr=<Guard0x4c7da00>) [p0, p1, p2, p3]
+577: i20 = getfield_gc_i(p13, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+581: i22 = int_lt(2, i20)
+585: guard_true(i22, descr=<Guard0x4c7da48>) [p0, p1, p2, p3]
+591: p23 = getfield_gc_r(p13, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
debug_merge_point(0, 0, 'res')
+595: p24 = getfield_gc_r(p8, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+606: guard_value(p24, ConstPtr(ptr25), descr=<Guard0x4c7da90>) [p0, p1, p2, p3]
+615: p26 = getfield_gc_r(p8, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+619: p27 = getfield_gc_r(p8, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+623: guard_class(p27, 16435208, descr=<Guard0x4c7dad8>) [p0, p1, p2, p3]
+636: p29 = getfield_gc_r(p27, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+640: guard_nonnull_class(p29, ConstClass(ForwardLink), descr=<Guard0x4c37580>) [p0, p1, p2, p3]
debug_merge_point(0, 0, '(vector-set! CellRef(trees) i AppRand28) from (vector-set! res 2 h5329)')
+659: guard_class(p26, 16504944, descr=<Guard0x4c7db20>) [p0, p1, p2, p3]
+672: p32 = getfield_gc_r(p26, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+676: guard_class(p32, 16480328, descr=<Guard0x4c7db68>) [p0, p1, p2, p3]
+688: p34 = getfield_gc_r(p32, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+699: guard_value(p34, ConstPtr(ptr35), descr=<Guard0x4c7dbb0>) [p0, p1, p2, p3]
+708: p36 = getfield_gc_r(p32, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_4 56 pure>)
+712: p37 = getfield_gc_r(p36, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+716: guard_nonnull_class(p37, ConstClass(W_Vector), descr=<Guard0x4c375e0>) [p0, p1, p2, p3]
+734: i39 = getfield_gc_i(p26, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+738: p40 = getfield_gc_r(p37, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+742: guard_class(p40, 16622984, descr=<Guard0x4c7dbf8>) [p0, p1, p2, p3]
+754: i43 = int_ge(i39, 0)
+758: guard_true(i43, descr=<Guard0x4c7dc40>) [p0, p1, p2, p3]
+764: i44 = getfield_gc_i(p37, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+768: i45 = int_lt(i39, i44)
+771: guard_true(i45, descr=<Guard0x4c7dc88>) [p0, p1, p2, p3]
+777: p46 = getfield_gc_r(p37, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+781: p47 = new_with_vtable(descr=<SizeDescr 16>)
+825: setfield_gc(p47, i17, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+841: setarrayitem_gc(p23, 2, p47, descr=<ArrayP 8>)
+857: setarrayitem_gc(p46, i39, p13, descr=<ArrayP 8>)
debug_merge_point(0, 0, '(let ([AppRand29 (* promoteRate ntrees treeSize)]) (CellRef(doYoungGenAlloc) AppRand29 words/dead))')
debug_merge_point(0, 0, '(* promoteRate ntrees treeSize)')
+862: p49 = getfield_gc_r(p32, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_0 24 pure>)
+866: guard_nonnull_class(p49, ConstClass(W_Fixnum), descr=<Guard0x4c37640>) [p32, p49, p27, p26, p29, None, None, None]
+886: p52 = getfield_gc_r(p32, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_6 72 pure>)
+890: guard_nonnull_class(p52, ConstClass(W_Fixnum), descr=<Guard0x4c376a0>) [p32, p49, p27, p26, p29, None, None, None]
+908: p54 = getfield_gc_r(p32, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_1 32 pure>)
+912: guard_nonnull_class(p54, ConstClass(W_Fixnum), descr=<Guard0x4c37700>) [p32, p49, p27, p26, p29, None, None, None]
+931: i56 = getfield_gc_i(p49, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+935: i57 = int_is_true(i56)
+938: guard_true(i57, descr=<Guard0x4c7dcd0>) [p32, p49, p27, p26, p29, None, None, None]
+944: i58 = getfield_gc_i(p52, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+948: i59 = int_is_true(i58)
+951: guard_true(i59, descr=<Guard0x4c7dd18>) [p32, p49, p27, p26, p29, None, None, None]
+957: i60 = int_mul_ovf(i56, i58)
+961: guard_no_overflow(descr=<Guard0x4c7dd60>) [p32, p49, p27, p26, p29, None, None, None]
+967: i61 = int_is_true(i60)
+970: guard_true(i61, descr=<Guard0x4c7dda8>) [p32, p49, p27, p26, p29, None, None, None]
+976: i62 = getfield_gc_i(p54, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+980: i63 = int_is_true(i62)
+983: guard_true(i63, descr=<Guard0x4c7ddf0>) [p32, p49, p27, p26, p29, None, None, None]
+989: i64 = int_mul_ovf(i60, i62)
+993: guard_no_overflow(descr=<Guard0x4c7de38>) [p32, p49, p27, p26, p29, None, None, None]
debug_merge_point(0, 0, '(CellRef(doYoungGenAlloc) AppRand29 words/dead)')
+999: p65 = getfield_gc_r(p32, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_7 80 pure>)
+1003: p66 = getfield_gc_r(p65, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1007: guard_nonnull_class(p66, 16478448, descr=<Guard0x4c37760>) [p32, p49, p27, p26, p29, None, None, None]
+1026: p68 = getfield_gc_r(p32, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_3 48 pure>)
+1030: guard_nonnull_class(p68, ConstClass(W_Fixnum), descr=<Guard0x4c377c0>) [p32, p49, p27, p26, p29, None, None, None]
+1049: p70 = getfield_gc_r(p66, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1060: guard_value(p70, ConstPtr(ptr71), descr=<Guard0x4c7de80>) [p32, p49, p27, p26, p29, None, None, None]
+1069: p72 = getfield_gc_r(p32, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1069: i73 = getfield_gc_i(p68, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(let ([nbytes (* nwords bytes/word)]) (let ([doloop5608 (lambda (allocated) (let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))))]) (doloop5608 0)))')
debug_merge_point(0, 0, '(* nwords bytes/word)')
+1073: p74 = getfield_gc_r(p66, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize3.inst__vals_1 32 pure>)
+1077: guard_nonnull_class(p74, ConstClass(W_Fixnum), descr=<Guard0x4c37820>) [p32, p49, p27, p26, p29, None, None, None]
+1096: i76 = int_is_true(i73)
+1099: guard_true(i76, descr=<Guard0x4c7dec8>) [p32, p49, p27, p26, p29, None, None, None]
+1105: i77 = getfield_gc_i(p74, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1109: i78 = int_is_true(i77)
+1112: guard_true(i78, descr=<Guard0x4c7df10>) [p32, p49, p27, p26, p29, None, None, None]
+1118: i79 = int_mul_ovf(i73, i77)
+1122: guard_no_overflow(descr=<Guard0x4c7df58>) [p32, p49, p27, p26, p29, None, None, None]
debug_merge_point(0, 0, '(let ([doloop5608 (lambda (allocated) (let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))))]) (doloop5608 0))')
+1128: p80 = getfield_gc_r(p66, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(lambda (allocated) (let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))))')
+1132: p81 = getfield_gc_r(p66, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize3.inst__vals_0 24 pure>)
+1136: p82 = getfield_gc_r(p66, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize3.inst__vals_2 40 pure>)
+1140: guard_class(p80, 16505296, descr=<Guard0x4c7dfa0>) [p32, p49, p27, p26, p29, None, None, None]
debug_merge_point(0, 0, '(doloop5608 0)')
debug_merge_point(0, 0, '(let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))) from (doloop5608 0)')
debug_merge_point(0, 0, '(>= allocated n5602)')
+1153: i85 = int_ge(0, i64)
+1157: guard_false(i85, descr=<Guard0x7f4eb8aa2020>) [p32, p49, p27, p26, p29, None, None, None]
debug_merge_point(0, 0, '(if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))')
debug_merge_point(0, 0, '(let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59)))')
debug_merge_point(0, 0, '(make-vector nwords 0)')
+1163: i87 = int_lt(i73, 0)
+1167: guard_false(i87, descr=<Guard0x7f4eb8aa2068>) [p32, p49, p27, p26, p29, None, None, None]
debug_merge_point(0, 0, '(set! aexport SetBang10)')
debug_merge_point(0, 0, '(let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))')
debug_merge_point(0, 0, '(+ allocated nbytes)')
debug_merge_point(0, 0, '(doloop5608 AppRand59)')
debug_merge_point(0, 0, '(let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))) from (doloop5608 AppRand59)')
+1173: p88 = new_with_vtable(descr=<SizeDescr 32>)
+1185: setfield_gc(p88, i73, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1189: p90 = new_array_clear(1, descr=<ArrayP 8>)
+1215: setarrayitem_gc(p90, 0, ConstPtr(ptr92), descr=<ArrayP 8>)
+1219: setfield_gc(p88, p90, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1230: setfield_gc(p88, ConstPtr(ptr93), descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1244: setfield_gc(p82, p88, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1248: p94 = new_with_vtable(descr=<SizeDescr 64>)
+1260: p95 = new_with_vtable(descr=<SizeDescr 16>)
+1271: setfield_gc(p95, i79, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1275: p96 = new_with_vtable(descr=<SizeDescr 16>)
+1286: setfield_gc(p96, i73, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1290: p97 = new_with_vtable(descr=<SizeDescr 16>)
+1301: setfield_gc(p97, i64, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1305: p98 = new_with_vtable(descr=<SizeDescr 40>)
+1409: i99 = getfield_gc_i(p97, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1427: setfield_gc(p98, ConstPtr(ptr100), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+1432: setfield_gc(p98, p26, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1437: setfield_gc(p98, p27, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1442: setfield_gc(p98, p29, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1454: setfield_gc(p94, p80, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1465: setfield_gc(p94, ConstPtr(ptr101), descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1469: setfield_gc(p94, p81, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_0 24 pure>)
+1473: setfield_gc(p94, p82, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_1 32 pure>)
+1477: setfield_gc(p94, p95, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_2 40 pure>)
+1481: setfield_gc(p94, p96, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_3 48 pure>)
+1485: setfield_gc(p94, p97, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_4 56 pure>)
+1489: i103 = int_ge(i99, -9223372036854775807)
+1502: guard_true(i103, descr=<Guard0x4c37880>) [p98, i79, p94, None, None, None, None, None, None]
+1508: i104 = getfield_gc_i(p96, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1512: i106 = int_ge(i104, 1)
+1516: guard_true(i106, descr=<Guard0x4c378e0>) [p98, i79, p94, None, None, None, None, None, None]
+1522: i107 = getfield_gc_i(p95, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1526: jump(p94, i79, p98, p29, p97, i99, p96, p95, i107, p82, i104, descr=TargetToken(80545296))
+1600: --end of the loop--
[3e4c20e7e6bbcf5] jit-log-opt-bridge}
[3e4c20e7f927e00] {jit-backend
[3e4c20e7f9c27d2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf07f
[3e4c20e7f9cc410] jit-backend-dump}
[3e4c20e7f9d7ed7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf08f4 +0  21000000
[3e4c20e7f9d93c6] jit-backend-dump}
[3e4c20e7f9dd5e9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf0c25 +0  21000000
[3e4c20e7f9de546] jit-backend-dump}
[3e4c20e7f9e1912] {jit-backend-addr
bridge out of Guard 0x4c7d580 has address 0x7f4eb6bf08f0 to 0x7f4eb6bf0c20
       gc table: 0x7f4eb6bf07f0
    jump target: 0x7f4eb6bf08f0
         resops: 0x7f4eb6bf08fe
       failures: 0x7f4eb6bf0c20
            end: 0x7f4eb6bf0ee7
[3e4c20e7f9e3dcd] jit-backend-addr}
[3e4c20e7f9e73db] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf091d +0  5E030000
[3e4c20e7f9e833c] jit-backend-dump}
[3e4c20e7f9eb779] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf0935 +0  62030000
[3e4c20e7f9ec515] jit-backend-dump}
[3e4c20e7f9ef55e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf0942 +0  71030000
[3e4c20e7f9f0334] jit-backend-dump}
[3e4c20e7f9f346e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf0961 +0  6E030000
[3e4c20e7f9f4156] jit-backend-dump}
[3e4c20e7f9f7118] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf097d +0  6E030000
[3e4c20e7f9f7de7] jit-backend-dump}
[3e4c20e7f9fad91] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf098b +0  7C030000
[3e4c20e7f9fba66] jit-backend-dump}
[3e4c20e7f9fe9d2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf09a4 +0  7F030000
[3e4c20e7f9ff68f] jit-backend-dump}
[3e4c20e7fa025e3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf09ba +0  85030000
[3e4c20e7fa0326f] jit-backend-dump}
[3e4c20e7fa061b4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf09cc +0  8F030000
[3e4c20e7fa06e52] jit-backend-dump}
[3e4c20e7fa09dbe] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf09e4 +0  93030000
[3e4c20e7fa0aa50] jit-backend-dump}
[3e4c20e7fa0d97c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf09f2 +0  A1030000
[3e4c20e7fa0e61a] jit-backend-dump}
[3e4c20e7fa115af] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf09fe +0  B1030000
[3e4c20e7fa1224a] jit-backend-dump}
[3e4c20e7fa151cf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf0a12 +0  B9030000
[3e4c20e7fa15e7f] jit-backend-dump}
[3e4c20e7fa18e01] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf0a29 +0  BE030000
[3e4c20e7fa19a8d] jit-backend-dump}
[3e4c20e7fa1c9f0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf0a36 +0  CD030000
[3e4c20e7fa1d6a7] jit-backend-dump}
[3e4c20e7fa205eb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf0a4e +0  D1030000
[3e4c20e7fa21277] jit-backend-dump}
[3e4c20e7fa241bc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf0a65 +0  D6030000
[3e4c20e7fa24e66] jit-backend-dump}
[3e4c20e7fa27dae] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf0a79 +0  DE030000
[3e4c20e7fa28a4c] jit-backend-dump}
[3e4c20e7fa2b9cb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf0a86 +0  ED030000
[3e4c20e7fa2c68e] jit-backend-dump}
[3e4c20e7fa2f5dc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf0aa0 +0  EF030000
[3e4c20e7fa3026a] jit-backend-dump}
[3e4c20e7fa331ac] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf0aae +0  FD030000
[3e4c20e7fa33e53] jit-backend-dump}
[3e4c20e7fa36dc9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf0abf +0  08040000
[3e4c20e7fa37a52] jit-backend-dump}
[3e4c20e7fa3ac81] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bef13d +0  AF170000
[3e4c20e7fa3b910] jit-backend-dump}
[3e4c20e7fa3f6bd] jit-backend}
[3e4c20e7fa42fff] {jit-log-opt-bridge
# bridge out of Guard 0x4c7d580 with 120 ops
[i0, p1, p2, p3]
+278: guard_not_invalidated(descr=<Guard0x4c379a0>) [i0, p1, p2, p3]
+278: p4 = getfield_gc_r(p1, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+296: guard_value(p4, ConstPtr(ptr5), descr=<Guard0x7f4eb8aa2188>) [i0, p1, p2, p3]
+305: p6 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_4 56 pure>)
+309: guard_nonnull_class(p6, ConstClass(W_Fixnum), descr=<Guard0x4c37fa0>) [i0, p1, p2, p3]
+329: i8 = getfield_gc_i(p6, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+333: i9 = int_ge(i0, i8)
+336: guard_true(i9, descr=<Guard0x7f4eb8aa21d0>) [i0, p1, p2, p3]
debug_merge_point(0, 0, '(if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))')
debug_merge_point(0, 0, '(begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9)))')
+342: p10 = getfield_gc_r(p2, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+353: guard_nonnull_class(p10, ConstClass(ForwardLink), descr=<Guard0x7f4eb8aaa020>) [i0, p1, p2, p3]
debug_merge_point(0, 0, '(void)')
debug_merge_point(0, 0, '(let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))')
debug_merge_point(0, 0, '(+ CellRef(youngBytes) allocated)')
+373: p12 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_0 24 pure>)
+377: p13 = getfield_gc_r(p12, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+381: guard_nonnull_class(p13, ConstClass(W_CellIntegerStrategy), descr=<Guard0x7f4eb8aaa080>) [i0, p1, p2, p3]
+401: i15 = getfield_gc_i(p13, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+406: i16 = int_add_ovf(i15, i0)
+409: guard_no_overflow(descr=<Guard0x7f4eb8aa2218>) [i0, p1, p2, p3]
debug_merge_point(0, 0, '(set! youngBytes SetBang9)')
+415: p17 = getfield_gc_r(p2, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+419: setfield_gc(p13, i16, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+431: guard_value(p17, ConstPtr(ptr18), descr=<Guard0x7f4eb8aaa0e0>) [p17, p2, None, None, None, None]
+440: p20 = getfield_gc_r(p2, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+444: p21 = getfield_gc_r(p2, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand30 (+ i 1)]) (doloop5358 AppRand30)) from (+ CellRef(youngBytes) allocated)')
+448: guard_class(p20, 16504944, descr=<Guard0x7f4eb8aa2260>) [p17, p2, None, None, None, None]
+462: p23 = getfield_gc_r(p20, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+466: guard_class(p21, 16435208, descr=<Guard0x7f4eb8aa22a8>) [p17, p2, None, None, None, None]
+480: p25 = getfield_gc_r(p21, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+485: guard_nonnull_class(p25, ConstClass(ForwardLink), descr=<Guard0x7f4eb8aaa140>) [p17, p2, None, None, None, None]
debug_merge_point(0, 0, '(+ i 1)')
+504: i27 = getfield_gc_i(p20, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+508: i29 = int_add_ovf(i27, 1)
+512: guard_no_overflow(descr=<Guard0x7f4eb8aa22f0>) [p17, p2, None, None, None, None]
debug_merge_point(0, 0, '(doloop5358 AppRand30)')
+518: guard_class(p23, 16480328, descr=<Guard0x7f4eb8aa2338>) [p17, p2, None, None, None, None]
+530: p31 = getfield_gc_r(p23, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+541: guard_value(p31, ConstPtr(ptr32), descr=<Guard0x7f4eb8aa2380>) [p17, p2, None, None, None, None]
debug_merge_point(0, 0, '(let ([if2 (>= i ntrees)]) (if if2 (void) (let ([AppRand28 (makeTree treeHeight)]) (vector-set! CellRef(trees) i AppRand28) (let ([AppRand29 (* promoteRate ntrees treeSize)]) (CellRef(doYoungGenAlloc) AppRand29 words/dead)) (let ([AppRand30 (+ i 1)]) (doloop5358 AppRand30))))) from (doloop5358 AppRand30)')
debug_merge_point(0, 0, '(>= i ntrees)')
+550: p33 = getfield_gc_r(p23, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_6 72 pure>)
+554: guard_nonnull_class(p33, ConstClass(W_Fixnum), descr=<Guard0x7f4eb8aaa740>) [p17, p2, None, None, None, None]
+573: i35 = getfield_gc_i(p33, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+577: i36 = int_ge(i29, i35)
+580: guard_false(i36, descr=<Guard0x7f4eb8aa23c8>) [p17, p2, None, None, None, None]
debug_merge_point(0, 0, '(if if2 (void) (let ([AppRand28 (makeTree treeHeight)]) (vector-set! CellRef(trees) i AppRand28) (let ([AppRand29 (* promoteRate ntrees treeSize)]) (CellRef(doYoungGenAlloc) AppRand29 words/dead)) (let ([AppRand30 (+ i 1)]) (doloop5358 AppRand30))))')
debug_merge_point(0, 0, '(let ([AppRand28 (makeTree treeHeight)]) (vector-set! CellRef(trees) i AppRand28) (let ([AppRand29 (* promoteRate ntrees treeSize)]) (CellRef(doYoungGenAlloc) AppRand29 words/dead)) (let ([AppRand30 (+ i 1)]) (doloop5358 AppRand30)))')
debug_merge_point(0, 0, '(makeTree treeHeight)')
+586: p37 = getfield_gc_r(p23, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_2 40 pure>)
+590: guard_nonnull_class(p37, 16481456, descr=<Guard0x7f4eb8aaa800>) [p17, p2, None, None, None, None]
+610: p39 = getfield_gc_r(p23, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_5 64 pure>)
+614: guard_nonnull_class(p39, ConstClass(W_Fixnum), descr=<Guard0x7f4eb8aaa860>) [p17, p2, None, None, None, None]
+633: p41 = getfield_gc_r(p37, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+644: guard_value(p41, ConstPtr(ptr42), descr=<Guard0x7f4eb8aa2410>) [p17, p2, None, None, None, None]
+653: p43 = getfield_gc_r(p23, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+653: i44 = getfield_gc_i(p39, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(if (zero? h5329) null (let ([res (vector 0 0 0)][SetBang0 (+ CellRef(nodes5320) 1)]) (set! nodes5320 SetBang0) (let ([AppRand22 (- h5329 1)]) (let ([res res][AppRand23 (makeTree AppRand22)]) (vector-set! res 0 AppRand23))) (let ([AppRand24 (- h5329 1)]) (let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25))) (vector-set! res 2 h5329) res)) from (makeTree treeHeight)')
+657: i45 = int_is_zero(i44)
+660: guard_false(i45, descr=<Guard0x7f4eb8aa2458>) [p17, p2, None, None, None, None]
debug_merge_point(0, 0, '(let ([res (vector 0 0 0)][SetBang0 (+ CellRef(nodes5320) 1)]) (set! nodes5320 SetBang0) (let ([AppRand22 (- h5329 1)]) (let ([res res][AppRand23 (makeTree AppRand22)]) (vector-set! res 0 AppRand23))) (let ([AppRand24 (- h5329 1)]) (let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25))) (vector-set! res 2 h5329) res)')
debug_merge_point(0, 0, '(vector 0 0 0)')
debug_merge_point(0, 0, '(+ CellRef(nodes5320) 1)')
+666: p46 = getfield_gc_r(p37, descr=<FieldP pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_w_val0 32 pure>)
+670: p47 = getfield_gc_r(p46, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+674: guard_nonnull_class(p47, ConstClass(W_CellIntegerStrategy), descr=<Guard0x7f4eb8aaa8c0>) [p17, p2, None, None, None, None]
+692: i49 = getfield_gc_i(p47, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+696: i51 = int_add_ovf(i49, 1)
+700: guard_no_overflow(descr=<Guard0x7f4eb8aa24a0>) [p17, p2, None, None, None, None]
debug_merge_point(0, 0, '(set! nodes5320 SetBang0)')
debug_merge_point(0, 0, '(let ([AppRand22 (- h5329 1)]) (let ([res res][AppRand23 (makeTree AppRand22)]) (vector-set! res 0 AppRand23)))')
debug_merge_point(0, 0, '(- h5329 1)')
+706: setfield_gc(p47, i51, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+710: i53 = int_sub_ovf(i44, 1)
+717: guard_no_overflow(descr=<Guard0x7f4eb8aaa920>) [i44, i29, p23, p21, p37, i51, p25, None, None, None, None]
debug_merge_point(0, 0, '(let ([res res][AppRand23 (makeTree AppRand22)]) (vector-set! res 0 AppRand23))')
debug_merge_point(0, 0, 'res')
+723: p54 = getfield_gc_r(p37, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(makeTree AppRand22)')
debug_merge_point(0, 0, '(if (zero? h5329) null (let ([res (vector 0 0 0)][SetBang0 (+ CellRef(nodes5320) 1)]) (set! nodes5320 SetBang0) (let ([AppRand22 (- h5329 1)]) (let ([res res][AppRand23 (makeTree AppRand22)]) (vector-set! res 0 AppRand23))) (let ([AppRand24 (- h5329 1)]) (let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25))) (vector-set! res 2 h5329) res)) from (makeTree AppRand22)')
+727: p55 = new_with_vtable(descr=<SizeDescr 24>)
+771: p56 = new_with_vtable(descr=<SizeDescr 48>)
+782: p57 = new_with_vtable(descr=<SizeDescr 40>)
+793: setfield_gc(p57, p25, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+797: p58 = new_with_vtable(descr=<SizeDescr 32>)
+808: p59 = new_with_vtable(descr=<SizeDescr 24>)
+826: setfield_gc(p59, p37, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+830: setfield_gc(p59, i44, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+834: setfield_gc(p58, p59, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+838: setfield_gc(p58, i51, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed01.inst_vals_fixed_1 16 pure>)
+842: p60 = new_with_vtable(descr=<SizeDescr 32>)
+853: setfield_gc(p60, 3, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+861: p63 = new_array(3, descr=<ArrayS 8>)
+880: setarrayitem_gc(p63, 0, 0, descr=<ArrayS 8>)
+888: setarrayitem_gc(p63, 1, 0, descr=<ArrayS 8>)
+896: setarrayitem_gc(p63, 2, 0, descr=<ArrayS 8>)
+904: setfield_gc(p60, p63, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+915: setfield_gc(p60, ConstPtr(ptr70), descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+919: setfield_gc(p58, p60, descr=<FieldP pycket.small_list.ConsEnvSize2Fixed01.inst_w_val0 24 pure>)
+923: setfield_gc(p57, p58, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+927: p71 = new_with_vtable(descr=<SizeDescr 40>)
+938: setfield_gc(p71, p25, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+942: p72 = new_with_vtable(descr=<SizeDescr 24>)
+953: setfield_gc(p72, p23, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+957: setfield_gc(p72, i29, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+961: setfield_gc(p71, p72, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+965: setfield_gc(p71, p21, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+976: setfield_gc(p71, ConstPtr(ptr73), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+980: setfield_gc(p57, p71, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+991: setfield_gc(p57, ConstPtr(ptr74), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+995: setfield_gc(p56, p25, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+999: setfield_gc(p56, p54, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1003: setfield_gc(p56, p57, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1007: setfield_gc(p55, p37, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1018: setfield_gc(p55, i53, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1029: setfield_gc(p56, ConstPtr(ptr75), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+1033: setfield_gc(p56, p60, descr=<FieldP pycket.small_list.LetContSize1.inst__vals_w_0 40 pure>)
+1037: jump(p55, p56, descr=TargetToken(79354784))
+1072: --end of the loop--
[3e4c20e7faab3de] jit-log-opt-bridge}
[3e4c20e971f9157] {jit-backend
[3e4c20e972c8a60] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf
[3e4c20e972d42df] jit-backend-dump}
[3e4c20e972e2ec8] {jit-backend-addr
Loop 24 ((vector-ref t 1) from (+ 1 AppRand11)) has address 0x7f4eb6bf12dd to 0x7f4eb6bf15a0 (bootstrap 0x7f4eb6bf1250)
       gc table: 0x7f4eb6bf1130
       function: 0x7f4eb6bf1250
         resops: 0x7f4eb6bf12dd
       failures: 0x7f4eb6bf15a0
            end: 0x7f4eb6bf196b
[3e4c20e972e6428] jit-backend-addr}
[3e4c20e972eac01] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf1307 +0  E0020000
[3e4c20e972ebe4c] jit-backend-dump}
[3e4c20e972ef2a8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf131d +0  E6020000
[3e4c20e972f00ca] jit-backend-dump}
[3e4c20e972f3254] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf132b +0  F4020000
[3e4c20e972f3f73] jit-backend-dump}
[3e4c20e972f6fa6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf133b +0  00030000
[3e4c20e972f7c63] jit-backend-dump}
[3e4c20e972fad78] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf1356 +0  01030000
[3e4c20e972fba88] jit-backend-dump}
[3e4c20e972feb97] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf1362 +0  11030000
[3e4c20e972ff87c] jit-backend-dump}
[3e4c20e97302951] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf1376 +0  19030000
[3e4c20e97303632] jit-backend-dump}
[3e4c20e973066da] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf138e +0  1D030000
[3e4c20e973073e9] jit-backend-dump}
[3e4c20e9730a7b2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf13a5 +0  22030000
[3e4c20e9730b4d4] jit-backend-dump}
[3e4c20e9730e5a0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf13b1 +0  32030000
[3e4c20e9730f2c8] jit-backend-dump}
[3e4c20e973122b2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf13cc +0  33030000
[3e4c20e97312fca] jit-backend-dump}
[3e4c20e97315fa2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf13e0 +0  3B030000
[3e4c20e97316cae] jit-backend-dump}
[3e4c20e97319c73] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf13ed +0  4A030000
[3e4c20e9731a94b] jit-backend-dump}
[3e4c20e9731d8ac] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf13fb +0  58030000
[3e4c20e9731e58a] jit-backend-dump}
[3e4c20e97321527] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf140d +0  62030000
[3e4c20e97322212] jit-backend-dump}
[3e4c20e973251ce] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf1423 +0  68030000
[3e4c20e97325eac] jit-backend-dump}
[3e4c20e97328e2e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf1431 +0  76030000
[3e4c20e97329b10] jit-backend-dump}
[3e4c20e9732ca67] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf1448 +0  7B030000
[3e4c20e9732d742] jit-backend-dump}
[3e4c20e973306f5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf145a +0  85030000
[3e4c20e973313d6] jit-backend-dump}
[3e4c20e97334364] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf1464 +0  97030000
[3e4c20e97335033] jit-backend-dump}
[3e4c20e97337fe6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf1472 +0  A5030000
[3e4c20e97338cb8] jit-backend-dump}
[3e4c20e9733bcc1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf149e +0  B1030000
[3e4c20e9733c99c] jit-backend-dump}
[3e4c20e9733f9c9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf14b1 +0  BA030000
[3e4c20e973406a8] jit-backend-dump}
[3e4c20e9734367f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf14bf +0  C8030000
[3e4c20e97344348] jit-backend-dump}
[3e4c20e97347326] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf14cf +0  D4030000
[3e4c20e97347ff2] jit-backend-dump}
[3e4c20e9734af86] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf14e4 +0  DB030000
[3e4c20e9734bc80] jit-backend-dump}
[3e4c20e9734ec0e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf14f2 +0  E9030000
[3e4c20e9734f8e6] jit-backend-dump}
[3e4c20e9735283d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf1502 +0  F5030000
[3e4c20e97353500] jit-backend-dump}
[3e4c20e973564bc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf1514 +0  FF030000
[3e4c20e97357191] jit-backend-dump}
[3e4c20e9735a14a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf151e +0  11040000
[3e4c20e9735ae07] jit-backend-dump}
[3e4c20e9735ddc3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf152c +0  1F040000
[3e4c20e9735ea8c] jit-backend-dump}
[3e4c20e973626e3] jit-backend}
[3e4c20e97366435] {jit-log-opt-loop
# Loop 24 ((vector-ref t 1) from (+ 1 AppRand11)) : loop with 140 ops
[p0, p1]
+437: label(p0, p1, descr=TargetToken(80544176))
+456: guard_not_invalidated(descr=<Guard0x7f4eb8aaa9e0>) [p1, p0]
+456: guard_class(p0, 16499664, descr=<Guard0x7f4eb8aa24e8>) [p1, p0]
+475: p3 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+479: guard_nonnull_class(p3, ConstClass(W_Vector), descr=<Guard0x7f4eb8aaaa40>) [p1, p0]
+497: i5 = getfield_gc_i(p3, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+501: i7 = int_lt(1, i5)
+505: guard_true(i7, descr=<Guard0x7f4eb8aa2530>) [p1, p0]
+511: p8 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+515: guard_class(p8, 16622984, descr=<Guard0x7f4eb8aa2578>) [p1, p0]
+527: p10 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+531: p12 = getarrayitem_gc_r(p10, 1, descr=<ArrayP 8>)
+535: guard_class(p1, 16437216, descr=<Guard0x7f4eb8aa25c0>) [p1, p0]
+554: guard_class(p12, ConstClass(W_Vector), descr=<Guard0x7f4eb8aa2608>) [p1, p0]
+566: p15 = getfield_gc_r(p1, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+577: guard_value(p15, ConstPtr(ptr16), descr=<Guard0x7f4eb8aa2650>) [p1, p0]
+586: p17 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+590: i18 = getfield_gc_i(p1, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+594: p19 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))')
+598: guard_class(p19, 16437216, descr=<Guard0x7f4eb8aa2698>) [p1, p0]
+610: p21 = getfield_gc_r(p19, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+614: guard_nonnull_class(p21, ConstClass(ForwardLink), descr=<Guard0x7f4eb8aaaaa0>) [p1, p0]
debug_merge_point(0, 0, 'AppRand8')
+633: guard_class(p17, 16499664, descr=<Guard0x7f4eb8aa26e0>) [p1, p0]
+645: p24 = getfield_gc_r(p17, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(height AppRand9)')
+649: p25 = getfield_gc_r(p17, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+653: guard_nonnull_class(p25, 16510992, descr=<Guard0x7f4eb8aaab00>) [p1, p0]
+672: p27 = getfield_gc_r(p25, descr=<FieldP pycket.values.W_Closure.inst_caselam 8 pure>)
+683: guard_value(p27, ConstPtr(ptr28), descr=<Guard0x7f4eb8aa2728>) [p1, p0]
+692: p29 = getfield_gc_r(p25, descr=<FieldP rpython.tool.pairtype.W_ClosureSize1.inst__envs_0 16 pure>)
+696: i30 = instance_ptr_eq(p17, p29)
+699: guard_true(i30, descr=<Guard0x7f4eb8aa2770>) [p1, p0]
debug_merge_point(0, 0, '(if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height AppRand9)')
debug_merge_point(0, 0, '(let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))')
debug_merge_point(0, 0, '(vector-ref t 0)')
+705: i31 = getfield_gc_i(p12, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+709: i33 = int_lt(0, i31)
+713: guard_true(i33, descr=<Guard0x7f4eb8aa27b8>) [p1, p0]
+719: p34 = getfield_gc_r(p12, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+723: guard_class(p34, 16622984, descr=<Guard0x7f4eb8aa2800>) [p1, p0]
+737: p36 = getfield_gc_r(p12, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+741: p38 = getarrayitem_gc_r(p36, 0, descr=<ArrayP 8>)
+746: guard_class(p38, ConstClass(W_Vector), descr=<Guard0x7f4eb8aa2848>) [p1, p0]
debug_merge_point(0, 0, '(let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11))))')
debug_merge_point(0, 0, '(height AppRand7)')
debug_merge_point(0, 0, '(if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height AppRand7)')
debug_merge_point(0, 0, '(let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))')
debug_merge_point(0, 0, '(vector-ref t 0)')
+759: i40 = getfield_gc_i(p38, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+763: i42 = int_lt(0, i40)
+767: guard_true(i42, descr=<Guard0x7f4eb8aa2890>) [p1, p0]
+773: p43 = getfield_gc_r(p38, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+784: guard_class(p43, 16623792, descr=<Guard0x7f4eb8aa28d8>) [p1, p0]
+796: p45 = getfield_gc_r(p38, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+800: i47 = getarrayitem_gc_i(p45, 0, descr=<ArrayS 8>)
debug_merge_point(0, 0, '(let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11))))')
debug_merge_point(0, 0, '(height AppRand7)')
debug_merge_point(0, 0, '(if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height AppRand7)')
+804: i49 = int_eq(i47, 0)
+808: guard_true(i49, descr=<Guard0x7f4eb8aa2920>) [p1, p0]
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(vector-ref t 1) from (height AppRand7)')
+814: i51 = int_lt(1, i40)
+818: guard_true(i51, descr=<Guard0x7f4eb8aa2968>) [p1, p0]
+824: i53 = getarrayitem_gc_i(p45, 1, descr=<ArrayS 8>)
debug_merge_point(0, 0, '(let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))')
debug_merge_point(0, 0, 'AppRand8')
debug_merge_point(0, 0, '(height AppRand9)')
debug_merge_point(0, 0, '(if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height AppRand9)')
+828: i55 = int_eq(i53, 0)
+832: guard_true(i55, descr=<Guard0x7f4eb8aa29b0>) [p1, p0]
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)) from (height AppRand9)')
debug_merge_point(0, 0, '(max AppRand8 AppRand10)')
debug_merge_point(0, 0, '(+ 1 AppRand11)')
debug_merge_point(0, 0, '(vector-ref t 1) from (+ 1 AppRand11)')
+838: p56 = same_as_r(p24)
+841: label(p17, p12, p21, p24, p19, i18, i31, p36, p25, p56, descr=TargetToken(80544256))
+872: guard_not_invalidated(descr=<Guard0x7f4eb8aaab60>) [p12, i18, p19, p24, p17, p21]
+872: i58 = int_lt(1, i31)
+876: guard_true(i58, descr=<Guard0x7f4eb8aa29f8>) [p12, i18, p19, p24, p17, p21]
+882: p60 = getarrayitem_gc_r(p36, 1, descr=<ArrayP 8>)
+887: guard_class(p60, ConstClass(W_Vector), descr=<Guard0x7f4eb8aa2a40>) [p12, i18, p19, p24, p17, p21]
debug_merge_point(0, 0, '(let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))')
debug_merge_point(0, 0, 'AppRand8')
debug_merge_point(0, 0, '(height AppRand9)')
debug_merge_point(0, 0, '(if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height AppRand9)')
debug_merge_point(0, 0, '(let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))')
debug_merge_point(0, 0, '(vector-ref t 0)')
+901: i62 = getfield_gc_i(p60, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+905: i64 = int_lt(0, i62)
+909: guard_true(i64, descr=<Guard0x7f4eb8aa2a88>) [p12, i18, p19, p24, p17, p21]
+915: p65 = getfield_gc_r(p60, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+919: guard_class(p65, 16622984, descr=<Guard0x7f4eb8aa2ad0>) [p12, i18, p19, p24, p17, p21]
+931: p67 = getfield_gc_r(p60, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+935: p69 = getarrayitem_gc_r(p67, 0, descr=<ArrayP 8>)
+939: guard_class(p69, ConstClass(W_Vector), descr=<Guard0x7f4eb8aa2b18>) [p12, i18, p19, p24, p17, p21]
debug_merge_point(0, 0, '(let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11))))')
debug_merge_point(0, 0, '(height AppRand7)')
debug_merge_point(0, 0, '(if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height AppRand7)')
debug_merge_point(0, 0, '(let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))')
debug_merge_point(0, 0, '(vector-ref t 0)')
+952: i71 = getfield_gc_i(p69, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+956: i73 = int_lt(0, i71)
+960: guard_true(i73, descr=<Guard0x7f4eb8aa2b60>) [p12, i18, p19, p24, p17, p21]
+966: p74 = getfield_gc_r(p69, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+970: guard_class(p74, 16623792, descr=<Guard0x7f4eb8aa2ba8>) [p12, i18, p19, p24, p17, p21]
+982: p76 = getfield_gc_r(p69, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+986: i78 = getarrayitem_gc_i(p76, 0, descr=<ArrayS 8>)
debug_merge_point(0, 0, '(let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11))))')
debug_merge_point(0, 0, '(height AppRand7)')
debug_merge_point(0, 0, '(if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height AppRand7)')
+990: i80 = int_eq(i78, 0)
+994: guard_true(i80, descr=<Guard0x7f4eb8aa2bf0>) [p12, i18, p19, p24, p17, p21]
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(vector-ref t 1) from (height AppRand7)')
+1000: i82 = int_lt(1, i71)
+1004: guard_true(i82, descr=<Guard0x7f4eb8aa2c38>) [p12, i18, p19, p24, p17, p21]
+1010: i84 = getarrayitem_gc_i(p76, 1, descr=<ArrayS 8>)
debug_merge_point(0, 0, '(let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))')
debug_merge_point(0, 0, 'AppRand8')
debug_merge_point(0, 0, '(height AppRand9)')
debug_merge_point(0, 0, '(if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height AppRand9)')
+1014: i86 = int_eq(i84, 0)
+1018: guard_true(i86, descr=<Guard0x7f4eb8aa2c80>) [p12, i18, p19, p24, p17, p21]
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)) from (height AppRand9)')
debug_merge_point(0, 0, '(max AppRand8 AppRand10)')
debug_merge_point(0, 0, '(+ 1 AppRand11)')
debug_merge_point(0, 0, '(vector-ref t 1) from (+ 1 AppRand11)')
+1024: p87 = new_with_vtable(descr=<SizeDescr 48>)
+1068: i88 = arraylen_gc(p67, descr=<ArrayP 8>)
+1068: setfield_gc(p87, p21, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1072: setfield_gc(p87, p24, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1076: setfield_gc(p87, p19, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1087: setfield_gc(p87, ConstPtr(ptr89), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+1091: setfield_gc(p87, i18, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+1095: jump(p17, p60, p21, p56, p87, 1, i62, p67, p25, p56, descr=TargetToken(80544256))
+1136: --end of the loop--
[3e4c20e973d6c13] jit-log-opt-loop}
[3e4c20e974fab9d] {jit-backend
[3e4c20e9754e3bc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf1ac
[3e4c20e97556147] jit-backend-dump}
[3e4c20e975608b3] {jit-backend-addr
Loop 25 ((if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height AppRand9)) has address 0x7f4eb6bf1bfd to 0x7f4eb6bf1d90 (bootstrap 0x7f4eb6bf1b70)
       gc table: 0x7f4eb6bf1ac0
       function: 0x7f4eb6bf1b70
         resops: 0x7f4eb6bf1bfd
       failures: 0x7f4eb6bf1d90
            end: 0x7f4eb6bf1fb7
[3e4c20e9756368c] jit-backend-addr}
[3e4c20e9756758d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf1c14 +0  A7010000
[3e4c20e975687a1] jit-backend-dump}
[3e4c20e9756bb24] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf1c22 +0  B5010000
[3e4c20e9756c8db] jit-backend-dump}
[3e4c20e9756f973] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf1c35 +0  BE010000
[3e4c20e9757060b] jit-backend-dump}
[3e4c20e97573679] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf1c49 +0  C6010000
[3e4c20e97574311] jit-backend-dump}
[3e4c20e975775c0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf1c5d +0  EA010000
[3e4c20e975782c3] jit-backend-dump}
[3e4c20e9757b312] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf1c73 +0  F0010000
[3e4c20e9757bff4] jit-backend-dump}
[3e4c20e9757f06a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf1c7d +0  02020000
[3e4c20e9757fd42] jit-backend-dump}
[3e4c20e97582d4b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf1c87 +0  14020000
[3e4c20e97583a29] jit-backend-dump}
[3e4c20e97586a41] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf1c94 +0  23020000
[3e4c20e9758771f] jit-backend-dump}
[3e4c20e9758a670] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf1ca8 +0  2B020000
[3e4c20e9758b336] jit-backend-dump}
[3e4c20e9758e2b2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf1cbe +0  31020000
[3e4c20e9758efb5] jit-backend-dump}
[3e4c20e97591ede] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf1cc7 +0  44020000
[3e4c20e97592bb6] jit-backend-dump}
[3e4c20e97595b4b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf1cd1 +0  56020000
[3e4c20e97596835] jit-backend-dump}
[3e4c20e97599768] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf1ce5 +0  5E020000
[3e4c20e9759a437] jit-backend-dump}
[3e4c20e9759d476] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf1cf9 +0  66020000
[3e4c20e9759e158] jit-backend-dump}
[3e4c20e975a1093] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf1d09 +0  72020000
[3e4c20e975a1d6b] jit-backend-dump}
[3e4c20e975a4d24] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf1d20 +0  77020000
[3e4c20e975a5a09] jit-backend-dump}
[3e4c20e975a9480] jit-backend}
[3e4c20e975ad0dd] {jit-log-opt-loop
# Loop 25 ((if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height AppRand9)) : entry bridge with 55 ops
[p0, p1]
debug_merge_point(0, 0, '(if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height AppRand9)')
+325: guard_class(p0, 16504944, descr=<Guard0x7f4eb8aaabc0>) [p1, p0]
+344: i3 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+348: i5 = int_eq(i3, 0)
+352: guard_true(i5, descr=<Guard0x7f4eb8aa2cc8>) [p1, p0]
debug_merge_point(0, 0, '0')
+358: guard_class(p1, 16437216, descr=<Guard0x7f4eb8aa2d10>) [p1, p0]
+377: p7 = getfield_gc_r(p1, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+388: guard_value(p7, ConstPtr(ptr8), descr=<Guard0x7f4eb8aa2d58>) [p1, p0]
+397: p9 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+397: guard_not_invalidated(descr=<Guard0x7f4eb8aa2da0>) [p1, p0]
+397: i10 = getfield_gc_i(p1, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+401: p11 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)) from (height AppRand9)')
+405: guard_class(p11, 16437216, descr=<Guard0x7f4eb8aa2de8>) [p1, p0]
+417: p13 = getfield_gc_r(p11, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+421: guard_nonnull_class(p13, ConstClass(ForwardLink), descr=<Guard0x7f4eb8aaac20>) [p1, p0]
debug_merge_point(0, 0, '(max AppRand8 AppRand10)')
+439: i16 = int_lt(i10, 0)
+443: guard_false(i16, descr=<Guard0x7f4eb8aa2e30>) [p1, p0]
debug_merge_point(0, 0, '(+ 1 AppRand11)')
+449: i18 = int_add_ovf(1, i10)
+453: guard_no_overflow(descr=<Guard0x7f4eb8aa2e78>) [p1, p0]
+459: p19 = getfield_gc_r(p11, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+463: guard_value(p19, ConstPtr(ptr20), descr=<Guard0x7f4eb8aa2ec0>) [p1, p0]
+472: p21 = getfield_gc_r(p11, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+472: i22 = getfield_gc_i(p11, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+476: p23 = getfield_gc_r(p11, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)) from (+ 1 AppRand11)')
+480: guard_class(p23, 16435920, descr=<Guard0x7f4eb8aa2f08>) [p1, p0]
+492: p25 = getfield_gc_r(p23, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+496: guard_nonnull_class(p25, ConstClass(ForwardLink), descr=<Guard0x7f4eb8aaac80>) [p1, p0]
debug_merge_point(0, 0, '(max AppRand8 AppRand10)')
+514: i27 = int_lt(i22, i18)
+517: guard_false(i27, descr=<Guard0x7f4eb8aa2f50>) [p1, p0]
debug_merge_point(0, 0, '(+ 1 AppRand11)')
+523: i29 = int_add_ovf(1, i22)
+527: guard_no_overflow(descr=<Guard0x7f4eb8aa2f98>) [p1, p0]
+533: p30 = getfield_gc_r(p23, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+544: guard_value(p30, ConstPtr(ptr31), descr=<Guard0x7f4eb8aa2fe0>) [p1, p0]
+553: p32 = getfield_gc_r(p23, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+557: p33 = getfield_gc_r(p23, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+561: guard_class(p32, 16499664, descr=<Guard0x7f4eb8aa3028>) [p1, p0]
+573: p35 = getfield_gc_r(p32, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+577: guard_class(p33, 16437216, descr=<Guard0x7f4eb8aa3070>) [p1, p0]
+589: p37 = getfield_gc_r(p33, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+593: guard_nonnull_class(p37, ConstClass(ForwardLink), descr=<Guard0x7f4eb8aaace0>) [p1, p0]
debug_merge_point(0, 0, '(vector-ref t 1) from (+ 1 AppRand11)')
+612: p39 = new_with_vtable(descr=<SizeDescr 48>)
+663: setfield_gc(p39, ConstPtr(ptr40), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+667: setfield_gc(p39, p35, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+671: setfield_gc(p39, i29, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+675: setfield_gc(p39, p33, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+679: setfield_gc(p39, p37, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+683: jump(p32, p39, descr=TargetToken(80544176))
+720: --end of the loop--
[3e4c20e975dbee5] jit-log-opt-loop}
[3e4c20e9789ca48] {jit-backend
[3e4c20e9790c5bf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf2150 +0  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8CF201000048FF042580280D048139100A01000F85000000004C8B79104983FF01720741813FF08C00000F85000000004C8BB53801000041813E201600000F85000000004D8B6E084983FD01720841817D00900F00000F85000000004D8B6F084983FD000F8E000000004D8B671841813C24F0EE02000F85000000004D8B67104D8B7C24104C8B510841813A100A01000F85000000004D8B4A104983F9017207418139503601000F85000000004D8B4108488B3DA7FEFFFF4939F80F8500000000498B79104939FA0F85000000004983FF000F85000000004983FD010F8E000000004D8B6C24184983FD000F85000000004D8B6E204C8B2593FEFFFF4D39E50F85000000004D8B66284D8B6E1841817D00101100000F85000000004D8B7D084983FF01720741813F900F00000F85000000004983FC010F8C000000004983C4010F80000000004D8B7D20488B3D6EFEFFFF4939FF0F8500000000498B7D104D8B7D18813F100A01000F85000000004C8B6F0841813F201600000F85000000004D8B57084983FA01720741813A900F00000F8500000000488B0C25F091F900488D5130483B14251092F9000F876D00000048891425F091F90048C701201600004C8951084C8B151DFEFFFF4C8951204C8969104C8961284C8979184889BD3001000048898D3801000049BBF012BFB64E7F000041FFE3669048C7442408FFFFFF0049BBC01FBFB64E7F00004C895D204D8D9B3063FFFF41FFD3E9E8FDFFFF49BB4021BFB64E7F00004C895D204D8D9BB069FFFF41FFD3E97EFFFFFFFF35D7FCFFFF49BBD01FBFB64E7F000041534D8D9B3060FFFF41FFE3FF35C3FCFFFF49BBE01FBFB64E7F000041534D8D9B2060FFFF41FFE3FF35AFFCFFFF49BBF01FBFB64E7F000041534D8D9B1060FFFF41FFE3FF359BFCFFFF49BB0020BFB64E7F000041534D8D9B0060FFFF41FFE3FF3587FCFFFF49BB1020BFB64E7F000041534D8D9BF05FFFFF41FFE3FF3573FCFFFF49BB2020BFB64E7F000041534D8D9BE05FFFFF41FFE3FF355FFCFFFF49BB3020BFB64E7F000041534D8D9BD05FFFFF41FFE3FF354BFCFFFF49BB4020BFB64E7F000041534D8D9BC05FFFFF41FFE3FF3537FCFFFF49BB5020BFB64E7F000041534D8D9BB05FFFFF41FFE3FF352BFCFFFF49BB6020BFB64E7F000041534D8D9BA05FFFFF41FFE3FF3517FCFFFF49BB7020BFB64E7F000041534D8D9B905FFFFF41FFE3FF3503FCFFFF49BB8020BFB64E7F000041534D8D9B805FFFFF41FFE3FF35EFFBFFFF49BB9020BFB64E7F000041534D8D9B705FFFFF41FFE3FF35DBFBFFFF49BBA020BFB64E7F000041534D8D9B605FFFFF41FFE3FF35CFFBFFFF49BBB020BFB64E7F000041534D8D9B505FFFFF41FFE3FF35BBFBFFFF49BBC020BFB64E7F000041534D8D9B405FFFFF41FFE3FF35A7FBFFFF49BBD020BFB64E7F000041534D8D9B305FFFFF41FFE3FF3593FBFFFF49BBE020BFB64E7F000041534D8D9B205FFFFF41FFE3FF357FFBFFFF49BBF020BFB64E7F000041534D8D9B105FFFFF41FFE3FF3573FBFFFF49BB0021BFB64E7F000041534D8D9B005FFFFF41FFE3FF355FFBFFFF49BB1021BFB64E7F000041534D8D9BF05EFFFF41FFE3FF354BFBFFFF49BB2021BFB64E7F000041534D8D9BE05EFFFF41FFE3FF3537FBFFFF49BB3021BFB64E7F000041534D8D9BD05EFFFF41FFE3
[3e4c20e97914d50] jit-backend-dump}
[3e4c20e9791fe4b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf2234 +0  20000000
[3e4c20e9792139c] jit-backend-dump}
[3e4c20e9792525a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf2435 +0  20000000
[3e4c20e97926187] jit-backend-dump}
[3e4c20e979293e7] {jit-backend-addr
bridge out of Guard 0x7f4eb8aaabc0 has address 0x7f4eb6bf2230 to 0x7f4eb6bf2430
       gc table: 0x7f4eb6bf2150
    jump target: 0x7f4eb6bf2230
         resops: 0x7f4eb6bf223e
       failures: 0x7f4eb6bf2430
            end: 0x7f4eb6bf26f7
[3e4c20e9792b7d2] jit-backend-addr}
[3e4c20e9792eb33] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf224e +0  21020000
[3e4c20e9792f96b] jit-backend-dump}
[3e4c20e97932a4c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf2265 +0  26020000
[3e4c20e9793375f] jit-backend-dump}
[3e4c20e979367b7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf2279 +0  2E020000
[3e4c20e9793749e] jit-backend-dump}
[3e4c20e9793a41d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf2291 +0  32020000
[3e4c20e9793b0e3] jit-backend-dump}
[3e4c20e9793e10a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf229f +0  5C020000
[3e4c20e9793ee1c] jit-backend-dump}
[3e4c20e97941db4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf22b1 +0  66020000
[3e4c20e97942ac9] jit-backend-dump}
[3e4c20e97945a20] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf22cb +0  68020000
[3e4c20e97946723] jit-backend-dump}
[3e4c20e97949680] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf22e2 +0  6D020000
[3e4c20e9794a383] jit-backend-dump}
[3e4c20e9794d34c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf22f6 +0  75020000
[3e4c20e9794e089] jit-backend-dump}
[3e4c20e97951048] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf2303 +0  84020000
[3e4c20e97951cf2] jit-backend-dump}
[3e4c20e97954c2e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf230d +0  96020000
[3e4c20e979558db] jit-backend-dump}
[3e4c20e97958801] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf2317 +0  A8020000
[3e4c20e979594a2] jit-backend-dump}
[3e4c20e9795c427] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf2326 +0  B5020000
[3e4c20e9795d0d2] jit-backend-dump}
[3e4c20e9796007e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf233a +0  BD020000
[3e4c20e97960d20] jit-backend-dump}
[3e4c20e97963c77] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf2350 +0  C3020000
[3e4c20e9796491b] jit-backend-dump}
[3e4c20e9796784d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf2367 +0  C8020000
[3e4c20e979684ee] jit-backend-dump}
[3e4c20e9796b452] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf2371 +0  DA020000
[3e4c20e9796c161] jit-backend-dump}
[3e4c20e9796f0e0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf237b +0  EC020000
[3e4c20e9796fd84] jit-backend-dump}
[3e4c20e97972cdb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf238f +0  F4020000
[3e4c20e9797399b] jit-backend-dump}
[3e4c20e97976e37] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf23a3 +0  FC020000
[3e4c20e97977b28] jit-backend-dump}
[3e4c20e9797ab39] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf23b4 +0  07030000
[3e4c20e9797b7e4] jit-backend-dump}
[3e4c20e9797e793] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf23cb +0  0C030000
[3e4c20e9797f44a] jit-backend-dump}
[3e4c20e97982810] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf1c14 +0  18060000
[3e4c20e979834eb] jit-backend-dump}
[3e4c20e97987dc8] jit-backend}
[3e4c20e9798b8e1] {jit-log-opt-bridge
# bridge out of Guard 0x7f4eb8aaabc0 with 78 ops
[p0, p1]
+246: guard_class(p1, 16499664, descr=<Guard0x7f4eb8aaad40>) [p0, p1]
+258: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+262: guard_nonnull_class(p3, ConstClass(W_Vector), descr=<Guard0x7f4eb8aaada0>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))')
+281: guard_class(p0, 16437216, descr=<Guard0x7f4eb8aa30b8>) [p0, p1]
+301: p6 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+305: guard_nonnull_class(p6, ConstClass(ForwardLink), descr=<Guard0x7f4eb8aaae00>) [p0, p1]
debug_merge_point(0, 0, '(vector-ref t 0)')
+325: guard_not_invalidated(descr=<Guard0x7f4eb8aa3100>) [p0, p1]
+325: i8 = getfield_gc_i(p3, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+329: i10 = int_lt(0, i8)
+333: guard_true(i10, descr=<Guard0x7f4eb8aa3148>) [p0, p1]
+339: p11 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+343: guard_class(p11, 16623792, descr=<Guard0x7f4eb8aa3190>) [p0, p1]
+357: p13 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+361: i15 = getarrayitem_gc_i(p13, 0, descr=<ArrayS 8>)
debug_merge_point(0, 0, '(let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11))))')
debug_merge_point(0, 0, '(height AppRand7)')
+366: p16 = getfield_gc_r(p1, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+370: guard_class(p16, 16499664, descr=<Guard0x7f4eb8aa31d8>) [p0, p1]
+383: p18 = getfield_gc_r(p16, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+387: guard_nonnull_class(p18, 16510992, descr=<Guard0x7f4eb8aaae60>) [p0, p1]
+406: p20 = getfield_gc_r(p18, descr=<FieldP pycket.values.W_Closure.inst_caselam 8 pure>)
+417: guard_value(p20, ConstPtr(ptr21), descr=<Guard0x7f4eb8aa3220>) [p0, p1]
+426: p22 = getfield_gc_r(p18, descr=<FieldP rpython.tool.pairtype.W_ClosureSize1.inst__envs_0 16 pure>)
+430: i23 = instance_ptr_eq(p16, p22)
+433: guard_true(i23, descr=<Guard0x7f4eb8aa3268>) [p0, p1]
debug_merge_point(0, 0, '(if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height AppRand7)')
+439: i25 = int_eq(i15, 0)
+443: guard_true(i25, descr=<Guard0x7f4eb8aa32b0>) [p0, p1]
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(vector-ref t 1) from (height AppRand7)')
+449: i27 = int_lt(1, i8)
+453: guard_true(i27, descr=<Guard0x7f4eb8aa32f8>) [p0, p1]
+459: i29 = getarrayitem_gc_i(p13, 1, descr=<ArrayS 8>)
debug_merge_point(0, 0, '(let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))')
debug_merge_point(0, 0, 'AppRand8')
+464: p30 = getfield_gc_r(p16, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(height AppRand9)')
debug_merge_point(0, 0, '(if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height AppRand9)')
+464: i32 = int_eq(i29, 0)
+468: guard_true(i32, descr=<Guard0x7f4eb8aa3340>) [p0, p1]
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)) from (height AppRand9)')
debug_merge_point(0, 0, '(max AppRand8 AppRand10)')
debug_merge_point(0, 0, '(+ 1 AppRand11)')
+474: p33 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+485: guard_value(p33, ConstPtr(ptr34), descr=<Guard0x7f4eb8aa3388>) [p0, p1]
+494: p35 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+494: i36 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+498: p37 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)) from (+ 1 AppRand11)')
+502: guard_class(p37, 16435920, descr=<Guard0x7f4eb8aa33d0>) [p0, p1]
+516: p39 = getfield_gc_r(p37, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+520: guard_nonnull_class(p39, ConstClass(ForwardLink), descr=<Guard0x7f4eb8aaaec0>) [p0, p1]
debug_merge_point(0, 0, '(max AppRand8 AppRand10)')
+539: i42 = int_lt(i36, 1)
+543: guard_false(i42, descr=<Guard0x7f4eb8aa3418>) [p0, p1]
debug_merge_point(0, 0, '(+ 1 AppRand11)')
+549: i44 = int_add_ovf(1, i36)
+553: guard_no_overflow(descr=<Guard0x7f4eb8aa3460>) [p0, p1]
+559: p45 = getfield_gc_r(p37, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+570: guard_value(p45, ConstPtr(ptr46), descr=<Guard0x7f4eb8aa34a8>) [p0, p1]
+579: p47 = getfield_gc_r(p37, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+583: p48 = getfield_gc_r(p37, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+587: guard_class(p47, 16499664, descr=<Guard0x7f4eb8aa34f0>) [p0, p1]
+599: p50 = getfield_gc_r(p47, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+603: guard_class(p48, 16437216, descr=<Guard0x7f4eb8aa3538>) [p0, p1]
+616: p52 = getfield_gc_r(p48, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+620: guard_nonnull_class(p52, ConstClass(ForwardLink), descr=<Guard0x7f4eb8aaaf20>) [p0, p1]
debug_merge_point(0, 0, '(vector-ref t 1) from (+ 1 AppRand11)')
+639: p54 = new_with_vtable(descr=<SizeDescr 48>)
+680: setfield_gc(p54, p52, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+691: setfield_gc(p54, ConstPtr(ptr55), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+695: setfield_gc(p54, p50, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+699: setfield_gc(p54, i44, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+703: setfield_gc(p54, p48, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+707: jump(p47, p54, descr=TargetToken(80544176))
+736: --end of the loop--
[3e4c20e979cfc0b] jit-log-opt-bridge}
[3e4c20e97af0a7f] {jit-backend
[3e4c20e97b3fa36] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf
[3e4c20e97b46fe1] jit-backend-dump}
[3e4c20e97b517af] {jit-backend-addr
Loop 27 ((if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height AppRand7)) has address 0x7f4eb6bf294d to 0x7f4eb6bf2ae0 (bootstrap 0x7f4eb6bf28c0)
       gc table: 0x7f4eb6bf2830
       function: 0x7f4eb6bf28c0
         resops: 0x7f4eb6bf294d
       failures: 0x7f4eb6bf2ae0
            end: 0x7f4eb6bf2ccf
[3e4c20e97b54689] jit-backend-addr}
[3e4c20e97b58840] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf2977 +0  94010000
[3e4c20e97b59a36] jit-backend-dump}
[3e4c20e97b5ce67] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf298d +0  9A010000
[3e4c20e97b5dc83] jit-backend-dump}
[3e4c20e97b60dd0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf29a0 +0  A3010000
[3e4c20e97b61b9a] jit-backend-dump}
[3e4c20e97b64c57] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf29b6 +0  A9010000
[3e4c20e97b65991] jit-backend-dump}
[3e4c20e97b68b05] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf29c4 +0  D3010000
[3e4c20e97b69827] jit-backend-dump}
[3e4c20e97b6c84b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf29d4 +0  DF010000
[3e4c20e97b6d563] jit-backend-dump}
[3e4c20e97b704d9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf29e8 +0  E7010000
[3e4c20e97b711dc] jit-backend-dump}
[3e4c20e97b74139] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf29f8 +0  F3010000
[3e4c20e97b74e2d] jit-backend-dump}
[3e4c20e97b77d59] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf2a0e +0  F9010000
[3e4c20e97b78a5c] jit-backend-dump}
[3e4c20e97b7b9c6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf2a22 +0  01020000
[3e4c20e97b7c72e] jit-backend-dump}
[3e4c20e97b7f688] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf2a2f +0  10020000
[3e4c20e97b80385] jit-backend-dump}
[3e4c20e97b833b2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf2a52 +0  25020000
[3e4c20e97b840d7] jit-backend-dump}
[3e4c20e97b8701b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf2a62 +0  31020000
[3e4c20e97b87d34] jit-backend-dump}
[3e4c20e97b8ac69] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf2a77 +0  38020000
[3e4c20e97b8b985] jit-backend-dump}
[3e4c20e97b8f55b] jit-backend}
[3e4c20e97b9315d] {jit-log-opt-loop
# Loop 27 ((if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height AppRand7)) : loop with 56 ops
[p0, p1]
+293: label(p0, p1, descr=TargetToken(80544336))
debug_merge_point(0, 0, '(if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height AppRand7)')
+312: guard_class(p0, 16499664, descr=<Guard0x7f4eb8aaaf80>) [p1, p0]
+331: p3 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+335: guard_nonnull_class(p3, ConstClass(W_Vector), descr=<Guard0x7f4eb8aaafe0>) [p1, p0]
debug_merge_point(0, 0, '(let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))')
+353: guard_class(p1, 16435920, descr=<Guard0x7f4eb8aa3580>) [p1, p0]
+372: p6 = getfield_gc_r(p1, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+376: guard_nonnull_class(p6, ConstClass(ForwardLink), descr=<Guard0x7f4eb8aab040>) [p1, p0]
debug_merge_point(0, 0, '(vector-ref t 0)')
+394: guard_not_invalidated(descr=<Guard0x7f4eb8aa35c8>) [p1, p0]
+394: i8 = getfield_gc_i(p3, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+398: i10 = int_lt(0, i8)
+402: guard_true(i10, descr=<Guard0x7f4eb8aa3610>) [p1, p0]
+408: p11 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+412: guard_class(p11, 16622984, descr=<Guard0x7f4eb8aa3658>) [p1, p0]
+424: p13 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+428: p15 = getarrayitem_gc_r(p13, 0, descr=<ArrayP 8>)
+432: guard_class(p15, ConstClass(W_Vector), descr=<Guard0x7f4eb8aa36a0>) [p1, p0]
debug_merge_point(0, 0, '(let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11))))')
debug_merge_point(0, 0, '(height AppRand7)')
+444: p17 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+448: guard_class(p17, 16499664, descr=<Guard0x7f4eb8aa36e8>) [p1, p0]
+460: p19 = getfield_gc_r(p17, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+464: guard_nonnull_class(p19, 16510992, descr=<Guard0x7f4eb8aab0a0>) [p1, p0]
+482: p21 = getfield_gc_r(p19, descr=<FieldP pycket.values.W_Closure.inst_caselam 8 pure>)
+493: guard_value(p21, ConstPtr(ptr22), descr=<Guard0x7f4eb8aa3730>) [p1, p0]
+502: p23 = getfield_gc_r(p19, descr=<FieldP rpython.tool.pairtype.W_ClosureSize1.inst__envs_0 16 pure>)
+506: i24 = instance_ptr_eq(p17, p23)
+509: guard_true(i24, descr=<Guard0x7f4eb8aa3778>) [p1, p0]
debug_merge_point(0, 0, '(if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height AppRand7)')
+515: label(p17, p15, p6, p0, p1, p19, descr=TargetToken(80544416))
debug_merge_point(0, 0, '(if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height AppRand7)')
debug_merge_point(0, 0, '(let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))')
debug_merge_point(0, 0, '(vector-ref t 0)')
+536: guard_not_invalidated(descr=<Guard0x7f4eb8aab100>) [p1, p0, p15, p17, p6]
+536: i25 = getfield_gc_i(p15, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+540: i27 = int_lt(0, i25)
+544: guard_true(i27, descr=<Guard0x7f4eb8aa37c0>) [p1, p0, p15, p17, p6]
+550: p28 = getfield_gc_r(p15, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+554: guard_class(p28, 16622984, descr=<Guard0x7f4eb8aa3808>) [p1, p0, p15, p17, p6]
+566: p30 = getfield_gc_r(p15, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+570: p32 = getarrayitem_gc_r(p30, 0, descr=<ArrayP 8>)
+574: guard_class(p32, ConstClass(W_Vector), descr=<Guard0x7f4eb8aa3850>) [p1, p0, p15, p17, p6]
debug_merge_point(0, 0, '(let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11))))')
debug_merge_point(0, 0, '(height AppRand7)')
debug_merge_point(0, 0, '(if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height AppRand7)')
+587: p34 = new_with_vtable(descr=<SizeDescr 24>)
+634: p35 = new_with_vtable(descr=<SizeDescr 40>)
+645: setfield_gc(p34, p15, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+649: setfield_gc(p34, p17, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+653: setfield_gc(p35, p6, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+657: setfield_gc(p35, p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+661: setfield_gc(p35, p1, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+672: setfield_gc(p35, ConstPtr(ptr36), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+676: jump(p17, p32, p6, p34, p35, p19, descr=TargetToken(80544416))
+688: --end of the loop--
[3e4c20e97bc2f6b] jit-log-opt-loop}
[3e4c20e97d76e10] {jit-backend
[3e4c20e97db4f27] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf2dc
[3e4c20e97dbb685] jit-backend-dump}
[3e4c20e97dc5884] {jit-backend-addr
Loop 28 ((let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)) from (+ 1 AppRand11)) has address 0x7f4eb6bf2ebd to 0x7f4eb6bf2fe0 (bootstrap 0x7f4eb6bf2e30)
       gc table: 0x7f4eb6bf2dc0
       function: 0x7f4eb6bf2e30
         resops: 0x7f4eb6bf2ebd
       failures: 0x7f4eb6bf2fe0
            end: 0x7f4eb6bf315e
[3e4c20e97dc847a] jit-backend-addr}
[3e4c20e97dcc6b8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf2ee7 +0  07010000
[3e4c20e97dcd937] jit-backend-dump}
[3e4c20e97dd0e22] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf2efa +0  10010000
[3e4c20e97dd1c73] jit-backend-dump}
[3e4c20e97dd4e40] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf2f10 +0  16010000
[3e4c20e97dd5bcd] jit-backend-dump}
[3e4c20e97dd9019] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf2f21 +0  3D010000
[3e4c20e97dd9d56] jit-backend-dump}
[3e4c20e97ddce57] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf2f2b +0  4F010000
[3e4c20e97dddb60] jit-backend-dump}
[3e4c20e97de0be3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf2f3f +0  57010000
[3e4c20e97de18a2] jit-backend-dump}
[3e4c20e97de48c3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf2f70 +0  42010000
[3e4c20e97de5592] jit-backend-dump}
[3e4c20e97de854e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf2f86 +0  48010000
[3e4c20e97de922d] jit-backend-dump}
[3e4c20e97dec361] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf2f8f +0  77010000
[3e4c20e97ded030] jit-backend-dump}
[3e4c20e97df0073] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf2f9d +0  85010000
[3e4c20e97df0d48] jit-backend-dump}
[3e4c20e97df3d19] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf2fb1 +0  8D010000
[3e4c20e97df49fe] jit-backend-dump}
[3e4c20e97df8517] jit-backend}
[3e4c20e97dfc1f1] {jit-log-opt-loop
# Loop 28 ((let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)) from (+ 1 AppRand11)) : loop with 39 ops
[p0, p1]
+261: label(p0, p1, descr=TargetToken(80544496))
+280: guard_class(p0, 16503888, descr=<Guard0x7f4eb8aab160>) [p1, p0]
+299: p3 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+299: guard_class(p1, 16437216, descr=<Guard0x7f4eb8aa3898>) [p1, p0]
+318: p5 = getfield_gc_r(p1, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+322: guard_nonnull_class(p5, ConstClass(ForwardLink), descr=<Guard0x7f4eb8aab1c0>) [p1, p0]
debug_merge_point(0, 0, '(max AppRand8 AppRand10)')
+340: guard_not_invalidated(descr=<Guard0x7f4eb8aa38e0>) [p1, p0]
+340: i7 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_0 16 pure>)
+344: i8 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_1 24 pure>)
+348: i9 = int_lt(i7, i8)
+351: guard_false(i9, descr=<Guard0x7f4eb8aa3928>) [p1, p0]
debug_merge_point(0, 0, '(+ 1 AppRand11)')
+357: i11 = int_add_ovf(1, i7)
+361: guard_no_overflow(descr=<Guard0x7f4eb8aa3970>) [p1, p0]
+367: p12 = getfield_gc_r(p1, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+378: guard_value(p12, ConstPtr(ptr13), descr=<Guard0x7f4eb8aa39b8>) [p1, p0]
+387: p14 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+391: i15 = getfield_gc_i(p1, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+395: p16 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)) from (+ 1 AppRand11)')
+399: label(p14, i15, i11, p16, descr=TargetToken(80544576))
+424: guard_class(p16, 16437216, descr=<Guard0x7f4eb8aab220>) [p16, p14, i11, i15]
+436: p18 = getfield_gc_r(p16, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+440: guard_nonnull_class(p18, ConstClass(ForwardLink), descr=<Guard0x7f4eb8aab280>) [p16, p14, i11, i15]
debug_merge_point(0, 0, '(max AppRand8 AppRand10)')
+458: guard_not_invalidated(descr=<Guard0x7f4eb8aa3a00>) [p16, p14, i11, i15]
+458: i20 = int_lt(i15, i11)
+461: guard_false(i20, descr=<Guard0x7f4eb8aa3a48>) [p16, p14, i11, i15]
debug_merge_point(0, 0, '(+ 1 AppRand11)')
+467: i22 = int_add_ovf(1, i15)
+475: guard_no_overflow(descr=<Guard0x7f4eb8aa3a90>) [p16, p14, i11, i15]
+481: p23 = getfield_gc_r(p16, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+492: guard_value(p23, ConstPtr(ptr24), descr=<Guard0x7f4eb8aa3ad8>) [p16, p14, i11, i15]
+501: p25 = getfield_gc_r(p16, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+505: i26 = getfield_gc_i(p16, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+509: p27 = getfield_gc_r(p16, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)) from (+ 1 AppRand11)')
+513: jump(p25, i26, i22, p27, descr=TargetToken(80544576))
+544: --end of the loop--
[3e4c20e97e20731] jit-log-opt-loop}
[3e4c20e97f65a0c] {jit-backend
[3e4c20e97fbb29b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf
[3e4c20e97fc22fc] jit-backend-dump}
[3e4c20e97fcc0f1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3334 +0  1F000000
[3e4c20e97fcd36d] jit-backend-dump}
[3e4c20e97fd0ee2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3515 +0  1F000000
[3e4c20e97fd1d4b] jit-backend-dump}
[3e4c20e97fd4fae] {jit-backend-addr
bridge out of Guard 0x7f4eb8aa2698 has address 0x7f4eb6bf3330 to 0x7f4eb6bf3510
       gc table: 0x7f4eb6bf3290
    jump target: 0x7f4eb6bf3330
         resops: 0x7f4eb6bf333e
       failures: 0x7f4eb6bf3510
            end: 0x7f4eb6bf3713
[3e4c20e97fd71d4] jit-backend-addr}
[3e4c20e97fda642] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf334e +0  1D020000
[3e4c20e97fdb480] jit-backend-dump}
[3e4c20e97fde6d1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3365 +0  22020000
[3e4c20e97fdf3ff] jit-backend-dump}
[3e4c20e97fe24bc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3373 +0  30020000
[3e4c20e97fe31e4] jit-backend-dump}
[3e4c20e97fe647b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3384 +0  3B020000
[3e4c20e97fe7165] jit-backend-dump}
[3e4c20e97fea22e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3398 +0  43020000
[3e4c20e97feaf3e] jit-backend-dump}
[3e4c20e97fedf93] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf33a5 +0  52020000
[3e4c20e97feec9c] jit-backend-dump}
[3e4c20e97ff1d87] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf33b9 +0  5A020000
[3e4c20e97ff2a8a] jit-backend-dump}
[3e4c20e97ff5a92] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf33d3 +0  5C020000
[3e4c20e97ff679e] jit-backend-dump}
[3e4c20e97ff976a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf33eb +0  60020000
[3e4c20e97ffa46d] jit-backend-dump}
[3e4c20e97ffd3f5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf33f9 +0  6E020000
[3e4c20e97ffe0f5] jit-backend-dump}
[3e4c20e98001092] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3414 +0  6F020000
[3e4c20e98001d92] jit-backend-dump}
[3e4c20e98004d64] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3428 +0  77020000
[3e4c20e98005a5a] jit-backend-dump}
[3e4c20e980089d9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3435 +0  86020000
[3e4c20e980096e2] jit-backend-dump}
[3e4c20e9800c680] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3443 +0  94020000
[3e4c20e9800d37d] jit-backend-dump}
[3e4c20e98010305] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3453 +0  A0020000
[3e4c20e98011011] jit-backend-dump}
[3e4c20e9801425f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf138e +0  9E1F0000
[3e4c20e98014f77] jit-backend-dump}
[3e4c20e98018e10] jit-backend}
[3e4c20e9801c844] {jit-log-opt-bridge
# bridge out of Guard 0x7f4eb8aa2698 with 64 ops
[p0, p1]
+182: guard_not_invalidated(descr=<Guard0x7f4eb8aab2e0>) [p0, p1]
+182: guard_class(p1, 16499664, descr=<Guard0x7f4eb8aa3b20>) [p0, p1]
+194: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+198: guard_nonnull_class(p3, ConstClass(W_Vector), descr=<Guard0x7f4eb8aab340>) [p0, p1]
+217: i5 = getfield_gc_i(p3, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+221: i7 = int_lt(1, i5)
+225: guard_true(i7, descr=<Guard0x7f4eb8aa3b68>) [p0, p1]
+231: p8 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+235: guard_class(p8, 16622984, descr=<Guard0x7f4eb8aa3bb0>) [p0, p1]
+248: p10 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+252: p12 = getarrayitem_gc_r(p10, 1, descr=<ArrayP 8>)
+256: guard_class(p0, 16437216, descr=<Guard0x7f4eb8aa3bf8>) [p0, p1]
+268: guard_class(p12, ConstClass(W_Vector), descr=<Guard0x7f4eb8aa3c40>) [p0, p1]
+281: p15 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+292: guard_value(p15, ConstPtr(ptr16), descr=<Guard0x7f4eb8aa3c88>) [p0, p1]
+301: p17 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+305: i18 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+309: p19 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))')
+313: guard_class(p19, 16435920, descr=<Guard0x7f4eb8aa3cd0>) [p0, p1]
+327: p21 = getfield_gc_r(p19, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+332: guard_nonnull_class(p21, ConstClass(ForwardLink), descr=<Guard0x7f4eb8aab3a0>) [p0, p1]
debug_merge_point(0, 0, 'AppRand8')
+351: guard_class(p17, 16499664, descr=<Guard0x7f4eb8aa3d18>) [p0, p1]
+365: p24 = getfield_gc_r(p17, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(height AppRand9)')
+369: p25 = getfield_gc_r(p17, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+373: guard_nonnull_class(p25, 16510992, descr=<Guard0x7f4eb8aab400>) [p0, p1]
+392: p27 = getfield_gc_r(p25, descr=<FieldP pycket.values.W_Closure.inst_caselam 8 pure>)
+403: guard_value(p27, ConstPtr(ptr28), descr=<Guard0x7f4eb8aa3d60>) [p0, p1]
+412: p29 = getfield_gc_r(p25, descr=<FieldP rpython.tool.pairtype.W_ClosureSize1.inst__envs_0 16 pure>)
+416: i30 = instance_ptr_eq(p17, p29)
+419: guard_true(i30, descr=<Guard0x7f4eb8aa3da8>) [p0, p1]
debug_merge_point(0, 0, '(if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height AppRand9)')
debug_merge_point(0, 0, '(let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))')
debug_merge_point(0, 0, '(vector-ref t 0)')
+425: i31 = getfield_gc_i(p12, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+429: i33 = int_lt(0, i31)
+433: guard_true(i33, descr=<Guard0x7f4eb8aa3df0>) [p0, p1]
+439: p34 = getfield_gc_r(p12, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+443: guard_class(p34, 16623792, descr=<Guard0x7f4eb8aa3e38>) [p0, p1]
+455: p36 = getfield_gc_r(p12, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+459: i38 = getarrayitem_gc_i(p36, 0, descr=<ArrayS 8>)
debug_merge_point(0, 0, '(let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11))))')
debug_merge_point(0, 0, '(height AppRand7)')
debug_merge_point(0, 0, '(if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height AppRand7)')
+463: p39 = new_with_vtable(descr=<SizeDescr 24>)
+510: p40 = new_with_vtable(descr=<SizeDescr 40>)
+521: p41 = new_with_vtable(descr=<SizeDescr 24>)
+532: setfield_gc(p41, p17, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+536: setfield_gc(p41, p12, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+540: p42 = new_with_vtable(descr=<SizeDescr 48>)
+551: setfield_gc(p42, p21, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+555: setfield_gc(p42, p24, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+559: setfield_gc(p42, p19, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+570: setfield_gc(p42, ConstPtr(ptr43), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+574: setfield_gc(p42, i18, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+585: setfield_gc(p40, ConstPtr(ptr44), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+589: setfield_gc(p40, p41, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+593: setfield_gc(p40, p42, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+597: setfield_gc(p40, p21, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+601: setfield_gc(p39, p17, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+605: setfield_gc(p39, i38, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+609: jump(p39, p40, descr=TargetToken(80544336))
+640: --end of the loop--
[3e4c20e9805093f] jit-log-opt-bridge}
[3e4c20e9811423e] {jit-backend
[3e4c20e9814b237] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf37e
[3e4c20e98151612] jit-backend-dump}
[3e4c20e9815b482] {jit-backend-addr
Loop 30 ((let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)) from (height AppRand9)) has address 0x7f4eb6bf38cd to 0x7f4eb6bf39e0 (bootstrap 0x7f4eb6bf3840)
       gc table: 0x7f4eb6bf37e0
       function: 0x7f4eb6bf3840
         resops: 0x7f4eb6bf38cd
       failures: 0x7f4eb6bf39e0
            end: 0x7f4eb6bf3b27
[3e4c20e9815df8c] jit-backend-addr}
[3e4c20e98161fa3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf38e4 +0  27010000
[3e4c20e981631d0] jit-backend-dump}
[3e4c20e9816661f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf38f7 +0  30010000
[3e4c20e98167423] jit-backend-dump}
[3e4c20e9816a66b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf390d +0  36010000
[3e4c20e9816b39f] jit-backend-dump}
[3e4c20e9816e79f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf391e +0  5D010000
[3e4c20e9816f4b1] jit-backend-dump}
[3e4c20e98172638] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3928 +0  6F010000
[3e4c20e98173350] jit-backend-dump}
[3e4c20e9817652d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf393c +0  77010000
[3e4c20e9817722d] jit-backend-dump}
[3e4c20e9817a38f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3950 +0  7F010000
[3e4c20e9817b0aa] jit-backend-dump}
[3e4c20e9817e22e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3960 +0  8B010000
[3e4c20e9817ef28] jit-backend-dump}
[3e4c20e98181fc6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3977 +0  90010000
[3e4c20e98182cd9] jit-backend-dump}
[3e4c20e981868cb] jit-backend}
[3e4c20e9818a4c3] {jit-log-opt-loop
# Loop 30 ((let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)) from (height AppRand9)) : entry bridge with 32 ops
[p0, p1]
debug_merge_point(0, 0, '(let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)) from (height AppRand9)')
+245: guard_class(p0, 16503888, descr=<Guard0x7f4eb8aab460>) [p1, p0]
+264: p3 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+264: guard_class(p1, 16435920, descr=<Guard0x7f4eb8aa3e80>) [p1, p0]
+283: p5 = getfield_gc_r(p1, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+287: guard_nonnull_class(p5, ConstClass(ForwardLink), descr=<Guard0x7f4eb8aab4c0>) [p1, p0]
debug_merge_point(0, 0, '(max AppRand8 AppRand10)')
+305: guard_not_invalidated(descr=<Guard0x7f4eb8aa3ec8>) [p1, p0]
+305: i7 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_0 16 pure>)
+309: i8 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_1 24 pure>)
+313: i9 = int_lt(i7, i8)
+316: guard_false(i9, descr=<Guard0x7f4eb8aa3f10>) [p1, p0]
debug_merge_point(0, 0, '(+ 1 AppRand11)')
+322: i11 = int_add_ovf(1, i7)
+326: guard_no_overflow(descr=<Guard0x7f4eb8aa3f58>) [p1, p0]
+332: p12 = getfield_gc_r(p1, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+343: guard_value(p12, ConstPtr(ptr13), descr=<Guard0x7f4eb8aeafe0>) [p1, p0]
+352: p14 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+356: p15 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+360: guard_class(p14, 16499664, descr=<Guard0x7f4eb8aeb028>) [p1, p0]
+372: p17 = getfield_gc_r(p14, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+376: guard_class(p15, 16435920, descr=<Guard0x7f4eb8aeb0b8>) [p1, p0]
+388: p19 = getfield_gc_r(p15, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+392: guard_nonnull_class(p19, ConstClass(ForwardLink), descr=<Guard0x7f4eb8aab520>) [p1, p0]
debug_merge_point(0, 0, '(vector-ref t 1) from (+ 1 AppRand11)')
+411: p21 = new_with_vtable(descr=<SizeDescr 48>)
+455: setfield_gc(p21, p19, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+466: setfield_gc(p21, ConstPtr(ptr22), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+470: setfield_gc(p21, p17, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+474: setfield_gc(p21, p15, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+478: setfield_gc(p21, i11, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+482: jump(p14, p21, descr=TargetToken(80544176))
+512: --end of the loop--
[3e4c20e981a8735] jit-log-opt-loop}
[3e4c20e9836af04] {jit-backend
[3e4c20e983bde54] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3ca0 +0  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8CD201000048FF0425203B0D048139B01E01000F85000000004C8B79104983FF000F85000000004C8BBD3801000041813F101100000F85000000004D8B77204C8B2D09FFFFFF4D39EE0F85000000004D8B77104D8B671841813E100A01000F85000000004D8B560841813C24101100000F85000000004D8B4C24084983F9017207418139900F00000F85000000004D8B4E104983F9017207418139F08C00000F85000000004D8B71084983FE010F8E000000004D8B711841813EF0EE02000F85000000004D8B71104D8B4E1841813A100A01000F85000000004D8B72104983FE01720741813E503601000F85000000004D8B4608488B3DACFEFFFF4939F80F8500000000498B7E104939FA0F85000000004983F9000F85000000004D8B4C24204D39E90F85000000004D8B6C24104D8B4C241841817D00100A01000F85000000004D8B6508418139101100000F8500000000498B79084883FF017206813F900F00000F8500000000488B0C25F091F900488D5130483B14251092F9000F877B00000048891425F091F90048C70120160000488B154FFEFFFF488951204C8961104C8949184889790848C74128010000004C89AD3001000048898D3801000049BBF012BFB64E7F000041FFE36666662E0F1F84000000000048C7442408FFFFFF0049BB383BBFB64E7F00004C895D204D8D9BB847FFFF41FFD3E908FEFFFF49BB883CBFB64E7F00004C895D204D8D9B684EFFFF41FFD3E970FFFFFFFF3517FDFFFF49BB483BBFB64E7F000041534D8D9BB844FFFF41FFE3FF3503FDFFFF49BB583BBFB64E7F000041534D8D9BA844FFFF41FFE3FF35EFFCFFFF49BB683BBFB64E7F000041534D8D9B9844FFFF41FFE3FF35E3FCFFFF49BB783BBFB64E7F000041534D8D9B8844FFFF41FFE3FF35CFFCFFFF49BB883BBFB64E7F000041534D8D9B7844FFFF41FFE3FF35BBFCFFFF49BB983BBFB64E7F000041534D8D9B6844FFFF41FFE3FF35A7FCFFFF49BBA83BBFB64E7F000041534D8D9B5844FFFF41FFE3FF3593FCFFFF49BBB83BBFB64E7F000041534D8D9B4844FFFF41FFE3FF357FFCFFFF49BBC83BBFB64E7F000041534D8D9B3844FFFF41FFE3FF356BFCFFFF49BBD83BBFB64E7F000041534D8D9B2844FFFF41FFE3FF3557FCFFFF49BBE83BBFB64E7F000041534D8D9B1844FFFF41FFE3FF3543FCFFFF49BBF83BBFB64E7F000041534D8D9B0844FFFF41FFE3FF352FFCFFFF49BB083CBFB64E7F000041534D8D9BF843FFFF41FFE3FF3523FCFFFF49BB183CBFB64E7F000041534D8D9BE843FFFF41FFE3FF350FFCFFFF49BB283CBFB64E7F000041534D8D9BD843FFFF41FFE3FF35FBFBFFFF49BB383CBFB64E7F000041534D8D9BC843FFFF41FFE3FF35E7FBFFFF49BB483CBFB64E7F000041534D8D9BB843FFFF41FFE3FF35D3FBFFFF49BB583CBFB64E7F000041534D8D9BA843FFFF41FFE3FF35BFFBFFFF49BB683CBFB64E7F000041534D8D9B9843FFFF41FFE3FF35ABFBFFFF49BB783CBFB64E7F000041534D8D9B8843FFFF41FFE3
[3e4c20e983c5844] jit-backend-dump}
[3e4c20e983cf6e8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3d64 +0  20000000
[3e4c20e983d0a68] jit-backend-dump}
[3e4c20e983d462f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3f45 +0  20000000
[3e4c20e983d5402] jit-backend-dump}
[3e4c20e983d8716] {jit-backend-addr
bridge out of Guard 0x7f4eb8aaaf80 has address 0x7f4eb6bf3d60 to 0x7f4eb6bf3f40
       gc table: 0x7f4eb6bf3ca0
    jump target: 0x7f4eb6bf3d60
         resops: 0x7f4eb6bf3d6e
       failures: 0x7f4eb6bf3f40
            end: 0x7f4eb6bf41b3
[3e4c20e983da94c] jit-backend-addr}
[3e4c20e983ddcff] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3d7e +0  01020000
[3e4c20e983dea89] jit-backend-dump}
[3e4c20e983e1be8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3d8c +0  0F020000
[3e4c20e983e28ae] jit-backend-dump}
[3e4c20e983e593d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3da0 +0  17020000
[3e4c20e983e661e] jit-backend-dump}
[3e4c20e983e9652] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3db4 +0  1F020000
[3e4c20e983ea2f3] jit-backend-dump}
[3e4c20e983ed379] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3dc9 +0  26020000
[3e4c20e983ee03f] jit-backend-dump}
[3e4c20e983f107b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3ddb +0  30020000
[3e4c20e983f1d50] jit-backend-dump}
[3e4c20e983f4dec] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3df3 +0  34020000
[3e4c20e983f5a96] jit-backend-dump}
[3e4c20e983f8bd0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3e0a +0  55020000
[3e4c20e983f987b] jit-backend-dump}
[3e4c20e983fc8ee] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3e18 +0  63020000
[3e4c20e983fd5a5] jit-backend-dump}
[3e4c20e9840061e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3e29 +0  6E020000
[3e4c20e984012d8] jit-backend-dump}
[3e4c20e98404376] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3e3e +0  75020000
[3e4c20e9840508c] jit-backend-dump}
[3e4c20e984080f0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3e55 +0  7A020000
[3e4c20e98408ded] jit-backend-dump}
[3e4c20e9840be5a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3e69 +0  82020000
[3e4c20e9840cb17] jit-backend-dump}
[3e4c20e9840fb69] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3e76 +0  91020000
[3e4c20e9841080d] jit-backend-dump}
[3e4c20e98413847] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3e80 +0  A3020000
[3e4c20e98414510] jit-backend-dump}
[3e4c20e98417549] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3e8e +0  B1020000
[3e4c20e984181f0] jit-backend-dump}
[3e4c20e9841b25b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3ea6 +0  B5020000
[3e4c20e9841bf0e] jit-backend-dump}
[3e4c20e9841ef7c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3eb7 +0  C0020000
[3e4c20e9841fc1d] jit-backend-dump}
[3e4c20e98422c78] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3ecd +0  C6020000
[3e4c20e9842393e] jit-backend-dump}
[3e4c20e98426c03] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf2977 +0  E5130000
[3e4c20e984278aa] jit-backend-dump}
[3e4c20e9842b7fb] jit-backend}
[3e4c20e9842f32c] {jit-log-opt-bridge
# bridge out of Guard 0x7f4eb8aaaf80 with 62 ops
[p0, p1]
+214: guard_class(p1, 16504944, descr=<Guard0x7f4eb8aab580>) [p0, p1]
+226: i3 = getfield_gc_i(p1, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+230: i5 = int_eq(i3, 0)
+234: guard_true(i5, descr=<Guard0x7f4eb8aeb100>) [p0, p1]
debug_merge_point(0, 0, '0')
+240: guard_class(p0, 16435920, descr=<Guard0x7f4eb8aeb148>) [p0, p1]
+260: p7 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+271: guard_value(p7, ConstPtr(ptr8), descr=<Guard0x7f4eb8aeb190>) [p0, p1]
+280: p9 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+284: p10 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+288: guard_class(p9, 16499664, descr=<Guard0x7f4eb8aeb1d8>) [p0, p1]
+301: p12 = getfield_gc_r(p9, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+305: guard_class(p10, 16435920, descr=<Guard0x7f4eb8aeb220>) [p0, p1]
+319: p14 = getfield_gc_r(p10, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+324: guard_nonnull_class(p14, ConstClass(ForwardLink), descr=<Guard0x7f4eb8aab5e0>) [p0, p1]
debug_merge_point(0, 0, '(vector-ref t 1) from (height AppRand7)')
+343: guard_not_invalidated(descr=<Guard0x7f4eb8aeb268>) [p0, p1]
+343: p16 = getfield_gc_r(p9, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+347: guard_nonnull_class(p16, ConstClass(W_Vector), descr=<Guard0x7f4eb8aab640>) [p0, p1]
+366: i18 = getfield_gc_i(p16, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+370: i20 = int_lt(1, i18)
+374: guard_true(i20, descr=<Guard0x7f4eb8aeb2b0>) [p0, p1]
+380: p21 = getfield_gc_r(p16, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+384: guard_class(p21, 16623792, descr=<Guard0x7f4eb8aeb2f8>) [p0, p1]
+397: p23 = getfield_gc_r(p16, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+401: i25 = getarrayitem_gc_i(p23, 1, descr=<ArrayS 8>)
debug_merge_point(0, 0, '(let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))')
debug_merge_point(0, 0, 'AppRand8')
+405: guard_class(p12, 16499664, descr=<Guard0x7f4eb8aeb340>) [p0, p1]
+418: p27 = getfield_gc_r(p12, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(height AppRand9)')
+418: p28 = getfield_gc_r(p12, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+422: guard_nonnull_class(p28, 16510992, descr=<Guard0x7f4eb8aab6a0>) [p0, p1]
+441: p30 = getfield_gc_r(p28, descr=<FieldP pycket.values.W_Closure.inst_caselam 8 pure>)
+452: guard_value(p30, ConstPtr(ptr31), descr=<Guard0x7f4eb8aeb388>) [p0, p1]
+461: p32 = getfield_gc_r(p28, descr=<FieldP rpython.tool.pairtype.W_ClosureSize1.inst__envs_0 16 pure>)
+465: i33 = instance_ptr_eq(p12, p32)
+468: guard_true(i33, descr=<Guard0x7f4eb8aeb3d0>) [p0, p1]
debug_merge_point(0, 0, '(if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height AppRand9)')
+474: i35 = int_eq(i25, 0)
+478: guard_true(i35, descr=<Guard0x7f4eb8aeb418>) [p0, p1]
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)) from (height AppRand9)')
debug_merge_point(0, 0, '(max AppRand8 AppRand10)')
debug_merge_point(0, 0, '(+ 1 AppRand11)')
+484: p36 = getfield_gc_r(p10, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+489: guard_value(p36, ConstPtr(ptr37), descr=<Guard0x7f4eb8aeb4a8>) [p0, p1]
+498: p38 = getfield_gc_r(p10, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+503: p39 = getfield_gc_r(p10, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+508: guard_class(p38, 16499664, descr=<Guard0x7f4eb8aeb4f0>) [p0, p1]
+522: p41 = getfield_gc_r(p38, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+526: guard_class(p39, 16435920, descr=<Guard0x7f4eb8aeb538>) [p0, p1]
+539: p43 = getfield_gc_r(p39, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+543: guard_nonnull_class(p43, ConstClass(ForwardLink), descr=<Guard0x7f4eb8aab700>) [p0, p1]
debug_merge_point(0, 0, '(vector-ref t 1) from (+ 1 AppRand11)')
+561: p45 = new_with_vtable(descr=<SizeDescr 48>)
+609: setfield_gc(p45, ConstPtr(ptr46), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+613: setfield_gc(p45, p41, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+617: setfield_gc(p45, p39, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+621: setfield_gc(p45, p43, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+625: setfield_gc(p45, 1, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+633: jump(p38, p45, descr=TargetToken(80544176))
+672: --end of the loop--
[3e4c20e98462fb5] jit-log-opt-bridge}
[3e4c20e985a3b2f] {jit-backend
[3e4c20e985de3e0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf42b
[3e4c20e985e4db1] jit-backend-dump}
[3e4c20e985ee97a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf4334 +0  20000000
[3e4c20e985efc39] jit-backend-dump}
[3e4c20e985f36bf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf4485 +0  20000000
[3e4c20e985f449c] jit-backend-dump}
[3e4c20e985f76be] {jit-backend-addr
bridge out of Guard 0x7f4eb8aa2de8 has address 0x7f4eb6bf4330 to 0x7f4eb6bf4480
       gc table: 0x7f4eb6bf42b0
    jump target: 0x7f4eb6bf4330
         resops: 0x7f4eb6bf433e
       failures: 0x7f4eb6bf4480
            end: 0x7f4eb6bf462f
[3e4c20e985f99df] jit-backend-addr}
[3e4c20e985fcc9b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf434e +0  71010000
[3e4c20e985fda6e] jit-backend-dump}
[3e4c20e98600c2f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf435c +0  7F010000
[3e4c20e98601929] jit-backend-dump}
[3e4c20e986049fe] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf4368 +0  8F010000
[3e4c20e986056ef] jit-backend-dump}
[3e4c20e98608802] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf437c +0  97010000
[3e4c20e986094f2] jit-backend-dump}
[3e4c20e9860c673] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf4391 +0  BA010000
[3e4c20e9860d361] jit-backend-dump}
[3e4c20e98613dff] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf43a9 +0  BE010000
[3e4c20e98614c71] jit-backend-dump}
[3e4c20e98617fdb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf43b3 +0  D0010000
[3e4c20e98618d4c] jit-backend-dump}
[3e4c20e9861beae] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf43bd +0  E2010000
[3e4c20e9861cbe5] jit-backend-dump}
[3e4c20e9861fd29] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf43d1 +0  EA010000
[3e4c20e98620a38] jit-backend-dump}
[3e4c20e98623ad3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf43e7 +0  F0010000
[3e4c20e986247d0] jit-backend-dump}
[3e4c20e986277f4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf43fa +0  F9010000
[3e4c20e986284e8] jit-backend-dump}
[3e4c20e9862b4d5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf4411 +0  FE010000
[3e4c20e9862c1d2] jit-backend-dump}
[3e4c20e9862f457] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf1c5d +0  CF260000
[3e4c20e9863015d] jit-backend-dump}
[3e4c20e98633fb3] jit-backend}
[3e4c20e98637966] {jit-log-opt-bridge
# bridge out of Guard 0x7f4eb8aa2de8 with 39 ops
[p0, p1]
+150: guard_class(p1, 16504944, descr=<Guard0x7f4eb8aab760>) [p0, p1]
+162: i3 = getfield_gc_i(p1, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+166: i5 = int_eq(i3, 0)
+170: guard_true(i5, descr=<Guard0x7f4eb8aeb580>) [p0, p1]
debug_merge_point(0, 0, '0')
+176: guard_class(p0, 16437216, descr=<Guard0x7f4eb8aeb5c8>) [p0, p1]
+188: p7 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+199: guard_value(p7, ConstPtr(ptr8), descr=<Guard0x7f4eb8aeb610>) [p0, p1]
+208: p9 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+208: guard_not_invalidated(descr=<Guard0x7f4eb8aeb658>) [p0, p1]
+208: i10 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+212: p11 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)) from (height AppRand9)')
+216: guard_class(p11, 16435920, descr=<Guard0x7f4eb8aeb6a0>) [p0, p1]
+229: p13 = getfield_gc_r(p11, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+233: guard_nonnull_class(p13, ConstClass(ForwardLink), descr=<Guard0x7f4eb8aab7c0>) [p0, p1]
debug_merge_point(0, 0, '(max AppRand8 AppRand10)')
+253: i16 = int_lt(i10, 0)
+257: guard_false(i16, descr=<Guard0x7f4eb8aeb6e8>) [p0, p1]
debug_merge_point(0, 0, '(+ 1 AppRand11)')
+263: i18 = int_add_ovf(1, i10)
+267: guard_no_overflow(descr=<Guard0x7f4eb8aeb730>) [p0, p1]
+273: p19 = getfield_gc_r(p11, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+284: guard_value(p19, ConstPtr(ptr20), descr=<Guard0x7f4eb8aeb778>) [p0, p1]
+293: p21 = getfield_gc_r(p11, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+297: p22 = getfield_gc_r(p11, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+301: guard_class(p21, 16499664, descr=<Guard0x7f4eb8aeb7c0>) [p0, p1]
+315: p24 = getfield_gc_r(p21, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+320: guard_class(p22, 16437216, descr=<Guard0x7f4eb8aeb808>) [p0, p1]
+334: p26 = getfield_gc_r(p22, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+338: guard_nonnull_class(p26, ConstClass(ForwardLink), descr=<Guard0x7f4eb8aab820>) [p0, p1]
debug_merge_point(0, 0, '(vector-ref t 1) from (+ 1 AppRand11)')
+357: p28 = new_with_vtable(descr=<SizeDescr 48>)
+405: setfield_gc(p28, ConstPtr(ptr29), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+409: setfield_gc(p28, p24, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+413: setfield_gc(p28, i18, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+417: setfield_gc(p28, p22, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+421: setfield_gc(p28, p26, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+425: jump(p21, p28, descr=TargetToken(80544176))
+464: --end of the loop--
[3e4c20e9865d402] jit-log-opt-bridge}
[3e4c20e987a3553] {jit-backend
[3e4c20e987dd526] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf
[3e4c20e987e3a58] jit-backend-dump}
[3e4c20e987ed7ab] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf4794 +0  20000000
[3e4c20e987eeafd] jit-backend-dump}
[3e4c20e987f2675] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf48e5 +0  20000000
[3e4c20e987f3488] jit-backend-dump}
[3e4c20e987f67be] {jit-backend-addr
bridge out of Guard 0x7f4eb8aa3190 has address 0x7f4eb6bf4790 to 0x7f4eb6bf48e0
       gc table: 0x7f4eb6bf4720
    jump target: 0x7f4eb6bf4790
         resops: 0x7f4eb6bf479e
       failures: 0x7f4eb6bf48e0
            end: 0x7f4eb6bf4a73
[3e4c20e987f8aa8] jit-backend-addr}
[3e4c20e987fc02d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf47ae +0  71010000
[3e4c20e987fce68] jit-backend-dump}
[3e4c20e98800167] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf47c5 +0  76010000
[3e4c20e98800e6a] jit-backend-dump}
[3e4c20e98803f86] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf47d2 +0  85010000
[3e4c20e98804ccf] jit-backend-dump}
[3e4c20e98807e2b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf47ea +0  89010000
[3e4c20e98808b22] jit-backend-dump}
[3e4c20e9880bd76] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf47f8 +0  B3010000
[3e4c20e9880ca7f] jit-backend-dump}
[3e4c20e9880fc24] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf480a +0  BD010000
[3e4c20e98810934] jit-backend-dump}
[3e4c20e98813b35] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf4820 +0  C3010000
[3e4c20e98814832] jit-backend-dump}
[3e4c20e9881795d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf4832 +0  CD010000
[3e4c20e98818666] jit-backend-dump}
[3e4c20e9881b909] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf484a +0  D1010000
[3e4c20e9881c5f4] jit-backend-dump}
[3e4c20e9881f747] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf485e +0  D9010000
[3e4c20e98820416] jit-backend-dump}
[3e4c20e98823544] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf486b +0  E8010000
[3e4c20e9882425c] jit-backend-dump}
[3e4c20e9882767e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf22b1 +0  DB240000
[3e4c20e9882836c] jit-backend-dump}
[3e4c20e9882c3d3] jit-backend}
[3e4c20e9882fd95] {jit-log-opt-bridge
# bridge out of Guard 0x7f4eb8aa3190 with 38 ops
[p0, p1]
+134: guard_class(p1, 16499664, descr=<Guard0x7f4eb8aab880>) [p0, p1]
+146: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+150: guard_nonnull_class(p3, ConstClass(W_Vector), descr=<Guard0x7f4eb8aab8e0>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))')
+169: guard_class(p0, 16437216, descr=<Guard0x7f4eb8aeb850>) [p0, p1]
+182: p6 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+186: guard_nonnull_class(p6, ConstClass(ForwardLink), descr=<Guard0x7f4eb8aab940>) [p0, p1]
debug_merge_point(0, 0, '(vector-ref t 0)')
+206: guard_not_invalidated(descr=<Guard0x7f4eb8aeb898>) [p0, p1]
+206: i8 = getfield_gc_i(p3, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+210: i10 = int_lt(0, i8)
+214: guard_true(i10, descr=<Guard0x7f4eb8aeb8e0>) [p0, p1]
+220: p11 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+224: guard_class(p11, 16622984, descr=<Guard0x7f4eb8aeb928>) [p0, p1]
+238: p13 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+242: p15 = getarrayitem_gc_r(p13, 0, descr=<ArrayP 8>)
+247: guard_class(p15, ConstClass(W_Vector), descr=<Guard0x7f4eb8aeb970>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11))))')
debug_merge_point(0, 0, '(height AppRand7)')
+260: p17 = getfield_gc_r(p1, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+264: guard_class(p17, 16499664, descr=<Guard0x7f4eb8aeb9b8>) [p0, p1]
+278: p19 = getfield_gc_r(p17, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+283: guard_nonnull_class(p19, 16510992, descr=<Guard0x7f4eb8aab9a0>) [p0, p1]
+302: p21 = getfield_gc_r(p19, descr=<FieldP pycket.values.W_Closure.inst_caselam 8 pure>)
+313: guard_value(p21, ConstPtr(ptr22), descr=<Guard0x7f4eb8aeba00>) [p0, p1]
+322: p23 = getfield_gc_r(p19, descr=<FieldP rpython.tool.pairtype.W_ClosureSize1.inst__envs_0 16 pure>)
+326: i24 = instance_ptr_eq(p17, p23)
+329: guard_true(i24, descr=<Guard0x7f4eb8aeba48>) [p0, p1]
debug_merge_point(0, 0, '(if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height AppRand7)')
+335: p25 = new_with_vtable(descr=<SizeDescr 24>)
+379: p26 = new_with_vtable(descr=<SizeDescr 40>)
+390: setfield_gc(p25, p15, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+394: setfield_gc(p26, p6, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+398: setfield_gc(p25, p17, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+402: setfield_gc(p26, p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+406: setfield_gc(p26, p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+417: setfield_gc(p26, ConstPtr(ptr27), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+421: jump(p25, p26, descr=TargetToken(80544336))
+448: --end of the loop--
[3e4c20e98852af5] jit-log-opt-bridge}
[3e4c20e98962afb] {jit-backend
[3e4c20e9898f42a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf4b
[3e4c20e98994922] jit-backend-dump}
[3e4c20e9899eb09] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf4ba4 +0  1E000000
[3e4c20e9899fce9] jit-backend-dump}
[3e4c20e989a36e8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf4c75 +0  1E000000
[3e4c20e989a4508] jit-backend-dump}
[3e4c20e989a7734] {jit-backend-addr
bridge out of Guard 0x7f4eb8aa2f08 has address 0x7f4eb6bf4ba0 to 0x7f4eb6bf4c70
       gc table: 0x7f4eb6bf4b40
    jump target: 0x7f4eb6bf4ba0
         resops: 0x7f4eb6bf4bae
       failures: 0x7f4eb6bf4c70
            end: 0x7f4eb6bf4dae
[3e4c20e989a9831] jit-backend-addr}
[3e4c20e989acaff] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf4bbe +0  D4000000
[3e4c20e989ad824] jit-backend-dump}
[3e4c20e989b094f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf4bcc +0  E2000000
[3e4c20e989b166e] jit-backend-dump}
[3e4c20e989b46d2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf4bd8 +0  F2000000
[3e4c20e989b53a7] jit-backend-dump}
[3e4c20e989b83bf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf4bec +0  FA000000
[3e4c20e989b90e4] jit-backend-dump}
[3e4c20e989bc41a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf4c02 +0  1C010000
[3e4c20e989bd11d] jit-backend-dump}
[3e4c20e989c01dd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf4c1a +0  20010000
[3e4c20e989c0eb5] jit-backend-dump}
[3e4c20e989c3e68] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf4c24 +0  32010000
[3e4c20e989c4b31] jit-backend-dump}
[3e4c20e989c7b1e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf4c2e +0  44010000
[3e4c20e989c87f0] jit-backend-dump}
[3e4c20e989cb796] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf4c3b +0  53010000
[3e4c20e989cc44d] jit-backend-dump}
[3e4c20e989cf648] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf1ca8 +0  F42E0000
[3e4c20e989d033f] jit-backend-dump}
[3e4c20e989d4117] jit-backend}
[3e4c20e989d7a8d] {jit-log-opt-bridge
# bridge out of Guard 0x7f4eb8aa2f08 with 29 ops
[p0, p1]
+118: guard_class(p1, 16504944, descr=<Guard0x7f4eb8aaba00>) [p0, p1]
+130: i3 = getfield_gc_i(p1, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+134: i5 = int_eq(i3, 0)
+138: guard_true(i5, descr=<Guard0x7f4eb8aeba90>) [p0, p1]
debug_merge_point(0, 0, '0')
+144: guard_class(p0, 16437216, descr=<Guard0x7f4eb8aebad8>) [p0, p1]
+156: p7 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+167: guard_value(p7, ConstPtr(ptr8), descr=<Guard0x7f4eb8aebb20>) [p0, p1]
+176: p9 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+176: guard_not_invalidated(descr=<Guard0x7f4eb8aebb68>) [p0, p1]
+176: i10 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+180: p11 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)) from (height AppRand9)')
+184: guard_class(p11, 16437216, descr=<Guard0x7f4eb8aebbb0>) [p0, p1]
+198: p13 = getfield_gc_r(p11, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+202: guard_nonnull_class(p13, ConstClass(ForwardLink), descr=<Guard0x7f4eb8aaba60>) [p0, p1]
debug_merge_point(0, 0, '(max AppRand8 AppRand10)')
+222: i16 = int_lt(i10, 0)
+226: guard_false(i16, descr=<Guard0x7f4eb8aebbf8>) [p0, p1]
debug_merge_point(0, 0, '(+ 1 AppRand11)')
+232: i18 = int_add_ovf(1, i10)
+236: guard_no_overflow(descr=<Guard0x7f4eb8aebc40>) [p0, p1]
+242: p19 = getfield_gc_r(p11, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+246: guard_value(p19, ConstPtr(ptr20), descr=<Guard0x7f4eb8aebc88>) [p0, p1]
+255: p21 = getfield_gc_r(p11, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+259: i22 = getfield_gc_i(p11, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+263: p23 = getfield_gc_r(p11, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)) from (+ 1 AppRand11)')
+267: jump(p21, i22, i18, p23, descr=TargetToken(80544576))
+304: --end of the loop--
[3e4c20e989f3279] jit-log-opt-bridge}
[3e4c20e98b50b7f] {jit-backend
[3e4c20e98b90df8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf4ee
[3e4c20e98b97df4] jit-backend-dump}
[3e4c20e98ba1c45] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf4f84 +0  1E000000
[3e4c20e98ba2e65] jit-backend-dump}
[3e4c20e98ba69ef] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf50e5 +0  1E000000
[3e4c20e98ba7803] jit-backend-dump}
[3e4c20e98baaaac] {jit-backend-addr
bridge out of Guard 0x7f4eb8aeb220 has address 0x7f4eb6bf4f80 to 0x7f4eb6bf50e0
       gc table: 0x7f4eb6bf4ee0
    jump target: 0x7f4eb6bf4f80
         resops: 0x7f4eb6bf4f8e
       failures: 0x7f4eb6bf50e0
            end: 0x7f4eb6bf52e2
[3e4c20e98bacd34] jit-backend-addr}
[3e4c20e98bafff3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf4f9e +0  64010000
[3e4c20e98bb0dcf] jit-backend-dump}
[3e4c20e98bb3faf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf4fac +0  72010000
[3e4c20e98bb4c3a] jit-backend-dump}
[3e4c20e98bb7ce8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf4fb9 +0  81010000
[3e4c20e98bb8977] jit-backend-dump}
[3e4c20e98bbbb22] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf4fcd +0  89010000
[3e4c20e98bbc79c] jit-backend-dump}
[3e4c20e98bbf8c4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf4fe3 +0  8F010000
[3e4c20e98bc051f] jit-backend-dump}
[3e4c20e98bc3577] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf4ff4 +0  9A010000
[3e4c20e98bc41f9] jit-backend-dump}
[3e4c20e98bc720b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf500b +0  9F010000
[3e4c20e98bc7e81] jit-backend-dump}
[3e4c20e98bcafbc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf5022 +0  C0010000
[3e4c20e98bcbc10] jit-backend-dump}
[3e4c20e98bcec50] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf5030 +0  CE010000
[3e4c20e98bcf8b4] jit-backend-dump}
[3e4c20e98bd2903] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf5042 +0  D8010000
[3e4c20e98bd3554] jit-backend-dump}
[3e4c20e98bd65e6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf5058 +0  DE010000
[3e4c20e98bd7254] jit-backend-dump}
[3e4c20e98bda29f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf5071 +0  E1010000
[3e4c20e98bdaef7] jit-backend-dump}
[3e4c20e98bddf34] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf5085 +0  E9010000
[3e4c20e98bdebbc] jit-backend-dump}
[3e4c20e98be1c3f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf5092 +0  F8010000
[3e4c20e98be289a] jit-backend-dump}
[3e4c20e98be58d3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf509c +0  0A020000
[3e4c20e98be6544] jit-backend-dump}
[3e4c20e98be9577] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf50b0 +0  12020000
[3e4c20e98bea1c2] jit-backend-dump}
[3e4c20e98bed444] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3ddb +0  A1110000
[3e4c20e98bee0ae] jit-backend-dump}
[3e4c20e98bf1f94] jit-backend}
[3e4c20e98bf58d0] {jit-log-opt-bridge
# bridge out of Guard 0x7f4eb8aeb220 with 52 ops
[p0, p1]
+182: guard_class(p1, 16504944, descr=<Guard0x7f4eb8aabac0>) [p0, p1]
+194: i3 = getfield_gc_i(p1, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+198: i5 = int_eq(i3, 0)
+202: guard_true(i5, descr=<Guard0x7f4eb8aebcd0>) [p0, p1]
debug_merge_point(0, 0, '0')
+208: guard_class(p0, 16435920, descr=<Guard0x7f4eb8aebd18>) [p0, p1]
+221: p7 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+232: guard_value(p7, ConstPtr(ptr8), descr=<Guard0x7f4eb8aebd60>) [p0, p1]
+241: p9 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+245: p10 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+249: guard_class(p9, 16499664, descr=<Guard0x7f4eb8aebda8>) [p0, p1]
+263: p12 = getfield_gc_r(p9, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+267: guard_class(p10, 16437216, descr=<Guard0x7f4eb8aebdf0>) [p0, p1]
+280: p14 = getfield_gc_r(p10, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+284: guard_nonnull_class(p14, ConstClass(ForwardLink), descr=<Guard0x7f4eb8aabb20>) [p0, p1]
debug_merge_point(0, 0, '(vector-ref t 1) from (height AppRand7)')
+303: guard_not_invalidated(descr=<Guard0x7f4eb8aebe38>) [p0, p1]
+303: p16 = getfield_gc_r(p9, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+307: guard_nonnull_class(p16, ConstClass(W_Vector), descr=<Guard0x7f4eb8aabb80>) [p0, p1]
+326: i18 = getfield_gc_i(p16, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+330: i20 = int_lt(1, i18)
+334: guard_true(i20, descr=<Guard0x7f4eb8aebe80>) [p0, p1]
+340: p21 = getfield_gc_r(p16, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+344: guard_class(p21, 16623792, descr=<Guard0x7f4eb8aebec8>) [p0, p1]
+358: p23 = getfield_gc_r(p16, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+362: i25 = getarrayitem_gc_i(p23, 1, descr=<ArrayS 8>)
debug_merge_point(0, 0, '(let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))')
debug_merge_point(0, 0, 'AppRand8')
+366: guard_class(p12, 16499664, descr=<Guard0x7f4eb8aebf10>) [p0, p1]
+380: p27 = getfield_gc_r(p12, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(height AppRand9)')
+380: p28 = getfield_gc_r(p12, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+385: guard_nonnull_class(p28, 16510992, descr=<Guard0x7f4eb8aabbe0>) [p0, p1]
+405: p30 = getfield_gc_r(p28, descr=<FieldP pycket.values.W_Closure.inst_caselam 8 pure>)
+416: guard_value(p30, ConstPtr(ptr31), descr=<Guard0x7f4eb8aebf58>) [p0, p1]
+425: p32 = getfield_gc_r(p28, descr=<FieldP rpython.tool.pairtype.W_ClosureSize1.inst__envs_0 16 pure>)
+429: i33 = instance_ptr_eq(p12, p32)
+432: guard_true(i33, descr=<Guard0x7f4eb8aebfa0>) [p0, p1]
debug_merge_point(0, 0, '(if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height AppRand9)')
+438: i35 = int_eq(i25, 0)
+442: guard_true(i35, descr=<Guard0x7f4eb7188020>) [p0, p1]
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)) from (height AppRand9)')
debug_merge_point(0, 0, '(max AppRand8 AppRand10)')
debug_merge_point(0, 0, '(+ 1 AppRand11)')
+448: p36 = getfield_gc_r(p10, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+459: guard_value(p36, ConstPtr(ptr37), descr=<Guard0x7f4eb7188068>) [p0, p1]
+468: p38 = getfield_gc_r(p10, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+472: i39 = getfield_gc_i(p10, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+476: p40 = getfield_gc_r(p10, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)) from (+ 1 AppRand11)')
+480: jump(p38, i39, 1, p40, descr=TargetToken(80544576))
+512: --end of the loop--
[3e4c20e98c22955] jit-log-opt-bridge}
[3e4c20e98d13702] {jit-backend
[3e4c20e98d521d0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf53c
[3e4c20e98d5842c] jit-backend-dump}
[3e4c20e98d61f62] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf5434 +0  20000000
[3e4c20e98d63338] jit-backend-dump}
[3e4c20e98d66e44] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf5585 +0  20000000
[3e4c20e98d67de5] jit-backend-dump}
[3e4c20e98d6afce] {jit-backend-addr
bridge out of Guard 0x7f4eb8aa33d0 has address 0x7f4eb6bf5430 to 0x7f4eb6bf5580
       gc table: 0x7f4eb6bf53c0
    jump target: 0x7f4eb6bf5430
         resops: 0x7f4eb6bf543e
       failures: 0x7f4eb6bf5580
            end: 0x7f4eb6bf56f7
[3e4c20e98d6d0ff] jit-backend-addr}
[3e4c20e98d703f2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf544e +0  71010000
[3e4c20e98d711e1] jit-backend-dump}
[3e4c20e98d742bc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf5465 +0  76010000
[3e4c20e98d75012] jit-backend-dump}
[3e4c20e98d780c9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf5472 +0  85010000
[3e4c20e98d78e18] jit-backend-dump}
[3e4c20e98d7f6b1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf548a +0  89010000
[3e4c20e98d80508] jit-backend-dump}
[3e4c20e98d8391a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf5498 +0  B3010000
[3e4c20e98d84636] jit-backend-dump}
[3e4c20e98d876f0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf54aa +0  BD010000
[3e4c20e98d88408] jit-backend-dump}
[3e4c20e98d8b4b9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf54c5 +0  BE010000
[3e4c20e98d8c1e4] jit-backend-dump}
[3e4c20e98d8f104] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf54dd +0  C2010000
[3e4c20e98d8fe04] jit-backend-dump}
[3e4c20e98d92e31] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf54f1 +0  CA010000
[3e4c20e98d93b9c] jit-backend-dump}
[3e4c20e98d96cbb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf54fe +0  D9010000
[3e4c20e98d97984] jit-backend-dump}
[3e4c20e98d9ae0a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf2350 +0  DC300000
[3e4c20e98d9bb38] jit-backend-dump}
[3e4c20e98d9fb22] jit-backend}
[3e4c20e98da3488] {jit-log-opt-bridge
# bridge out of Guard 0x7f4eb8aa33d0 with 37 ops
[p0, p1]
+134: guard_class(p1, 16499664, descr=<Guard0x7f4eb8aabc40>) [p0, p1]
+146: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+150: guard_nonnull_class(p3, ConstClass(W_Vector), descr=<Guard0x7f4eb8aabca0>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))')
+169: guard_class(p0, 16437216, descr=<Guard0x7f4eb71880b0>) [p0, p1]
+182: p6 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+186: guard_nonnull_class(p6, ConstClass(ForwardLink), descr=<Guard0x7f4eb8aabd00>) [p0, p1]
debug_merge_point(0, 0, '(vector-ref t 0)')
+206: guard_not_invalidated(descr=<Guard0x7f4eb71880f8>) [p0, p1]
+206: i8 = getfield_gc_i(p3, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+210: i10 = int_lt(0, i8)
+214: guard_true(i10, descr=<Guard0x7f4eb7188140>) [p0, p1]
+220: p11 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+224: guard_class(p11, 16623792, descr=<Guard0x7f4eb7188188>) [p0, p1]
+238: p13 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+242: i15 = getarrayitem_gc_i(p13, 0, descr=<ArrayS 8>)
debug_merge_point(0, 0, '(let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11))))')
debug_merge_point(0, 0, '(height AppRand7)')
+247: p16 = getfield_gc_r(p1, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+251: guard_class(p16, 16499664, descr=<Guard0x7f4eb71881d0>) [p0, p1]
+265: p18 = getfield_gc_r(p16, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+270: guard_nonnull_class(p18, 16510992, descr=<Guard0x7f4eb8aabd60>) [p0, p1]
+289: p20 = getfield_gc_r(p18, descr=<FieldP pycket.values.W_Closure.inst_caselam 8 pure>)
+300: guard_value(p20, ConstPtr(ptr21), descr=<Guard0x7f4eb7188218>) [p0, p1]
+309: p22 = getfield_gc_r(p18, descr=<FieldP rpython.tool.pairtype.W_ClosureSize1.inst__envs_0 16 pure>)
+313: i23 = instance_ptr_eq(p16, p22)
+316: guard_true(i23, descr=<Guard0x7f4eb7188260>) [p0, p1]
debug_merge_point(0, 0, '(if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height AppRand7)')
+322: p24 = new_with_vtable(descr=<SizeDescr 24>)
+366: p25 = new_with_vtable(descr=<SizeDescr 40>)
+377: setfield_gc(p25, p6, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+381: setfield_gc(p24, p16, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+385: setfield_gc(p24, i15, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+389: setfield_gc(p25, p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+393: setfield_gc(p25, p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+404: setfield_gc(p25, ConstPtr(ptr26), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+408: jump(p24, p25, descr=TargetToken(80544336))
+448: --end of the loop--
[3e4c20e98dc5f57] jit-log-opt-bridge}
[3e4c20e98ead97c] {jit-backend
[3e4c20e98ee3146] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf57c
[3e4c20e98ee86b5] jit-backend-dump}
[3e4c20e98ef2537] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf5824 +0  20000000
[3e4c20e98ef37b3] jit-backend-dump}
[3e4c20e98ef7316] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf5935 +0  20000000
[3e4c20e98ef80e6] jit-backend-dump}
[3e4c20e98efb220] {jit-backend-addr
bridge out of Guard 0x7f4eb8aab220 has address 0x7f4eb6bf5820 to 0x7f4eb6bf5930
       gc table: 0x7f4eb6bf57c0
    jump target: 0x7f4eb6bf5820
         resops: 0x7f4eb6bf582e
       failures: 0x7f4eb6bf5930
            end: 0x7f4eb6bf5a6f
[3e4c20e98efd418] jit-backend-addr}
[3e4c20e98f007ea] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf583e +0  31010000
[3e4c20e98f01574] jit-backend-dump}
[3e4c20e98f04720] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf5855 +0  36010000
[3e4c20e98f0540d] jit-backend-dump}
[3e4c20e98f08695] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf585e +0  65010000
[3e4c20e98f09409] jit-backend-dump}
[3e4c20e98f0c578] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf586d +0  72010000
[3e4c20e98f0d2b8] jit-backend-dump}
[3e4c20e98f104db] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf5881 +0  7A010000
[3e4c20e98f111e4] jit-backend-dump}
[3e4c20e98f14321] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf5897 +0  80010000
[3e4c20e98f14fdb] jit-backend-dump}
[3e4c20e98f180a7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf58a8 +0  8B010000
[3e4c20e98f18d76] jit-backend-dump}
[3e4c20e98f1bea4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf58bf +0  90010000
[3e4c20e98f1cb4c] jit-backend-dump}
[3e4c20e98f1fe04] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf2f70 +0  AC280000
[3e4c20e98f20a8d] jit-backend-dump}
[3e4c20e98f248ef] jit-backend}
[3e4c20e98f282ca] {jit-log-opt-bridge
# bridge out of Guard 0x7f4eb8aab220 with 27 ops
[p0, p1, i2, i3]
+118: guard_class(p0, 16435920, descr=<Guard0x7f4eb8aabe20>) [p0, p1, i2, i3]
+130: p5 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+134: guard_nonnull_class(p5, ConstClass(ForwardLink), descr=<Guard0x7f4eb8aabe80>) [p0, p1, i2, i3]
debug_merge_point(0, 0, '(max AppRand8 AppRand10)')
+153: guard_not_invalidated(descr=<Guard0x7f4eb7188338>) [p0, p1, i2, i3]
+153: i7 = int_lt(i3, i2)
+156: guard_false(i7, descr=<Guard0x7f4eb7188380>) [p0, p1, i2, i3]
debug_merge_point(0, 0, '(+ 1 AppRand11)')
+162: i9 = int_add_ovf(1, i3)
+171: guard_no_overflow(descr=<Guard0x7f4eb71883c8>) [p0, p1, i2, i3]
+177: p10 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+188: guard_value(p10, ConstPtr(ptr11), descr=<Guard0x7f4eb7188410>) [p0, p1, i2, i3]
+197: p12 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+201: p13 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+205: guard_class(p12, 16499664, descr=<Guard0x7f4eb7188458>) [p0, p1, i2, i3]
+219: p15 = getfield_gc_r(p12, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+223: guard_class(p13, 16437216, descr=<Guard0x7f4eb71884a0>) [p0, p1, i2, i3]
+236: p17 = getfield_gc_r(p13, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+240: guard_nonnull_class(p17, ConstClass(ForwardLink), descr=<Guard0x7f4eb8aabee0>) [p0, p1, i2, i3]
debug_merge_point(0, 0, '(vector-ref t 1) from (+ 1 AppRand11)')
+259: p19 = new_with_vtable(descr=<SizeDescr 48>)
+300: setfield_gc(p19, p17, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+311: setfield_gc(p19, ConstPtr(ptr20), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+315: setfield_gc(p19, p15, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+319: setfield_gc(p19, p13, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+323: setfield_gc(p19, i9, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+327: jump(p12, p19, descr=TargetToken(80544176))
+368: --end of the loop--
[3e4c20e98f44111] jit-log-opt-bridge}
[3e4c20e98ff913c] {jit-backend
[3e4c20e99035b37] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf5b
[3e4c20e9903ab76] jit-backend-dump}
[3e4c20e99044859] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf5b44 +0  20000000
[3e4c20e99045aed] jit-backend-dump}
[3e4c20e99049684] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf5c65 +0  20000000
[3e4c20e9904a463] jit-backend-dump}
[3e4c20e9904d6ba] {jit-backend-addr
bridge out of Guard 0x7f4eb8aa3808 has address 0x7f4eb6bf5b40 to 0x7f4eb6bf5c60
       gc table: 0x7f4eb6bf5b00
    jump target: 0x7f4eb6bf5b40
         resops: 0x7f4eb6bf5b4e
       failures: 0x7f4eb6bf5c60
            end: 0x7f4eb6bf5d4b
[3e4c20e9904f8fb] jit-backend-addr}
[3e4c20e99053063] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf5b60 +0  5B010000
[3e4c20e99053eaa] jit-backend-dump}
[3e4c20e99057123] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf5b71 +0  66010000
[3e4c20e99057e1a] jit-backend-dump}
[3e4c20e9905af1a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf5b90 +0  63010000
[3e4c20e9905bc63] jit-backend-dump}
[3e4c20e9905ec69] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf5ba4 +0  6B010000
[3e4c20e9905f99a] jit-backend-dump}
[3e4c20e99062999] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf5bb1 +0  7A010000
[3e4c20e990636ec] jit-backend-dump}
[3e4c20e99066a46] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf2a62 +0  DA300000
[3e4c20e9906777a] jit-backend-dump}
[3e4c20e9906b547] jit-backend}
[3e4c20e9906ef15] {jit-log-opt-bridge
# bridge out of Guard 0x7f4eb8aa3808 with 35 ops
[p0, p1, p2, p3, p4]
+86: guard_not_invalidated(descr=<Guard0x7f4eb8aabf40>) [p0, p1, p2, p3, p4]
+86: i5 = getfield_gc_i(p2, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+90: i7 = int_lt(0, i5)
+94: guard_true(i7, descr=<Guard0x7f4eb71889f8>) [p0, p1, p2, p3, p4]
+100: p8 = getfield_gc_r(p2, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+104: guard_class(p8, 16623792, descr=<Guard0x7f4eb7188ad0>) [p0, p1, p2, p3, p4]
+117: p10 = getfield_gc_r(p2, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+121: i12 = getarrayitem_gc_i(p10, 0, descr=<ArrayS 8>)
debug_merge_point(0, 0, '(let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11))))')
debug_merge_point(0, 0, '(height AppRand7)')
+125: p13 = getfield_gc_r(p3, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+129: guard_nonnull_class(p13, 16510992, descr=<Guard0x7f4eb8aabfa0>) [p0, p1, p2, p3, p4]
+148: p15 = getfield_gc_r(p13, descr=<FieldP pycket.values.W_Closure.inst_caselam 8 pure>)
+159: guard_value(p15, ConstPtr(ptr16), descr=<Guard0x7f4eb7188b18>) [p0, p1, p2, p3, p4]
+168: p17 = getfield_gc_r(p13, descr=<FieldP rpython.tool.pairtype.W_ClosureSize1.inst__envs_0 16 pure>)
+172: i18 = instance_ptr_eq(p3, p17)
+175: guard_true(i18, descr=<Guard0x7f4eb7188b60>) [p0, p1, p2, p3, p4]
debug_merge_point(0, 0, '(if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height AppRand7)')
+181: p19 = new_with_vtable(descr=<SizeDescr 24>)
+231: p20 = new_with_vtable(descr=<SizeDescr 40>)
+242: p21 = new_with_vtable(descr=<SizeDescr 24>)
+254: setfield_gc(p21, p3, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+258: setfield_gc(p21, p2, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+262: p22 = new_with_vtable(descr=<SizeDescr 40>)
+273: setfield_gc(p22, p4, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+277: setfield_gc(p22, p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+281: setfield_gc(p22, p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+292: setfield_gc(p22, ConstPtr(ptr23), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+296: setfield_gc(p19, p3, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+300: setfield_gc(p19, i12, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+304: setfield_gc(p20, p4, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+308: setfield_gc(p20, p21, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+312: setfield_gc(p20, p22, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+316: setfield_gc(p20, ConstPtr(ptr24), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+320: jump(p19, p20, descr=TargetToken(80544336))
+352: --end of the loop--
[3e4c20e9908f355] jit-log-opt-bridge}
[3e4c20e991b4883] {jit-backend
[3e4c20e9920f9d9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf5e
[3e4c20e992170f7] jit-backend-dump}
[3e4c20e99221229] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf5f44 +0  20000000
[3e4c20e99222737] jit-backend-dump}
[3e4c20e99226455] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6135 +0  20000000
[3e4c20e99227253] jit-backend-dump}
[3e4c20e9922a47c] {jit-backend-addr
bridge out of Guard 0x7f4eb8aa3e38 has address 0x7f4eb6bf5f40 to 0x7f4eb6bf6130
       gc table: 0x7f4eb6bf5e90
    jump target: 0x7f4eb6bf5f40
         resops: 0x7f4eb6bf5f4e
       failures: 0x7f4eb6bf6130
            end: 0x7f4eb6bf634f
[3e4c20e9922c759] jit-backend-addr}
[3e4c20e9922fb81] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf5f5e +0  2D020000
[3e4c20e9923093f] jit-backend-dump}
[3e4c20e99233c1f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf5f75 +0  32020000
[3e4c20e9923491f] jit-backend-dump}
[3e4c20e99237bdb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf5f83 +0  40020000
[3e4c20e992388f0] jit-backend-dump}
[3e4c20e9923ba43] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf5f94 +0  4B020000
[3e4c20e9923c746] jit-backend-dump}
[3e4c20e9923f7c6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf5fa8 +0  53020000
[3e4c20e992404d2] jit-backend-dump}
[3e4c20e9924352a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf5fb5 +0  62020000
[3e4c20e99244215] jit-backend-dump}
[3e4c20e9924727c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf5fc9 +0  6A020000
[3e4c20e99247f54] jit-backend-dump}
[3e4c20e9924afd4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf5fe3 +0  6C020000
[3e4c20e9924bcaf] jit-backend-dump}
[3e4c20e9924ed26] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf5ffb +0  70020000
[3e4c20e9924f9fb] jit-backend-dump}
[3e4c20e99252a47] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6009 +0  7E020000
[3e4c20e99253741] jit-backend-dump}
[3e4c20e99256783] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6024 +0  7F020000
[3e4c20e992574ba] jit-backend-dump}
[3e4c20e9925a55c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6038 +0  87020000
[3e4c20e9925b25c] jit-backend-dump}
[3e4c20e9925e2e5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6045 +0  96020000
[3e4c20e9925efe2] jit-backend-dump}
[3e4c20e992620b1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6053 +0  A4020000
[3e4c20e99262d9f] jit-backend-dump}
[3e4c20e99265e0c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6063 +0  B0020000
[3e4c20e99266ade] jit-backend-dump}
[3e4c20e99269b6d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6078 +0  B7020000
[3e4c20e9926a873] jit-backend-dump}
[3e4c20e9927132a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3453 +0  E92A0000
[3e4c20e992721df] jit-backend-dump}
[3e4c20e99276708] jit-backend}
[3e4c20e9927a25b] {jit-log-opt-bridge
# bridge out of Guard 0x7f4eb8aa3e38 with 65 ops
[p0, p1]
+198: guard_not_invalidated(descr=<Guard0x384a020>) [p0, p1]
+198: guard_class(p1, 16499664, descr=<Guard0x7f4eb7188ba8>) [p0, p1]
+210: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+214: guard_nonnull_class(p3, ConstClass(W_Vector), descr=<Guard0x384a080>) [p0, p1]
+233: i5 = getfield_gc_i(p3, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+237: i7 = int_lt(1, i5)
+241: guard_true(i7, descr=<Guard0x7f4eb7189808>) [p0, p1]
+247: p8 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+251: guard_class(p8, 16622984, descr=<Guard0x7f4eb7189850>) [p0, p1]
+264: p10 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+268: p12 = getarrayitem_gc_r(p10, 1, descr=<ArrayP 8>)
+272: guard_class(p0, 16437216, descr=<Guard0x7f4eb7189898>) [p0, p1]
+284: guard_class(p12, ConstClass(W_Vector), descr=<Guard0x7f4eb71898e0>) [p0, p1]
+297: p15 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+308: guard_value(p15, ConstPtr(ptr16), descr=<Guard0x7f4eb7189928>) [p0, p1]
+317: p17 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+321: i18 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+325: p19 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))')
+329: guard_class(p19, 16435920, descr=<Guard0x7f4eb7189970>) [p0, p1]
+343: p21 = getfield_gc_r(p19, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+348: guard_nonnull_class(p21, ConstClass(ForwardLink), descr=<Guard0x384a0e0>) [p0, p1]
debug_merge_point(0, 0, 'AppRand8')
+367: guard_class(p17, 16499664, descr=<Guard0x7f4eb71899b8>) [p0, p1]
+381: p24 = getfield_gc_r(p17, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(height AppRand9)')
+385: p25 = getfield_gc_r(p17, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+389: guard_nonnull_class(p25, 16510992, descr=<Guard0x384a140>) [p0, p1]
+408: p27 = getfield_gc_r(p25, descr=<FieldP pycket.values.W_Closure.inst_caselam 8 pure>)
+419: guard_value(p27, ConstPtr(ptr28), descr=<Guard0x7f4eb7189a00>) [p0, p1]
+428: p29 = getfield_gc_r(p25, descr=<FieldP rpython.tool.pairtype.W_ClosureSize1.inst__envs_0 16 pure>)
+432: i30 = instance_ptr_eq(p17, p29)
+435: guard_true(i30, descr=<Guard0x7f4eb7189a48>) [p0, p1]
debug_merge_point(0, 0, '(if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height AppRand9)')
debug_merge_point(0, 0, '(let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))')
debug_merge_point(0, 0, '(vector-ref t 0)')
+441: i31 = getfield_gc_i(p12, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+445: i33 = int_lt(0, i31)
+449: guard_true(i33, descr=<Guard0x7f4eb7189a90>) [p0, p1]
+455: p34 = getfield_gc_r(p12, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+459: guard_class(p34, 16622984, descr=<Guard0x7f4eb7189ad8>) [p0, p1]
+471: p36 = getfield_gc_r(p12, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+475: p38 = getarrayitem_gc_r(p36, 0, descr=<ArrayP 8>)
+479: guard_class(p38, ConstClass(W_Vector), descr=<Guard0x7f4eb7189b20>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11))))')
debug_merge_point(0, 0, '(height AppRand7)')
debug_merge_point(0, 0, '(if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height AppRand7)')
+492: p40 = new_with_vtable(descr=<SizeDescr 24>)
+536: p41 = new_with_vtable(descr=<SizeDescr 40>)
+547: p42 = new_with_vtable(descr=<SizeDescr 24>)
+558: setfield_gc(p42, p17, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+562: setfield_gc(p42, p12, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+566: p43 = new_with_vtable(descr=<SizeDescr 48>)
+577: setfield_gc(p43, p21, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+581: setfield_gc(p43, p24, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+585: setfield_gc(p43, p19, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+596: setfield_gc(p43, ConstPtr(ptr44), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+600: setfield_gc(p43, i18, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+604: setfield_gc(p40, p38, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+615: setfield_gc(p41, ConstPtr(ptr45), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+619: setfield_gc(p41, p42, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+623: setfield_gc(p41, p43, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+627: setfield_gc(p41, p21, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+631: setfield_gc(p40, p17, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+635: jump(p40, p41, descr=TargetToken(80544336))
+672: --end of the loop--
[3e4c20e992b6528] jit-log-opt-bridge}
[3e4c20e994395e0] {jit-backend
[3e4c20e9948d7c5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf
[3e4c20e99494c91] jit-backend-dump}
[3e4c20e9949efcb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6524 +0  20000000
[3e4c20e994a03fa] jit-backend-dump}
[3e4c20e994a407f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6705 +0  20000000
[3e4c20e994a4efd] jit-backend-dump}
[3e4c20e994a81fc] {jit-backend-addr
bridge out of Guard 0x7f4eb8aa2800 has address 0x7f4eb6bf6520 to 0x7f4eb6bf6700
       gc table: 0x7f4eb6bf6480
    jump target: 0x7f4eb6bf6520
         resops: 0x7f4eb6bf652e
       failures: 0x7f4eb6bf6700
            end: 0x7f4eb6bf6903
[3e4c20e994aa4b5] jit-backend-addr}
[3e4c20e994adc2c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf653e +0  1D020000
[3e4c20e994aea86] jit-backend-dump}
[3e4c20e994b1d07] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6555 +0  22020000
[3e4c20e994b2a7f] jit-backend-dump}
[3e4c20e994b5c4c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6563 +0  30020000
[3e4c20e994b695e] jit-backend-dump}
[3e4c20e994b9ae2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6574 +0  3B020000
[3e4c20e994ba7ae] jit-backend-dump}
[3e4c20e994bd9a3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6588 +0  43020000
[3e4c20e994be69d] jit-backend-dump}
[3e4c20e994c18c0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6595 +0  52020000
[3e4c20e994c25cf] jit-backend-dump}
[3e4c20e994c582f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf65a9 +0  5A020000
[3e4c20e994c64df] jit-backend-dump}
[3e4c20e994c958d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf65c3 +0  5C020000
[3e4c20e994ca268] jit-backend-dump}
[3e4c20e994cd2c3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf65db +0  60020000
[3e4c20e994cdfb1] jit-backend-dump}
[3e4c20e994d109f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf65e9 +0  6E020000
[3e4c20e994d1d52] jit-backend-dump}
[3e4c20e994d4dcc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6604 +0  6F020000
[3e4c20e994d5a95] jit-backend-dump}
[3e4c20e994d8c47] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6618 +0  77020000
[3e4c20e994d991f] jit-backend-dump}
[3e4c20e994dc9ab] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6625 +0  86020000
[3e4c20e994dd658] jit-backend-dump}
[3e4c20e994e06db] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6633 +0  94020000
[3e4c20e994e13c9] jit-backend-dump}
[3e4c20e994e44a7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6643 +0  A0020000
[3e4c20e994e516d] jit-backend-dump}
[3e4c20e994ec374] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf140d +0  0F510000
[3e4c20e994ed23e] jit-backend-dump}
[3e4c20e994f139a] jit-backend}
[3e4c20e994f4ede] {jit-log-opt-bridge
# bridge out of Guard 0x7f4eb8aa2800 with 64 ops
[p0, p1]
+182: guard_not_invalidated(descr=<Guard0x384a1a0>) [p0, p1]
+182: guard_class(p1, 16499664, descr=<Guard0x7f4eb7189b68>) [p0, p1]
+194: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+198: guard_nonnull_class(p3, ConstClass(W_Vector), descr=<Guard0x384a200>) [p0, p1]
+217: i5 = getfield_gc_i(p3, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+221: i7 = int_lt(1, i5)
+225: guard_true(i7, descr=<Guard0x7f4eb7189bb0>) [p0, p1]
+231: p8 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+235: guard_class(p8, 16622984, descr=<Guard0x7f4eb7189bf8>) [p0, p1]
+248: p10 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+252: p12 = getarrayitem_gc_r(p10, 1, descr=<ArrayP 8>)
+256: guard_class(p0, 16437216, descr=<Guard0x7f4eb7189c40>) [p0, p1]
+268: guard_class(p12, ConstClass(W_Vector), descr=<Guard0x7f4eb7189c88>) [p0, p1]
+281: p15 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+292: guard_value(p15, ConstPtr(ptr16), descr=<Guard0x7f4eb7189cd0>) [p0, p1]
+301: p17 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+305: i18 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+309: p19 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))')
+313: guard_class(p19, 16437216, descr=<Guard0x7f4eb7189d18>) [p0, p1]
+327: p21 = getfield_gc_r(p19, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+332: guard_nonnull_class(p21, ConstClass(ForwardLink), descr=<Guard0x384a260>) [p0, p1]
debug_merge_point(0, 0, 'AppRand8')
+351: guard_class(p17, 16499664, descr=<Guard0x7f4eb7189d60>) [p0, p1]
+365: p24 = getfield_gc_r(p17, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(height AppRand9)')
+369: p25 = getfield_gc_r(p17, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+373: guard_nonnull_class(p25, 16510992, descr=<Guard0x384a2c0>) [p0, p1]
+392: p27 = getfield_gc_r(p25, descr=<FieldP pycket.values.W_Closure.inst_caselam 8 pure>)
+403: guard_value(p27, ConstPtr(ptr28), descr=<Guard0x7f4eb7189da8>) [p0, p1]
+412: p29 = getfield_gc_r(p25, descr=<FieldP rpython.tool.pairtype.W_ClosureSize1.inst__envs_0 16 pure>)
+416: i30 = instance_ptr_eq(p17, p29)
+419: guard_true(i30, descr=<Guard0x7f4eb7189df0>) [p0, p1]
debug_merge_point(0, 0, '(if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height AppRand9)')
debug_merge_point(0, 0, '(let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))')
debug_merge_point(0, 0, '(vector-ref t 0)')
+425: i31 = getfield_gc_i(p12, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+429: i33 = int_lt(0, i31)
+433: guard_true(i33, descr=<Guard0x7f4eb7189e38>) [p0, p1]
+439: p34 = getfield_gc_r(p12, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+443: guard_class(p34, 16623792, descr=<Guard0x7f4eb7189e80>) [p0, p1]
+455: p36 = getfield_gc_r(p12, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+459: i38 = getarrayitem_gc_i(p36, 0, descr=<ArrayS 8>)
debug_merge_point(0, 0, '(let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11))))')
debug_merge_point(0, 0, '(height AppRand7)')
debug_merge_point(0, 0, '(if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height AppRand7)')
+463: p39 = new_with_vtable(descr=<SizeDescr 24>)
+510: p40 = new_with_vtable(descr=<SizeDescr 40>)
+521: p41 = new_with_vtable(descr=<SizeDescr 24>)
+532: setfield_gc(p41, p17, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+536: setfield_gc(p41, p12, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+540: p42 = new_with_vtable(descr=<SizeDescr 48>)
+551: setfield_gc(p42, p21, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+555: setfield_gc(p42, p24, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+559: setfield_gc(p42, p19, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+570: setfield_gc(p42, ConstPtr(ptr43), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+574: setfield_gc(p42, i18, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+585: setfield_gc(p40, ConstPtr(ptr44), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+589: setfield_gc(p40, p41, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+593: setfield_gc(p40, p42, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+597: setfield_gc(p40, p21, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+601: setfield_gc(p39, p17, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+605: setfield_gc(p39, i38, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+609: jump(p39, p40, descr=TargetToken(80544336))
+640: --end of the loop--
[3e4c20e99528fc0] jit-log-opt-bridge}
[3e4c20e9963b57c] {jit-backend
[3e4c20e99690ef7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6a
[3e4c20e996983d9] jit-backend-dump}
[3e4c20e996a25f4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6af4 +0  20000000
[3e4c20e996a397d] jit-backend-dump}
[3e4c20e996a75d1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6ce5 +0  20000000
[3e4c20e996a84fe] jit-backend-dump}
[3e4c20e996ab80c] {jit-backend-addr
bridge out of Guard 0x7f4eb8aa28d8 has address 0x7f4eb6bf6af0 to 0x7f4eb6bf6ce0
       gc table: 0x7f4eb6bf6a40
    jump target: 0x7f4eb6bf6af0
         resops: 0x7f4eb6bf6afe
       failures: 0x7f4eb6bf6ce0
            end: 0x7f4eb6bf6eff
[3e4c20e996ada38] jit-backend-addr}
[3e4c20e996b0eb9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6b0e +0  2D020000
[3e4c20e996b1c21] jit-backend-dump}
[3e4c20e996b4e47] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6b25 +0  32020000
[3e4c20e996b5b03] jit-backend-dump}
[3e4c20e996b8c7b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6b33 +0  40020000
[3e4c20e996b990d] jit-backend-dump}
[3e4c20e996bca56] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6b44 +0  4B020000
[3e4c20e996bd6e2] jit-backend-dump}
[3e4c20e996c0790] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6b58 +0  53020000
[3e4c20e996c1443] jit-backend-dump}
[3e4c20e996c4510] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6b65 +0  62020000
[3e4c20e996c51b4] jit-backend-dump}
[3e4c20e996c8206] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6b79 +0  6A020000
[3e4c20e996c8eb6] jit-backend-dump}
[3e4c20e996cbed7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6b93 +0  6C020000
[3e4c20e996ccb7e] jit-backend-dump}
[3e4c20e996cfb9f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6bab +0  70020000
[3e4c20e996d084d] jit-backend-dump}
[3e4c20e996d3877] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6bb9 +0  7E020000
[3e4c20e996d454f] jit-backend-dump}
[3e4c20e996d75de] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6bd4 +0  7F020000
[3e4c20e996d82c3] jit-backend-dump}
[3e4c20e996db2da] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6be8 +0  87020000
[3e4c20e996dbf8b] jit-backend-dump}
[3e4c20e996defe0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6bf5 +0  96020000
[3e4c20e996dfcc4] jit-backend-dump}
[3e4c20e996e2d47] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6c03 +0  A4020000
[3e4c20e996e39f8] jit-backend-dump}
[3e4c20e996e6a50] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6c13 +0  B0020000
[3e4c20e996e7703] jit-backend-dump}
[3e4c20e996ea789] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6c28 +0  B7020000
[3e4c20e996eb436] jit-backend-dump}
[3e4c20e996eea01] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf1448 +0  A4560000
[3e4c20e996ef6ef] jit-backend-dump}
[3e4c20e996f3872] jit-backend}
[3e4c20e996f7305] {jit-log-opt-bridge
# bridge out of Guard 0x7f4eb8aa28d8 with 65 ops
[p0, p1]
+198: guard_not_invalidated(descr=<Guard0x384a320>) [p0, p1]
+198: guard_class(p1, 16499664, descr=<Guard0x7f4eb7189ec8>) [p0, p1]
+210: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+214: guard_nonnull_class(p3, ConstClass(W_Vector), descr=<Guard0x384a380>) [p0, p1]
+233: i5 = getfield_gc_i(p3, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+237: i7 = int_lt(1, i5)
+241: guard_true(i7, descr=<Guard0x7f4eb7189f10>) [p0, p1]
+247: p8 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+251: guard_class(p8, 16622984, descr=<Guard0x7f4eb7189f58>) [p0, p1]
+264: p10 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+268: p12 = getarrayitem_gc_r(p10, 1, descr=<ArrayP 8>)
+272: guard_class(p0, 16437216, descr=<Guard0x7f4eb7189fa0>) [p0, p1]
+284: guard_class(p12, ConstClass(W_Vector), descr=<Guard0x7f4eb6d36020>) [p0, p1]
+297: p15 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+308: guard_value(p15, ConstPtr(ptr16), descr=<Guard0x7f4eb6d36068>) [p0, p1]
+317: p17 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+321: i18 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+325: p19 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))')
+329: guard_class(p19, 16437216, descr=<Guard0x7f4eb6d360b0>) [p0, p1]
+343: p21 = getfield_gc_r(p19, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+348: guard_nonnull_class(p21, ConstClass(ForwardLink), descr=<Guard0x384a3e0>) [p0, p1]
debug_merge_point(0, 0, 'AppRand8')
+367: guard_class(p17, 16499664, descr=<Guard0x7f4eb6d360f8>) [p0, p1]
+381: p24 = getfield_gc_r(p17, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(height AppRand9)')
+385: p25 = getfield_gc_r(p17, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+389: guard_nonnull_class(p25, 16510992, descr=<Guard0x384a440>) [p0, p1]
+408: p27 = getfield_gc_r(p25, descr=<FieldP pycket.values.W_Closure.inst_caselam 8 pure>)
+419: guard_value(p27, ConstPtr(ptr28), descr=<Guard0x7f4eb6d36140>) [p0, p1]
+428: p29 = getfield_gc_r(p25, descr=<FieldP rpython.tool.pairtype.W_ClosureSize1.inst__envs_0 16 pure>)
+432: i30 = instance_ptr_eq(p17, p29)
+435: guard_true(i30, descr=<Guard0x7f4eb6d36188>) [p0, p1]
debug_merge_point(0, 0, '(if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height AppRand9)')
debug_merge_point(0, 0, '(let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))')
debug_merge_point(0, 0, '(vector-ref t 0)')
+441: i31 = getfield_gc_i(p12, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+445: i33 = int_lt(0, i31)
+449: guard_true(i33, descr=<Guard0x7f4eb6d361d0>) [p0, p1]
+455: p34 = getfield_gc_r(p12, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+459: guard_class(p34, 16622984, descr=<Guard0x7f4eb6d36218>) [p0, p1]
+471: p36 = getfield_gc_r(p12, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+475: p38 = getarrayitem_gc_r(p36, 0, descr=<ArrayP 8>)
+479: guard_class(p38, ConstClass(W_Vector), descr=<Guard0x7f4eb6d36260>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11))))')
debug_merge_point(0, 0, '(height AppRand7)')
debug_merge_point(0, 0, '(if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height AppRand7)')
+492: p40 = new_with_vtable(descr=<SizeDescr 24>)
+536: p41 = new_with_vtable(descr=<SizeDescr 40>)
+547: p42 = new_with_vtable(descr=<SizeDescr 24>)
+558: setfield_gc(p42, p17, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+562: setfield_gc(p42, p12, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+566: p43 = new_with_vtable(descr=<SizeDescr 48>)
+577: setfield_gc(p43, p21, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+581: setfield_gc(p43, p24, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+585: setfield_gc(p43, p19, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+596: setfield_gc(p43, ConstPtr(ptr44), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+600: setfield_gc(p43, i18, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+604: setfield_gc(p40, p38, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+615: setfield_gc(p41, ConstPtr(ptr45), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+619: setfield_gc(p41, p42, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+623: setfield_gc(p41, p43, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+627: setfield_gc(p41, p21, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+631: setfield_gc(p40, p17, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+635: jump(p40, p41, descr=TargetToken(80544336))
+672: --end of the loop--
[3e4c20e9972b41b] jit-log-opt-bridge}
[3e4c20e9983e9ce] {jit-backend
[3e4c20e99899c84] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf6fc
[3e4c20e9989fe57] jit-backend-dump}
[3e4c20e998a9dc8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf7024 +0  20000000
[3e4c20e998ab295] jit-backend-dump}
[3e4c20e998af089] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf71b5 +0  20000000
[3e4c20e998aff32] jit-backend-dump}
[3e4c20e998b3281] {jit-backend-addr
bridge out of Guard 0x7f4eb8aa2ad0 has address 0x7f4eb6bf7020 to 0x7f4eb6bf71b0
       gc table: 0x7f4eb6bf6fc0
    jump target: 0x7f4eb6bf7020
         resops: 0x7f4eb6bf702e
       failures: 0x7f4eb6bf71b0
            end: 0x7f4eb6bf72ef
[3e4c20e998b54f6] jit-backend-addr}
[3e4c20e998b8baa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf7047 +0  C4010000
[3e4c20e998b99bd] jit-backend-dump}
[3e4c20e998bcd15] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf7058 +0  CF010000
[3e4c20e998bda21] jit-backend-dump}
[3e4c20e998c0b18] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf706e +0  D5010000
[3e4c20e998c180f] jit-backend-dump}
[3e4c20e998c48fa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf7090 +0  CF010000
[3e4c20e998c565c] jit-backend-dump}
[3e4c20e998c87dc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf70a4 +0  D7010000
[3e4c20e998c94ca] jit-backend-dump}
[3e4c20e998cc550] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf70b1 +0  E6010000
[3e4c20e998cd21c] jit-backend-dump}
[3e4c20e998d036f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf70bf +0  F4010000
[3e4c20e998d1047] jit-backend-dump}
[3e4c20e998d40ca] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf70cf +0  00020000
[3e4c20e998d4d83] jit-backend-dump}
[3e4c20e998d8100] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf14cf +0  4D5B0000
[3e4c20e998d8dcf] jit-backend-dump}
[3e4c20e998dcd10] jit-backend}
[3e4c20e998e07a0] {jit-log-opt-bridge
# bridge out of Guard 0x7f4eb8aa2ad0 with 57 ops
[p0, i1, p2, p3, p4, p5]
+118: guard_not_invalidated(descr=<Guard0x384a4a0>) [p0, i1, p2, p3, p4, p5]
+118: i6 = getfield_gc_i(p0, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+129: i8 = int_lt(1, i6)
+133: guard_true(i8, descr=<Guard0x7f4eb6d362a8>) [p0, i1, p2, p3, p4, p5]
+139: p9 = getfield_gc_r(p0, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+143: guard_class(p9, 16622984, descr=<Guard0x7f4eb6d362f0>) [p0, i1, p2, p3, p4, p5]
+156: p11 = getfield_gc_r(p0, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+160: p13 = getarrayitem_gc_r(p11, 1, descr=<ArrayP 8>)
+164: guard_class(p13, ConstClass(W_Vector), descr=<Guard0x7f4eb6d36338>) [p0, i1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))')
debug_merge_point(0, 0, 'AppRand8')
+178: p15 = getfield_gc_r(p4, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(height AppRand9)')
+189: p16 = getfield_gc_r(p4, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+193: guard_nonnull_class(p16, 16510992, descr=<Guard0x384a500>) [p0, i1, p2, p3, p4, p5]
+212: p18 = getfield_gc_r(p16, descr=<FieldP pycket.values.W_Closure.inst_caselam 8 pure>)
+223: guard_value(p18, ConstPtr(ptr19), descr=<Guard0x7f4eb6d36380>) [p0, i1, p2, p3, p4, p5]
+232: p20 = getfield_gc_r(p16, descr=<FieldP rpython.tool.pairtype.W_ClosureSize1.inst__envs_0 16 pure>)
+236: i21 = instance_ptr_eq(p4, p20)
+239: guard_true(i21, descr=<Guard0x7f4eb6d363c8>) [p0, i1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height AppRand9)')
debug_merge_point(0, 0, '(let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))')
debug_merge_point(0, 0, '(vector-ref t 0)')
+245: i22 = getfield_gc_i(p13, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+249: i24 = int_lt(0, i22)
+253: guard_true(i24, descr=<Guard0x7f4eb6d36410>) [p0, i1, p2, p3, p4, p5]
+259: p25 = getfield_gc_r(p13, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+263: guard_class(p25, 16623792, descr=<Guard0x7f4eb6d36458>) [p0, i1, p2, p3, p4, p5]
+275: p27 = getfield_gc_r(p13, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+279: i29 = getarrayitem_gc_i(p27, 0, descr=<ArrayS 8>)
debug_merge_point(0, 0, '(let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11))))')
debug_merge_point(0, 0, '(height AppRand7)')
debug_merge_point(0, 0, '(if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height AppRand7)')
+283: p30 = new_with_vtable(descr=<SizeDescr 24>)
+327: p31 = new_with_vtable(descr=<SizeDescr 40>)
+338: p32 = new_with_vtable(descr=<SizeDescr 24>)
+349: setfield_gc(p32, p4, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+353: setfield_gc(p32, p13, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+357: p33 = new_with_vtable(descr=<SizeDescr 48>)
+369: setfield_gc(p33, p5, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+373: setfield_gc(p33, p15, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+377: p34 = new_with_vtable(descr=<SizeDescr 48>)
+389: setfield_gc(p34, p5, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+394: setfield_gc(p34, p3, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+399: setfield_gc(p34, p2, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+411: setfield_gc(p34, ConstPtr(ptr35), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+416: setfield_gc(p34, i1, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+421: setfield_gc(p33, p34, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+425: setfield_gc(p33, ConstPtr(ptr36), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+429: setfield_gc(p33, 1, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+437: setfield_gc(p30, p4, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+441: setfield_gc(p30, i29, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+445: setfield_gc(p31, p5, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+449: setfield_gc(p31, p32, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+453: setfield_gc(p31, p33, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+464: setfield_gc(p31, ConstPtr(ptr38), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+468: jump(p30, p31, descr=TargetToken(80544336))
+496: --end of the loop--
[3e4c20e9991145a] jit-log-opt-bridge}
[3e4c20e999d2cf2] {jit-backend
[3e4c20e99a114b4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf73d
[3e4c20e99a17435] jit-backend-dump}
[3e4c20e99a21341] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf7444 +0  20000000
[3e4c20e99a22540] jit-backend-dump}
[3e4c20e99a2606b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf7595 +0  20000000
[3e4c20e99a26e38] jit-backend-dump}
[3e4c20e99a2a0c3] {jit-backend-addr
bridge out of Guard 0x7f4eb8aa3658 has address 0x7f4eb6bf7440 to 0x7f4eb6bf7590
       gc table: 0x7f4eb6bf73d0
    jump target: 0x7f4eb6bf7440
         resops: 0x7f4eb6bf744e
       failures: 0x7f4eb6bf7590
            end: 0x7f4eb6bf7707
[3e4c20e99a2c354] jit-backend-addr}
[3e4c20e99a2f78b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf745e +0  71010000
[3e4c20e99a3050e] jit-backend-dump}
[3e4c20e99a3374d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf7475 +0  76010000
[3e4c20e99a3442e] jit-backend-dump}
[3e4c20e99a37541] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf7481 +0  86010000
[3e4c20e99a3824a] jit-backend-dump}
[3e4c20e99a3b3dd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf7498 +0  8B010000
[3e4c20e99a3c0f2] jit-backend-dump}
[3e4c20e99a3f2ea] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf74a6 +0  B5010000
[3e4c20e99a3ffa1] jit-backend-dump}
[3e4c20e99a43080] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf74b8 +0  BF010000
[3e4c20e99a43db4] jit-backend-dump}
[3e4c20e99a46ecf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf74d2 +0  C1010000
[3e4c20e99a47b86] jit-backend-dump}
[3e4c20e99a4ace8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf74ea +0  C5010000
[3e4c20e99a4b9c6] jit-backend-dump}
[3e4c20e99a4eacd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf74ff +0  CC010000
[3e4c20e99a4f7a2] jit-backend-dump}
[3e4c20e99a52856] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf750d +0  DA010000
[3e4c20e99a53525] jit-backend-dump}
[3e4c20e99a568cf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf29d4 +0  684A0000
[3e4c20e99a575b7] jit-backend-dump}
[3e4c20e99a5b4af] jit-backend}
[3e4c20e99a5ef2c] {jit-log-opt-bridge
# bridge out of Guard 0x7f4eb8aa3658 with 37 ops
[p0, p1]
+134: guard_class(p1, 16499664, descr=<Guard0x384a560>) [p0, p1]
+146: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+150: guard_nonnull_class(p3, ConstClass(W_Vector), descr=<Guard0x384a5c0>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))')
+169: guard_class(p0, 16435920, descr=<Guard0x7f4eb6d364a0>) [p0, p1]
+181: p6 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+185: guard_nonnull_class(p6, ConstClass(ForwardLink), descr=<Guard0x384a620>) [p0, p1]
debug_merge_point(0, 0, '(vector-ref t 0)')
+204: guard_not_invalidated(descr=<Guard0x7f4eb6d364e8>) [p0, p1]
+204: i8 = getfield_gc_i(p3, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+208: i10 = int_lt(0, i8)
+212: guard_true(i10, descr=<Guard0x7f4eb6d36530>) [p0, p1]
+218: p11 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+222: guard_class(p11, 16623792, descr=<Guard0x7f4eb6d36578>) [p0, p1]
+236: p13 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+240: i15 = getarrayitem_gc_i(p13, 0, descr=<ArrayS 8>)
debug_merge_point(0, 0, '(let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11))))')
debug_merge_point(0, 0, '(height AppRand7)')
+244: p16 = getfield_gc_r(p1, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+248: guard_class(p16, 16499664, descr=<Guard0x7f4eb6d365c0>) [p0, p1]
+262: p18 = getfield_gc_r(p16, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+266: guard_nonnull_class(p18, 16510992, descr=<Guard0x384a680>) [p0, p1]
+286: p20 = getfield_gc_r(p18, descr=<FieldP pycket.values.W_Closure.inst_caselam 8 pure>)
+298: guard_value(p20, ConstPtr(ptr21), descr=<Guard0x7f4eb6d36608>) [p0, p1]
+307: p22 = getfield_gc_r(p18, descr=<FieldP rpython.tool.pairtype.W_ClosureSize1.inst__envs_0 16 pure>)
+312: i23 = instance_ptr_eq(p16, p22)
+315: guard_true(i23, descr=<Guard0x7f4eb6d36650>) [p0, p1]
debug_merge_point(0, 0, '(if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height AppRand7)')
+321: p24 = new_with_vtable(descr=<SizeDescr 24>)
+368: p25 = new_with_vtable(descr=<SizeDescr 40>)
+379: setfield_gc(p25, p6, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+383: setfield_gc(p24, p16, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+387: setfield_gc(p24, i15, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+391: setfield_gc(p25, p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+395: setfield_gc(p25, p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+406: setfield_gc(p25, ConstPtr(ptr26), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+410: jump(p24, p25, descr=TargetToken(80544336))
+448: --end of the loop--
[3e4c20e99a80da5] jit-log-opt-bridge}
[3e4c20e99b0dcb4] {jit-backend
[3e4c20e99b438e1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf77d0 +0  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8C0201000048FF0425101C56038139101100000F85000000004C8B79084983FF01720741813F900F00000F85000000004839D30F8C0000000041BF010000004901DF0F80000000004C8B71204C8B2D6CFFFFFF4D39EE0F85000000004C8B69104C8B711841817D00100A01000F85000000004D8B650841813E101100000F85000000004D8B56084983FA01720741813A900F00000F8500000000488B0C25F091F900488D5130483B14251092F9000F877900000048891425F091F90048C701201600004C8951084C8B1519FFFFFF4C8951204C8961104C8971184C8979284C89AD3001000048898D3801000049BBF012BFB64E7F000041FFE366666666662E0F1F84000000000048C7442408FFFFFF0049BB1877BFB64E7F00004C895D204D8D9BD80BFFFF41FFD3E9D8FEFFFF49BBB877BFB64E7F00004C895D204D8D9B3813FFFF41FFD3E972FFFFFFFF3547FEFFFF49BB2877BFB64E7F000041534D8D9BD808FFFF41FFE3FF3533FEFFFF49BB3877BFB64E7F000041534D8D9BC808FFFF41FFE3FF351FFEFFFF49BB4877BFB64E7F000041534D8D9BB808FFFF41FFE3FF350BFEFFFF49BB5877BFB64E7F000041534D8D9BA808FFFF41FFE3FF35F7FDFFFF49BB6877BFB64E7F000041534D8D9B9808FFFF41FFE3FF35EBFDFFFF49BB7877BFB64E7F000041534D8D9B8808FFFF41FFE3FF35D7FDFFFF49BB8877BFB64E7F000041534D8D9B7808FFFF41FFE3FF35C3FDFFFF49BB9877BFB64E7F000041534D8D9B6808FFFF41FFE3FF35AFFDFFFF49BBA877BFB64E7F000041534D8D9B5808FFFF41FFE3
[3e4c20e99b4908e] jit-backend-dump}
[3e4c20e99b52857] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf7834 +0  20000000
[3e4c20e99b53b2e] jit-backend-dump}
[3e4c20e99b57473] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf7945 +0  20000000
[3e4c20e99b581fd] jit-backend-dump}
[3e4c20e99b5b42f] {jit-backend-addr
bridge out of Guard 0x7f4eb71884a0 has address 0x7f4eb6bf7830 to 0x7f4eb6bf7940
       gc table: 0x7f4eb6bf77d0
    jump target: 0x7f4eb6bf7830
         resops: 0x7f4eb6bf783e
       failures: 0x7f4eb6bf7940
            end: 0x7f4eb6bf7a7f
[3e4c20e99b5d530] jit-backend-addr}
[3e4c20e99b609ea] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf784e +0  31010000
[3e4c20e99b617dc] jit-backend-dump}
[3e4c20e99b64b21] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf7865 +0  36010000
[3e4c20e99b65843] jit-backend-dump}
[3e4c20e99b68a69] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf786e +0  65010000
[3e4c20e99b6973e] jit-backend-dump}
[3e4c20e99b6c8c5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf787d +0  72010000
[3e4c20e99b6d59a] jit-backend-dump}
[3e4c20e99b7065d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf7891 +0  7A010000
[3e4c20e99b71338] jit-backend-dump}
[3e4c20e99b743c4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf78a7 +0  80010000
[3e4c20e99b7508d] jit-backend-dump}
[3e4c20e99b7812f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf78b8 +0  8B010000
[3e4c20e99b78e41] jit-backend-dump}
[3e4c20e99b7bf01] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf78cf +0  90010000
[3e4c20e99b7cbc1] jit-backend-dump}
[3e4c20e99b7fef1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf58a8 +0  841F0000
[3e4c20e99b80bc0] jit-backend-dump}
[3e4c20e99b84acd] jit-backend}
[3e4c20e99b8860b] {jit-log-opt-bridge
# bridge out of Guard 0x7f4eb71884a0 with 27 ops
[p0, p1, i2, i3]
+118: guard_class(p0, 16435920, descr=<Guard0x384a6e0>) [p0, p1, i2, i3]
+130: p5 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+134: guard_nonnull_class(p5, ConstClass(ForwardLink), descr=<Guard0x384a740>) [p0, p1, i2, i3]
debug_merge_point(0, 0, '(max AppRand8 AppRand10)')
+153: guard_not_invalidated(descr=<Guard0x7f4eb6d36698>) [p0, p1, i2, i3]
+153: i7 = int_lt(i3, i2)
+156: guard_false(i7, descr=<Guard0x7f4eb6d366e0>) [p0, p1, i2, i3]
debug_merge_point(0, 0, '(+ 1 AppRand11)')
+162: i9 = int_add_ovf(1, i3)
+171: guard_no_overflow(descr=<Guard0x7f4eb6d36728>) [p0, p1, i2, i3]
+177: p10 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+188: guard_value(p10, ConstPtr(ptr11), descr=<Guard0x7f4eb6d36770>) [p0, p1, i2, i3]
+197: p12 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+201: p13 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+205: guard_class(p12, 16499664, descr=<Guard0x7f4eb6d367b8>) [p0, p1, i2, i3]
+219: p15 = getfield_gc_r(p12, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+223: guard_class(p13, 16435920, descr=<Guard0x7f4eb6d36800>) [p0, p1, i2, i3]
+236: p17 = getfield_gc_r(p13, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+240: guard_nonnull_class(p17, ConstClass(ForwardLink), descr=<Guard0x384a7a0>) [p0, p1, i2, i3]
debug_merge_point(0, 0, '(vector-ref t 1) from (+ 1 AppRand11)')
+259: p19 = new_with_vtable(descr=<SizeDescr 48>)
+300: setfield_gc(p19, p17, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+311: setfield_gc(p19, ConstPtr(ptr20), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+315: setfield_gc(p19, p15, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+319: setfield_gc(p19, p13, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+323: setfield_gc(p19, i9, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+327: jump(p12, p19, descr=TargetToken(80544176))
+368: --end of the loop--
[3e4c20e99ba3a30] jit-log-opt-bridge}
[3e4c20e99cb9423] {jit-backend
[3e4c20e99d103a7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf7bf0 +0  0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004881ECB800000048896C24604889B424B0000000488D8424980000004C8B56384C89104889600848C7401003000000488946384889FD48895C24684C896424704C896C24784C89B424800000004C89BC2488000000488B1C258893F90048C7030100000048896B084883C31048891C258893F900488B0425704A5E014829E0483B0425784A5E010F87C301000048FF0425703F0D04488B8D300100008139100A01000F8500000000488B41104883F80172068138F08C00000F8500000000488B50084883FA010F8E00000000488B5018813AF0EE02000F8500000000488B5010488B4218488B9538010000813A201600000F8500000000488B5A20488B356EFEFFFF4839F30F8500000000488B5A10488B7A284C8B4218418138101100000F85000000004D8B48084983F9017207418139900F00000F8500000000813B100A01000F85000000004C8B4B104983F9017207418139503601000F85000000004D8B51084C8B2537FEFFFF4D39E20F85000000004D8B61104C39E30F85000000004883F8000F85000000004883FF000F8C000000004883C7010F8000000000498B40204C8B2528FEFFFF4C39E00F85000000004D8B6010498B401841813C24100A01000F85000000004D8B4424088138201600000F8500000000488B58084883FB017206813B900F00000F8500000000488B0C25F091F900488D5130483B14251092F9000F875A00000048891425F091F90048C70120160000488971204C8941104889792848894118488959084C89A53001000048898D3801000049BBF012BFB64E7F000041FFE3662E0F1F84000000000049BB5097BEB64E7F000041FFD3E92BFEFFFF49BBD87BBFB64E7F00004C895D204D8D9B180FFFFF41FFD3E991FFFFFFFF35BBFCFFFF49BB987ABFB64E7F000041534D8D9B6805FFFF41FFE3FF35A7FCFFFF49BBA87ABFB64E7F000041534D8D9B5805FFFF41FFE3FF3593FCFFFF49BBB87ABFB64E7F000041534D8D9B4805FFFF41FFE3FF357FFCFFFF49BBC87ABFB64E7F000041534D8D9B3805FFFF41FFE3FF356BFCFFFF49BBD87ABFB64E7F000041534D8D9B2805FFFF41FFE3FF3557FCFFFF49BBE87ABFB64E7F000041534D8D9B1805FFFF41FFE3FF354BFCFFFF49BBF87ABFB64E7F000041534D8D9B0805FFFF41FFE3FF3537FCFFFF49BB087BBFB64E7F000041534D8D9BF804FFFF41FFE3FF3523FCFFFF49BB187BBFB64E7F000041534D8D9BE804FFFF41FFE3FF350FFCFFFF49BB287BBFB64E7F000041534D8D9BD804FFFF41FFE3FF35FBFBFFFF49BB387BBFB64E7F000041534D8D9BC804FFFF41FFE3FF35EFFBFFFF49BB487BBFB64E7F000041534D8D9BB804FFFF41FFE3FF35DBFBFFFF49BB587BBFB64E7F000041534D8D9BA804FFFF41FFE3FF35C7FBFFFF49BB687BBFB64E7F000041534D8D9B9804FFFF41FFE3FF35B3FBFFFF49BB787BBFB64E7F000041534D8D9B8804FFFF41FFE3FF359FFBFFFF49BB887BBFB64E7F000041534D8D9B7804FFFF41FFE3FF3593FBFFFF49BB987BBFB64E7F000041534D8D9B6804FFFF41FFE3FF357FFBFFFF49BBA87BBFB64E7F000041534D8D9B5804FFFF41FFE3FF356BFBFFFF49BBB87BBFB64E7F000041534D8D9B4804FFFF41FFE3FF3557FBFFFF49BBC87BBFB64E7F000041534D8D9B3804FFFF41FFE3
[3e4c20e99d18674] jit-backend-dump}
[3e4c20e99d22423] {jit-backend-addr
Loop 45 ((vector-ref t 1) from (height AppRand7)) has address 0x7f4eb6bf7d3d to 0x7f4eb6bf7f00 (bootstrap 0x7f4eb6bf7cb0)
       gc table: 0x7f4eb6bf7bf0
       function: 0x7f4eb6bf7cb0
         resops: 0x7f4eb6bf7d3d
       failures: 0x7f4eb6bf7f00
            end: 0x7f4eb6bf815f
[3e4c20e99d24e0d] jit-backend-addr}
[3e4c20e99d28c85] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf7d54 +0  F3010000
[3e4c20e99d29ca0] jit-backend-dump}
[3e4c20e99d2d06f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf7d6a +0  F9010000
[3e4c20e99d2ddf9] jit-backend-dump}
[3e4c20e99d30fba] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf7d78 +0  07020000
[3e4c20e99d31d1f] jit-backend-dump}
[3e4c20e99d34ee6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf7d88 +0  13020000
[3e4c20e99d35c23] jit-backend-dump}
[3e4c20e99d38e8c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf7da3 +0  14020000
[3e4c20e99d39b7d] jit-backend-dump}
[3e4c20e99d3cce2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf7db7 +0  1C020000
[3e4c20e99d3d9d3] jit-backend-dump}
[3e4c20e99d40ab4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf7dd0 +0  1F020000
[3e4c20e99d417a5] jit-backend-dump}
[3e4c20e99d44834] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf7de7 +0  24020000
[3e4c20e99d45512] jit-backend-dump}
[3e4c20e99d485dc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf7df3 +0  34020000
[3e4c20e99d492c6] jit-backend-dump}
[3e4c20e99d4c358] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf7e0a +0  39020000
[3e4c20e99d4d04c] jit-backend-dump}
[3e4c20e99d500b0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf7e1e +0  41020000
[3e4c20e99d50d9b] jit-backend-dump}
[3e4c20e99d540f3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf7e2b +0  50020000
[3e4c20e99d54e0b] jit-backend-dump}
[3e4c20e99d57f98] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf7e35 +0  62020000
[3e4c20e99d58c83] jit-backend-dump}
[3e4c20e99d5bd1e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf7e3f +0  74020000
[3e4c20e99d5ca0f] jit-backend-dump}
[3e4c20e99d5fab3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf7e49 +0  86020000
[3e4c20e99d607b9] jit-backend-dump}
[3e4c20e99d6384b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf7e5d +0  8E020000
[3e4c20e99d64536] jit-backend-dump}
[3e4c20e99d675b9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf7e73 +0  94020000
[3e4c20e99d68297] jit-backend-dump}
[3e4c20e99d6b32f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf7e84 +0  9F020000
[3e4c20e99d6c014] jit-backend-dump}
[3e4c20e99d6f087] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf7e9a +0  A5020000
[3e4c20e99d6fd75] jit-backend-dump}
[3e4c20e99d73908] jit-backend}
[3e4c20e99d774c6] {jit-log-opt-loop
# Loop 45 ((vector-ref t 1) from (height AppRand7)) : entry bridge with 61 ops
[p0, p1]
debug_merge_point(0, 0, '(vector-ref t 1) from (height AppRand7)')
+341: guard_not_invalidated(descr=<Guard0x384a800>) [p1, p0]
+341: guard_class(p0, 16499664, descr=<Guard0x7f4eb6d36848>) [p1, p0]
+360: p3 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+364: guard_nonnull_class(p3, ConstClass(W_Vector), descr=<Guard0x384a860>) [p1, p0]
+382: i5 = getfield_gc_i(p3, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+386: i7 = int_lt(1, i5)
+390: guard_true(i7, descr=<Guard0x7f4eb6d36890>) [p1, p0]
+396: p8 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+400: guard_class(p8, 16623792, descr=<Guard0x7f4eb6d368d8>) [p1, p0]
+412: p10 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+416: i12 = getarrayitem_gc_i(p10, 1, descr=<ArrayS 8>)
+420: guard_class(p1, 16437216, descr=<Guard0x7f4eb6d36920>) [p1, p0]
+439: p14 = getfield_gc_r(p1, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+450: guard_value(p14, ConstPtr(ptr15), descr=<Guard0x7f4eb6d36968>) [p1, p0]
+459: p16 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+463: i17 = getfield_gc_i(p1, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+467: p18 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))')
+471: guard_class(p18, 16435920, descr=<Guard0x7f4eb6d369b0>) [p1, p0]
+484: p20 = getfield_gc_r(p18, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+488: guard_nonnull_class(p20, ConstClass(ForwardLink), descr=<Guard0x384a8c0>) [p1, p0]
debug_merge_point(0, 0, 'AppRand8')
+507: guard_class(p16, 16499664, descr=<Guard0x7f4eb6d369f8>) [p1, p0]
+519: p23 = getfield_gc_r(p16, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(height AppRand9)')
+519: p24 = getfield_gc_r(p16, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+523: guard_nonnull_class(p24, 16510992, descr=<Guard0x384a920>) [p1, p0]
+542: p26 = getfield_gc_r(p24, descr=<FieldP pycket.values.W_Closure.inst_caselam 8 pure>)
+553: guard_value(p26, ConstPtr(ptr27), descr=<Guard0x7f4eb6d36a40>) [p1, p0]
+562: p28 = getfield_gc_r(p24, descr=<FieldP rpython.tool.pairtype.W_ClosureSize1.inst__envs_0 16 pure>)
+566: i29 = instance_ptr_eq(p16, p28)
+569: guard_true(i29, descr=<Guard0x7f4eb6d36a88>) [p1, p0]
debug_merge_point(0, 0, '(if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height AppRand9)')
+575: i31 = int_eq(i12, 0)
+579: guard_true(i31, descr=<Guard0x7f4eb6d36ad0>) [p1, p0]
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)) from (height AppRand9)')
debug_merge_point(0, 0, '(max AppRand8 AppRand10)')
+585: i33 = int_lt(i17, 0)
+589: guard_false(i33, descr=<Guard0x7f4eb6d36b18>) [p1, p0]
debug_merge_point(0, 0, '(+ 1 AppRand11)')
+595: i35 = int_add_ovf(1, i17)
+599: guard_no_overflow(descr=<Guard0x7f4eb6d36b60>) [p1, p0]
+605: p36 = getfield_gc_r(p18, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+616: guard_value(p36, ConstPtr(ptr37), descr=<Guard0x7f4eb6d36ba8>) [p1, p0]
+625: p38 = getfield_gc_r(p18, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+629: p39 = getfield_gc_r(p18, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+633: guard_class(p38, 16499664, descr=<Guard0x7f4eb6d36bf0>) [p1, p0]
+647: p41 = getfield_gc_r(p38, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+652: guard_class(p39, 16437216, descr=<Guard0x7f4eb6d36c38>) [p1, p0]
+664: p43 = getfield_gc_r(p39, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+668: guard_nonnull_class(p43, ConstClass(ForwardLink), descr=<Guard0x384a980>) [p1, p0]
debug_merge_point(0, 0, '(vector-ref t 1) from (+ 1 AppRand11)')
+686: p45 = new_with_vtable(descr=<SizeDescr 48>)
+727: setfield_gc(p45, ConstPtr(ptr46), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+731: setfield_gc(p45, p41, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+735: setfield_gc(p45, i35, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+739: setfield_gc(p45, p39, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+743: setfield_gc(p45, p43, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+747: jump(p38, p45, descr=TargetToken(80544176))
+784: --end of the loop--
[3e4c20e99daaf4a] jit-log-opt-loop}
[3e4c20e99ee49e3] {jit-backend
[3e4c20e99f35650] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf82d0 +0  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8CC201000048FF0425B07AAA038139B01E01000F85000000004C8B71104983FE000F850000000041813F101100000F85000000004D8B77204C8B2D10FFFFFF4D39EE0F85000000004D8B77104D8B671841813E100A01000F85000000004D8B560841813C24101100000F85000000004D8B4C24084983F9017207418139900F00000F85000000004D8B4E104983F9017207418139F08C00000F85000000004D8B71084983FE010F8E000000004D8B711841813EF0EE02000F85000000004D8B71104D8B4E1841813A100A01000F85000000004D8B72104983FE01720741813E503601000F85000000004D8B4608488B3DB3FEFFFF4939F80F8500000000498B7E104939FA0F85000000004983F9000F85000000004D8B4C24204D39E90F85000000004D8B6C24104D8B4C241841817D00100A01000F85000000004D8B6508418139201600000F8500000000498B79084883FF017206813F900F00000F8500000000488B0C25F091F900488D5130483B14251092F9000F877200000048891425F091F90048C70120160000488B1556FEFFFF488951204C8961104C8949184889790848C74128010000004C89AD3001000048898D3801000049BBF012BFB64E7F000041FFE30F1F0048C7442408FFFFFF0049BB6881BFB64E7F00004C895D204D8D9B8801FFFF41FFD3E918FEFFFF49BBB882BFB64E7F00004C895D204D8D9B3808FFFF41FFD3E979FFFFFFFF3527FDFFFF49BB7881BFB64E7F000041534D8D9B88FEFEFF41FFE3FF3513FDFFFF49BB8881BFB64E7F000041534D8D9B78FEFEFF41FFE3FF35FFFCFFFF49BB9881BFB64E7F000041534D8D9B68FEFEFF41FFE3FF35F3FCFFFF49BBA881BFB64E7F000041534D8D9B58FEFEFF41FFE3FF35DFFCFFFF49BBB881BFB64E7F000041534D8D9B48FEFEFF41FFE3FF35CBFCFFFF49BBC881BFB64E7F000041534D8D9B38FEFEFF41FFE3FF35B7FCFFFF49BBD881BFB64E7F000041534D8D9B28FEFEFF41FFE3FF35A3FCFFFF49BBE881BFB64E7F000041534D8D9B18FEFEFF41FFE3FF358FFCFFFF49BBF881BFB64E7F000041534D8D9B08FEFEFF41FFE3FF357BFCFFFF49BB0882BFB64E7F000041534D8D9BF8FDFEFF41FFE3FF3567FCFFFF49BB1882BFB64E7F000041534D8D9BE8FDFEFF41FFE3FF3553FCFFFF49BB2882BFB64E7F000041534D8D9BD8FDFEFF41FFE3FF353FFCFFFF49BB3882BFB64E7F000041534D8D9BC8FDFEFF41FFE3FF3533FCFFFF49BB4882BFB64E7F000041534D8D9BB8FDFEFF41FFE3FF351FFCFFFF49BB5882BFB64E7F000041534D8D9BA8FDFEFF41FFE3FF350BFCFFFF49BB6882BFB64E7F000041534D8D9B98FDFEFF41FFE3FF35F7FBFFFF49BB7882BFB64E7F000041534D8D9B88FDFEFF41FFE3FF35E3FBFFFF49BB8882BFB64E7F000041534D8D9B78FDFEFF41FFE3FF35CFFBFFFF49BB9882BFB64E7F000041534D8D9B68FDFEFF41FFE3FF35BBFBFFFF49BBA882BFB64E7F000041534D8D9B58FDFEFF41FFE3
[3e4c20e99f3cea2] jit-backend-dump}
[3e4c20e99f476cf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8394 +0  20000000
[3e4c20e99f48afb] jit-backend-dump}
[3e4c20e99f4c913] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8565 +0  20000000
[3e4c20e99f4d7aa] jit-backend-dump}
[3e4c20e99f50b76] {jit-backend-addr
bridge out of Guard 0x7f4eb8aeb538 has address 0x7f4eb6bf8390 to 0x7f4eb6bf8560
       gc table: 0x7f4eb6bf82d0
    jump target: 0x7f4eb6bf8390
         resops: 0x7f4eb6bf839e
       failures: 0x7f4eb6bf8560
            end: 0x7f4eb6bf87d3
[3e4c20e99f52d25] jit-backend-addr}
[3e4c20e99f56098] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf83ae +0  F1010000
[3e4c20e99f56e2b] jit-backend-dump}
[3e4c20e99f5a14f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf83bc +0  FF010000
[3e4c20e99f5aeb4] jit-backend-dump}
[3e4c20e99f5e0af] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf83c9 +0  0E020000
[3e4c20e99f5edbb] jit-backend-dump}
[3e4c20e99f61f7c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf83dd +0  16020000
[3e4c20e99f62c14] jit-backend-dump}
[3e4c20e99f65dc0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf83f2 +0  1D020000
[3e4c20e99f66a6d] jit-backend-dump}
[3e4c20e99f69bfd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8404 +0  27020000
[3e4c20e99f6a8a1] jit-backend-dump}
[3e4c20e99f6da53] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf841c +0  2B020000
[3e4c20e99f6e700] jit-backend-dump}
[3e4c20e99f71951] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8433 +0  4C020000
[3e4c20e99f7260b] jit-backend-dump}
[3e4c20e99f757bf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8441 +0  5A020000
[3e4c20e99f76498] jit-backend-dump}
[3e4c20e99f7965f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8452 +0  65020000
[3e4c20e99f7a30f] jit-backend-dump}
[3e4c20e99f7d50a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8467 +0  6C020000
[3e4c20e99f7e1c1] jit-backend-dump}
[3e4c20e99f81363] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf847e +0  71020000
[3e4c20e99f81ffe] jit-backend-dump}
[3e4c20e99f851bf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8492 +0  79020000
[3e4c20e99f85e7f] jit-backend-dump}
[3e4c20e99f89034] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf849f +0  88020000
[3e4c20e99f89ce1] jit-backend-dump}
[3e4c20e99f8ceca] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf84a9 +0  9A020000
[3e4c20e99f8db77] jit-backend-dump}
[3e4c20e99f90d2f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf84b7 +0  A8020000
[3e4c20e99f919c4] jit-backend-dump}
[3e4c20e99f94b2c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf84cf +0  AC020000
[3e4c20e99f957d6] jit-backend-dump}
[3e4c20e99f98988] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf84e0 +0  B7020000
[3e4c20e99f99620] jit-backend-dump}
[3e4c20e99f9c7bc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf84f6 +0  BD020000
[3e4c20e99f9d48b] jit-backend-dump}
[3e4c20e99fa093d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf3eb7 +0  D5440000
[3e4c20e99fa1606] jit-backend-dump}
[3e4c20e99fa55ef] jit-backend}
[3e4c20e99fa91aa] {jit-log-opt-bridge
# bridge out of Guard 0x7f4eb8aeb538 with 62 ops
[p0, p1]
+214: guard_class(p1, 16504944, descr=<Guard0x384a9e0>) [p0, p1]
+226: i3 = getfield_gc_i(p1, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+230: i5 = int_eq(i3, 0)
+234: guard_true(i5, descr=<Guard0x7f4eb6d36c80>) [p0, p1]
debug_merge_point(0, 0, '0')
+240: guard_class(p0, 16435920, descr=<Guard0x7f4eb6d36cc8>) [p0, p1]
+253: p7 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+264: guard_value(p7, ConstPtr(ptr8), descr=<Guard0x7f4eb6d36d10>) [p0, p1]
+273: p9 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+277: p10 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+281: guard_class(p9, 16499664, descr=<Guard0x7f4eb6d36d58>) [p0, p1]
+294: p12 = getfield_gc_r(p9, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+298: guard_class(p10, 16435920, descr=<Guard0x7f4eb6d36da0>) [p0, p1]
+312: p14 = getfield_gc_r(p10, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+317: guard_nonnull_class(p14, ConstClass(ForwardLink), descr=<Guard0x384aa40>) [p0, p1]
debug_merge_point(0, 0, '(vector-ref t 1) from (height AppRand7)')
+336: guard_not_invalidated(descr=<Guard0x7f4eb6d36de8>) [p0, p1]
+336: p16 = getfield_gc_r(p9, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+340: guard_nonnull_class(p16, ConstClass(W_Vector), descr=<Guard0x384aaa0>) [p0, p1]
+359: i18 = getfield_gc_i(p16, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+363: i20 = int_lt(1, i18)
+367: guard_true(i20, descr=<Guard0x7f4eb6d36e30>) [p0, p1]
+373: p21 = getfield_gc_r(p16, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+377: guard_class(p21, 16623792, descr=<Guard0x7f4eb6d36e78>) [p0, p1]
+390: p23 = getfield_gc_r(p16, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+394: i25 = getarrayitem_gc_i(p23, 1, descr=<ArrayS 8>)
debug_merge_point(0, 0, '(let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))')
debug_merge_point(0, 0, 'AppRand8')
+398: guard_class(p12, 16499664, descr=<Guard0x7f4eb6d36ec0>) [p0, p1]
+411: p27 = getfield_gc_r(p12, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(height AppRand9)')
+411: p28 = getfield_gc_r(p12, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+415: guard_nonnull_class(p28, 16510992, descr=<Guard0x384ab00>) [p0, p1]
+434: p30 = getfield_gc_r(p28, descr=<FieldP pycket.values.W_Closure.inst_caselam 8 pure>)
+445: guard_value(p30, ConstPtr(ptr31), descr=<Guard0x7f4eb6d36f08>) [p0, p1]
+454: p32 = getfield_gc_r(p28, descr=<FieldP rpython.tool.pairtype.W_ClosureSize1.inst__envs_0 16 pure>)
+458: i33 = instance_ptr_eq(p12, p32)
+461: guard_true(i33, descr=<Guard0x7f4eb6d36f98>) [p0, p1]
debug_merge_point(0, 0, '(if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height AppRand9)')
+467: i35 = int_eq(i25, 0)
+471: guard_true(i35, descr=<Guard0x7f4eb6d37028>) [p0, p1]
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)) from (height AppRand9)')
debug_merge_point(0, 0, '(max AppRand8 AppRand10)')
debug_merge_point(0, 0, '(+ 1 AppRand11)')
+477: p36 = getfield_gc_r(p10, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+482: guard_value(p36, ConstPtr(ptr37), descr=<Guard0x7f4eb6d37070>) [p0, p1]
+491: p38 = getfield_gc_r(p10, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+496: p39 = getfield_gc_r(p10, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+501: guard_class(p38, 16499664, descr=<Guard0x7f4eb6d370b8>) [p0, p1]
+515: p41 = getfield_gc_r(p38, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+519: guard_class(p39, 16437216, descr=<Guard0x7f4eb6d37100>) [p0, p1]
+532: p43 = getfield_gc_r(p39, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+536: guard_nonnull_class(p43, ConstClass(ForwardLink), descr=<Guard0x384ab60>) [p0, p1]
debug_merge_point(0, 0, '(vector-ref t 1) from (+ 1 AppRand11)')
+554: p45 = new_with_vtable(descr=<SizeDescr 48>)
+602: setfield_gc(p45, ConstPtr(ptr46), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+606: setfield_gc(p45, p41, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+610: setfield_gc(p45, p39, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+614: setfield_gc(p45, p43, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+618: setfield_gc(p45, 1, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+626: jump(p38, p45, descr=TargetToken(80544176))
+656: --end of the loop--
[3e4c20e99fe88f2] jit-log-opt-bridge}
[3e4c20e9ab7bb96] {jit-backend
[3e4c20e9ac0cdf3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8a
[3e4c20e9ac17b50] jit-backend-dump}
[3e4c20e9ac22cc2] {jit-backend-addr
Loop 55 ((vector-ref t5265 1) from (+ 1 AppRand16)) has address 0x7f4eb6bf8bbd to 0x7f4eb6bf8e80 (bootstrap 0x7f4eb6bf8b30)
       gc table: 0x7f4eb6bf8a10
       function: 0x7f4eb6bf8b30
         resops: 0x7f4eb6bf8bbd
       failures: 0x7f4eb6bf8e80
            end: 0x7f4eb6bf924b
[3e4c20e9ac2588a] jit-backend-addr}
[3e4c20e9ac29da3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8be7 +0  E0020000
[3e4c20e9ac2b044] jit-backend-dump}
[3e4c20e9ac2e639] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8bfd +0  E6020000
[3e4c20e9ac2f4ca] jit-backend-dump}
[3e4c20e9ac3281f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8c0b +0  F4020000
[3e4c20e9ac3356e] jit-backend-dump}
[3e4c20e9ac36714] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8c1b +0  00030000
[3e4c20e9ac373f5] jit-backend-dump}
[3e4c20e9ac3a566] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8c36 +0  01030000
[3e4c20e9ac3b279] jit-backend-dump}
[3e4c20e9ac3e418] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8c42 +0  11030000
[3e4c20e9ac3f0f6] jit-backend-dump}
[3e4c20e9ac422ae] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8c56 +0  19030000
[3e4c20e9ac42f9c] jit-backend-dump}
[3e4c20e9ac4610d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8c6e +0  1D030000
[3e4c20e9ac46e16] jit-backend-dump}
[3e4c20e9ac49f66] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8c85 +0  22030000
[3e4c20e9ac4ac88] jit-backend-dump}
[3e4c20e9ac4dde1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8c91 +0  32030000
[3e4c20e9ac4eabc] jit-backend-dump}
[3e4c20e9ac51bb0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8cac +0  33030000
[3e4c20e9ac528a1] jit-backend-dump}
[3e4c20e9ac559db] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8cc0 +0  3B030000
[3e4c20e9ac566f4] jit-backend-dump}
[3e4c20e9ac59812] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8ccd +0  4A030000
[3e4c20e9ac5a506] jit-backend-dump}
[3e4c20e9ac5d653] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8cdb +0  58030000
[3e4c20e9ac5e38d] jit-backend-dump}
[3e4c20e9ac61490] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8ced +0  62030000
[3e4c20e9ac62193] jit-backend-dump}
[3e4c20e9ac652c8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8d03 +0  68030000
[3e4c20e9ac65fd7] jit-backend-dump}
[3e4c20e9ac6910e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8d11 +0  76030000
[3e4c20e9ac69e14] jit-backend-dump}
[3e4c20e9ac6cf36] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8d28 +0  7B030000
[3e4c20e9ac6dc1b] jit-backend-dump}
[3e4c20e9ac70d24] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8d3a +0  85030000
[3e4c20e9ac71a2a] jit-backend-dump}
[3e4c20e9ac74bb4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8d44 +0  97030000
[3e4c20e9ac758b4] jit-backend-dump}
[3e4c20e9ac78a50] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8d52 +0  A5030000
[3e4c20e9ac7977e] jit-backend-dump}
[3e4c20e9ac7c964] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8d7e +0  B1030000
[3e4c20e9ac7d661] jit-backend-dump}
[3e4c20e9ac80789] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8d91 +0  BA030000
[3e4c20e9ac81492] jit-backend-dump}
[3e4c20e9ac8457d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8d9f +0  C8030000
[3e4c20e9ac8526a] jit-backend-dump}
[3e4c20e9ac88377] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8daf +0  D4030000
[3e4c20e9ac89080] jit-backend-dump}
[3e4c20e9ac8c13d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8dc4 +0  DB030000
[3e4c20e9ac8ce43] jit-backend-dump}
[3e4c20e9ac8ff31] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8dd2 +0  E9030000
[3e4c20e9ac90c2b] jit-backend-dump}
[3e4c20e9ac93d4d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8de2 +0  F5030000
[3e4c20e9ac94a2e] jit-backend-dump}
[3e4c20e9ac97b3e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8df4 +0  FF030000
[3e4c20e9ac98844] jit-backend-dump}
[3e4c20e9ac9b966] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8dfe +0  11040000
[3e4c20e9ac9c650] jit-backend-dump}
[3e4c20e9ac9f76f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8e0c +0  1F040000
[3e4c20e9aca0460] jit-backend-dump}
[3e4c20e9aca408c] jit-backend}
[3e4c20e9aca7ebd] {jit-log-opt-loop
# Loop 55 ((vector-ref t5265 1) from (+ 1 AppRand16)) : loop with 140 ops
[p0, p1]
+437: label(p0, p1, descr=TargetToken(80547776))
+456: guard_not_invalidated(descr=<Guard0x384abc0>) [p1, p0]
+456: guard_class(p0, 16499664, descr=<Guard0x7f4eb6d37148>) [p1, p0]
+475: p3 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+479: guard_nonnull_class(p3, ConstClass(W_Vector), descr=<Guard0x384ac20>) [p1, p0]
+497: i5 = getfield_gc_i(p3, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+501: i7 = int_lt(1, i5)
+505: guard_true(i7, descr=<Guard0x7f4eb6d37190>) [p1, p0]
+511: p8 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+515: guard_class(p8, 16622984, descr=<Guard0x7f4eb6d371d8>) [p1, p0]
+527: p10 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+531: p12 = getarrayitem_gc_r(p10, 1, descr=<ArrayP 8>)
+535: guard_class(p1, 16437216, descr=<Guard0x7f4eb6d37220>) [p1, p0]
+554: guard_class(p12, ConstClass(W_Vector), descr=<Guard0x7f4eb6d37268>) [p1, p0]
+566: p15 = getfield_gc_r(p1, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+577: guard_value(p15, ConstPtr(ptr16), descr=<Guard0x7f4eb6d372b0>) [p1, p0]
+586: p17 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+590: i18 = getfield_gc_i(p1, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+594: p19 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))')
+598: guard_class(p19, 16437216, descr=<Guard0x7f4eb6d372f8>) [p1, p0]
+610: p21 = getfield_gc_r(p19, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+614: guard_nonnull_class(p21, ConstClass(ForwardLink), descr=<Guard0x384ac80>) [p1, p0]
debug_merge_point(0, 0, 'AppRand13')
+633: guard_class(p17, 16499664, descr=<Guard0x7f4eb6d37340>) [p1, p0]
+645: p24 = getfield_gc_r(p17, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(shortestPath AppRand14)')
+649: p25 = getfield_gc_r(p17, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+653: guard_nonnull_class(p25, 16510992, descr=<Guard0x384ace0>) [p1, p0]
+672: p27 = getfield_gc_r(p25, descr=<FieldP pycket.values.W_Closure.inst_caselam 8 pure>)
+683: guard_value(p27, ConstPtr(ptr28), descr=<Guard0x7f4eb6d37388>) [p1, p0]
+692: p29 = getfield_gc_r(p25, descr=<FieldP rpython.tool.pairtype.W_ClosureSize1.inst__envs_0 16 pure>)
+696: i30 = instance_ptr_eq(p17, p29)
+699: guard_true(i30, descr=<Guard0x7f4eb6d373d0>) [p1, p0]
debug_merge_point(0, 0, '(if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath AppRand14)')
debug_merge_point(0, 0, '(let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))')
debug_merge_point(0, 0, '(vector-ref t5265 0)')
+705: i31 = getfield_gc_i(p12, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+709: i33 = int_lt(0, i31)
+713: guard_true(i33, descr=<Guard0x7f4eb6d37418>) [p1, p0]
+719: p34 = getfield_gc_r(p12, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+723: guard_class(p34, 16622984, descr=<Guard0x7f4eb6d37460>) [p1, p0]
+737: p36 = getfield_gc_r(p12, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+741: p38 = getarrayitem_gc_r(p36, 0, descr=<ArrayP 8>)
+746: guard_class(p38, ConstClass(W_Vector), descr=<Guard0x7f4eb6d374a8>) [p1, p0]
debug_merge_point(0, 0, '(let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16))))')
debug_merge_point(0, 0, '(shortestPath AppRand12)')
debug_merge_point(0, 0, '(if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath AppRand12)')
debug_merge_point(0, 0, '(let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))')
debug_merge_point(0, 0, '(vector-ref t5265 0)')
+759: i40 = getfield_gc_i(p38, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+763: i42 = int_lt(0, i40)
+767: guard_true(i42, descr=<Guard0x7f4eb6d374f0>) [p1, p0]
+773: p43 = getfield_gc_r(p38, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+784: guard_class(p43, 16623792, descr=<Guard0x7f4eb6d37538>) [p1, p0]
+796: p45 = getfield_gc_r(p38, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+800: i47 = getarrayitem_gc_i(p45, 0, descr=<ArrayS 8>)
debug_merge_point(0, 0, '(let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16))))')
debug_merge_point(0, 0, '(shortestPath AppRand12)')
debug_merge_point(0, 0, '(if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath AppRand12)')
+804: i49 = int_eq(i47, 0)
+808: guard_true(i49, descr=<Guard0x7f4eb6d37580>) [p1, p0]
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(vector-ref t5265 1) from (shortestPath AppRand12)')
+814: i51 = int_lt(1, i40)
+818: guard_true(i51, descr=<Guard0x7f4eb6d375c8>) [p1, p0]
+824: i53 = getarrayitem_gc_i(p45, 1, descr=<ArrayS 8>)
debug_merge_point(0, 0, '(let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))')
debug_merge_point(0, 0, 'AppRand13')
debug_merge_point(0, 0, '(shortestPath AppRand14)')
debug_merge_point(0, 0, '(if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath AppRand14)')
+828: i55 = int_eq(i53, 0)
+832: guard_true(i55, descr=<Guard0x7f4eb6d37610>) [p1, p0]
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)) from (shortestPath AppRand14)')
debug_merge_point(0, 0, '(min AppRand13 AppRand15)')
debug_merge_point(0, 0, '(+ 1 AppRand16)')
debug_merge_point(0, 0, '(vector-ref t5265 1) from (+ 1 AppRand16)')
+838: p56 = same_as_r(p24)
+841: label(p17, p12, p21, p24, p19, i18, i31, p36, p25, p56, descr=TargetToken(80547856))
+872: guard_not_invalidated(descr=<Guard0x384ad40>) [p12, i18, p19, p24, p17, p21]
+872: i58 = int_lt(1, i31)
+876: guard_true(i58, descr=<Guard0x7f4eb6d37658>) [p12, i18, p19, p24, p17, p21]
+882: p60 = getarrayitem_gc_r(p36, 1, descr=<ArrayP 8>)
+887: guard_class(p60, ConstClass(W_Vector), descr=<Guard0x7f4eb6d376a0>) [p12, i18, p19, p24, p17, p21]
debug_merge_point(0, 0, '(let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))')
debug_merge_point(0, 0, 'AppRand13')
debug_merge_point(0, 0, '(shortestPath AppRand14)')
debug_merge_point(0, 0, '(if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath AppRand14)')
debug_merge_point(0, 0, '(let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))')
debug_merge_point(0, 0, '(vector-ref t5265 0)')
+901: i62 = getfield_gc_i(p60, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+905: i64 = int_lt(0, i62)
+909: guard_true(i64, descr=<Guard0x7f4eb6d376e8>) [p12, i18, p19, p24, p17, p21]
+915: p65 = getfield_gc_r(p60, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+919: guard_class(p65, 16622984, descr=<Guard0x7f4eb6d37730>) [p12, i18, p19, p24, p17, p21]
+931: p67 = getfield_gc_r(p60, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+935: p69 = getarrayitem_gc_r(p67, 0, descr=<ArrayP 8>)
+939: guard_class(p69, ConstClass(W_Vector), descr=<Guard0x7f4eb6d37778>) [p12, i18, p19, p24, p17, p21]
debug_merge_point(0, 0, '(let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16))))')
debug_merge_point(0, 0, '(shortestPath AppRand12)')
debug_merge_point(0, 0, '(if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath AppRand12)')
debug_merge_point(0, 0, '(let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))')
debug_merge_point(0, 0, '(vector-ref t5265 0)')
+952: i71 = getfield_gc_i(p69, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+956: i73 = int_lt(0, i71)
+960: guard_true(i73, descr=<Guard0x7f4eb6d377c0>) [p12, i18, p19, p24, p17, p21]
+966: p74 = getfield_gc_r(p69, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+970: guard_class(p74, 16623792, descr=<Guard0x7f4eb6d37808>) [p12, i18, p19, p24, p17, p21]
+982: p76 = getfield_gc_r(p69, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+986: i78 = getarrayitem_gc_i(p76, 0, descr=<ArrayS 8>)
debug_merge_point(0, 0, '(let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16))))')
debug_merge_point(0, 0, '(shortestPath AppRand12)')
debug_merge_point(0, 0, '(if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath AppRand12)')
+990: i80 = int_eq(i78, 0)
+994: guard_true(i80, descr=<Guard0x7f4eb6d37850>) [p12, i18, p19, p24, p17, p21]
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(vector-ref t5265 1) from (shortestPath AppRand12)')
+1000: i82 = int_lt(1, i71)
+1004: guard_true(i82, descr=<Guard0x7f4eb6d37898>) [p12, i18, p19, p24, p17, p21]
+1010: i84 = getarrayitem_gc_i(p76, 1, descr=<ArrayS 8>)
debug_merge_point(0, 0, '(let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))')
debug_merge_point(0, 0, 'AppRand13')
debug_merge_point(0, 0, '(shortestPath AppRand14)')
debug_merge_point(0, 0, '(if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath AppRand14)')
+1014: i86 = int_eq(i84, 0)
+1018: guard_true(i86, descr=<Guard0x7f4eb6d378e0>) [p12, i18, p19, p24, p17, p21]
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)) from (shortestPath AppRand14)')
debug_merge_point(0, 0, '(min AppRand13 AppRand15)')
debug_merge_point(0, 0, '(+ 1 AppRand16)')
debug_merge_point(0, 0, '(vector-ref t5265 1) from (+ 1 AppRand16)')
+1024: p87 = new_with_vtable(descr=<SizeDescr 48>)
+1068: i88 = arraylen_gc(p67, descr=<ArrayP 8>)
+1068: setfield_gc(p87, p21, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1072: setfield_gc(p87, p24, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1076: setfield_gc(p87, p19, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1087: setfield_gc(p87, ConstPtr(ptr89), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+1091: setfield_gc(p87, i18, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+1095: jump(p17, p60, p21, p56, p87, 1, i62, p67, p25, p56, descr=TargetToken(80547856))
+1136: --end of the loop--
[3e4c20e9ad0ef2f] jit-log-opt-loop}
[3e4c20e9ae2a3d2] {jit-backend
[3e4c20e9ae6c6cf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf
[3e4c20e9ae73cf4] jit-backend-dump}
[3e4c20e9ae7e384] {jit-backend-addr
Loop 56 ((if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath AppRand14)) has address 0x7f4eb6bf94ad to 0x7f4eb6bf9630 (bootstrap 0x7f4eb6bf9420)
       gc table: 0x7f4eb6bf9380
       function: 0x7f4eb6bf9420
         resops: 0x7f4eb6bf94ad
       failures: 0x7f4eb6bf9630
            end: 0x7f4eb6bf981f
[3e4c20e9ae8111d] jit-backend-addr}
[3e4c20e9ae85333] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf94c4 +0  97010000
[3e4c20e9ae866cc] jit-backend-dump}
[3e4c20e9ae89beb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf94d2 +0  A5010000
[3e4c20e9ae8a9ca] jit-backend-dump}
[3e4c20e9ae8dbed] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf94e5 +0  AE010000
[3e4c20e9ae8e92a] jit-backend-dump}
[3e4c20e9ae919c6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf94f9 +0  B6010000
[3e4c20e9ae926a7] jit-backend-dump}
[3e4c20e9ae9589f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf950d +0  DA010000
[3e4c20e9ae96593] jit-backend-dump}
[3e4c20e9ae995dc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf9523 +0  E0010000
[3e4c20e9ae9a2c3] jit-backend-dump}
[3e4c20e9ae9d2aa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf952d +0  F2010000
[3e4c20e9ae9df8e] jit-backend-dump}
[3e4c20e9aea0f26] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf953a +0  01020000
[3e4c20e9aea1c04] jit-backend-dump}
[3e4c20e9aea4b8f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf954e +0  09020000
[3e4c20e9aea587d] jit-backend-dump}
[3e4c20e9aea87fc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf9564 +0  0F020000
[3e4c20e9aea94c8] jit-backend-dump}
[3e4c20e9aeac45f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf956e +0  21020000
[3e4c20e9aead128] jit-backend-dump}
[3e4c20e9aeb008e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf9582 +0  29020000
[3e4c20e9aeb0d73] jit-backend-dump}
[3e4c20e9aeb3d0d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf9596 +0  31020000
[3e4c20e9aeb49df] jit-backend-dump}
[3e4c20e9aeb7930] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf95a6 +0  3D020000
[3e4c20e9aeb8605] jit-backend-dump}
[3e4c20e9aebb590] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf95bc +0  43020000
[3e4c20e9aebc26f] jit-backend-dump}
[3e4c20e9aebfe39] jit-backend}
[3e4c20e9aec3ba6] {jit-log-opt-loop
# Loop 56 ((if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath AppRand14)) : entry bridge with 51 ops
[p0, p1]
debug_merge_point(0, 0, '(if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath AppRand14)')
+309: guard_class(p0, 16504944, descr=<Guard0x384ada0>) [p1, p0]
+328: i3 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+332: i5 = int_eq(i3, 0)
+336: guard_true(i5, descr=<Guard0x7f4eb6d37928>) [p1, p0]
debug_merge_point(0, 0, '0')
+342: guard_class(p1, 16437216, descr=<Guard0x7f4eb6d37970>) [p1, p0]
+361: p7 = getfield_gc_r(p1, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+372: guard_value(p7, ConstPtr(ptr8), descr=<Guard0x7f4eb6d379b8>) [p1, p0]
+381: p9 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+381: guard_not_invalidated(descr=<Guard0x7f4eb6d37a00>) [p1, p0]
+381: i10 = getfield_gc_i(p1, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+385: p11 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)) from (shortestPath AppRand14)')
+389: guard_class(p11, 16437216, descr=<Guard0x7f4eb6d37a48>) [p1, p0]
+401: p13 = getfield_gc_r(p11, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+405: guard_nonnull_class(p13, ConstClass(ForwardLink), descr=<Guard0x384ae00>) [p1, p0]
debug_merge_point(0, 0, '(min AppRand13 AppRand15)')
+423: i16 = int_lt(i10, 0)
+427: guard_false(i16, descr=<Guard0x7f4eb6d37a90>) [p1, p0]
debug_merge_point(0, 0, '(+ 1 AppRand16)')
+433: p17 = getfield_gc_r(p11, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+437: guard_value(p17, ConstPtr(ptr18), descr=<Guard0x7f4eb6d37ad8>) [p1, p0]
+446: p19 = getfield_gc_r(p11, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+446: i20 = getfield_gc_i(p11, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+450: p21 = getfield_gc_r(p11, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)) from (+ 1 AppRand16)')
+454: guard_class(p21, 16435920, descr=<Guard0x7f4eb6d37b20>) [p1, p0]
+466: p23 = getfield_gc_r(p21, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+470: guard_nonnull_class(p23, ConstClass(ForwardLink), descr=<Guard0x384ae60>) [p1, p0]
debug_merge_point(0, 0, '(min AppRand13 AppRand15)')
+488: i26 = int_lt(i20, 1)
+492: guard_false(i26, descr=<Guard0x7f4eb6d37b68>) [p1, p0]
debug_merge_point(0, 0, '(+ 1 AppRand16)')
+498: p27 = getfield_gc_r(p21, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+509: guard_value(p27, ConstPtr(ptr28), descr=<Guard0x7f4eb6d37bb0>) [p1, p0]
+518: p29 = getfield_gc_r(p21, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+522: p30 = getfield_gc_r(p21, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+526: guard_class(p29, 16499664, descr=<Guard0x7f4eb6d37bf8>) [p1, p0]
+538: p32 = getfield_gc_r(p29, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+542: guard_class(p30, 16437216, descr=<Guard0x7f4eb6d37c40>) [p1, p0]
+554: p34 = getfield_gc_r(p30, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+558: guard_nonnull_class(p34, ConstClass(ForwardLink), descr=<Guard0x384aec0>) [p1, p0]
debug_merge_point(0, 0, '(vector-ref t5265 1) from (+ 1 AppRand16)')
+576: p36 = new_with_vtable(descr=<SizeDescr 48>)
+627: setfield_gc(p36, ConstPtr(ptr37), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+631: setfield_gc(p36, p32, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+635: setfield_gc(p36, 2, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+643: setfield_gc(p36, p30, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+647: setfield_gc(p36, p34, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+651: jump(p29, p36, descr=TargetToken(80547776))
+688: --end of the loop--
[3e4c20e9aeefce6] jit-log-opt-loop}
[3e4c20e9b202457] {jit-backend
[3e4c20e9b25aeb6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf99b0 +0  0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8CF201000048FF0425C0400D048139100A01000F85000000004C8B79104983FF01720741813FF08C00000F85000000004C8BB53801000041813E201600000F85000000004D8B6E084983FD01720841817D00900F00000F85000000004D8B6F084983FD000F8E000000004D8B671841813C24F0EE02000F85000000004D8B67104D8B7C24104C8B510841813A100A01000F85000000004D8B4A104983F9017207418139503601000F85000000004D8B4108488B3DB7FEFFFF4939F80F8500000000498B79104939FA0F85000000004983FF000F85000000004983FD010F8E000000004D8B6C24184983FD000F85000000004D8B6E204C8B25A3FEFFFF4D39E50F85000000004D8B66284D8B6E1841817D00101100000F85000000004D8B7D084983FF01720741813F900F00000F85000000004983FC010F8C000000004D8B65204C8B3D80FEFFFF4D39FC0F85000000004D8B7D104D8B651841813F100A01000F85000000004D8B6F0841813C24201600000F8500000000498B7C24084883FF017206813F900F00000F8500000000488B0C25F091F900488D5130483B14251092F9000F877500000048891425F091F90048C7012016000048897908488B3D2DFEFFFF488979204C89691048C74128020000004C8961184C89BD3001000048898D3801000049BBD08BBFB64E7F000041FFE3660F1F44000048C7442408FFFFFF0049BB3098BFB64E7F00004C895D204D8D9BC0EAFEFF41FFD3E9E8FDFFFF49BBA099BFB64E7F00004C895D204D8D9B50F1FEFF41FFD3E976FFFFFFFF35E7FCFFFF49BB4098BFB64E7F000041534D8D9BC0E7FEFF41FFE3FF35D3FCFFFF49BB5098BFB64E7F000041534D8D9BB0E7FEFF41FFE3FF35BFFCFFFF49BB6098BFB64E7F000041534D8D9BA0E7FEFF41FFE3FF35ABFCFFFF49BB7098BFB64E7F000041534D8D9B90E7FEFF41FFE3FF3597FCFFFF49BB8098BFB64E7F000041534D8D9B80E7FEFF41FFE3FF3583FCFFFF49BB9098BFB64E7F000041534D8D9B70E7FEFF41FFE3FF356FFCFFFF49BBA098BFB64E7F000041534D8D9B60E7FEFF41FFE3FF355BFCFFFF49BBB098BFB64E7F000041534D8D9B50E7FEFF41FFE3FF3547FCFFFF49BBC098BFB64E7F000041534D8D9B40E7FEFF41FFE3FF353BFCFFFF49BBD098BFB64E7F000041534D8D9B30E7FEFF41FFE3FF3527FCFFFF49BBE098BFB64E7F000041534D8D9B20E7FEFF41FFE3FF3513FCFFFF49BBF098BFB64E7F000041534D8D9B10E7FEFF41FFE3FF35FFFBFFFF49BB0099BFB64E7F000041534D8D9B00E7FEFF41FFE3FF35EBFBFFFF49BB1099BFB64E7F000041534D8D9BF0E6FEFF41FFE3FF35DFFBFFFF49BB2099BFB64E7F000041534D8D9BE0E6FEFF41FFE3FF35CBFBFFFF49BB3099BFB64E7F000041534D8D9BD0E6FEFF41FFE3FF35B7FBFFFF49BB4099BFB64E7F000041534D8D9BC0E6FEFF41FFE3FF35A3FBFFFF49BB5099BFB64E7F000041534D8D9BB0E6FEFF41FFE3FF3597FBFFFF49BB6099BFB64E7F000041534D8D9BA0E6FEFF41FFE3FF3583FBFFFF49BB7099BFB64E7F000041534D8D9B90E6FEFF41FFE3FF356FFBFFFF49BB8099BFB64E7F000041534D8D9B80E6FEFF41FFE3FF355BFBFFFF49BB9099BFB64E7F000041534D8D9B70E6FEFF41FFE3
[3e4c20e9b2632ef] jit-backend-dump}
[3e4c20e9b26dfde] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf9a84 +0  20000000
[3e4c20e9b26f737] jit-backend-dump}
[3e4c20e9b273730] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf9c85 +0  20000000
[3e4c20e9b2745c6] jit-backend-dump}
[3e4c20e9b27793d] {jit-backend-addr
bridge out of Guard 0x384ada0 has address 0x7f4eb6bf9a80 to 0x7f4eb6bf9c80
       gc table: 0x7f4eb6bf99b0
    jump target: 0x7f4eb6bf9a80
         resops: 0x7f4eb6bf9a8e
       failures: 0x7f4eb6bf9c80
            end: 0x7f4eb6bf9f2b
[3e4c20e9b279da8] jit-backend-addr}
[3e4c20e9b27d320] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf9a9e +0  21020000
[3e4c20e9b27e149] jit-backend-dump}
[3e4c20e9b28167e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf9ab5 +0  26020000
[3e4c20e9b282414] jit-backend-dump}
[3e4c20e9b2856d0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf9ac9 +0  2E020000
[3e4c20e9b2863bd] jit-backend-dump}
[3e4c20e9b289569] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf9ae1 +0  32020000
[3e4c20e9b28a21c] jit-backend-dump}
[3e4c20e9b28d49e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf9aef +0  5C020000
[3e4c20e9b28e179] jit-backend-dump}
[3e4c20e9b2912de] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf9b01 +0  66020000
[3e4c20e9b291fb7] jit-backend-dump}
[3e4c20e9b2984cf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf9b1b +0  68020000
[3e4c20e9b29934b] jit-backend-dump}
[3e4c20e9b29ca6c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf9b32 +0  6D020000
[3e4c20e9b29d791] jit-backend-dump}
[3e4c20e9b2a09aa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf9b46 +0  75020000
[3e4c20e9b2a16c9] jit-backend-dump}
[3e4c20e9b2a48ca] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf9b53 +0  84020000
[3e4c20e9b2a55f8] jit-backend-dump}
[3e4c20e9b2a8726] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf9b5d +0  96020000
[3e4c20e9b2a942f] jit-backend-dump}
[3e4c20e9b2ac533] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf9b67 +0  A8020000
[3e4c20e9b2ad236] jit-backend-dump}
[3e4c20e9b2b0345] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf9b76 +0  B5020000
[3e4c20e9b2b102a] jit-backend-dump}
[3e4c20e9b2b40e4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf9b8a +0  BD020000
[3e4c20e9b2b4dc2] jit-backend-dump}
[3e4c20e9b2b7eb3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf9ba0 +0  C3020000
[3e4c20e9b2b8bb3] jit-backend-dump}
[3e4c20e9b2bbc4e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf9bb7 +0  C8020000
[3e4c20e9b2bc948] jit-backend-dump}
[3e4c20e9b2bfa0b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf9bc1 +0  DA020000
[3e4c20e9b2c0705] jit-backend-dump}
[3e4c20e9b2c377f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf9bd5 +0  E2020000
[3e4c20e9b2c445d] jit-backend-dump}
[3e4c20e9b2c7557] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf9bea +0  E9020000
[3e4c20e9b2c825d] jit-backend-dump}
[3e4c20e9b2cb2dd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf9bfc +0  F3020000
[3e4c20e9b2cbfb5] jit-backend-dump}
[3e4c20e9b2cf0cb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf9c13 +0  F8020000
[3e4c20e9b2cfdbc] jit-backend-dump}
[3e4c20e9b2d3157] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf94c4 +0  B8050000
[3e4c20e9b2d3edd] jit-backend-dump}
[3e4c20e9b2d7dd8] jit-backend}
[3e4c20e9b2dbb12] {jit-log-opt-bridge
# bridge out of Guard 0x384ada0 with 76 ops
[p0, p1]
+230: guard_class(p1, 16499664, descr=<Guard0x384af80>) [p0, p1]
+242: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+246: guard_nonnull_class(p3, ConstClass(W_Vector), descr=<Guard0x384afe0>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))')
+265: guard_class(p0, 16437216, descr=<Guard0x7f4eb6d37c88>) [p0, p1]
+285: p6 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+289: guard_nonnull_class(p6, ConstClass(ForwardLink), descr=<Guard0x384b040>) [p0, p1]
debug_merge_point(0, 0, '(vector-ref t5265 0)')
+309: guard_not_invalidated(descr=<Guard0x7f4eb6d37cd0>) [p0, p1]
+309: i8 = getfield_gc_i(p3, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+313: i10 = int_lt(0, i8)
+317: guard_true(i10, descr=<Guard0x7f4eb6d37d18>) [p0, p1]
+323: p11 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+327: guard_class(p11, 16623792, descr=<Guard0x7f4eb6d37d60>) [p0, p1]
+341: p13 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+345: i15 = getarrayitem_gc_i(p13, 0, descr=<ArrayS 8>)
debug_merge_point(0, 0, '(let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16))))')
debug_merge_point(0, 0, '(shortestPath AppRand12)')
+350: p16 = getfield_gc_r(p1, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+354: guard_class(p16, 16499664, descr=<Guard0x7f4eb6d37da8>) [p0, p1]
+367: p18 = getfield_gc_r(p16, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+371: guard_nonnull_class(p18, 16510992, descr=<Guard0x384b0a0>) [p0, p1]
+390: p20 = getfield_gc_r(p18, descr=<FieldP pycket.values.W_Closure.inst_caselam 8 pure>)
+401: guard_value(p20, ConstPtr(ptr21), descr=<Guard0x7f4eb6d37df0>) [p0, p1]
+410: p22 = getfield_gc_r(p18, descr=<FieldP rpython.tool.pairtype.W_ClosureSize1.inst__envs_0 16 pure>)
+414: i23 = instance_ptr_eq(p16, p22)
+417: guard_true(i23, descr=<Guard0x7f4eb6d37e38>) [p0, p1]
debug_merge_point(0, 0, '(if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath AppRand12)')
+423: i25 = int_eq(i15, 0)
+427: guard_true(i25, descr=<Guard0x7f4eb6d37e80>) [p0, p1]
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(vector-ref t5265 1) from (shortestPath AppRand12)')
+433: i27 = int_lt(1, i8)
+437: guard_true(i27, descr=<Guard0x7f4eb6d37ec8>) [p0, p1]
+443: i29 = getarrayitem_gc_i(p13, 1, descr=<ArrayS 8>)
debug_merge_point(0, 0, '(let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))')
debug_merge_point(0, 0, 'AppRand13')
+448: p30 = getfield_gc_r(p16, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(shortestPath AppRand14)')
debug_merge_point(0, 0, '(if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath AppRand14)')
+448: i32 = int_eq(i29, 0)
+452: guard_true(i32, descr=<Guard0x7f4eb6d37f10>) [p0, p1]
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)) from (shortestPath AppRand14)')
debug_merge_point(0, 0, '(min AppRand13 AppRand15)')
debug_merge_point(0, 0, '(+ 1 AppRand16)')
+458: p33 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+469: guard_value(p33, ConstPtr(ptr34), descr=<Guard0x7f4eb6d37f58>) [p0, p1]
+478: p35 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+478: i36 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+482: p37 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)) from (+ 1 AppRand16)')
+486: guard_class(p37, 16435920, descr=<Guard0x7f4eb6d37fa0>) [p0, p1]
+500: p39 = getfield_gc_r(p37, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+504: guard_nonnull_class(p39, ConstClass(ForwardLink), descr=<Guard0x384b100>) [p0, p1]
debug_merge_point(0, 0, '(min AppRand13 AppRand15)')
+523: i42 = int_lt(i36, 1)
+527: guard_false(i42, descr=<Guard0x3982020>) [p0, p1]
debug_merge_point(0, 0, '(+ 1 AppRand16)')
+533: p43 = getfield_gc_r(p37, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+544: guard_value(p43, ConstPtr(ptr44), descr=<Guard0x3982068>) [p0, p1]
+553: p45 = getfield_gc_r(p37, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+557: p46 = getfield_gc_r(p37, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+561: guard_class(p45, 16499664, descr=<Guard0x39820b0>) [p0, p1]
+574: p48 = getfield_gc_r(p45, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+578: guard_class(p46, 16437216, descr=<Guard0x39820f8>) [p0, p1]
+592: p50 = getfield_gc_r(p46, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+597: guard_nonnull_class(p50, ConstClass(ForwardLink), descr=<Guard0x384b160>) [p0, p1]
debug_merge_point(0, 0, '(vector-ref t5265 1) from (+ 1 AppRand16)')
+615: p52 = new_with_vtable(descr=<SizeDescr 48>)
+656: setfield_gc(p52, p50, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+667: setfield_gc(p52, ConstPtr(ptr53), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+671: setfield_gc(p52, p48, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+675: setfield_gc(p52, 2, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+683: setfield_gc(p52, p46, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+687: jump(p45, p52, descr=TargetToken(80547776))
+720: --end of the loop--
[3e4c20e9b319a52] jit-log-opt-bridge}
[3e4c20e9b43a3e3] {jit-backend
[3e4c20e9b4938df] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfa
[3e4c20e9b49abc5] jit-backend-dump}
[3e4c20e9b4a4f0c] {jit-backend-addr
Loop 58 ((if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath AppRand12)) has address 0x7f4eb6bfa17d to 0x7f4eb6bfa310 (bootstrap 0x7f4eb6bfa0f0)
       gc table: 0x7f4eb6bfa060
       function: 0x7f4eb6bfa0f0
         resops: 0x7f4eb6bfa17d
       failures: 0x7f4eb6bfa310
            end: 0x7f4eb6bfa4ff
[3e4c20e9b4a7e0a] jit-backend-addr}
[3e4c20e9b4ac171] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfa1a7 +0  94010000
[3e4c20e9b4ad427] jit-backend-dump}
[3e4c20e9b4b0a8e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfa1bd +0  9A010000
[3e4c20e9b4b18cf] jit-backend-dump}
[3e4c20e9b4b4b88] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfa1d0 +0  A3010000
[3e4c20e9b4b58a6] jit-backend-dump}
[3e4c20e9b4b8a64] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfa1e6 +0  A9010000
[3e4c20e9b4b9733] jit-backend-dump}
[3e4c20e9b4bca7f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfa1f4 +0  D3010000
[3e4c20e9b4bd748] jit-backend-dump}
[3e4c20e9b4c095b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfa204 +0  DF010000
[3e4c20e9b4c161b] jit-backend-dump}
[3e4c20e9b4c47b4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfa218 +0  E7010000
[3e4c20e9b4c5490] jit-backend-dump}
[3e4c20e9b4c85ef] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfa228 +0  F3010000
[3e4c20e9b4c92d0] jit-backend-dump}
[3e4c20e9b4cc49d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfa23e +0  F9010000
[3e4c20e9b4cd16f] jit-backend-dump}
[3e4c20e9b4d02ff] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfa252 +0  01020000
[3e4c20e9b4d100c] jit-backend-dump}
[3e4c20e9b4d417d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfa25f +0  10020000
[3e4c20e9b4d4e58] jit-backend-dump}
[3e4c20e9b4d80b2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfa282 +0  25020000
[3e4c20e9b4d8db5] jit-backend-dump}
[3e4c20e9b4dbf48] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfa292 +0  31020000
[3e4c20e9b4dcc67] jit-backend-dump}
[3e4c20e9b4dfe1c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfa2a7 +0  38020000
[3e4c20e9b4e0b0f] jit-backend-dump}
[3e4c20e9b4e4910] jit-backend}
[3e4c20e9b4e8744] {jit-log-opt-loop
# Loop 58 ((if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath AppRand12)) : loop with 56 ops
[p0, p1]
+293: label(p0, p1, descr=TargetToken(80549376))
debug_merge_point(0, 0, '(if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath AppRand12)')
+312: guard_class(p0, 16499664, descr=<Guard0x384b1c0>) [p1, p0]
+331: p3 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+335: guard_nonnull_class(p3, ConstClass(W_Vector), descr=<Guard0x384b220>) [p1, p0]
debug_merge_point(0, 0, '(let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))')
+353: guard_class(p1, 16435920, descr=<Guard0x3982140>) [p1, p0]
+372: p6 = getfield_gc_r(p1, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+376: guard_nonnull_class(p6, ConstClass(ForwardLink), descr=<Guard0x384b280>) [p1, p0]
debug_merge_point(0, 0, '(vector-ref t5265 0)')
+394: guard_not_invalidated(descr=<Guard0x3982188>) [p1, p0]
+394: i8 = getfield_gc_i(p3, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+398: i10 = int_lt(0, i8)
+402: guard_true(i10, descr=<Guard0x39821d0>) [p1, p0]
+408: p11 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+412: guard_class(p11, 16622984, descr=<Guard0x3982218>) [p1, p0]
+424: p13 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+428: p15 = getarrayitem_gc_r(p13, 0, descr=<ArrayP 8>)
+432: guard_class(p15, ConstClass(W_Vector), descr=<Guard0x3982260>) [p1, p0]
debug_merge_point(0, 0, '(let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16))))')
debug_merge_point(0, 0, '(shortestPath AppRand12)')
+444: p17 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+448: guard_class(p17, 16499664, descr=<Guard0x39822a8>) [p1, p0]
+460: p19 = getfield_gc_r(p17, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+464: guard_nonnull_class(p19, 16510992, descr=<Guard0x384b2e0>) [p1, p0]
+482: p21 = getfield_gc_r(p19, descr=<FieldP pycket.values.W_Closure.inst_caselam 8 pure>)
+493: guard_value(p21, ConstPtr(ptr22), descr=<Guard0x39822f0>) [p1, p0]
+502: p23 = getfield_gc_r(p19, descr=<FieldP rpython.tool.pairtype.W_ClosureSize1.inst__envs_0 16 pure>)
+506: i24 = instance_ptr_eq(p17, p23)
+509: guard_true(i24, descr=<Guard0x3982338>) [p1, p0]
debug_merge_point(0, 0, '(if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath AppRand12)')
+515: label(p17, p15, p6, p0, p1, p19, descr=TargetToken(80549456))
debug_merge_point(0, 0, '(if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath AppRand12)')
debug_merge_point(0, 0, '(let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))')
debug_merge_point(0, 0, '(vector-ref t5265 0)')
+536: guard_not_invalidated(descr=<Guard0x384b340>) [p1, p0, p15, p17, p6]
+536: i25 = getfield_gc_i(p15, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+540: i27 = int_lt(0, i25)
+544: guard_true(i27, descr=<Guard0x3982380>) [p1, p0, p15, p17, p6]
+550: p28 = getfield_gc_r(p15, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+554: guard_class(p28, 16622984, descr=<Guard0x39823c8>) [p1, p0, p15, p17, p6]
+566: p30 = getfield_gc_r(p15, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+570: p32 = getarrayitem_gc_r(p30, 0, descr=<ArrayP 8>)
+574: guard_class(p32, ConstClass(W_Vector), descr=<Guard0x3982410>) [p1, p0, p15, p17, p6]
debug_merge_point(0, 0, '(let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16))))')
debug_merge_point(0, 0, '(shortestPath AppRand12)')
debug_merge_point(0, 0, '(if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath AppRand12)')
+587: p34 = new_with_vtable(descr=<SizeDescr 24>)
+634: p35 = new_with_vtable(descr=<SizeDescr 40>)
+645: setfield_gc(p34, p15, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+649: setfield_gc(p34, p17, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+653: setfield_gc(p35, p6, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+657: setfield_gc(p35, p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+661: setfield_gc(p35, p1, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+672: setfield_gc(p35, ConstPtr(ptr36), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+676: jump(p17, p32, p6, p34, p35, p19, descr=TargetToken(80549456))
+688: --end of the loop--
[3e4c20e9b51d29e] jit-log-opt-loop}
[3e4c20e9b6d15a2] {jit-backend
[3e4c20e9b70ab23] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfa5f
[3e4c20e9b7111f4] jit-backend-dump}
[3e4c20e9b71b6d8] {jit-backend-addr
Loop 59 ((let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)) from (+ 1 AppRand16)) has address 0x7f4eb6bfa6ed to 0x7f4eb6bfa810 (bootstrap 0x7f4eb6bfa660)
       gc table: 0x7f4eb6bfa5f0
       function: 0x7f4eb6bfa660
         resops: 0x7f4eb6bfa6ed
       failures: 0x7f4eb6bfa810
            end: 0x7f4eb6bfa98e
[3e4c20e9b71e25c] jit-backend-addr}
[3e4c20e9b72217f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfa717 +0  07010000
[3e4c20e9b7232c9] jit-backend-dump}
[3e4c20e9b7267ec] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfa72a +0  10010000
[3e4c20e9b7275e6] jit-backend-dump}
[3e4c20e9b72a8cd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfa740 +0  16010000
[3e4c20e9b72b5f2] jit-backend-dump}
[3e4c20e9b72e9ef] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfa751 +0  3D010000
[3e4c20e9b72f72f] jit-backend-dump}
[3e4c20e9b7328e4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfa75b +0  4F010000
[3e4c20e9b7335ea] jit-backend-dump}
[3e4c20e9b736777] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfa76f +0  57010000
[3e4c20e9b73747a] jit-backend-dump}
[3e4c20e9b73a549] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfa7a0 +0  42010000
[3e4c20e9b73b25e] jit-backend-dump}
[3e4c20e9b73e2f4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfa7b6 +0  48010000
[3e4c20e9b73f01b] jit-backend-dump}
[3e4c20e9b74217a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfa7bf +0  77010000
[3e4c20e9b742e71] jit-backend-dump}
[3e4c20e9b745f19] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfa7cd +0  85010000
[3e4c20e9b746c1f] jit-backend-dump}
[3e4c20e9b749e23] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfa7e1 +0  8D010000
[3e4c20e9b74ab14] jit-backend-dump}
[3e4c20e9b74e790] jit-backend}
[3e4c20e9b7524a1] {jit-log-opt-loop
# Loop 59 ((let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)) from (+ 1 AppRand16)) : loop with 39 ops
[p0, p1]
+261: label(p0, p1, descr=TargetToken(80549536))
+280: guard_class(p0, 16503888, descr=<Guard0x384b3a0>) [p1, p0]
+299: p3 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+299: guard_class(p1, 16437216, descr=<Guard0x3982458>) [p1, p0]
+318: p5 = getfield_gc_r(p1, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+322: guard_nonnull_class(p5, ConstClass(ForwardLink), descr=<Guard0x384b400>) [p1, p0]
debug_merge_point(0, 0, '(min AppRand13 AppRand15)')
+340: guard_not_invalidated(descr=<Guard0x39824a0>) [p1, p0]
+340: i7 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_0 16 pure>)
+344: i8 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_1 24 pure>)
+348: i9 = int_lt(i7, i8)
+351: guard_false(i9, descr=<Guard0x39824e8>) [p1, p0]
debug_merge_point(0, 0, '(+ 1 AppRand16)')
+357: i11 = int_add_ovf(1, i8)
+361: guard_no_overflow(descr=<Guard0x3982530>) [p1, p0]
+367: p12 = getfield_gc_r(p1, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+378: guard_value(p12, ConstPtr(ptr13), descr=<Guard0x3982578>) [p1, p0]
+387: p14 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+391: i15 = getfield_gc_i(p1, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+395: p16 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)) from (+ 1 AppRand16)')
+399: label(p14, i15, i11, p16, descr=TargetToken(80549616))
+424: guard_class(p16, 16437216, descr=<Guard0x384b460>) [p16, p14, i11, i15]
+436: p18 = getfield_gc_r(p16, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+440: guard_nonnull_class(p18, ConstClass(ForwardLink), descr=<Guard0x384b4c0>) [p16, p14, i11, i15]
debug_merge_point(0, 0, '(min AppRand13 AppRand15)')
+458: guard_not_invalidated(descr=<Guard0x39825c0>) [p16, p14, i11, i15]
+458: i20 = int_lt(i15, i11)
+461: guard_false(i20, descr=<Guard0x3982608>) [p16, p14, i11, i15]
debug_merge_point(0, 0, '(+ 1 AppRand16)')
+467: i22 = int_add_ovf(1, i11)
+475: guard_no_overflow(descr=<Guard0x3982650>) [p16, p14, i11, i15]
+481: p23 = getfield_gc_r(p16, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+492: guard_value(p23, ConstPtr(ptr24), descr=<Guard0x3982698>) [p16, p14, i11, i15]
+501: p25 = getfield_gc_r(p16, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+505: i26 = getfield_gc_i(p16, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+509: p27 = getfield_gc_r(p16, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)) from (+ 1 AppRand16)')
+513: jump(p25, i26, i22, p27, descr=TargetToken(80549616))
+544: --end of the loop--
[3e4c20e9b775e7e] jit-log-opt-loop}
[3e4c20e9b8af718] {jit-backend
[3e4c20e9b90630f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfaac0 +0  0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8CD201000048FF0425806E0D048139100A01000F85000000004C8B79104983FF01720741813FF08C00000F85000000004D8B77084983FE010F8E000000004D8B771841813EC8EB02000F85000000004D8B77104D8B7E18813A201600000F850000000041813FF08C00000F85000000004C8B72204C8B2D14FFFFFF4D39EE0F85000000004C8B6A104C8B72284C8B621841813C24101100000F85000000004D8B5424084983FA01720741813A900F00000F850000000041817D00100A01000F85000000004D8B4D084D8B45104983F8017207418138503601000F8500000000498B7808488B35D5FEFFFF4839F70F8500000000498B70104939F50F8500000000498B77084883FE000F8E00000000498B7718813EF0EE02000F8500000000498B7710488B4E104889CB488B0C25F091F900488D9188000000483B14251092F9000F87B700000048891425F091F90048C701B01E0100488D511848C70210110000488D722848C706100A01004C896E084C897E104C8D7E1849C707201600004D8957084D894F104D8967184C8B2556FEFFFF4D8967204D8977284C8B354FFEFFFF4C897220488972104C897A184C8952084C8969084889591048898D300100004889953801000049BB90A1BFB64E7F000041FFE30F1F400048C7442408FFFFFF0049BBA0A9BFB64E7F00004C895D204D8D9B50D9FEFF41FFD3E908FEFFFF49BBB0AABFB64E7F00004C895D204D8D9B40E0FEFF41FFD3E934FFFFFFFF3537FDFFFF49BBB0A9BFB64E7F000041534D8D9B50D6FEFF41FFE3FF3523FDFFFF49BBC0A9BFB64E7F000041534D8D9B40D6FEFF41FFE3FF350FFDFFFF49BBD0A9BFB64E7F000041534D8D9B30D6FEFF41FFE3FF35FBFCFFFF49BBE0A9BFB64E7F000041534D8D9B20D6FEFF41FFE3FF35E7FCFFFF49BBF0A9BFB64E7F000041534D8D9B10D6FEFF41FFE3FF35D3FCFFFF49BB00AABFB64E7F000041534D8D9B00D6FEFF41FFE3FF35BFFCFFFF49BB10AABFB64E7F000041534D8D9BF0D5FEFF41FFE3FF35B3FCFFFF49BB20AABFB64E7F000041534D8D9BE0D5FEFF41FFE3FF359FFCFFFF49BB30AABFB64E7F000041534D8D9BD0D5FEFF41FFE3FF358BFCFFFF49BB40AABFB64E7F000041534D8D9BC0D5FEFF41FFE3FF3577FCFFFF49BB50AABFB64E7F000041534D8D9BB0D5FEFF41FFE3FF3563FCFFFF49BB60AABFB64E7F000041534D8D9BA0D5FEFF41FFE3FF3557FCFFFF49BB70AABFB64E7F000041534D8D9B90D5FEFF41FFE3FF3543FCFFFF49BB80AABFB64E7F000041534D8D9B80D5FEFF41FFE3FF352FFCFFFF49BB90AABFB64E7F000041534D8D9B70D5FEFF41FFE3FF351BFCFFFF49BBA0AABFB64E7F000041534D8D9B60D5FEFF41FFE3
[3e4c20e9b90d74e] jit-backend-dump}
[3e4c20e9b917f19] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfab64 +0  1F000000
[3e4c20e9b919483] jit-backend-dump}
[3e4c20e9b91d22a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfad45 +0  1F000000
[3e4c20e9b91e062] jit-backend-dump}
[3e4c20e9b92144a] {jit-backend-addr
bridge out of Guard 0x7f4eb6d372f8 has address 0x7f4eb6bfab60 to 0x7f4eb6bfad40
       gc table: 0x7f4eb6bfaac0
    jump target: 0x7f4eb6bfab60
         resops: 0x7f4eb6bfab6e
       failures: 0x7f4eb6bfad40
            end: 0x7f4eb6bfaf43
[3e4c20e9b9235a0] jit-backend-addr}
[3e4c20e9b926bae] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfab7e +0  1D020000
[3e4c20e9b9279bb] jit-backend-dump}
[3e4c20e9b92ad7e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfab95 +0  22020000
[3e4c20e9b92bac1] jit-backend-dump}
[3e4c20e9b92ecbf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfaba3 +0  30020000
[3e4c20e9b92fa09] jit-backend-dump}
[3e4c20e9b932b15] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfabb4 +0  3B020000
[3e4c20e9b93384f] jit-backend-dump}
[3e4c20e9b936934] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfabc8 +0  43020000
[3e4c20e9b93768a] jit-backend-dump}
[3e4c20e9b93a784] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfabd5 +0  52020000
[3e4c20e9b93b4b8] jit-backend-dump}
[3e4c20e9b93e5a6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfabe9 +0  5A020000
[3e4c20e9b93f2da] jit-backend-dump}
[3e4c20e9b9423b8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfac03 +0  5C020000
[3e4c20e9b9430e6] jit-backend-dump}
[3e4c20e9b9461dd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfac1b +0  60020000
[3e4c20e9b946f11] jit-backend-dump}
[3e4c20e9b949fc2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfac29 +0  6E020000
[3e4c20e9b94ace7] jit-backend-dump}
[3e4c20e9b94dda7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfac44 +0  6F020000
[3e4c20e9b94eb18] jit-backend-dump}
[3e4c20e9b951c3a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfac58 +0  77020000
[3e4c20e9b952958] jit-backend-dump}
[3e4c20e9b955a34] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfac65 +0  86020000
[3e4c20e9b956765] jit-backend-dump}
[3e4c20e9b9598ec] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfac73 +0  94020000
[3e4c20e9b95a60a] jit-backend-dump}
[3e4c20e9b95d701] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfac83 +0  A0020000
[3e4c20e9b95e43b] jit-backend-dump}
[3e4c20e9b961753] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8c6e +0  EE1E0000
[3e4c20e9b96247b] jit-backend-dump}
[3e4c20e9b9663f3] jit-backend}
[3e4c20e9b969f31] {jit-log-opt-bridge
# bridge out of Guard 0x7f4eb6d372f8 with 64 ops
[p0, p1]
+182: guard_not_invalidated(descr=<Guard0x384b520>) [p0, p1]
+182: guard_class(p1, 16499664, descr=<Guard0x39826e0>) [p0, p1]
+194: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+198: guard_nonnull_class(p3, ConstClass(W_Vector), descr=<Guard0x384b580>) [p0, p1]
+217: i5 = getfield_gc_i(p3, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+221: i7 = int_lt(1, i5)
+225: guard_true(i7, descr=<Guard0x3982728>) [p0, p1]
+231: p8 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+235: guard_class(p8, 16622984, descr=<Guard0x3982770>) [p0, p1]
+248: p10 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+252: p12 = getarrayitem_gc_r(p10, 1, descr=<ArrayP 8>)
+256: guard_class(p0, 16437216, descr=<Guard0x39827b8>) [p0, p1]
+268: guard_class(p12, ConstClass(W_Vector), descr=<Guard0x3982800>) [p0, p1]
+281: p15 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+292: guard_value(p15, ConstPtr(ptr16), descr=<Guard0x3982848>) [p0, p1]
+301: p17 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+305: i18 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+309: p19 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))')
+313: guard_class(p19, 16435920, descr=<Guard0x3982890>) [p0, p1]
+327: p21 = getfield_gc_r(p19, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+332: guard_nonnull_class(p21, ConstClass(ForwardLink), descr=<Guard0x384b5e0>) [p0, p1]
debug_merge_point(0, 0, 'AppRand13')
+351: guard_class(p17, 16499664, descr=<Guard0x39828d8>) [p0, p1]
+365: p24 = getfield_gc_r(p17, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(shortestPath AppRand14)')
+369: p25 = getfield_gc_r(p17, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+373: guard_nonnull_class(p25, 16510992, descr=<Guard0x384b640>) [p0, p1]
+392: p27 = getfield_gc_r(p25, descr=<FieldP pycket.values.W_Closure.inst_caselam 8 pure>)
+403: guard_value(p27, ConstPtr(ptr28), descr=<Guard0x3982920>) [p0, p1]
+412: p29 = getfield_gc_r(p25, descr=<FieldP rpython.tool.pairtype.W_ClosureSize1.inst__envs_0 16 pure>)
+416: i30 = instance_ptr_eq(p17, p29)
+419: guard_true(i30, descr=<Guard0x3982968>) [p0, p1]
debug_merge_point(0, 0, '(if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath AppRand14)')
debug_merge_point(0, 0, '(let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))')
debug_merge_point(0, 0, '(vector-ref t5265 0)')
+425: i31 = getfield_gc_i(p12, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+429: i33 = int_lt(0, i31)
+433: guard_true(i33, descr=<Guard0x39829b0>) [p0, p1]
+439: p34 = getfield_gc_r(p12, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+443: guard_class(p34, 16623792, descr=<Guard0x39829f8>) [p0, p1]
+455: p36 = getfield_gc_r(p12, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+459: i38 = getarrayitem_gc_i(p36, 0, descr=<ArrayS 8>)
debug_merge_point(0, 0, '(let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16))))')
debug_merge_point(0, 0, '(shortestPath AppRand12)')
debug_merge_point(0, 0, '(if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath AppRand12)')
+463: p39 = new_with_vtable(descr=<SizeDescr 24>)
+510: p40 = new_with_vtable(descr=<SizeDescr 40>)
+521: p41 = new_with_vtable(descr=<SizeDescr 24>)
+532: setfield_gc(p41, p17, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+536: setfield_gc(p41, p12, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+540: p42 = new_with_vtable(descr=<SizeDescr 48>)
+551: setfield_gc(p42, p21, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+555: setfield_gc(p42, p24, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+559: setfield_gc(p42, p19, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+570: setfield_gc(p42, ConstPtr(ptr43), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+574: setfield_gc(p42, i18, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+585: setfield_gc(p40, ConstPtr(ptr44), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+589: setfield_gc(p40, p41, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+593: setfield_gc(p40, p42, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+597: setfield_gc(p40, p21, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+601: setfield_gc(p39, p17, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+605: setfield_gc(p39, i38, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+609: jump(p39, p40, descr=TargetToken(80549376))
+640: --end of the loop--
[3e4c20e9b99dfa2] jit-log-opt-bridge}
[3e4c20e9ba6669b] {jit-backend
[3e4c20e9baa023d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfb
[3e4c20e9baa6526] jit-backend-dump}
[3e4c20e9bab04ff] {jit-backend-addr
Loop 61 ((let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)) from (shortestPath AppRand14)) has address 0x7f4eb6bfb10d to 0x7f4eb6bfb220 (bootstrap 0x7f4eb6bfb080)
       gc table: 0x7f4eb6bfb020
       function: 0x7f4eb6bfb080
         resops: 0x7f4eb6bfb10d
       failures: 0x7f4eb6bfb220
            end: 0x7f4eb6bfb367
[3e4c20e9bab2f70] jit-backend-addr}
[3e4c20e9bab6f04] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfb124 +0  27010000
[3e4c20e9bab80b6] jit-backend-dump}
[3e4c20e9babb64d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfb137 +0  30010000
[3e4c20e9babc454] jit-backend-dump}
[3e4c20e9babf5f3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfb14d +0  36010000
[3e4c20e9bac035e] jit-backend-dump}
[3e4c20e9bac366d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfb15e +0  5D010000
[3e4c20e9bac4351] jit-backend-dump}
[3e4c20e9bac74ad] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfb168 +0  6F010000
[3e4c20e9bac81a1] jit-backend-dump}
[3e4c20e9bacb286] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfb17c +0  77010000
[3e4c20e9bacbf4c] jit-backend-dump}
[3e4c20e9bacf012] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfb190 +0  7F010000
[3e4c20e9bacfccb] jit-backend-dump}
[3e4c20e9bad2d3c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfb1a0 +0  8B010000
[3e4c20e9bad39ef] jit-backend-dump}
[3e4c20e9bad6add] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfb1b7 +0  90010000
[3e4c20e9bad77bf] jit-backend-dump}
[3e4c20e9badb3ab] jit-backend}
[3e4c20e9badf020] {jit-log-opt-loop
# Loop 61 ((let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)) from (shortestPath AppRand14)) : entry bridge with 32 ops
[p0, p1]
debug_merge_point(0, 0, '(let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)) from (shortestPath AppRand14)')
+245: guard_class(p0, 16503888, descr=<Guard0x384b6a0>) [p1, p0]
+264: p3 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+264: guard_class(p1, 16435920, descr=<Guard0x3982a40>) [p1, p0]
+283: p5 = getfield_gc_r(p1, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+287: guard_nonnull_class(p5, ConstClass(ForwardLink), descr=<Guard0x384b700>) [p1, p0]
debug_merge_point(0, 0, '(min AppRand13 AppRand15)')
+305: guard_not_invalidated(descr=<Guard0x3982a88>) [p1, p0]
+305: i7 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_0 16 pure>)
+309: i8 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_1 24 pure>)
+313: i9 = int_lt(i7, i8)
+316: guard_false(i9, descr=<Guard0x3982ad0>) [p1, p0]
debug_merge_point(0, 0, '(+ 1 AppRand16)')
+322: i11 = int_add_ovf(1, i8)
+326: guard_no_overflow(descr=<Guard0x3982c80>) [p1, p0]
+332: p12 = getfield_gc_r(p1, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+343: guard_value(p12, ConstPtr(ptr13), descr=<Guard0x3982cc8>) [p1, p0]
+352: p14 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+356: p15 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+360: guard_class(p14, 16499664, descr=<Guard0x3982d10>) [p1, p0]
+372: p17 = getfield_gc_r(p14, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+376: guard_class(p15, 16435920, descr=<Guard0x3982d58>) [p1, p0]
+388: p19 = getfield_gc_r(p15, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+392: guard_nonnull_class(p19, ConstClass(ForwardLink), descr=<Guard0x384b760>) [p1, p0]
debug_merge_point(0, 0, '(vector-ref t5265 1) from (+ 1 AppRand16)')
+411: p21 = new_with_vtable(descr=<SizeDescr 48>)
+455: setfield_gc(p21, p19, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+466: setfield_gc(p21, ConstPtr(ptr22), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+470: setfield_gc(p21, p17, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+474: setfield_gc(p21, p15, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+478: setfield_gc(p21, i11, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+482: jump(p14, p21, descr=TargetToken(80547776))
+512: --end of the loop--
[3e4c20e9bafc6e3] jit-log-opt-loop}
[3e4c20e9bcc6322] {jit-backend
[3e4c20e9bd178f0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfb4d0 +0  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8CD201000048FF0425902C0D048139B01E01000F85000000004C8B79104983FF000F85000000004C8BBD3801000041813F101100000F85000000004D8B77204C8B2D09FFFFFF4D39EE0F85000000004D8B77104D8B671841813E100A01000F85000000004D8B560841813C24101100000F85000000004D8B4C24084983F9017207418139900F00000F85000000004D8B4E104983F9017207418139F08C00000F85000000004D8B71084983FE010F8E000000004D8B711841813EF0EE02000F85000000004D8B71104D8B4E1841813A100A01000F85000000004D8B72104983FE01720741813E503601000F85000000004D8B4608488B3DACFEFFFF4939F80F8500000000498B7E104939FA0F85000000004983F9000F85000000004D8B4C24204D39E90F85000000004D8B6C24104D8B4C241841817D00100A01000F85000000004D8B6508418139101100000F8500000000498B79084883FF017206813F900F00000F8500000000488B0C25F091F900488D5130483B14251092F9000F877B00000048891425F091F90048C70120160000488B154FFEFFFF488951204C8961104C8949184889790848C74128010000004C89AD3001000048898D3801000049BBD08BBFB64E7F000041FFE36666662E0F1F84000000000048C7442408FFFFFF0049BB70B3BFB64E7F00004C895D204D8D9B80CFFEFF41FFD3E908FEFFFF49BBC0B4BFB64E7F00004C895D204D8D9B30D6FEFF41FFD3E970FFFFFFFF3517FDFFFF49BB80B3BFB64E7F000041534D8D9B80CCFEFF41FFE3FF3503FDFFFF49BB90B3BFB64E7F000041534D8D9B70CCFEFF41FFE3FF35EFFCFFFF49BBA0B3BFB64E7F000041534D8D9B60CCFEFF41FFE3FF35E3FCFFFF49BBB0B3BFB64E7F000041534D8D9B50CCFEFF41FFE3FF35CFFCFFFF49BBC0B3BFB64E7F000041534D8D9B40CCFEFF41FFE3FF35BBFCFFFF49BBD0B3BFB64E7F000041534D8D9B30CCFEFF41FFE3FF35A7FCFFFF49BBE0B3BFB64E7F000041534D8D9B20CCFEFF41FFE3FF3593FCFFFF49BBF0B3BFB64E7F000041534D8D9B10CCFEFF41FFE3FF357FFCFFFF49BB00B4BFB64E7F000041534D8D9B00CCFEFF41FFE3FF356BFCFFFF49BB10B4BFB64E7F000041534D8D9BF0CBFEFF41FFE3FF3557FCFFFF49BB20B4BFB64E7F000041534D8D9BE0CBFEFF41FFE3FF3543FCFFFF49BB30B4BFB64E7F000041534D8D9BD0CBFEFF41FFE3FF352FFCFFFF49BB40B4BFB64E7F000041534D8D9BC0CBFEFF41FFE3FF3523FCFFFF49BB50B4BFB64E7F000041534D8D9BB0CBFEFF41FFE3FF350FFCFFFF49BB60B4BFB64E7F000041534D8D9BA0CBFEFF41FFE3FF35FBFBFFFF49BB70B4BFB64E7F000041534D8D9B90CBFEFF41FFE3FF35E7FBFFFF49BB80B4BFB64E7F000041534D8D9B80CBFEFF41FFE3FF35D3FBFFFF49BB90B4BFB64E7F000041534D8D9B70CBFEFF41FFE3FF35BFFBFFFF49BBA0B4BFB64E7F000041534D8D9B60CBFEFF41FFE3FF35ABFBFFFF49BBB0B4BFB64E7F000041534D8D9B50CBFEFF41FFE3
[3e4c20e9bd1f1aa] jit-backend-dump}
[3e4c20e9bd29247] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfb594 +0  20000000
[3e4c20e9bd2a5a2] jit-backend-dump}
[3e4c20e9bd2e39c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfb775 +0  20000000
[3e4c20e9bd2f233] jit-backend-dump}
[3e4c20e9bd32578] {jit-backend-addr
bridge out of Guard 0x384b1c0 has address 0x7f4eb6bfb590 to 0x7f4eb6bfb770
       gc table: 0x7f4eb6bfb4d0
    jump target: 0x7f4eb6bfb590
         resops: 0x7f4eb6bfb59e
       failures: 0x7f4eb6bfb770
            end: 0x7f4eb6bfb9e3
[3e4c20e9bd347d2] jit-backend-addr}
[3e4c20e9bd37c81] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfb5ae +0  01020000
[3e4c20e9bd38a85] jit-backend-dump}
[3e4c20e9bd3bf27] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfb5bc +0  0F020000
[3e4c20e9bd3cc73] jit-backend-dump}
[3e4c20e9bd3ffcb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfb5d0 +0  17020000
[3e4c20e9bd40c9d] jit-backend-dump}
[3e4c20e9bd43fe3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfb5e4 +0  1F020000
[3e4c20e9bd44caf] jit-backend-dump}
[3e4c20e9bd48104] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfb5f9 +0  26020000
[3e4c20e9bd48df5] jit-backend-dump}
[3e4c20e9bd4c12e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfb60b +0  30020000
[3e4c20e9bd4ce13] jit-backend-dump}
[3e4c20e9bd50102] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfb623 +0  34020000
[3e4c20e9bd50df9] jit-backend-dump}
[3e4c20e9bd54142] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfb63a +0  55020000
[3e4c20e9bd54df2] jit-backend-dump}
[3e4c20e9bd58386] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfb648 +0  63020000
[3e4c20e9bd59055] jit-backend-dump}
[3e4c20e9bd5c222] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfb659 +0  6E020000
[3e4c20e9bd5cf13] jit-backend-dump}
[3e4c20e9bd60078] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfb66e +0  75020000
[3e4c20e9bd60d4d] jit-backend-dump}
[3e4c20e9bd63ed1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfb685 +0  7A020000
[3e4c20e9bd64b7b] jit-backend-dump}
[3e4c20e9bd67ce7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfb699 +0  82020000
[3e4c20e9bd689b0] jit-backend-dump}
[3e4c20e9bd6bb36] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfb6a6 +0  91020000
[3e4c20e9bd6c7f3] jit-backend-dump}
[3e4c20e9bd6f91e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfb6b0 +0  A3020000
[3e4c20e9bd705ed] jit-backend-dump}
[3e4c20e9bd73762] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfb6be +0  B1020000
[3e4c20e9bd74415] jit-backend-dump}
[3e4c20e9bd775c7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfb6d6 +0  B5020000
[3e4c20e9bd7828a] jit-backend-dump}
[3e4c20e9bd7b3bb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfb6e7 +0  C0020000
[3e4c20e9bd7c06b] jit-backend-dump}
[3e4c20e9bd7f1b8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfb6fd +0  C6020000
[3e4c20e9bd7fe7e] jit-backend-dump}
[3e4c20e9bd831f1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfa1a7 +0  E5130000
[3e4c20e9bd83ea5] jit-backend-dump}
[3e4c20e9bd87f89] jit-backend}
[3e4c20e9bd8bd03] {jit-log-opt-bridge
# bridge out of Guard 0x384b1c0 with 62 ops
[p0, p1]
+214: guard_class(p1, 16504944, descr=<Guard0x384b7c0>) [p0, p1]
+226: i3 = getfield_gc_i(p1, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+230: i5 = int_eq(i3, 0)
+234: guard_true(i5, descr=<Guard0x3c64ba8>) [p0, p1]
debug_merge_point(0, 0, '0')
+240: guard_class(p0, 16435920, descr=<Guard0x3c64bf0>) [p0, p1]
+260: p7 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+271: guard_value(p7, ConstPtr(ptr8), descr=<Guard0x3c64c38>) [p0, p1]
+280: p9 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+284: p10 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+288: guard_class(p9, 16499664, descr=<Guard0x3c64c80>) [p0, p1]
+301: p12 = getfield_gc_r(p9, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+305: guard_class(p10, 16435920, descr=<Guard0x3c64cc8>) [p0, p1]
+319: p14 = getfield_gc_r(p10, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+324: guard_nonnull_class(p14, ConstClass(ForwardLink), descr=<Guard0x384b820>) [p0, p1]
debug_merge_point(0, 0, '(vector-ref t5265 1) from (shortestPath AppRand12)')
+343: guard_not_invalidated(descr=<Guard0x3c64d10>) [p0, p1]
+343: p16 = getfield_gc_r(p9, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+347: guard_nonnull_class(p16, ConstClass(W_Vector), descr=<Guard0x384b880>) [p0, p1]
+366: i18 = getfield_gc_i(p16, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+370: i20 = int_lt(1, i18)
+374: guard_true(i20, descr=<Guard0x3c64d58>) [p0, p1]
+380: p21 = getfield_gc_r(p16, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+384: guard_class(p21, 16623792, descr=<Guard0x3c64da0>) [p0, p1]
+397: p23 = getfield_gc_r(p16, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+401: i25 = getarrayitem_gc_i(p23, 1, descr=<ArrayS 8>)
debug_merge_point(0, 0, '(let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))')
debug_merge_point(0, 0, 'AppRand13')
+405: guard_class(p12, 16499664, descr=<Guard0x3c64de8>) [p0, p1]
+418: p27 = getfield_gc_r(p12, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(shortestPath AppRand14)')
+418: p28 = getfield_gc_r(p12, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+422: guard_nonnull_class(p28, 16510992, descr=<Guard0x384b8e0>) [p0, p1]
+441: p30 = getfield_gc_r(p28, descr=<FieldP pycket.values.W_Closure.inst_caselam 8 pure>)
+452: guard_value(p30, ConstPtr(ptr31), descr=<Guard0x3c64e30>) [p0, p1]
+461: p32 = getfield_gc_r(p28, descr=<FieldP rpython.tool.pairtype.W_ClosureSize1.inst__envs_0 16 pure>)
+465: i33 = instance_ptr_eq(p12, p32)
+468: guard_true(i33, descr=<Guard0x3c64e78>) [p0, p1]
debug_merge_point(0, 0, '(if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath AppRand14)')
+474: i35 = int_eq(i25, 0)
+478: guard_true(i35, descr=<Guard0x3c64ec0>) [p0, p1]
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)) from (shortestPath AppRand14)')
debug_merge_point(0, 0, '(min AppRand13 AppRand15)')
debug_merge_point(0, 0, '(+ 1 AppRand16)')
+484: p36 = getfield_gc_r(p10, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+489: guard_value(p36, ConstPtr(ptr37), descr=<Guard0x3c64f08>) [p0, p1]
+498: p38 = getfield_gc_r(p10, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+503: p39 = getfield_gc_r(p10, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+508: guard_class(p38, 16499664, descr=<Guard0x3c64f50>) [p0, p1]
+522: p41 = getfield_gc_r(p38, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+526: guard_class(p39, 16435920, descr=<Guard0x3c64f98>) [p0, p1]
+539: p43 = getfield_gc_r(p39, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+543: guard_nonnull_class(p43, ConstClass(ForwardLink), descr=<Guard0x384ba00>) [p0, p1]
debug_merge_point(0, 0, '(vector-ref t5265 1) from (+ 1 AppRand16)')
+561: p45 = new_with_vtable(descr=<SizeDescr 48>)
+609: setfield_gc(p45, ConstPtr(ptr46), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+613: setfield_gc(p45, p41, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+617: setfield_gc(p45, p39, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+621: setfield_gc(p45, p43, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+625: setfield_gc(p45, 1, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+633: jump(p38, p45, descr=TargetToken(80547776))
+672: --end of the loop--
[3e4c20e9bdc2673] jit-log-opt-bridge}
[3e4c20e9bf046ab] {jit-backend
[3e4c20e9bf40c71] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfbae0 +0  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8C3201000048FF0425E02C0D048139B01E01000F85000000004C8B79104983FF000F85000000008138201600000F85000000004C8B78204C8B3551FFFFFF4D39F70F85000000004C8B70284C8B781841813F101100000F85000000004D8B6F084983FD01720841817D00900F00000F85000000004983FE000F8C000000004D8B77204C8B2D36FFFFFF4D39EE0F85000000004D8B6F104D8B771841817D00100A01000F85000000004D8B7D0841813E201600000F85000000004D8B66084983FC01720841813C24900F00000F8500000000488B0C25F091F900488D5130483B14251092F9000F877200000048891425F091F90048C70120160000488B15E6FEFFFF488951204C89791048C74128010000004C8971184C8961084C89AD3001000048898D3801000049BBD08BBFB64E7F000041FFE30F1F0048C7442408FFFFFF0049BBF8B9BFB64E7F00004C895D204D8D9BF8C8FEFF41FFD3E9A8FEFFFF49BBC8BABFB64E7F00004C895D204D8D9B28D0FEFF41FFD3E979FFFFFFFF35F7FDFFFF49BB08BABFB64E7F000041534D8D9BF8C5FEFF41FFE3FF35E3FDFFFF49BB18BABFB64E7F000041534D8D9BE8C5FEFF41FFE3FF35CFFDFFFF49BB28BABFB64E7F000041534D8D9BD8C5FEFF41FFE3FF35C3FDFFFF49BB38BABFB64E7F000041534D8D9BC8C5FEFF41FFE3FF35AFFDFFFF49BB48BABFB64E7F000041534D8D9BB8C5FEFF41FFE3FF359BFDFFFF49BB58BABFB64E7F000041534D8D9BA8C5FEFF41FFE3FF3587FDFFFF49BB68BABFB64E7F000041534D8D9B98C5FEFF41FFE3FF3573FDFFFF49BB78BABFB64E7F000041534D8D9B88C5FEFF41FFE3FF3567FDFFFF49BB88BABFB64E7F000041534D8D9B78C5FEFF41FFE3FF3553FDFFFF49BB98BABFB64E7F000041534D8D9B68C5FEFF41FFE3FF353FFDFFFF49BBA8BABFB64E7F000041534D8D9B58C5FEFF41FFE3FF352BFDFFFF49BBB8BABFB64E7F000041534D8D9B48C5FEFF41FFE3
[3e4c20e9bf46d12] jit-backend-dump}
[3e4c20e9bf51096] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfbb64 +0  20000000
[3e4c20e9bf524ef] jit-backend-dump}
[3e4c20e9bf56238] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfbca5 +0  20000000
[3e4c20e9bf57070] jit-backend-dump}
[3e4c20e9bf5a3da] {jit-backend-addr
bridge out of Guard 0x7f4eb6d37a48 has address 0x7f4eb6bfbb60 to 0x7f4eb6bfbca0
       gc table: 0x7f4eb6bfbae0
    jump target: 0x7f4eb6bfbb60
         resops: 0x7f4eb6bfbb6e
       failures: 0x7f4eb6bfbca0
            end: 0x7f4eb6bfbe33
[3e4c20e9bf5c766] jit-backend-addr}
[3e4c20e9bf5fabb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfbb7e +0  61010000
[3e4c20e9bf608dd] jit-backend-dump}
[3e4c20e9bf63afa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfbb8c +0  6F010000
[3e4c20e9bf647fd] jit-backend-dump}
[3e4c20e9bf67944] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfbb98 +0  7F010000
[3e4c20e9bf68600] jit-backend-dump}
[3e4c20e9bf6b829] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfbbac +0  87010000
[3e4c20e9bf6c4ec] jit-backend-dump}
[3e4c20e9bf6f639] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfbbc1 +0  AA010000
[3e4c20e9bf70354] jit-backend-dump}
[3e4c20e9bf7349b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfbbd9 +0  AE010000
[3e4c20e9bf7418c] jit-backend-dump}
[3e4c20e9bf7725b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfbbe3 +0  C0010000
[3e4c20e9bf77eff] jit-backend-dump}
[3e4c20e9bf7afe7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfbbf7 +0  C8010000
[3e4c20e9bf7bc97] jit-backend-dump}
[3e4c20e9bf7ed57] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfbc0d +0  CE010000
[3e4c20e9bf7fa14] jit-backend-dump}
[3e4c20e9bf82b0e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfbc1e +0  D9010000
[3e4c20e9bf837d4] jit-backend-dump}
[3e4c20e9bf868a3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfbc36 +0  DD010000
[3e4c20e9bf87594] jit-backend-dump}
[3e4c20e9bf8a8d0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf950d +0  4F260000
[3e4c20e9bf8b596] jit-backend-dump}
[3e4c20e9bf8f4b0] jit-backend}
[3e4c20e9bf92fe7] {jit-log-opt-bridge
# bridge out of Guard 0x7f4eb6d37a48 with 37 ops
[p0, p1]
+150: guard_class(p1, 16504944, descr=<Guard0x384ba60>) [p0, p1]
+162: i3 = getfield_gc_i(p1, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+166: i5 = int_eq(i3, 0)
+170: guard_true(i5, descr=<Guard0x3c64fe0>) [p0, p1]
debug_merge_point(0, 0, '0')
+176: guard_class(p0, 16437216, descr=<Guard0x3c65028>) [p0, p1]
+188: p7 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+199: guard_value(p7, ConstPtr(ptr8), descr=<Guard0x3c65070>) [p0, p1]
+208: p9 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+208: guard_not_invalidated(descr=<Guard0x3c650b8>) [p0, p1]
+208: i10 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+212: p11 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)) from (shortestPath AppRand14)')
+216: guard_class(p11, 16435920, descr=<Guard0x3c65100>) [p0, p1]
+229: p13 = getfield_gc_r(p11, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+233: guard_nonnull_class(p13, ConstClass(ForwardLink), descr=<Guard0x384bac0>) [p0, p1]
debug_merge_point(0, 0, '(min AppRand13 AppRand15)')
+253: i16 = int_lt(i10, 0)
+257: guard_false(i16, descr=<Guard0x3c65148>) [p0, p1]
debug_merge_point(0, 0, '(+ 1 AppRand16)')
+263: p17 = getfield_gc_r(p11, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+274: guard_value(p17, ConstPtr(ptr18), descr=<Guard0x3c65190>) [p0, p1]
+283: p19 = getfield_gc_r(p11, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+287: p20 = getfield_gc_r(p11, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+291: guard_class(p19, 16499664, descr=<Guard0x3c651d8>) [p0, p1]
+305: p22 = getfield_gc_r(p19, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+309: guard_class(p20, 16437216, descr=<Guard0x3c65220>) [p0, p1]
+322: p24 = getfield_gc_r(p20, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+326: guard_nonnull_class(p24, ConstClass(ForwardLink), descr=<Guard0x384bb20>) [p0, p1]
debug_merge_point(0, 0, '(vector-ref t5265 1) from (+ 1 AppRand16)')
+346: p26 = new_with_vtable(descr=<SizeDescr 48>)
+394: setfield_gc(p26, ConstPtr(ptr27), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+398: setfield_gc(p26, p22, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+402: setfield_gc(p26, 1, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+410: setfield_gc(p26, p20, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+414: setfield_gc(p26, p24, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+418: jump(p19, p26, descr=TargetToken(80547776))
+448: --end of the loop--
[3e4c20e9bfb5394] jit-log-opt-bridge}
[3e4c20e9c0fa8d2] {jit-backend
[3e4c20e9c13a892] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfbf20 +0  0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8C4201000048FF0425D0CD53038139100A01000F85000000004C8B79104983FF01720741813FF08C00000F850000000041813E201600000F85000000004D8B6E084983FD01720841817D00900F00000F85000000004D8B67084983FC000F8E000000004D8B671841813C24C8EB02000F85000000004D8B67104D8B7C241041813FF08C00000F85000000004C8B610841813C24100A01000F85000000004D8B5424104983FA01720741813A503601000F85000000004D8B4A084C8B0517FFFFFF4D39C10F85000000004D8B42104D39C40F85000000004889CB488B0C25F091F900488D5140483B14251092F9000F877A00000048891425F091F90048C701100A0100488D511848C702101100004C8979104C896A084C89610848895A104C8972184C8B35C7FEFFFF4C89722048898D300100004889953801000049BB90A1BFB64E7F000041FFE348C7442408FFFFFF0049BB40BEBFB64E7F00004C895D204D8D9BB0C4FEFF41FFD3E998FEFFFF49BB10BFBFB64E7F00004C895D204D8D9BE0CBFEFF41FFD3E971FFFFFFFF35F7FDFFFF49BB50BEBFB64E7F000041534D8D9BB0C1FEFF41FFE3FF35E3FDFFFF49BB60BEBFB64E7F000041534D8D9BA0C1FEFF41FFE3FF35CFFDFFFF49BB70BEBFB64E7F000041534D8D9B90C1FEFF41FFE3FF35BBFDFFFF49BB80BEBFB64E7F000041534D8D9B80C1FEFF41FFE3FF35A7FDFFFF49BB90BEBFB64E7F000041534D8D9B70C1FEFF41FFE3FF3593FDFFFF49BBA0BEBFB64E7F000041534D8D9B60C1FEFF41FFE3FF357FFDFFFF49BBB0BEBFB64E7F000041534D8D9B50C1FEFF41FFE3FF356BFDFFFF49BBC0BEBFB64E7F000041534D8D9B40C1FEFF41FFE3FF3557FDFFFF49BBD0BEBFB64E7F000041534D8D9B30C1FEFF41FFE3FF3543FDFFFF49BBE0BEBFB64E7F000041534D8D9B20C1FEFF41FFE3FF3537FDFFFF49BBF0BEBFB64E7F000041534D8D9B10C1FEFF41FFE3FF3523FDFFFF49BB00BFBFB64E7F000041534D8D9B00C1FEFF41FFE3
[3e4c20e9c140af2] jit-backend-dump}
[3e4c20e9c14a44e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfbf94 +0  20000000
[3e4c20e9c14b7cb] jit-backend-dump}
[3e4c20e9c14f358] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfc0e5 +0  20000000
[3e4c20e9c1501ca] jit-backend-dump}
[3e4c20e9c1536f0] {jit-backend-addr
bridge out of Guard 0x7f4eb6d37d60 has address 0x7f4eb6bfbf90 to 0x7f4eb6bfc0e0
       gc table: 0x7f4eb6bfbf20
    jump target: 0x7f4eb6bfbf90
         resops: 0x7f4eb6bfbf9e
       failures: 0x7f4eb6bfc0e0
            end: 0x7f4eb6bfc273
[3e4c20e9c1558cc] jit-backend-addr}
[3e4c20e9c158ed7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfbfae +0  71010000
[3e4c20e9c159cc9] jit-backend-dump}
[3e4c20e9c15d08c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfbfc5 +0  76010000
[3e4c20e9c15dd5b] jit-backend-dump}
[3e4c20e9c160f84] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfbfd2 +0  85010000
[3e4c20e9c161c50] jit-backend-dump}
[3e4c20e9c164dca] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfbfea +0  89010000
[3e4c20e9c165aa3] jit-backend-dump}
[3e4c20e9c168cb3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfbff8 +0  B3010000
[3e4c20e9c169982] jit-backend-dump}
[3e4c20e9c170053] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfc00a +0  BD010000
[3e4c20e9c170ecf] jit-backend-dump}
[3e4c20e9c174835] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfc020 +0  C3010000
[3e4c20e9c1755bf] jit-backend-dump}
[3e4c20e9c178982] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfc032 +0  CD010000
[3e4c20e9c179694] jit-backend-dump}
[3e4c20e9c17c916] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfc04a +0  D1010000
[3e4c20e9c17d600] jit-backend-dump}
[3e4c20e9c18078d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfc05e +0  D9010000
[3e4c20e9c181478] jit-backend-dump}
[3e4c20e9c1845e9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfc06b +0  E8010000
[3e4c20e9c1852da] jit-backend-dump}
[3e4c20e9c1886a6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf9b01 +0  8B240000
[3e4c20e9c18936f] jit-backend-dump}
[3e4c20e9c18d463] jit-backend}
[3e4c20e9c19101e] {jit-log-opt-bridge
# bridge out of Guard 0x7f4eb6d37d60 with 38 ops
[p0, p1]
+134: guard_class(p1, 16499664, descr=<Guard0x384bb80>) [p0, p1]
+146: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+150: guard_nonnull_class(p3, ConstClass(W_Vector), descr=<Guard0x384bbe0>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))')
+169: guard_class(p0, 16437216, descr=<Guard0x3c65268>) [p0, p1]
+182: p6 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+186: guard_nonnull_class(p6, ConstClass(ForwardLink), descr=<Guard0x384bc40>) [p0, p1]
debug_merge_point(0, 0, '(vector-ref t5265 0)')
+206: guard_not_invalidated(descr=<Guard0x3c652b0>) [p0, p1]
+206: i8 = getfield_gc_i(p3, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+210: i10 = int_lt(0, i8)
+214: guard_true(i10, descr=<Guard0x3c652f8>) [p0, p1]
+220: p11 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+224: guard_class(p11, 16622984, descr=<Guard0x3c65340>) [p0, p1]
+238: p13 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+242: p15 = getarrayitem_gc_r(p13, 0, descr=<ArrayP 8>)
+247: guard_class(p15, ConstClass(W_Vector), descr=<Guard0x3c65388>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16))))')
debug_merge_point(0, 0, '(shortestPath AppRand12)')
+260: p17 = getfield_gc_r(p1, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+264: guard_class(p17, 16499664, descr=<Guard0x3c653d0>) [p0, p1]
+278: p19 = getfield_gc_r(p17, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+283: guard_nonnull_class(p19, 16510992, descr=<Guard0x384bca0>) [p0, p1]
+302: p21 = getfield_gc_r(p19, descr=<FieldP pycket.values.W_Closure.inst_caselam 8 pure>)
+313: guard_value(p21, ConstPtr(ptr22), descr=<Guard0x3c65418>) [p0, p1]
+322: p23 = getfield_gc_r(p19, descr=<FieldP rpython.tool.pairtype.W_ClosureSize1.inst__envs_0 16 pure>)
+326: i24 = instance_ptr_eq(p17, p23)
+329: guard_true(i24, descr=<Guard0x3c65460>) [p0, p1]
debug_merge_point(0, 0, '(if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath AppRand12)')
+335: p25 = new_with_vtable(descr=<SizeDescr 24>)
+379: p26 = new_with_vtable(descr=<SizeDescr 40>)
+390: setfield_gc(p25, p15, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+394: setfield_gc(p26, p6, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+398: setfield_gc(p25, p17, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+402: setfield_gc(p26, p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+406: setfield_gc(p26, p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+417: setfield_gc(p26, ConstPtr(ptr27), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+421: jump(p25, p26, descr=TargetToken(80549376))
+448: --end of the loop--
[3e4c20e9c1b4a4d] jit-log-opt-bridge}
[3e4c20e9c2c2690] {jit-backend
[3e4c20e9c2ee8ff] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfc
[3e4c20e9c2f37de] jit-backend-dump}
[3e4c20e9c2fd480] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfc384 +0  1E000000
[3e4c20e9c2fe648] jit-backend-dump}
[3e4c20e9c30233e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfc445 +0  1E000000
[3e4c20e9c303182] jit-backend-dump}
[3e4c20e9c3065b0] {jit-backend-addr
bridge out of Guard 0x7f4eb6d37b20 has address 0x7f4eb6bfc380 to 0x7f4eb6bfc440
       gc table: 0x7f4eb6bfc330
    jump target: 0x7f4eb6bfc380
         resops: 0x7f4eb6bfc38e
       failures: 0x7f4eb6bfc440
            end: 0x7f4eb6bfc562
[3e4c20e9c3087df] jit-backend-addr}
[3e4c20e9c30bbdf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfc39e +0  C4000000
[3e4c20e9c30ca05] jit-backend-dump}
[3e4c20e9c30fcbb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfc3ac +0  D2000000
[3e4c20e9c310a0a] jit-backend-dump}
[3e4c20e9c313bb9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfc3b8 +0  E2000000
[3e4c20e9c3148c2] jit-backend-dump}
[3e4c20e9c317a33] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfc3cc +0  EA000000
[3e4c20e9c318724] jit-backend-dump}
[3e4c20e9c31bb33] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfc3e2 +0  0C010000
[3e4c20e9c31c88c] jit-backend-dump}
[3e4c20e9c31fb4e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfc3fa +0  10010000
[3e4c20e9c32084b] jit-backend-dump}
[3e4c20e9c323942] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfc404 +0  22010000
[3e4c20e9c324614] jit-backend-dump}
[3e4c20e9c32777c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfc411 +0  31010000
[3e4c20e9c328467] jit-backend-dump}
[3e4c20e9c32b817] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf954e +0  2E2E0000
[3e4c20e9c32c50b] jit-backend-dump}
[3e4c20e9c33050d] jit-backend}
[3e4c20e9c333f1c] {jit-log-opt-bridge
# bridge out of Guard 0x7f4eb6d37b20 with 27 ops
[p0, p1]
+102: guard_class(p1, 16504944, descr=<Guard0x384bd00>) [p0, p1]
+114: i3 = getfield_gc_i(p1, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+118: i5 = int_eq(i3, 0)
+122: guard_true(i5, descr=<Guard0x3c654a8>) [p0, p1]
debug_merge_point(0, 0, '0')
+128: guard_class(p0, 16437216, descr=<Guard0x3c654f0>) [p0, p1]
+140: p7 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+151: guard_value(p7, ConstPtr(ptr8), descr=<Guard0x3c65538>) [p0, p1]
+160: p9 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+160: guard_not_invalidated(descr=<Guard0x3c65580>) [p0, p1]
+160: i10 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+164: p11 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)) from (shortestPath AppRand14)')
+168: guard_class(p11, 16437216, descr=<Guard0x3c655c8>) [p0, p1]
+182: p13 = getfield_gc_r(p11, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+186: guard_nonnull_class(p13, ConstClass(ForwardLink), descr=<Guard0x384bd60>) [p0, p1]
debug_merge_point(0, 0, '(min AppRand13 AppRand15)')
+206: i16 = int_lt(i10, 0)
+210: guard_false(i16, descr=<Guard0x3c65610>) [p0, p1]
debug_merge_point(0, 0, '(+ 1 AppRand16)')
+216: p17 = getfield_gc_r(p11, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+220: guard_value(p17, ConstPtr(ptr18), descr=<Guard0x3c65658>) [p0, p1]
+229: p19 = getfield_gc_r(p11, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+233: i20 = getfield_gc_i(p11, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+237: p21 = getfield_gc_r(p11, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)) from (+ 1 AppRand16)')
+241: jump(p19, i20, 1, p21, descr=TargetToken(80549616))
+272: --end of the loop--
[3e4c20e9c34ddea] jit-log-opt-bridge}
[3e4c20e9c4bcc5c] {jit-backend
[3e4c20e9c4faa14] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfc
[3e4c20e9c501053] jit-backend-dump}
[3e4c20e9c50b45d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfc734 +0  1E000000
[3e4c20e9c50c8e4] jit-backend-dump}
[3e4c20e9c5104f2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfc895 +0  1E000000
[3e4c20e9c5113a1] jit-backend-dump}
[3e4c20e9c514789] {jit-backend-addr
bridge out of Guard 0x3c64cc8 has address 0x7f4eb6bfc730 to 0x7f4eb6bfc890
       gc table: 0x7f4eb6bfc690
    jump target: 0x7f4eb6bfc730
         resops: 0x7f4eb6bfc73e
       failures: 0x7f4eb6bfc890
            end: 0x7f4eb6bfca92
[3e4c20e9c51685e] jit-backend-addr}
[3e4c20e9c519c4c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfc74e +0  64010000
[3e4c20e9c51aa5c] jit-backend-dump}
[3e4c20e9c51dce1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfc75c +0  72010000
[3e4c20e9c51ea55] jit-backend-dump}
[3e4c20e9c521c7b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfc769 +0  81010000
[3e4c20e9c522960] jit-backend-dump}
[3e4c20e9c525ae0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfc77d +0  89010000
[3e4c20e9c526797] jit-backend-dump}
[3e4c20e9c529905] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfc793 +0  8F010000
[3e4c20e9c52a5d1] jit-backend-dump}
[3e4c20e9c52d736] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfc7a4 +0  9A010000
[3e4c20e9c52e3f0] jit-backend-dump}
[3e4c20e9c53158f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfc7bb +0  9F010000
[3e4c20e9c53226e] jit-backend-dump}
[3e4c20e9c5354d1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfc7d2 +0  C0010000
[3e4c20e9c5361be] jit-backend-dump}
[3e4c20e9c539403] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfc7e0 +0  CE010000
[3e4c20e9c53a0fa] jit-backend-dump}
[3e4c20e9c53d304] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfc7f2 +0  D8010000
[3e4c20e9c53dfd6] jit-backend-dump}
[3e4c20e9c5411a0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfc808 +0  DE010000
[3e4c20e9c541e6c] jit-backend-dump}
[3e4c20e9c545046] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfc821 +0  E1010000
[3e4c20e9c545cfc] jit-backend-dump}
[3e4c20e9c548e89] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfc835 +0  E9010000
[3e4c20e9c549b4c] jit-backend-dump}
[3e4c20e9c54ccdf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfc842 +0  F8010000
[3e4c20e9c54d999] jit-backend-dump}
[3e4c20e9c550b78] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfc84c +0  0A020000
[3e4c20e9c551838] jit-backend-dump}
[3e4c20e9c554a02] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfc860 +0  12020000
[3e4c20e9c5556bf] jit-backend-dump}
[3e4c20e9c558aff] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfb60b +0  21110000
[3e4c20e9c5597cb] jit-backend-dump}
[3e4c20e9c55d89d] jit-backend}
[3e4c20e9c561367] {jit-log-opt-bridge
# bridge out of Guard 0x3c64cc8 with 52 ops
[p0, p1]
+182: guard_class(p1, 16504944, descr=<Guard0x384bdc0>) [p0, p1]
+194: i3 = getfield_gc_i(p1, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+198: i5 = int_eq(i3, 0)
+202: guard_true(i5, descr=<Guard0x3c656a0>) [p0, p1]
debug_merge_point(0, 0, '0')
+208: guard_class(p0, 16435920, descr=<Guard0x3c656e8>) [p0, p1]
+221: p7 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+232: guard_value(p7, ConstPtr(ptr8), descr=<Guard0x3c65730>) [p0, p1]
+241: p9 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+245: p10 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+249: guard_class(p9, 16499664, descr=<Guard0x3c65778>) [p0, p1]
+263: p12 = getfield_gc_r(p9, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+267: guard_class(p10, 16437216, descr=<Guard0x3c657c0>) [p0, p1]
+280: p14 = getfield_gc_r(p10, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+284: guard_nonnull_class(p14, ConstClass(ForwardLink), descr=<Guard0x384be20>) [p0, p1]
debug_merge_point(0, 0, '(vector-ref t5265 1) from (shortestPath AppRand12)')
+303: guard_not_invalidated(descr=<Guard0x3c65808>) [p0, p1]
+303: p16 = getfield_gc_r(p9, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+307: guard_nonnull_class(p16, ConstClass(W_Vector), descr=<Guard0x384be80>) [p0, p1]
+326: i18 = getfield_gc_i(p16, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+330: i20 = int_lt(1, i18)
+334: guard_true(i20, descr=<Guard0x3c65850>) [p0, p1]
+340: p21 = getfield_gc_r(p16, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+344: guard_class(p21, 16623792, descr=<Guard0x3c65898>) [p0, p1]
+358: p23 = getfield_gc_r(p16, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+362: i25 = getarrayitem_gc_i(p23, 1, descr=<ArrayS 8>)
debug_merge_point(0, 0, '(let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))')
debug_merge_point(0, 0, 'AppRand13')
+366: guard_class(p12, 16499664, descr=<Guard0x3c658e0>) [p0, p1]
+380: p27 = getfield_gc_r(p12, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(shortestPath AppRand14)')
+380: p28 = getfield_gc_r(p12, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+385: guard_nonnull_class(p28, 16510992, descr=<Guard0x384bee0>) [p0, p1]
+405: p30 = getfield_gc_r(p28, descr=<FieldP pycket.values.W_Closure.inst_caselam 8 pure>)
+416: guard_value(p30, ConstPtr(ptr31), descr=<Guard0x3c65928>) [p0, p1]
+425: p32 = getfield_gc_r(p28, descr=<FieldP rpython.tool.pairtype.W_ClosureSize1.inst__envs_0 16 pure>)
+429: i33 = instance_ptr_eq(p12, p32)
+432: guard_true(i33, descr=<Guard0x3c65970>) [p0, p1]
debug_merge_point(0, 0, '(if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath AppRand14)')
+438: i35 = int_eq(i25, 0)
+442: guard_true(i35, descr=<Guard0x3c659b8>) [p0, p1]
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)) from (shortestPath AppRand14)')
debug_merge_point(0, 0, '(min AppRand13 AppRand15)')
debug_merge_point(0, 0, '(+ 1 AppRand16)')
+448: p36 = getfield_gc_r(p10, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+459: guard_value(p36, ConstPtr(ptr37), descr=<Guard0x3c65a00>) [p0, p1]
+468: p38 = getfield_gc_r(p10, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+472: i39 = getfield_gc_i(p10, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+476: p40 = getfield_gc_r(p10, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)) from (+ 1 AppRand16)')
+480: jump(p38, i39, 1, p40, descr=TargetToken(80549616))
+512: --end of the loop--
[3e4c20e9c58f912] jit-log-opt-bridge}
[3e4c20e9c68601c] {jit-backend
[3e4c20e9c6bd83e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfcb
[3e4c20e9c6c3a2f] jit-backend-dump}
[3e4c20e9c6cd559] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfcbf4 +0  20000000
[3e4c20e9c6ceaf4] jit-backend-dump}
[3e4c20e9c6d2665] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfcd45 +0  20000000
[3e4c20e9c6d342f] jit-backend-dump}
[3e4c20e9c6d67be] {jit-backend-addr
bridge out of Guard 0x7f4eb6d37fa0 has address 0x7f4eb6bfcbf0 to 0x7f4eb6bfcd40
       gc table: 0x7f4eb6bfcb80
    jump target: 0x7f4eb6bfcbf0
         resops: 0x7f4eb6bfcbfe
       failures: 0x7f4eb6bfcd40
            end: 0x7f4eb6bfceb7
[3e4c20e9c6d882f] jit-backend-addr}
[3e4c20e9c6dbda7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfcc0e +0  71010000
[3e4c20e9c6dcc19] jit-backend-dump}
[3e4c20e9c6dff34] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfcc25 +0  76010000
[3e4c20e9c6e0c8c] jit-backend-dump}
[3e4c20e9c6e3fd2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfcc32 +0  85010000
[3e4c20e9c6e4d18] jit-backend-dump}
[3e4c20e9c6e7fef] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfcc4a +0  89010000
[3e4c20e9c6e8d36] jit-backend-dump}
[3e4c20e9c6ec078] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfcc58 +0  B3010000
[3e4c20e9c6ecdb5] jit-backend-dump}
[3e4c20e9c6f003d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfcc6a +0  BD010000
[3e4c20e9c6f0d7a] jit-backend-dump}
[3e4c20e9c6f40d8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfcc85 +0  BE010000
[3e4c20e9c6f4dc0] jit-backend-dump}
[3e4c20e9c6f80d4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfcc9d +0  C2010000
[3e4c20e9c6f8dce] jit-backend-dump}
[3e4c20e9c6fc0b8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfccb1 +0  CA010000
[3e4c20e9c6fcdc7] jit-backend-dump}
[3e4c20e9c700024] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfccbe +0  D9010000
[3e4c20e9c700d55] jit-backend-dump}
[3e4c20e9c7041f1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf9ba0 +0  4C300000
[3e4c20e9c704f22] jit-backend-dump}
[3e4c20e9c7090ae] jit-backend}
[3e4c20e9c70cc97] {jit-log-opt-bridge
# bridge out of Guard 0x7f4eb6d37fa0 with 37 ops
[p0, p1]
+134: guard_class(p1, 16499664, descr=<Guard0x384bf40>) [p0, p1]
+146: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+150: guard_nonnull_class(p3, ConstClass(W_Vector), descr=<Guard0x384bfa0>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))')
+169: guard_class(p0, 16437216, descr=<Guard0x3c65a48>) [p0, p1]
+182: p6 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+186: guard_nonnull_class(p6, ConstClass(ForwardLink), descr=<Guard0x3cde020>) [p0, p1]
debug_merge_point(0, 0, '(vector-ref t5265 0)')
+206: guard_not_invalidated(descr=<Guard0x3c65a90>) [p0, p1]
+206: i8 = getfield_gc_i(p3, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+210: i10 = int_lt(0, i8)
+214: guard_true(i10, descr=<Guard0x3c65ad8>) [p0, p1]
+220: p11 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+224: guard_class(p11, 16623792, descr=<Guard0x3c65b20>) [p0, p1]
+238: p13 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+242: i15 = getarrayitem_gc_i(p13, 0, descr=<ArrayS 8>)
debug_merge_point(0, 0, '(let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16))))')
debug_merge_point(0, 0, '(shortestPath AppRand12)')
+247: p16 = getfield_gc_r(p1, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+251: guard_class(p16, 16499664, descr=<Guard0x3c65b68>) [p0, p1]
+265: p18 = getfield_gc_r(p16, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+270: guard_nonnull_class(p18, 16510992, descr=<Guard0x3cde080>) [p0, p1]
+289: p20 = getfield_gc_r(p18, descr=<FieldP pycket.values.W_Closure.inst_caselam 8 pure>)
+300: guard_value(p20, ConstPtr(ptr21), descr=<Guard0x3c65bb0>) [p0, p1]
+309: p22 = getfield_gc_r(p18, descr=<FieldP rpython.tool.pairtype.W_ClosureSize1.inst__envs_0 16 pure>)
+313: i23 = instance_ptr_eq(p16, p22)
+316: guard_true(i23, descr=<Guard0x3c65bf8>) [p0, p1]
debug_merge_point(0, 0, '(if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath AppRand12)')
+322: p24 = new_with_vtable(descr=<SizeDescr 24>)
+366: p25 = new_with_vtable(descr=<SizeDescr 40>)
+377: setfield_gc(p25, p6, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+381: setfield_gc(p24, p16, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+385: setfield_gc(p24, i15, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+389: setfield_gc(p25, p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+393: setfield_gc(p25, p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+404: setfield_gc(p25, ConstPtr(ptr26), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+408: jump(p24, p25, descr=TargetToken(80549376))
+448: --end of the loop--
[3e4c20e9c72d876] jit-log-opt-bridge}
[3e4c20e9c7cf02d] {jit-backend
[3e4c20e9c80565d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfcf
[3e4c20e9c80af4c] jit-backend-dump}
[3e4c20e9c8148fb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfcfd4 +0  20000000
[3e4c20e9c815b36] jit-backend-dump}
[3e4c20e9c819873] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfd0e5 +0  20000000
[3e4c20e9c81a5de] jit-backend-dump}
[3e4c20e9c81d964] {jit-backend-addr
bridge out of Guard 0x384b460 has address 0x7f4eb6bfcfd0 to 0x7f4eb6bfd0e0
       gc table: 0x7f4eb6bfcf70
    jump target: 0x7f4eb6bfcfd0
         resops: 0x7f4eb6bfcfde
       failures: 0x7f4eb6bfd0e0
            end: 0x7f4eb6bfd21f
[3e4c20e9c81fa3f] jit-backend-addr}
[3e4c20e9c822f34] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfcfee +0  31010000
[3e4c20e9c823d2f] jit-backend-dump}
[3e4c20e9c827107] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfd005 +0  36010000
[3e4c20e9c827e72] jit-backend-dump}
[3e4c20e9c82b257] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfd00e +0  65010000
[3e4c20e9c82bf54] jit-backend-dump}
[3e4c20e9c82f1a4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfd01d +0  72010000
[3e4c20e9c82fe8c] jit-backend-dump}
[3e4c20e9c8330bb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfd031 +0  7A010000
[3e4c20e9c833d7e] jit-backend-dump}
[3e4c20e9c836fb3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfd047 +0  80010000
[3e4c20e9c837c66] jit-backend-dump}
[3e4c20e9c83af1c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfd058 +0  8B010000
[3e4c20e9c83bbe2] jit-backend-dump}
[3e4c20e9c83edef] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfd06f +0  90010000
[3e4c20e9c83faac] jit-backend-dump}
[3e4c20e9c842f39] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfa7a0 +0  2C280000
[3e4c20e9c843c11] jit-backend-dump}
[3e4c20e9c847e21] jit-backend}
[3e4c20e9c84bad1] {jit-log-opt-bridge
# bridge out of Guard 0x384b460 with 27 ops
[p0, p1, i2, i3]
+118: guard_class(p0, 16435920, descr=<Guard0x3cde0e0>) [p0, p1, i2, i3]
+130: p5 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+134: guard_nonnull_class(p5, ConstClass(ForwardLink), descr=<Guard0x3cde140>) [p0, p1, i2, i3]
debug_merge_point(0, 0, '(min AppRand13 AppRand15)')
+153: guard_not_invalidated(descr=<Guard0x3c65c40>) [p0, p1, i2, i3]
+153: i7 = int_lt(i3, i2)
+156: guard_false(i7, descr=<Guard0x3c65c88>) [p0, p1, i2, i3]
debug_merge_point(0, 0, '(+ 1 AppRand16)')
+162: i9 = int_add_ovf(1, i2)
+171: guard_no_overflow(descr=<Guard0x3c65cd0>) [p0, p1, i2, i3]
+177: p10 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+188: guard_value(p10, ConstPtr(ptr11), descr=<Guard0x3c65d18>) [p0, p1, i2, i3]
+197: p12 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+201: p13 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+205: guard_class(p12, 16499664, descr=<Guard0x3c65d60>) [p0, p1, i2, i3]
+219: p15 = getfield_gc_r(p12, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+223: guard_class(p13, 16437216, descr=<Guard0x3c65da8>) [p0, p1, i2, i3]
+236: p17 = getfield_gc_r(p13, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+240: guard_nonnull_class(p17, ConstClass(ForwardLink), descr=<Guard0x3cde1a0>) [p0, p1, i2, i3]
debug_merge_point(0, 0, '(vector-ref t5265 1) from (+ 1 AppRand16)')
+259: p19 = new_with_vtable(descr=<SizeDescr 48>)
+300: setfield_gc(p19, p17, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+311: setfield_gc(p19, ConstPtr(ptr20), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+315: setfield_gc(p19, p15, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+319: setfield_gc(p19, p13, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+323: setfield_gc(p19, i9, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+327: jump(p12, p19, descr=TargetToken(80547776))
+368: --end of the loop--
[3e4c20e9c865c96] jit-log-opt-bridge}
[3e4c20e9c92193f] {jit-backend
[3e4c20e9c95f35f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfd2b
[3e4c20e9c9644b4] jit-backend-dump}
[3e4c20e9c96dd71] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfd2f4 +0  20000000
[3e4c20e9c96ef48] jit-backend-dump}
[3e4c20e9c972a4e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfd415 +0  20000000
[3e4c20e9c97386b] jit-backend-dump}
[3e4c20e9c976c00] {jit-backend-addr
bridge out of Guard 0x39823c8 has address 0x7f4eb6bfd2f0 to 0x7f4eb6bfd410
       gc table: 0x7f4eb6bfd2b0
    jump target: 0x7f4eb6bfd2f0
         resops: 0x7f4eb6bfd2fe
       failures: 0x7f4eb6bfd410
            end: 0x7f4eb6bfd4fb
[3e4c20e9c978d90] jit-backend-addr}
[3e4c20e9c97c4a8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfd310 +0  5B010000
[3e4c20e9c97d2c2] jit-backend-dump}
[3e4c20e9c9806c8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfd321 +0  66010000
[3e4c20e9c9813f9] jit-backend-dump}
[3e4c20e9c98469f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfd340 +0  63010000
[3e4c20e9c9853ec] jit-backend-dump}
[3e4c20e9c98863c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfd354 +0  6B010000
[3e4c20e9c98935b] jit-backend-dump}
[3e4c20e9c98c654] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfd361 +0  7A010000
[3e4c20e9c98d363] jit-backend-dump}
[3e4c20e9c99089e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfa292 +0  5A300000
[3e4c20e9c9915c3] jit-backend-dump}
[3e4c20e9c9956eb] jit-backend}
[3e4c20e9c999296] {jit-log-opt-bridge
# bridge out of Guard 0x39823c8 with 35 ops
[p0, p1, p2, p3, p4]
+86: guard_not_invalidated(descr=<Guard0x3cde200>) [p0, p1, p2, p3, p4]
+86: i5 = getfield_gc_i(p2, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+90: i7 = int_lt(0, i5)
+94: guard_true(i7, descr=<Guard0x3c65df0>) [p0, p1, p2, p3, p4]
+100: p8 = getfield_gc_r(p2, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+104: guard_class(p8, 16623792, descr=<Guard0x3c65e38>) [p0, p1, p2, p3, p4]
+117: p10 = getfield_gc_r(p2, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+121: i12 = getarrayitem_gc_i(p10, 0, descr=<ArrayS 8>)
debug_merge_point(0, 0, '(let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16))))')
debug_merge_point(0, 0, '(shortestPath AppRand12)')
+125: p13 = getfield_gc_r(p3, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+129: guard_nonnull_class(p13, 16510992, descr=<Guard0x3cde260>) [p0, p1, p2, p3, p4]
+148: p15 = getfield_gc_r(p13, descr=<FieldP pycket.values.W_Closure.inst_caselam 8 pure>)
+159: guard_value(p15, ConstPtr(ptr16), descr=<Guard0x3c65e80>) [p0, p1, p2, p3, p4]
+168: p17 = getfield_gc_r(p13, descr=<FieldP rpython.tool.pairtype.W_ClosureSize1.inst__envs_0 16 pure>)
+172: i18 = instance_ptr_eq(p3, p17)
+175: guard_true(i18, descr=<Guard0x3c65ec8>) [p0, p1, p2, p3, p4]
debug_merge_point(0, 0, '(if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath AppRand12)')
+181: p19 = new_with_vtable(descr=<SizeDescr 24>)
+231: p20 = new_with_vtable(descr=<SizeDescr 40>)
+242: p21 = new_with_vtable(descr=<SizeDescr 24>)
+254: setfield_gc(p21, p3, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+258: setfield_gc(p21, p2, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+262: p22 = new_with_vtable(descr=<SizeDescr 40>)
+273: setfield_gc(p22, p4, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+277: setfield_gc(p22, p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+281: setfield_gc(p22, p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+292: setfield_gc(p22, ConstPtr(ptr23), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+296: setfield_gc(p19, p3, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+300: setfield_gc(p19, i12, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+304: setfield_gc(p20, p4, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+308: setfield_gc(p20, p21, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+312: setfield_gc(p20, p22, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+316: setfield_gc(p20, ConstPtr(ptr24), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+320: jump(p19, p20, descr=TargetToken(80549376))
+352: --end of the loop--
[3e4c20e9c9b7d8a] jit-log-opt-bridge}
[3e4c20e9cadc314] {jit-backend
[3e4c20e9cb336a8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfd640 +0  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8CE201000048FF04253091AA038139100A01000F85000000004C8B79104983FF01720741813FF08C00000F85000000004D8B77084983FE010F8E000000004D8B771841813EC8EB02000F85000000004D8B77104D8B7E18813A201600000F850000000041813FF08C00000F85000000004C8B72204C8B2D04FFFFFF4D39EE0F85000000004C8B6A104C8B72284C8B621841813C24101100000F85000000004D8B5424084983FA01720741813A900F00000F850000000041817D00100A01000F85000000004D8B4D084D8B45104983F8017207418138503601000F8500000000498B7808488B35C5FEFFFF4839F70F8500000000498B70104939F50F8500000000498B77084883FE000F8E00000000498B7718813EC8EB02000F8500000000498B77104C8B4610418138F08C00000F8500000000488B0C25F091F900488D9188000000483B14251092F9000F87BD00000048891425F091F90048C701100A0100488D511848C70210110000488D722848C706100A01004C896E084C897E104C8D7E1849C707201600004D8957084D894F104D8967184C8B2544FEFFFF4D8967204D8977284C8941104C8B0539FEFFFF4C894220488972104C897A184C8952084C89690848898D300100004889953801000049BB90A1BFB64E7F000041FFE3662E0F1F84000000000048C7442408FFFFFF0049BB10D5BFB64E7F00004C895D204D8D9BE0ADFEFF41FFD3E9F8FDFFFF49BB30D6BFB64E7F00004C895D204D8D9BC0B4FEFF41FFD3E92EFFFFFFFF3517FDFFFF49BB20D5BFB64E7F000041534D8D9BE0AAFEFF41FFE3FF3503FDFFFF49BB30D5BFB64E7F000041534D8D9BD0AAFEFF41FFE3FF35EFFCFFFF49BB40D5BFB64E7F000041534D8D9BC0AAFEFF41FFE3FF35DBFCFFFF49BB50D5BFB64E7F000041534D8D9BB0AAFEFF41FFE3FF35C7FCFFFF49BB60D5BFB64E7F000041534D8D9BA0AAFEFF41FFE3FF35B3FCFFFF49BB70D5BFB64E7F000041534D8D9B90AAFEFF41FFE3FF359FFCFFFF49BB80D5BFB64E7F000041534D8D9B80AAFEFF41FFE3FF3593FCFFFF49BB90D5BFB64E7F000041534D8D9B70AAFEFF41FFE3FF357FFCFFFF49BBA0D5BFB64E7F000041534D8D9B60AAFEFF41FFE3FF356BFCFFFF49BBB0D5BFB64E7F000041534D8D9B50AAFEFF41FFE3FF3557FCFFFF49BBC0D5BFB64E7F000041534D8D9B40AAFEFF41FFE3FF3543FCFFFF49BBD0D5BFB64E7F000041534D8D9B30AAFEFF41FFE3FF3537FCFFFF49BBE0D5BFB64E7F000041534D8D9B20AAFEFF41FFE3FF3523FCFFFF49BBF0D5BFB64E7F000041534D8D9B10AAFEFF41FFE3FF350FFCFFFF49BB00D6BFB64E7F000041534D8D9B00AAFEFF41FFE3FF35FBFBFFFF49BB10D6BFB64E7F000041534D8D9BF0A9FEFF41FFE3FF35E7FBFFFF49BB20D6BFB64E7F000041534D8D9BE0A9FEFF41FFE3
[3e4c20e9cb3abe8] jit-backend-dump}
[3e4c20e9cb44aab] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfd6f4 +0  20000000
[3e4c20e9cb45f2c] jit-backend-dump}
[3e4c20e9cb49b9b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfd8e5 +0  20000000
[3e4c20e9cb4a96e] jit-backend-dump}
[3e4c20e9cb4dd99] {jit-backend-addr
bridge out of Guard 0x39829f8 has address 0x7f4eb6bfd6f0 to 0x7f4eb6bfd8e0
       gc table: 0x7f4eb6bfd640
    jump target: 0x7f4eb6bfd6f0
         resops: 0x7f4eb6bfd6fe
       failures: 0x7f4eb6bfd8e0
            end: 0x7f4eb6bfdaff
[3e4c20e9cb4fe0a] jit-backend-addr}
[3e4c20e9cb56ccd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfd70e +0  2D020000
[3e4c20e9cb57c71] jit-backend-dump}
[3e4c20e9cb5b11c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfd725 +0  32020000
[3e4c20e9cb5be75] jit-backend-dump}
[3e4c20e9cb5f0b0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfd733 +0  40020000
[3e4c20e9cb5fdea] jit-backend-dump}
[3e4c20e9cb62f2b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfd744 +0  4B020000
[3e4c20e9cb63c50] jit-backend-dump}
[3e4c20e9cb66d34] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfd758 +0  53020000
[3e4c20e9cb67a37] jit-backend-dump}
[3e4c20e9cb6ab28] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfd765 +0  62020000
[3e4c20e9cb6b86f] jit-backend-dump}
[3e4c20e9cb6ea88] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfd779 +0  6A020000
[3e4c20e9cb6f78b] jit-backend-dump}
[3e4c20e9cb7291e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfd793 +0  6C020000
[3e4c20e9cb73671] jit-backend-dump}
[3e4c20e9cb76841] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfd7ab +0  70020000
[3e4c20e9cb77538] jit-backend-dump}
[3e4c20e9cb7a6c5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfd7b9 +0  7E020000
[3e4c20e9cb7b3cb] jit-backend-dump}
[3e4c20e9cb7e561] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfd7d4 +0  7F020000
[3e4c20e9cb7f26a] jit-backend-dump}
[3e4c20e9cb823d3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfd7e8 +0  87020000
[3e4c20e9cb83107] jit-backend-dump}
[3e4c20e9cb86266] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfd7f5 +0  96020000
[3e4c20e9cb86f66] jit-backend-dump}
[3e4c20e9cb8a0e6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfd803 +0  A4020000
[3e4c20e9cb8addd] jit-backend-dump}
[3e4c20e9cb8df8c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfd813 +0  B0020000
[3e4c20e9cb8ecc0] jit-backend-dump}
[3e4c20e9cb91e1c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfd828 +0  B7020000
[3e4c20e9cb92ae2] jit-backend-dump}
[3e4c20e9cb95efa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfac83 +0  692A0000
[3e4c20e9cb96c19] jit-backend-dump}
[3e4c20e9cb9b053] jit-backend}
[3e4c20e9cb9ec82] {jit-log-opt-bridge
# bridge out of Guard 0x39829f8 with 65 ops
[p0, p1]
+198: guard_not_invalidated(descr=<Guard0x3cde2c0>) [p0, p1]
+198: guard_class(p1, 16499664, descr=<Guard0x3c65f10>) [p0, p1]
+210: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+214: guard_nonnull_class(p3, ConstClass(W_Vector), descr=<Guard0x3cde320>) [p0, p1]
+233: i5 = getfield_gc_i(p3, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+237: i7 = int_lt(1, i5)
+241: guard_true(i7, descr=<Guard0x3c65f58>) [p0, p1]
+247: p8 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+251: guard_class(p8, 16622984, descr=<Guard0x3c65fa0>) [p0, p1]
+264: p10 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+268: p12 = getarrayitem_gc_r(p10, 1, descr=<ArrayP 8>)
+272: guard_class(p0, 16437216, descr=<Guard0x3d5cb60>) [p0, p1]
+284: guard_class(p12, ConstClass(W_Vector), descr=<Guard0x3d5cbf0>) [p0, p1]
+297: p15 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+308: guard_value(p15, ConstPtr(ptr16), descr=<Guard0x3d5cc38>) [p0, p1]
+317: p17 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+321: i18 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+325: p19 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))')
+329: guard_class(p19, 16435920, descr=<Guard0x3d5cc80>) [p0, p1]
+343: p21 = getfield_gc_r(p19, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+348: guard_nonnull_class(p21, ConstClass(ForwardLink), descr=<Guard0x3cde380>) [p0, p1]
debug_merge_point(0, 0, 'AppRand13')
+367: guard_class(p17, 16499664, descr=<Guard0x3d5ccc8>) [p0, p1]
+381: p24 = getfield_gc_r(p17, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(shortestPath AppRand14)')
+385: p25 = getfield_gc_r(p17, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+389: guard_nonnull_class(p25, 16510992, descr=<Guard0x3cde3e0>) [p0, p1]
+408: p27 = getfield_gc_r(p25, descr=<FieldP pycket.values.W_Closure.inst_caselam 8 pure>)
+419: guard_value(p27, ConstPtr(ptr28), descr=<Guard0x3d5cd58>) [p0, p1]
+428: p29 = getfield_gc_r(p25, descr=<FieldP rpython.tool.pairtype.W_ClosureSize1.inst__envs_0 16 pure>)
+432: i30 = instance_ptr_eq(p17, p29)
+435: guard_true(i30, descr=<Guard0x3d5cde8>) [p0, p1]
debug_merge_point(0, 0, '(if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath AppRand14)')
debug_merge_point(0, 0, '(let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))')
debug_merge_point(0, 0, '(vector-ref t5265 0)')
+441: i31 = getfield_gc_i(p12, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+445: i33 = int_lt(0, i31)
+449: guard_true(i33, descr=<Guard0x3d5ce78>) [p0, p1]
+455: p34 = getfield_gc_r(p12, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+459: guard_class(p34, 16622984, descr=<Guard0x3d5cf08>) [p0, p1]
+471: p36 = getfield_gc_r(p12, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+475: p38 = getarrayitem_gc_r(p36, 0, descr=<ArrayP 8>)
+479: guard_class(p38, ConstClass(W_Vector), descr=<Guard0x3d5cf98>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16))))')
debug_merge_point(0, 0, '(shortestPath AppRand12)')
debug_merge_point(0, 0, '(if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath AppRand12)')
+492: p40 = new_with_vtable(descr=<SizeDescr 24>)
+536: p41 = new_with_vtable(descr=<SizeDescr 40>)
+547: p42 = new_with_vtable(descr=<SizeDescr 24>)
+558: setfield_gc(p42, p17, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+562: setfield_gc(p42, p12, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+566: p43 = new_with_vtable(descr=<SizeDescr 48>)
+577: setfield_gc(p43, p21, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+581: setfield_gc(p43, p24, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+585: setfield_gc(p43, p19, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+596: setfield_gc(p43, ConstPtr(ptr44), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+600: setfield_gc(p43, i18, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+604: setfield_gc(p40, p38, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+615: setfield_gc(p41, ConstPtr(ptr45), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+619: setfield_gc(p41, p42, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+623: setfield_gc(p41, p43, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+627: setfield_gc(p41, p21, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+631: setfield_gc(p40, p17, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+635: jump(p40, p41, descr=TargetToken(80549376))
+672: --end of the loop--
[3e4c20e9cbd3196] jit-log-opt-bridge}
[3e4c20e9cd50430] {jit-backend
[3e4c20e9cdab610] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfdc
[3e4c20e9cdb289a] jit-backend-dump}
[3e4c20e9cdbceda] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfdcd4 +0  20000000
[3e4c20e9cdbe135] jit-backend-dump}
[3e4c20e9cdc1eae] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfdeb5 +0  20000000
[3e4c20e9cdc2c13] jit-backend-dump}
[3e4c20e9cdc63dd] {jit-backend-addr
bridge out of Guard 0x7f4eb6d37460 has address 0x7f4eb6bfdcd0 to 0x7f4eb6bfdeb0
       gc table: 0x7f4eb6bfdc30
    jump target: 0x7f4eb6bfdcd0
         resops: 0x7f4eb6bfdcde
       failures: 0x7f4eb6bfdeb0
            end: 0x7f4eb6bfe0b3
[3e4c20e9cdc8653] jit-backend-addr}
[3e4c20e9cdcf7b4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfdcee +0  1D020000
[3e4c20e9cdd078f] jit-backend-dump}
[3e4c20e9cdd3efd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfdd05 +0  22020000
[3e4c20e9cdd4c28] jit-backend-dump}
[3e4c20e9cdd812f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfdd13 +0  30020000
[3e4c20e9cdd8e0d] jit-backend-dump}
[3e4c20e9cddc235] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfdd24 +0  3B020000
[3e4c20e9cddcee2] jit-backend-dump}
[3e4c20e9cde013f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfdd38 +0  43020000
[3e4c20e9cde0df6] jit-backend-dump}
[3e4c20e9cde428c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfdd45 +0  52020000
[3e4c20e9cde4f82] jit-backend-dump}
[3e4c20e9cde818d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfdd59 +0  5A020000
[3e4c20e9cde8e34] jit-backend-dump}
[3e4c20e9cdebff2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfdd73 +0  5C020000
[3e4c20e9cdeccc1] jit-backend-dump}
[3e4c20e9cdefefc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfdd8b +0  60020000
[3e4c20e9cdf0bbf] jit-backend-dump}
[3e4c20e9cdf3d80] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfdd99 +0  6E020000
[3e4c20e9cdf4a46] jit-backend-dump}
[3e4c20e9cdf7c75] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfddb4 +0  6F020000
[3e4c20e9cdf8922] jit-backend-dump}
[3e4c20e9cdfbb17] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfddc8 +0  77020000
[3e4c20e9cdfc7e6] jit-backend-dump}
[3e4c20e9cdffa25] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfddd5 +0  86020000
[3e4c20e9ce006cf] jit-backend-dump}
[3e4c20e9ce03884] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfdde3 +0  94020000
[3e4c20e9ce04565] jit-backend-dump}
[3e4c20e9ce077ad] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfddf3 +0  A0020000
[3e4c20e9ce08454] jit-backend-dump}
[3e4c20e9ce0b854] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8ced +0  DF4F0000
[3e4c20e9ce0c50b] jit-backend-dump}
[3e4c20e9ce10651] jit-backend}
[3e4c20e9ce1436c] {jit-log-opt-bridge
# bridge out of Guard 0x7f4eb6d37460 with 64 ops
[p0, p1]
+182: guard_not_invalidated(descr=<Guard0x3cde440>) [p0, p1]
+182: guard_class(p1, 16499664, descr=<Guard0x3d5d028>) [p0, p1]
+194: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+198: guard_nonnull_class(p3, ConstClass(W_Vector), descr=<Guard0x3cde4a0>) [p0, p1]
+217: i5 = getfield_gc_i(p3, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+221: i7 = int_lt(1, i5)
+225: guard_true(i7, descr=<Guard0x3d5d0b8>) [p0, p1]
+231: p8 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+235: guard_class(p8, 16622984, descr=<Guard0x3d5d148>) [p0, p1]
+248: p10 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+252: p12 = getarrayitem_gc_r(p10, 1, descr=<ArrayP 8>)
+256: guard_class(p0, 16437216, descr=<Guard0x3d5d1d8>) [p0, p1]
+268: guard_class(p12, ConstClass(W_Vector), descr=<Guard0x3d5d220>) [p0, p1]
+281: p15 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+292: guard_value(p15, ConstPtr(ptr16), descr=<Guard0x3d5d268>) [p0, p1]
+301: p17 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+305: i18 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+309: p19 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))')
+313: guard_class(p19, 16437216, descr=<Guard0x3d5d2b0>) [p0, p1]
+327: p21 = getfield_gc_r(p19, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+332: guard_nonnull_class(p21, ConstClass(ForwardLink), descr=<Guard0x3cde500>) [p0, p1]
debug_merge_point(0, 0, 'AppRand13')
+351: guard_class(p17, 16499664, descr=<Guard0x3d5d2f8>) [p0, p1]
+365: p24 = getfield_gc_r(p17, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(shortestPath AppRand14)')
+369: p25 = getfield_gc_r(p17, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+373: guard_nonnull_class(p25, 16510992, descr=<Guard0x3cde560>) [p0, p1]
+392: p27 = getfield_gc_r(p25, descr=<FieldP pycket.values.W_Closure.inst_caselam 8 pure>)
+403: guard_value(p27, ConstPtr(ptr28), descr=<Guard0x3d5d340>) [p0, p1]
+412: p29 = getfield_gc_r(p25, descr=<FieldP rpython.tool.pairtype.W_ClosureSize1.inst__envs_0 16 pure>)
+416: i30 = instance_ptr_eq(p17, p29)
+419: guard_true(i30, descr=<Guard0x3d5d388>) [p0, p1]
debug_merge_point(0, 0, '(if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath AppRand14)')
debug_merge_point(0, 0, '(let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))')
debug_merge_point(0, 0, '(vector-ref t5265 0)')
+425: i31 = getfield_gc_i(p12, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+429: i33 = int_lt(0, i31)
+433: guard_true(i33, descr=<Guard0x3d5d3d0>) [p0, p1]
+439: p34 = getfield_gc_r(p12, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+443: guard_class(p34, 16623792, descr=<Guard0x3d5d418>) [p0, p1]
+455: p36 = getfield_gc_r(p12, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+459: i38 = getarrayitem_gc_i(p36, 0, descr=<ArrayS 8>)
debug_merge_point(0, 0, '(let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16))))')
debug_merge_point(0, 0, '(shortestPath AppRand12)')
debug_merge_point(0, 0, '(if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath AppRand12)')
+463: p39 = new_with_vtable(descr=<SizeDescr 24>)
+510: p40 = new_with_vtable(descr=<SizeDescr 40>)
+521: p41 = new_with_vtable(descr=<SizeDescr 24>)
+532: setfield_gc(p41, p17, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+536: setfield_gc(p41, p12, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+540: p42 = new_with_vtable(descr=<SizeDescr 48>)
+551: setfield_gc(p42, p21, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+555: setfield_gc(p42, p24, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+559: setfield_gc(p42, p19, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+570: setfield_gc(p42, ConstPtr(ptr43), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+574: setfield_gc(p42, i18, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+585: setfield_gc(p40, ConstPtr(ptr44), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+589: setfield_gc(p40, p41, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+593: setfield_gc(p40, p42, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+597: setfield_gc(p40, p21, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+601: setfield_gc(p39, p17, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+605: setfield_gc(p39, i38, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+609: jump(p39, p40, descr=TargetToken(80549376))
+640: --end of the loop--
[3e4c20e9ce46c7b] jit-log-opt-bridge}
[3e4c20e9cf57bd3] {jit-backend
[3e4c20e9cfad602] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfe
[3e4c20e9cfb4d8b] jit-backend-dump}
[3e4c20e9cfbfb37] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfe2b4 +0  20000000
[3e4c20e9cfc0eb7] jit-backend-dump}
[3e4c20e9cfc4f30] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfe4a5 +0  20000000
[3e4c20e9cfc5db8] jit-backend-dump}
[3e4c20e9cfc91cd] {jit-backend-addr
bridge out of Guard 0x7f4eb6d37538 has address 0x7f4eb6bfe2b0 to 0x7f4eb6bfe4a0
       gc table: 0x7f4eb6bfe200
    jump target: 0x7f4eb6bfe2b0
         resops: 0x7f4eb6bfe2be
       failures: 0x7f4eb6bfe4a0
            end: 0x7f4eb6bfe6bf
[3e4c20e9cfcb5ec] jit-backend-addr}
[3e4c20e9cfceb36] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfe2ce +0  2D020000
[3e4c20e9cfcf97a] jit-backend-dump}
[3e4c20e9cfd2dd3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfe2e5 +0  32020000
[3e4c20e9cfd3af2] jit-backend-dump}
[3e4c20e9cfd6e96] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfe2f3 +0  40020000
[3e4c20e9cfd7b84] jit-backend-dump}
[3e4c20e9cfdae52] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfe304 +0  4B020000
[3e4c20e9cfdbb5e] jit-backend-dump}
[3e4c20e9cfded53] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfe318 +0  53020000
[3e4c20e9cfdfa4d] jit-backend-dump}
[3e4c20e9cfe2c8e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfe325 +0  62020000
[3e4c20e9cfe3973] jit-backend-dump}
[3e4c20e9cfe6af0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfe339 +0  6A020000
[3e4c20e9cfe77bf] jit-backend-dump}
[3e4c20e9cfea9df] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfe353 +0  6C020000
[3e4c20e9cfeb6d0] jit-backend-dump}
[3e4c20e9cfee875] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfe36b +0  70020000
[3e4c20e9cfef544] jit-backend-dump}
[3e4c20e9cff2739] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfe379 +0  7E020000
[3e4c20e9cff341b] jit-backend-dump}
[3e4c20e9cff65bd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfe394 +0  7F020000
[3e4c20e9cff72b1] jit-backend-dump}
[3e4c20e9cffa496] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfe3a8 +0  87020000
[3e4c20e9cffb187] jit-backend-dump}
[3e4c20e9cffe351] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfe3b5 +0  96020000
[3e4c20e9cfff033] jit-backend-dump}
[3e4c20e9d002268] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfe3c3 +0  A4020000
[3e4c20e9d002f43] jit-backend-dump}
[3e4c20e9d006110] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfe3d3 +0  B0020000
[3e4c20e9d006dfb] jit-backend-dump}
[3e4c20e9d00a00e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfe3e8 +0  B7020000
[3e4c20e9d00acf3] jit-backend-dump}
[3e4c20e9d00e127] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8d28 +0  84550000
[3e4c20e9d00edea] jit-backend-dump}
[3e4c20e9d012cf1] jit-backend}
[3e4c20e9d016881] {jit-log-opt-bridge
# bridge out of Guard 0x7f4eb6d37538 with 65 ops
[p0, p1]
+198: guard_not_invalidated(descr=<Guard0x3cde5c0>) [p0, p1]
+198: guard_class(p1, 16499664, descr=<Guard0x3d5d460>) [p0, p1]
+210: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+214: guard_nonnull_class(p3, ConstClass(W_Vector), descr=<Guard0x3cde620>) [p0, p1]
+233: i5 = getfield_gc_i(p3, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+237: i7 = int_lt(1, i5)
+241: guard_true(i7, descr=<Guard0x3d5d4a8>) [p0, p1]
+247: p8 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+251: guard_class(p8, 16622984, descr=<Guard0x3d5d4f0>) [p0, p1]
+264: p10 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+268: p12 = getarrayitem_gc_r(p10, 1, descr=<ArrayP 8>)
+272: guard_class(p0, 16437216, descr=<Guard0x3d5d538>) [p0, p1]
+284: guard_class(p12, ConstClass(W_Vector), descr=<Guard0x3d5d580>) [p0, p1]
+297: p15 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+308: guard_value(p15, ConstPtr(ptr16), descr=<Guard0x3d5d5c8>) [p0, p1]
+317: p17 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+321: i18 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+325: p19 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))')
+329: guard_class(p19, 16437216, descr=<Guard0x3d5d610>) [p0, p1]
+343: p21 = getfield_gc_r(p19, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+348: guard_nonnull_class(p21, ConstClass(ForwardLink), descr=<Guard0x3cde680>) [p0, p1]
debug_merge_point(0, 0, 'AppRand13')
+367: guard_class(p17, 16499664, descr=<Guard0x3d5d6e8>) [p0, p1]
+381: p24 = getfield_gc_r(p17, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(shortestPath AppRand14)')
+385: p25 = getfield_gc_r(p17, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+389: guard_nonnull_class(p25, 16510992, descr=<Guard0x3cde6e0>) [p0, p1]
+408: p27 = getfield_gc_r(p25, descr=<FieldP pycket.values.W_Closure.inst_caselam 8 pure>)
+419: guard_value(p27, ConstPtr(ptr28), descr=<Guard0x3d5d730>) [p0, p1]
+428: p29 = getfield_gc_r(p25, descr=<FieldP rpython.tool.pairtype.W_ClosureSize1.inst__envs_0 16 pure>)
+432: i30 = instance_ptr_eq(p17, p29)
+435: guard_true(i30, descr=<Guard0x3d5d778>) [p0, p1]
debug_merge_point(0, 0, '(if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath AppRand14)')
debug_merge_point(0, 0, '(let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))')
debug_merge_point(0, 0, '(vector-ref t5265 0)')
+441: i31 = getfield_gc_i(p12, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+445: i33 = int_lt(0, i31)
+449: guard_true(i33, descr=<Guard0x3d5d7c0>) [p0, p1]
+455: p34 = getfield_gc_r(p12, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+459: guard_class(p34, 16622984, descr=<Guard0x3d5d808>) [p0, p1]
+471: p36 = getfield_gc_r(p12, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+475: p38 = getarrayitem_gc_r(p36, 0, descr=<ArrayP 8>)
+479: guard_class(p38, ConstClass(W_Vector), descr=<Guard0x3d5d850>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16))))')
debug_merge_point(0, 0, '(shortestPath AppRand12)')
debug_merge_point(0, 0, '(if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath AppRand12)')
+492: p40 = new_with_vtable(descr=<SizeDescr 24>)
+536: p41 = new_with_vtable(descr=<SizeDescr 40>)
+547: p42 = new_with_vtable(descr=<SizeDescr 24>)
+558: setfield_gc(p42, p17, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+562: setfield_gc(p42, p12, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+566: p43 = new_with_vtable(descr=<SizeDescr 48>)
+577: setfield_gc(p43, p21, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+581: setfield_gc(p43, p24, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+585: setfield_gc(p43, p19, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+596: setfield_gc(p43, ConstPtr(ptr44), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+600: setfield_gc(p43, i18, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+604: setfield_gc(p40, p38, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+615: setfield_gc(p41, ConstPtr(ptr45), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+619: setfield_gc(p41, p42, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+623: setfield_gc(p41, p43, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+627: setfield_gc(p41, p21, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+631: setfield_gc(p40, p17, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+635: jump(p40, p41, descr=TargetToken(80549376))
+672: --end of the loop--
[3e4c20e9d04fd66] jit-log-opt-bridge}
[3e4c20e9d1620d4] {jit-backend
[3e4c20e9d1b7f63] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfe
[3e4c20e9d1be126] jit-backend-dump}
[3e4c20e9d1c8363] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfe7e4 +0  20000000
[3e4c20e9d1c9616] jit-backend-dump}
[3e4c20e9d1cd191] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfe975 +0  20000000
[3e4c20e9d1cdf48] jit-backend-dump}
[3e4c20e9d1d138f] {jit-backend-addr
bridge out of Guard 0x7f4eb6d37730 has address 0x7f4eb6bfe7e0 to 0x7f4eb6bfe970
       gc table: 0x7f4eb6bfe780
    jump target: 0x7f4eb6bfe7e0
         resops: 0x7f4eb6bfe7ee
       failures: 0x7f4eb6bfe970
            end: 0x7f4eb6bfeaaf
[3e4c20e9d1d3702] jit-backend-addr}
[3e4c20e9d1d6d29] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfe807 +0  C4010000
[3e4c20e9d1d7b39] jit-backend-dump}
[3e4c20e9d1daf64] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfe818 +0  CF010000
[3e4c20e9d1dbcaa] jit-backend-dump}
[3e4c20e9d1def38] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfe82e +0  D5010000
[3e4c20e9d1dfc57] jit-backend-dump}
[3e4c20e9d1e2dbc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfe850 +0  CF010000
[3e4c20e9d1e3aea] jit-backend-dump}
[3e4c20e9d1e6c36] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfe864 +0  D7010000
[3e4c20e9d1e7952] jit-backend-dump}
[3e4c20e9d1eaa74] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfe871 +0  E6010000
[3e4c20e9d1eb758] jit-backend-dump}
[3e4c20e9d1ee865] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfe87f +0  F4010000
[3e4c20e9d1ef53d] jit-backend-dump}
[3e4c20e9d1f265f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfe88f +0  00020000
[3e4c20e9d1f3359] jit-backend-dump}
[3e4c20e9d1f67f2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf8daf +0  2D5A0000
[3e4c20e9d1f74d9] jit-backend-dump}
[3e4c20e9d1fb41e] jit-backend}
[3e4c20e9d1fef9c] {jit-log-opt-bridge
# bridge out of Guard 0x7f4eb6d37730 with 57 ops
[p0, i1, p2, p3, p4, p5]
+118: guard_not_invalidated(descr=<Guard0x3cde740>) [p0, i1, p2, p3, p4, p5]
+118: i6 = getfield_gc_i(p0, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+129: i8 = int_lt(1, i6)
+133: guard_true(i8, descr=<Guard0x3d5d898>) [p0, i1, p2, p3, p4, p5]
+139: p9 = getfield_gc_r(p0, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+143: guard_class(p9, 16622984, descr=<Guard0x3d5d8e0>) [p0, i1, p2, p3, p4, p5]
+156: p11 = getfield_gc_r(p0, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+160: p13 = getarrayitem_gc_r(p11, 1, descr=<ArrayP 8>)
+164: guard_class(p13, ConstClass(W_Vector), descr=<Guard0x3d5d928>) [p0, i1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))')
debug_merge_point(0, 0, 'AppRand13')
+178: p15 = getfield_gc_r(p4, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(shortestPath AppRand14)')
+189: p16 = getfield_gc_r(p4, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+193: guard_nonnull_class(p16, 16510992, descr=<Guard0x3cde7a0>) [p0, i1, p2, p3, p4, p5]
+212: p18 = getfield_gc_r(p16, descr=<FieldP pycket.values.W_Closure.inst_caselam 8 pure>)
+223: guard_value(p18, ConstPtr(ptr19), descr=<Guard0x3d5d970>) [p0, i1, p2, p3, p4, p5]
+232: p20 = getfield_gc_r(p16, descr=<FieldP rpython.tool.pairtype.W_ClosureSize1.inst__envs_0 16 pure>)
+236: i21 = instance_ptr_eq(p4, p20)
+239: guard_true(i21, descr=<Guard0x3d5d9b8>) [p0, i1, p2, p3, p4, p5]
debug_merge_point(0, 0, '(if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath AppRand14)')
debug_merge_point(0, 0, '(let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))')
debug_merge_point(0, 0, '(vector-ref t5265 0)')
+245: i22 = getfield_gc_i(p13, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+249: i24 = int_lt(0, i22)
+253: guard_true(i24, descr=<Guard0x3d5da00>) [p0, i1, p2, p3, p4, p5]
+259: p25 = getfield_gc_r(p13, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+263: guard_class(p25, 16623792, descr=<Guard0x3d5da48>) [p0, i1, p2, p3, p4, p5]
+275: p27 = getfield_gc_r(p13, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+279: i29 = getarrayitem_gc_i(p27, 0, descr=<ArrayS 8>)
debug_merge_point(0, 0, '(let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16))))')
debug_merge_point(0, 0, '(shortestPath AppRand12)')
debug_merge_point(0, 0, '(if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath AppRand12)')
+283: p30 = new_with_vtable(descr=<SizeDescr 24>)
+327: p31 = new_with_vtable(descr=<SizeDescr 40>)
+338: p32 = new_with_vtable(descr=<SizeDescr 24>)
+349: setfield_gc(p32, p4, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+353: setfield_gc(p32, p13, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+357: p33 = new_with_vtable(descr=<SizeDescr 48>)
+369: setfield_gc(p33, p5, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+373: setfield_gc(p33, p15, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+377: p34 = new_with_vtable(descr=<SizeDescr 48>)
+389: setfield_gc(p34, p5, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+394: setfield_gc(p34, p3, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+399: setfield_gc(p34, p2, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+411: setfield_gc(p34, ConstPtr(ptr35), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+416: setfield_gc(p34, i1, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+421: setfield_gc(p33, p34, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+425: setfield_gc(p33, ConstPtr(ptr36), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+429: setfield_gc(p33, 1, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+437: setfield_gc(p30, p4, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+441: setfield_gc(p30, i29, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+445: setfield_gc(p31, p5, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+449: setfield_gc(p31, p32, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+453: setfield_gc(p31, p33, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+464: setfield_gc(p31, ConstPtr(ptr38), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+468: jump(p30, p31, descr=TargetToken(80549376))
+496: --end of the loop--
[3e4c20e9d22ddde] jit-log-opt-bridge}
[3e4c20e9d2ea387] {jit-backend
[3e4c20e9d323b4a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfeb
[3e4c20e9d3298f7] jit-backend-dump}
[3e4c20e9d333b0c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfec04 +0  20000000
[3e4c20e9d334dcb] jit-backend-dump}
[3e4c20e9d338c77] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfed55 +0  20000000
[3e4c20e9d339a84] jit-backend-dump}
[3e4c20e9d33ce00] {jit-backend-addr
bridge out of Guard 0x3982218 has address 0x7f4eb6bfec00 to 0x7f4eb6bfed50
       gc table: 0x7f4eb6bfeb90
    jump target: 0x7f4eb6bfec00
         resops: 0x7f4eb6bfec0e
       failures: 0x7f4eb6bfed50
            end: 0x7f4eb6bfeec7
[3e4c20e9d33eeee] jit-backend-addr}
[3e4c20e9d3423f2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfec1e +0  71010000
[3e4c20e9d3431db] jit-backend-dump}
[3e4c20e9d346567] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfec35 +0  76010000
[3e4c20e9d347242] jit-backend-dump}
[3e4c20e9d34a4e5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfec41 +0  86010000
[3e4c20e9d34b1ca] jit-backend-dump}
[3e4c20e9d34e411] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfec58 +0  8B010000
[3e4c20e9d34f0f3] jit-backend-dump}
[3e4c20e9d352441] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfec66 +0  B5010000
[3e4c20e9d35310a] jit-backend-dump}
[3e4c20e9d35638f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfec78 +0  BF010000
[3e4c20e9d35703c] jit-backend-dump}
[3e4c20e9d35a391] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfec92 +0  C1010000
[3e4c20e9d35b054] jit-backend-dump}
[3e4c20e9d35e2fa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfecaa +0  C5010000
[3e4c20e9d35efcf] jit-backend-dump}
[3e4c20e9d36221d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfecbf +0  CC010000
[3e4c20e9d362eca] jit-backend-dump}
[3e4c20e9d3660e1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfeccd +0  DA010000
[3e4c20e9d366dbc] jit-backend-dump}
[3e4c20e9d36a24c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfa204 +0  F8490000
[3e4c20e9d36af06] jit-backend-dump}
[3e4c20e9d36f02a] jit-backend}
[3e4c20e9d372bae] {jit-log-opt-bridge
# bridge out of Guard 0x3982218 with 37 ops
[p0, p1]
+134: guard_class(p1, 16499664, descr=<Guard0x3cde800>) [p0, p1]
+146: p3 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+150: guard_nonnull_class(p3, ConstClass(W_Vector), descr=<Guard0x3cde860>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))')
+169: guard_class(p0, 16435920, descr=<Guard0x3d5da90>) [p0, p1]
+181: p6 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+185: guard_nonnull_class(p6, ConstClass(ForwardLink), descr=<Guard0x3cde8c0>) [p0, p1]
debug_merge_point(0, 0, '(vector-ref t5265 0)')
+204: guard_not_invalidated(descr=<Guard0x3d5dad8>) [p0, p1]
+204: i8 = getfield_gc_i(p3, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+208: i10 = int_lt(0, i8)
+212: guard_true(i10, descr=<Guard0x3d5db20>) [p0, p1]
+218: p11 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+222: guard_class(p11, 16623792, descr=<Guard0x3d5db68>) [p0, p1]
+236: p13 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+240: i15 = getarrayitem_gc_i(p13, 0, descr=<ArrayS 8>)
debug_merge_point(0, 0, '(let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16))))')
debug_merge_point(0, 0, '(shortestPath AppRand12)')
+244: p16 = getfield_gc_r(p1, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+248: guard_class(p16, 16499664, descr=<Guard0x3d5dbb0>) [p0, p1]
+262: p18 = getfield_gc_r(p16, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+266: guard_nonnull_class(p18, 16510992, descr=<Guard0x3cde920>) [p0, p1]
+286: p20 = getfield_gc_r(p18, descr=<FieldP pycket.values.W_Closure.inst_caselam 8 pure>)
+298: guard_value(p20, ConstPtr(ptr21), descr=<Guard0x3d5dbf8>) [p0, p1]
+307: p22 = getfield_gc_r(p18, descr=<FieldP rpython.tool.pairtype.W_ClosureSize1.inst__envs_0 16 pure>)
+312: i23 = instance_ptr_eq(p16, p22)
+315: guard_true(i23, descr=<Guard0x3d5dc40>) [p0, p1]
debug_merge_point(0, 0, '(if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath AppRand12)')
+321: p24 = new_with_vtable(descr=<SizeDescr 24>)
+368: p25 = new_with_vtable(descr=<SizeDescr 40>)
+379: setfield_gc(p25, p6, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+383: setfield_gc(p24, p16, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+387: setfield_gc(p24, i15, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+391: setfield_gc(p25, p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+395: setfield_gc(p25, p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+406: setfield_gc(p25, ConstPtr(ptr26), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+410: jump(p24, p25, descr=TargetToken(80549376))
+448: --end of the loop--
[3e4c20e9d3934ff] jit-log-opt-bridge}
[3e4c20e9d41c991] {jit-backend
[3e4c20e9d4553a2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfef
[3e4c20e9d45aa8f] jit-backend-dump}
[3e4c20e9d46444d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfefe4 +0  20000000
[3e4c20e9d465624] jit-backend-dump}
[3e4c20e9d46914c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bff0f5 +0  20000000
[3e4c20e9d469f0a] jit-backend-dump}
[3e4c20e9d46d280] {jit-backend-addr
bridge out of Guard 0x3c65da8 has address 0x7f4eb6bfefe0 to 0x7f4eb6bff0f0
       gc table: 0x7f4eb6bfef80
    jump target: 0x7f4eb6bfefe0
         resops: 0x7f4eb6bfefee
       failures: 0x7f4eb6bff0f0
            end: 0x7f4eb6bff22f
[3e4c20e9d46f337] jit-backend-addr}
[3e4c20e9d472a0c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfeffe +0  31010000
[3e4c20e9d47379f] jit-backend-dump}
[3e4c20e9d476b34] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bff015 +0  36010000
[3e4c20e9d47781f] jit-backend-dump}
[3e4c20e9d47aba4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bff01e +0  65010000
[3e4c20e9d47b89e] jit-backend-dump}
[3e4c20e9d47eb0a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bff02d +0  72010000
[3e4c20e9d47f7d0] jit-backend-dump}
[3e4c20e9d482a1b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bff041 +0  7A010000
[3e4c20e9d4836e7] jit-backend-dump}
[3e4c20e9d4868d9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bff057 +0  80010000
[3e4c20e9d487577] jit-backend-dump}
[3e4c20e9d48a750] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bff068 +0  8B010000
[3e4c20e9d48b419] jit-backend-dump}
[3e4c20e9d48e5d4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bff07f +0  90010000
[3e4c20e9d48f28e] jit-backend-dump}
[3e4c20e9d492702] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfd058 +0  841F0000
[3e4c20e9d4933dd] jit-backend-dump}
[3e4c20e9d49770a] jit-backend}
[3e4c20e9d49b380] {jit-log-opt-bridge
# bridge out of Guard 0x3c65da8 with 27 ops
[p0, p1, i2, i3]
+118: guard_class(p0, 16435920, descr=<Guard0x3cde980>) [p0, p1, i2, i3]
+130: p5 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+134: guard_nonnull_class(p5, ConstClass(ForwardLink), descr=<Guard0x3cde9e0>) [p0, p1, i2, i3]
debug_merge_point(0, 0, '(min AppRand13 AppRand15)')
+153: guard_not_invalidated(descr=<Guard0x3d5dc88>) [p0, p1, i2, i3]
+153: i7 = int_lt(i3, i2)
+156: guard_false(i7, descr=<Guard0x3d5dcd0>) [p0, p1, i2, i3]
debug_merge_point(0, 0, '(+ 1 AppRand16)')
+162: i9 = int_add_ovf(1, i2)
+171: guard_no_overflow(descr=<Guard0x3d5dd18>) [p0, p1, i2, i3]
+177: p10 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+188: guard_value(p10, ConstPtr(ptr11), descr=<Guard0x3d5dd60>) [p0, p1, i2, i3]
+197: p12 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+201: p13 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+205: guard_class(p12, 16499664, descr=<Guard0x3d5dda8>) [p0, p1, i2, i3]
+219: p15 = getfield_gc_r(p12, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+223: guard_class(p13, 16435920, descr=<Guard0x3d5ddf0>) [p0, p1, i2, i3]
+236: p17 = getfield_gc_r(p13, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+240: guard_nonnull_class(p17, ConstClass(ForwardLink), descr=<Guard0x3cdea40>) [p0, p1, i2, i3]
debug_merge_point(0, 0, '(vector-ref t5265 1) from (+ 1 AppRand16)')
+259: p19 = new_with_vtable(descr=<SizeDescr 48>)
+300: setfield_gc(p19, p17, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+311: setfield_gc(p19, ConstPtr(ptr20), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+315: setfield_gc(p19, p15, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+319: setfield_gc(p19, p13, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+323: setfield_gc(p19, i9, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+327: jump(p12, p19, descr=TargetToken(80547776))
+368: --end of the loop--
[3e4c20e9d4b53fa] jit-log-opt-bridge}
[3e4c20e9d5c722f] {jit-backend
[3e4c20e9d60ef9c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bff
[3e4c20e9d616de4] jit-backend-dump}
[3e4c20e9d6213e8] {jit-backend-addr
Loop 76 ((vector-ref t5265 1) from (shortestPath AppRand12)) has address 0x7f4eb6bff4cd to 0x7f4eb6bff680 (bootstrap 0x7f4eb6bff440)
       gc table: 0x7f4eb6bff390
       function: 0x7f4eb6bff440
         resops: 0x7f4eb6bff4cd
       failures: 0x7f4eb6bff680
            end: 0x7f4eb6bff8c3
[3e4c20e9d623f78] jit-backend-addr}
[3e4c20e9d628063] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bff4e4 +0  E3010000
[3e4c20e9d6291f6] jit-backend-dump}
[3e4c20e9d62c6d2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bff4fa +0  E9010000
[3e4c20e9d62d4af] jit-backend-dump}
[3e4c20e9d630752] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bff508 +0  F7010000
[3e4c20e9d631443] jit-backend-dump}
[3e4c20e9d6346d7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bff518 +0  03020000
[3e4c20e9d635387] jit-backend-dump}
[3e4c20e9d6385e7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bff533 +0  04020000
[3e4c20e9d6392a1] jit-backend-dump}
[3e4c20e9d63c566] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bff547 +0  0C020000
[3e4c20e9d63d235] jit-backend-dump}
[3e4c20e9d640518] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bff560 +0  0F020000
[3e4c20e9d64120c] jit-backend-dump}
[3e4c20e9d64446c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bff577 +0  14020000
[3e4c20e9d645141] jit-backend-dump}
[3e4c20e9d648392] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bff583 +0  24020000
[3e4c20e9d64903f] jit-backend-dump}
[3e4c20e9d64c2e9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bff59a +0  29020000
[3e4c20e9d64cfe0] jit-backend-dump}
[3e4c20e9d6502a8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bff5ae +0  31020000
[3e4c20e9d650f55] jit-backend-dump}
[3e4c20e9d65422c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bff5bb +0  40020000
[3e4c20e9d654ed7] jit-backend-dump}
[3e4c20e9d65812a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bff5c5 +0  52020000
[3e4c20e9d658dd5] jit-backend-dump}
[3e4c20e9d65c016] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bff5cf +0  64020000
[3e4c20e9d65ccb7] jit-backend-dump}
[3e4c20e9d65ff17] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bff5e3 +0  6C020000
[3e4c20e9d660bbc] jit-backend-dump}
[3e4c20e9d663e09] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bff5f7 +0  74020000
[3e4c20e9d664aa1] jit-backend-dump}
[3e4c20e9d667d85] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bff607 +0  80020000
[3e4c20e9d668a29] jit-backend-dump}
[3e4c20e9d66bcbd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bff61f +0  84020000
[3e4c20e9d66c95e] jit-backend-dump}
[3e4c20e9d6708e9] jit-backend}
[3e4c20e9d674770] {jit-log-opt-loop
# Loop 76 ((vector-ref t5265 1) from (shortestPath AppRand12)) : entry bridge with 59 ops
[p0, p1]
debug_merge_point(0, 0, '(vector-ref t5265 1) from (shortestPath AppRand12)')
+325: guard_not_invalidated(descr=<Guard0x3cdeaa0>) [p1, p0]
+325: guard_class(p0, 16499664, descr=<Guard0x3d5de38>) [p1, p0]
+344: p3 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+348: guard_nonnull_class(p3, ConstClass(W_Vector), descr=<Guard0x3cdeb00>) [p1, p0]
+366: i5 = getfield_gc_i(p3, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+370: i7 = int_lt(1, i5)
+374: guard_true(i7, descr=<Guard0x3d5de80>) [p1, p0]
+380: p8 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+384: guard_class(p8, 16623792, descr=<Guard0x3d5dec8>) [p1, p0]
+396: p10 = getfield_gc_r(p3, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+400: i12 = getarrayitem_gc_i(p10, 1, descr=<ArrayS 8>)
+404: guard_class(p1, 16437216, descr=<Guard0x3d5df10>) [p1, p0]
+423: p14 = getfield_gc_r(p1, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+434: guard_value(p14, ConstPtr(ptr15), descr=<Guard0x3d5df58>) [p1, p0]
+443: p16 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+447: i17 = getfield_gc_i(p1, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+451: p18 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))')
+455: guard_class(p18, 16435920, descr=<Guard0x3d5dfa0>) [p1, p0]
+468: p20 = getfield_gc_r(p18, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+472: guard_nonnull_class(p20, ConstClass(ForwardLink), descr=<Guard0x3cdec20>) [p1, p0]
debug_merge_point(0, 0, 'AppRand13')
+491: guard_class(p16, 16499664, descr=<Guard0x3dac020>) [p1, p0]
+503: p23 = getfield_gc_r(p16, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(shortestPath AppRand14)')
+503: p24 = getfield_gc_r(p16, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+507: guard_nonnull_class(p24, 16510992, descr=<Guard0x3cdec80>) [p1, p0]
+526: p26 = getfield_gc_r(p24, descr=<FieldP pycket.values.W_Closure.inst_caselam 8 pure>)
+537: guard_value(p26, ConstPtr(ptr27), descr=<Guard0x3dac068>) [p1, p0]
+546: p28 = getfield_gc_r(p24, descr=<FieldP rpython.tool.pairtype.W_ClosureSize1.inst__envs_0 16 pure>)
+550: i29 = instance_ptr_eq(p16, p28)
+553: guard_true(i29, descr=<Guard0x3dac0b0>) [p1, p0]
debug_merge_point(0, 0, '(if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath AppRand14)')
+559: i31 = int_eq(i12, 0)
+563: guard_true(i31, descr=<Guard0x3dac0f8>) [p1, p0]
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)) from (shortestPath AppRand14)')
debug_merge_point(0, 0, '(min AppRand13 AppRand15)')
+569: i33 = int_lt(i17, 0)
+573: guard_false(i33, descr=<Guard0x3dac140>) [p1, p0]
debug_merge_point(0, 0, '(+ 1 AppRand16)')
+579: p34 = getfield_gc_r(p18, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+590: guard_value(p34, ConstPtr(ptr35), descr=<Guard0x3dac188>) [p1, p0]
+599: p36 = getfield_gc_r(p18, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+603: p37 = getfield_gc_r(p18, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+607: guard_class(p36, 16499664, descr=<Guard0x3dac1d0>) [p1, p0]
+619: p39 = getfield_gc_r(p36, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+623: guard_class(p37, 16437216, descr=<Guard0x3dac218>) [p1, p0]
+635: p41 = getfield_gc_r(p37, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+639: guard_nonnull_class(p41, ConstClass(ForwardLink), descr=<Guard0x3cdee00>) [p1, p0]
debug_merge_point(0, 0, '(vector-ref t5265 1) from (+ 1 AppRand16)')
+659: p43 = new_with_vtable(descr=<SizeDescr 48>)
+700: setfield_gc(p43, ConstPtr(ptr44), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+704: setfield_gc(p43, p39, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+708: setfield_gc(p43, 1, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+716: setfield_gc(p43, p37, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+720: setfield_gc(p43, p41, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+724: jump(p36, p43, descr=TargetToken(80547776))
+752: --end of the loop--
[3e4c20e9d6a5af1] jit-log-opt-loop}
[3e4c20e9d848849] {jit-backend
[3e4c20e9d895a08] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bffa
[3e4c20e9d89d0e2] jit-backend-dump}
[3e4c20e9d8a78bf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bffb04 +0  20000000
[3e4c20e9d8a8f70] jit-backend-dump}
[3e4c20e9d8aceef] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bffcd5 +0  20000000
[3e4c20e9d8add45] jit-backend-dump}
[3e4c20e9d8b127d] {jit-backend-addr
bridge out of Guard 0x3c64f98 has address 0x7f4eb6bffb00 to 0x7f4eb6bffcd0
       gc table: 0x7f4eb6bffa40
    jump target: 0x7f4eb6bffb00
         resops: 0x7f4eb6bffb0e
       failures: 0x7f4eb6bffcd0
            end: 0x7f4eb6bfff43
[3e4c20e9d8b372c] jit-backend-addr}
[3e4c20e9d8b6d43] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bffb1e +0  F1010000
[3e4c20e9d8b7b35] jit-backend-dump}
[3e4c20e9d8baee2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bffb2c +0  FF010000
[3e4c20e9d8bbbd0] jit-backend-dump}
[3e4c20e9d8bee7c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bffb39 +0  0E020000
[3e4c20e9d8bfb0b] jit-backend-dump}
[3e4c20e9d8c2d53] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bffb4d +0  16020000
[3e4c20e9d8c3a03] jit-backend-dump}
[3e4c20e9d8c6bfb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bffb62 +0  1D020000
[3e4c20e9d8c78b5] jit-backend-dump}
[3e4c20e9d8caa94] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bffb74 +0  27020000
[3e4c20e9d8cb74e] jit-backend-dump}
[3e4c20e9d8ce946] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bffb8c +0  2B020000
[3e4c20e9d8cf603] jit-backend-dump}
[3e4c20e9d8d2ce1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bffba3 +0  4C020000
[3e4c20e9d8d3976] jit-backend-dump}
[3e4c20e9d8d6cc7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bffbb1 +0  5A020000
[3e4c20e9d8d7978] jit-backend-dump}
[3e4c20e9d8dab7f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bffbc2 +0  65020000
[3e4c20e9d8db823] jit-backend-dump}
[3e4c20e9d8dea34] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bffbd7 +0  6C020000
[3e4c20e9d8df6d8] jit-backend-dump}
[3e4c20e9d8e2877] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bffbee +0  71020000
[3e4c20e9d8e353a] jit-backend-dump}
[3e4c20e9d8e6707] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bffc02 +0  79020000
[3e4c20e9d8e73c7] jit-backend-dump}
[3e4c20e9d8ea57f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bffc0f +0  88020000
[3e4c20e9d8eb223] jit-backend-dump}
[3e4c20e9d8ee3e7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bffc19 +0  9A020000
[3e4c20e9d8ef08b] jit-backend-dump}
[3e4c20e9d8f2262] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bffc27 +0  A8020000
[3e4c20e9d8f2f09] jit-backend-dump}
[3e4c20e9d8f6104] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bffc3f +0  AC020000
[3e4c20e9d8f6db8] jit-backend-dump}
[3e4c20e9d8f9f8e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bffc50 +0  B7020000
[3e4c20e9d8fac2c] jit-backend-dump}
[3e4c20e9d8fde30] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bffc66 +0  BD020000
[3e4c20e9d8feae4] jit-backend-dump}
[3e4c20e9d901f58] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfb6e7 +0  15440000
[3e4c20e9d902c02] jit-backend-dump}
[3e4c20e9d906c94] jit-backend}
[3e4c20e9d90a966] {jit-log-opt-bridge
# bridge out of Guard 0x3c64f98 with 62 ops
[p0, p1]
+214: guard_class(p1, 16504944, descr=<Guard0x3cdeec0>) [p0, p1]
+226: i3 = getfield_gc_i(p1, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+230: i5 = int_eq(i3, 0)
+234: guard_true(i5, descr=<Guard0x3dac2a8>) [p0, p1]
debug_merge_point(0, 0, '0')
+240: guard_class(p0, 16435920, descr=<Guard0x3dac2f0>) [p0, p1]
+253: p7 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+264: guard_value(p7, ConstPtr(ptr8), descr=<Guard0x3dac338>) [p0, p1]
+273: p9 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+277: p10 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+281: guard_class(p9, 16499664, descr=<Guard0x3dac380>) [p0, p1]
+294: p12 = getfield_gc_r(p9, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+298: guard_class(p10, 16435920, descr=<Guard0x3dac3c8>) [p0, p1]
+312: p14 = getfield_gc_r(p10, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+317: guard_nonnull_class(p14, ConstClass(ForwardLink), descr=<Guard0x3cdef20>) [p0, p1]
debug_merge_point(0, 0, '(vector-ref t5265 1) from (shortestPath AppRand12)')
+336: guard_not_invalidated(descr=<Guard0x3dac410>) [p0, p1]
+336: p16 = getfield_gc_r(p9, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+340: guard_nonnull_class(p16, ConstClass(W_Vector), descr=<Guard0x3cdef80>) [p0, p1]
+359: i18 = getfield_gc_i(p16, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+363: i20 = int_lt(1, i18)
+367: guard_true(i20, descr=<Guard0x3dac458>) [p0, p1]
+373: p21 = getfield_gc_r(p16, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+377: guard_class(p21, 16623792, descr=<Guard0x3dac4a0>) [p0, p1]
+390: p23 = getfield_gc_r(p16, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+394: i25 = getarrayitem_gc_i(p23, 1, descr=<ArrayS 8>)
debug_merge_point(0, 0, '(let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))')
debug_merge_point(0, 0, 'AppRand13')
+398: guard_class(p12, 16499664, descr=<Guard0x3dac4e8>) [p0, p1]
+411: p27 = getfield_gc_r(p12, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(shortestPath AppRand14)')
+411: p28 = getfield_gc_r(p12, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+415: guard_nonnull_class(p28, 16510992, descr=<Guard0x3cdf100>) [p0, p1]
+434: p30 = getfield_gc_r(p28, descr=<FieldP pycket.values.W_Closure.inst_caselam 8 pure>)
+445: guard_value(p30, ConstPtr(ptr31), descr=<Guard0x3dac530>) [p0, p1]
+454: p32 = getfield_gc_r(p28, descr=<FieldP rpython.tool.pairtype.W_ClosureSize1.inst__envs_0 16 pure>)
+458: i33 = instance_ptr_eq(p12, p32)
+461: guard_true(i33, descr=<Guard0x3dac578>) [p0, p1]
debug_merge_point(0, 0, '(if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath AppRand14)')
+467: i35 = int_eq(i25, 0)
+471: guard_true(i35, descr=<Guard0x3dac5c0>) [p0, p1]
debug_merge_point(0, 0, '0')
debug_merge_point(0, 0, '(let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)) from (shortestPath AppRand14)')
debug_merge_point(0, 0, '(min AppRand13 AppRand15)')
debug_merge_point(0, 0, '(+ 1 AppRand16)')
+477: p36 = getfield_gc_r(p10, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+482: guard_value(p36, ConstPtr(ptr37), descr=<Guard0x3dac608>) [p0, p1]
+491: p38 = getfield_gc_r(p10, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+496: p39 = getfield_gc_r(p10, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+501: guard_class(p38, 16499664, descr=<Guard0x3dac650>) [p0, p1]
+515: p41 = getfield_gc_r(p38, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+519: guard_class(p39, 16437216, descr=<Guard0x3dac698>) [p0, p1]
+532: p43 = getfield_gc_r(p39, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+536: guard_nonnull_class(p43, ConstClass(ForwardLink), descr=<Guard0x3cdf160>) [p0, p1]
debug_merge_point(0, 0, '(vector-ref t5265 1) from (+ 1 AppRand16)')
+554: p45 = new_with_vtable(descr=<SizeDescr 48>)
+602: setfield_gc(p45, ConstPtr(ptr46), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+606: setfield_gc(p45, p41, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+610: setfield_gc(p45, p39, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+614: setfield_gc(p45, p43, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+618: setfield_gc(p45, 1, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+626: jump(p38, p45, descr=TargetToken(80547776))
+656: --end of the loop--
[3e4c20e9d9412d3] jit-log-opt-bridge}
[3e4c20ea6f8367b] {jit-backend
[3e4c20ea7069960] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c00190 +0  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8C1203000048FF0425009FAA038139101100000F85000000004C8B79084983FF01720741813F900F00000F85000000004839DA0F8C0000000041BF010000004901DF0F80000000004C8B71204C8B2D7CFEFFFF4D39EE0F85000000004C8B69104C8B711841813E480E00000F85000000004D8B66084983FC01720841813C24900F00000F850000000041817D00B01E01000F85000000004D8B65104D8B550841813A100A01000F85000000004D8B6A0841817D00B01E01000F85000000004D8B550841813A98BB00000F85000000004D8B6A104C8B0D35FEFFFF4D39CD0F85000000004D8B6A404983FD01720841817D00601400000F85000000004D8B55084D39D40F85000000004D39D70F85000000004D8B56204C8B3D1BFEFFFF4D39FA0F85000000004D8B56104D8B661841813AB01E01000F85000000004D8B720841813C24480E00000F85000000004D8B6C24084983FD01720841817D00900F00000F85000000004D8B42104983C0010F800000000041813E98BB00000F85000000004D8B56104D39CA0F85000000004D8B4E184983F9017207418139601400000F85000000004D8B51084D39D00F8D000000004D8B56384D8B4A084983F9017207418139F08C00000F85000000004983F8000F8C000000004D8B51084D39D00F8D000000004D8B511841813AC8EB02000F85000000004D8B51104F8B4CC210418139F08C00000F85000000004D8B5620488B3D9AFDFFFF4939FA0F8500000000498B79084883FF000F8E00000000498B7918813FC8EB02000F8500000000498B79104C8B571041813AF08C00000F8500000000488B0C25F091F900488D9198000000483B14251092F9000F87CF00000048891425F091F90048C701100A0100488D511848C70210110000488D5A2848C703100A0100488D7B1848C707B01E01004C8977084C89471048897B084C894B104C8D471849C700480E00004D896808498978104D8960184D8978204C896A084C8B3D03FDFFFF4C897A2048895A104C8942184C8B05F8FCFFFF4C8941084C8949104C8B0DF1FCFFFF4C89C64C89D04C89EB4C898D4001000049BB402ABFB64E7F000041FFE30F1F400048C7442408FFFFFF0049BB50FFBFB64E7F00004C895D204D8D9BA083FEFF41FFD3E9C8FCFFFF49BB8001C0B64E7F00004C895D204D8D9B7089FEFF41FFD3E91CFFFFFFFF3547FBFFFF49BB60FFBFB64E7F000041534D8D9BA080FEFF41FFE3FF3533FBFFFF49BB70FFBFB64E7F000041534D8D9B9080FEFF41FFE3FF351FFBFFFF49BB80FFBFB64E7F000041534D8D9B8080FEFF41FFE3FF350BFBFFFF49BB90FFBFB64E7F000041534D8D9B7080FEFF41FFE3FF35F7FAFFFF49BBA0FFBFB64E7F000041534D8D9B6080FEFF41FFE3FF35EBFAFFFF49BBB0FFBFB64E7F000041534D8D9B5080FEFF41FFE3FF35D7FAFFFF49BBC0FFBFB64E7F000041534D8D9B4080FEFF41FFE3FF35C3FAFFFF49BBD0FFBFB64E7F000041534D8D9B3080FEFF41FFE3FF35AFFAFFFF49BBE0FFBFB64E7F000041534D8D9B2080FEFF41FFE3FF359BFAFFFF49BBF0FFBFB64E7F000041534D8D9B1080FEFF41FFE3FF3587FAFFFF49BB0000C0B64E7F000041534D8D9B0080FEFF41FFE3FF3573FAFFFF49BB1000C0B64E7F000041534D8D9BF07FFEFF41FFE3FF3567FAFFFF49BB2000C0B64E7F000041534D8D9BE07FFEFF41FFE3FF3553FAFFFF49BB3000C0B64E7F000041534D8D9BD07FFEFF41FFE3FF353FFAFFFF49BB4000C0B64E7F000041534D8D9BC07FFEFF41FFE3FF352BFAFFFF49BB5000C0B64E7F000041534D8D9BB07FFEFF41FFE3FF351FFAFFFF49BB6000C0B64E7F000041534D8D9BA07FFEFF41FFE3FF350BFAFFFF49BB7000C0B64E7F000041534D8D9B907FFEFF41FFE3FF35F7F9FFFF49BB8000C0B64E7F000041534D8D9B807FFEFF41FFE3FF35E3F9FFFF49BB9000C0B64E7F000041534D8D9B707FFEFF41FFE3FF35CFF9FFFF49BBA000C0B64E7F000041534D8D9B607FFEFF41FFE3FF35BBF9FFFF49BBB000C0B64E7F000041534D8D9B507FFEFF41FFE3FF35A7F9FFFF49BBC000C0B64E7F000041534D8D9B407FFEFF41FFE3FF3593F9FFFF49BBD000C0B64E7F000041534D8D9B307FFEFF41FFE3FF357FF9FFFF49BBE000C0B64E7F000041534D8D9B207FFEFF41FFE3FF356BF9FFFF49BBF000C0B64E7F000041534D8D9B107FFEFF41FFE3FF3557F9FFFF49BB0001C0B64E7F000041534D8D9B007FFEFF41FFE3FF3543F9FFFF49BB1001C0B64E7F000041534D8D9BF07EFEFF41FFE3FF352FF9FFFF49BB2001C0B64E7F000041534D8D9BE07EFEFF41FFE3FF351BF9FFFF49BB3001C0B64E7F000041534D8D9BD07EFEFF41FFE3FF350FF9FFFF49BB4001C0B64E7F000041534D8D9BC07EFEFF41FFE3FF35FBF8FFFF49BB5001C0B64E7F000041534D8D9BB07EFEFF41FFE3FF35E7F8FFFF49BB6001C0B64E7F000041534D8D9BA07EFEFF41FFE3FF35D3F8FFFF49BB7001C0B64E7F000041534D8D9B907EFEFF41FFE3
[3e4c20ea7076730] jit-backend-dump}
[3e4c20ea708d98f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c002e4 +0  20000000
[3e4c20ea708eecd] jit-backend-dump}
[3e4c20ea7093198] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c00605 +0  20000000
[3e4c20ea709405a] jit-backend-dump}
[3e4c20ea7097693] {jit-backend-addr
bridge out of Guard 0x3c65d18 has address 0x7f4eb6c002e0 to 0x7f4eb6c00600
       gc table: 0x7f4eb6c00190
    jump target: 0x7f4eb6c002e0
         resops: 0x7f4eb6c002ee
       failures: 0x7f4eb6c00600
            end: 0x7f4eb6c009fb
[3e4c20ea7099fdb] jit-backend-addr}
[3e4c20ea709d798] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c002fe +0  41030000
[3e4c20ea709e568] jit-backend-dump}
[3e4c20ea70a187d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c00315 +0  46030000
[3e4c20ea70a258f] jit-backend-dump}
[3e4c20ea70a5ddc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0031e +0  75030000
[3e4c20ea70a6b04] jit-backend-dump}
[3e4c20ea70a9f97] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0032d +0  82030000
[3e4c20ea70aaca3] jit-backend-dump}
[3e4c20ea70ade67] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c00341 +0  8A030000
[3e4c20ea70aeb8c] jit-backend-dump}
[3e4c20ea70b1d00] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c00356 +0  91030000
[3e4c20ea70b2a25] jit-backend-dump}
[3e4c20ea70b5d64] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0036e +0  95030000
[3e4c20ea70b6b34] jit-backend-dump}
[3e4c20ea70b9cbe] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0037c +0  A3030000
[3e4c20ea70ba9b5] jit-backend-dump}
[3e4c20ea70bdc5e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c00391 +0  AA030000
[3e4c20ea70be943] jit-backend-dump}
[3e4c20ea70c1ad0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c003a3 +0  B4030000
[3e4c20ea70c27ab] jit-backend-dump}
[3e4c20ea70c5a05] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c003b4 +0  BF030000
[3e4c20ea70c67b6] jit-backend-dump}
[3e4c20ea70c990f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c003c8 +0  C7030000
[3e4c20ea70ca5cc] jit-backend-dump}
[3e4c20ea70cd82c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c003e0 +0  CB030000
[3e4c20ea70ce4ec] jit-backend-dump}
[3e4c20ea70d1697] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c003ed +0  DA030000
[3e4c20ea70d2370] jit-backend-dump}
[3e4c20ea70d55ee] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c003f6 +0  ED030000
[3e4c20ea70d62b7] jit-backend-dump}
[3e4c20ea70d9456] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0040a +0  F5030000
[3e4c20ea70da11f] jit-backend-dump}
[3e4c20ea70dd395] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0041f +0  FC030000
[3e4c20ea70de05e] jit-backend-dump}
[3e4c20ea70e11b7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c00431 +0  06040000
[3e4c20ea70e1e86] jit-backend-dump}
[3e4c20ea70e50e6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0044a +0  09040000
[3e4c20ea70e5d93] jit-backend-dump}
[3e4c20ea70e8f17] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c00458 +0  17040000
[3e4c20ea70e9bda] jit-backend-dump}
[3e4c20ea70ecde7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c00465 +0  26040000
[3e4c20ea70eda9e] jit-backend-dump}
[3e4c20ea70f0ca8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c00472 +0  35040000
[3e4c20ea70f1952] jit-backend-dump}
[3e4c20ea70f4b63] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c00489 +0  3A040000
[3e4c20ea70f5829] jit-backend-dump}
[3e4c20ea70f8a98] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c00496 +0  49040000
[3e4c20ea70f9770] jit-backend-dump}
[3e4c20ea70fc89e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c004b1 +0  4A040000
[3e4c20ea70fd5a8] jit-backend-dump}
[3e4c20ea71007bb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c004bb +0  5C040000
[3e4c20ea710148d] jit-backend-dump}
[3e4c20ea71046e1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c004c8 +0  6B040000
[3e4c20ea71053cf] jit-backend-dump}
[3e4c20ea710856b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c004d9 +0  76040000
[3e4c20ea710921e] jit-backend-dump}
[3e4c20ea710ffbf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c004ef +0  7C040000
[3e4c20ea7110f01] jit-backend-dump}
[3e4c20ea7114724] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c00503 +0  84040000
[3e4c20ea7115445] jit-backend-dump}
[3e4c20ea711879d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c00511 +0  92040000
[3e4c20ea711950b] jit-backend-dump}
[3e4c20ea711c7dc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c00521 +0  9E040000
[3e4c20ea711d4f8] jit-backend-dump}
[3e4c20ea71207f7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c00536 +0  A5040000
[3e4c20ea712159f] jit-backend-dump}
[3e4c20ea7125145] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bfd031 +0  AB320000
[3e4c20ea7125e97] jit-backend-dump}
[3e4c20ea712b103] jit-backend}
[3e4c20ea712ee4f] {jit-log-opt-bridge
# bridge out of Guard 0x3c65d18 with 125 ops
[p0, p1, i2, i3]
+358: guard_class(p0, 16435920, descr=<Guard0x3cdf220>) [p0, p1, i2, i3]
+370: p5 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+374: guard_nonnull_class(p5, ConstClass(ForwardLink), descr=<Guard0x3cdf280>) [p0, p1, i2, i3]
debug_merge_point(0, 0, '(min AppRand13 AppRand15)')
+393: guard_not_invalidated(descr=<Guard0x3dac6e0>) [p0, p1, i2, i3]
+393: i7 = int_lt(i3, i2)
+396: guard_false(i7, descr=<Guard0x3dac728>) [p0, p1, i2, i3]
debug_merge_point(0, 0, '(+ 1 AppRand16)')
+402: i9 = int_add_ovf(1, i2)
+411: guard_no_overflow(descr=<Guard0x3dac770>) [p0, p1, i2, i3]
+417: p10 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+428: guard_value(p10, ConstPtr(ptr11), descr=<Guard0x3dac7b8>) [p0, p1, i2, i3]
+437: p12 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+441: p13 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+445: guard_class(p13, 16435208, descr=<Guard0x3dac800>) [p0, p1, i2, i3]
+458: p15 = getfield_gc_r(p13, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+462: guard_nonnull_class(p15, ConstClass(ForwardLink), descr=<Guard0x3cdf2e0>) [p0, p1, i2, i3]
debug_merge_point(0, 0, '(= h1 treeHeight) from (+ 1 AppRand16)')
+482: guard_class(p12, 16504944, descr=<Guard0x3dac848>) [p0, p1, i2, i3]
+496: i18 = getfield_gc_i(p12, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+500: p19 = getfield_gc_r(p12, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+504: guard_class(p19, 16499664, descr=<Guard0x3dac890>) [p0, p1, i2, i3]
+517: p21 = getfield_gc_r(p19, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+521: guard_class(p21, 16504944, descr=<Guard0x3dac8d8>) [p0, p1, i2, i3]
+535: p23 = getfield_gc_r(p21, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+539: guard_class(p23, 16479576, descr=<Guard0x3dac920>) [p0, p1, i2, i3]
+552: p25 = getfield_gc_r(p23, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+563: guard_value(p25, ConstPtr(ptr26), descr=<Guard0x3dac968>) [p0, p1, i2, i3]
+572: p27 = getfield_gc_r(p23, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize6.inst__vals_5 64 pure>)
+576: guard_nonnull_class(p27, ConstClass(W_Fixnum), descr=<Guard0x3cdf340>) [p0, p1, i2, i3]
+596: i29 = getfield_gc_i(p27, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+600: i30 = int_eq(i18, i29)
+603: guard_true(i30, descr=<Guard0x3dac9b0>) [p0, p1, i2, i3]
debug_merge_point(0, 0, '(let ([or-part (not AppRand31)]) (let ([if4 (if or-part or-part (let ([AppRand32 (= h2 treeHeight)]) (not AppRand32)))]) (if if4 (println *****BUG:  h1   h2) (void))))')
debug_merge_point(0, 0, '(not AppRand31)')
debug_merge_point(0, 0, '(let ([if4 (if or-part or-part (let ([AppRand32 (= h2 treeHeight)]) (not AppRand32)))]) (if if4 (println *****BUG:  h1   h2) (void)))')
debug_merge_point(0, 0, '(if or-part or-part (let ([AppRand32 (= h2 treeHeight)]) (not AppRand32)))')
debug_merge_point(0, 0, '(let ([AppRand32 (= h2 treeHeight)]) (not AppRand32))')
+609: p31 = getfield_gc_r(p23, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(= h2 treeHeight)')
+609: i32 = int_eq(i9, i29)
+612: guard_true(i32, descr=<Guard0x3dac9f8>) [p0, p1, i2, i3]
debug_merge_point(0, 0, '(not AppRand32)')
debug_merge_point(0, 0, '(if if4 (println *****BUG:  h1   h2) (void))')
debug_merge_point(0, 0, '(void)')
+618: p33 = getfield_gc_r(p13, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+629: guard_value(p33, ConstPtr(ptr34), descr=<Guard0x3daca40>) [p0, p1, i2, i3]
+638: p35 = getfield_gc_r(p13, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+642: p36 = getfield_gc_r(p13, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand33 (+ i5383 1)]) (doloop5381 AppRand33))')
+646: guard_class(p35, 16504944, descr=<Guard0x3daca88>) [p0, p1, i2, i3]
+659: p38 = getfield_gc_r(p35, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+663: guard_class(p36, 16435208, descr=<Guard0x3dacad0>) [p0, p1, i2, i3]
+677: p40 = getfield_gc_r(p36, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+682: guard_nonnull_class(p40, ConstClass(ForwardLink), descr=<Guard0x3cdf3a0>) [p0, p1, i2, i3]
debug_merge_point(0, 0, '(+ i5383 1)')
+702: i42 = getfield_gc_i(p35, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+706: i44 = int_add_ovf(i42, 1)
+710: guard_no_overflow(descr=<Guard0x3dacb18>) [p0, p1, i2, i3]
debug_merge_point(0, 0, '(doloop5381 AppRand33)')
+716: guard_class(p38, 16479576, descr=<Guard0x3dacb60>) [p0, p1, i2, i3]
+729: p46 = getfield_gc_r(p38, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+733: guard_value(p46, ConstPtr(ptr47), descr=<Guard0x3dacba8>) [p0, p1, i2, i3]
debug_merge_point(0, 0, '(let ([if3 (>= i5383 ntrees5378)]) (if if3 (void) (let ([t5387 (vector-ref CellRef(trees) i5383)]) (let ([h1 (height t5387)]) (let ([h2 (shortestPath t5387)][AppRand31 (= h1 treeHeight)]) (let ([or-part (not AppRand31)]) (let ([if4 (if or-part or-part (let ([AppRand32 (= h2 treeHeight)]) (not AppRand32)))]) (if if4 (println *****BUG:  h1   h2) (void)))))) (let ([AppRand33 (+ i5383 1)]) (doloop5381 AppRand33))))) from (doloop5381 AppRand33)')
debug_merge_point(0, 0, '(>= i5383 ntrees5378)')
+742: p48 = getfield_gc_r(p38, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize6.inst__vals_0 24 pure>)
+746: guard_nonnull_class(p48, ConstClass(W_Fixnum), descr=<Guard0x3cdf400>) [p0, p1, i2, i3]
+765: i50 = getfield_gc_i(p48, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+769: i51 = int_ge(i44, i50)
+772: guard_false(i51, descr=<Guard0x3dacbf0>) [p0, p1, i2, i3]
debug_merge_point(0, 0, '(if if3 (void) (let ([t5387 (vector-ref CellRef(trees) i5383)]) (let ([h1 (height t5387)]) (let ([h2 (shortestPath t5387)][AppRand31 (= h1 treeHeight)]) (let ([or-part (not AppRand31)]) (let ([if4 (if or-part or-part (let ([AppRand32 (= h2 treeHeight)]) (not AppRand32)))]) (if if4 (println *****BUG:  h1   h2) (void)))))) (let ([AppRand33 (+ i5383 1)]) (doloop5381 AppRand33))))')
debug_merge_point(0, 0, '(let ([t5387 (vector-ref CellRef(trees) i5383)]) (let ([h1 (height t5387)]) (let ([h2 (shortestPath t5387)][AppRand31 (= h1 treeHeight)]) (let ([or-part (not AppRand31)]) (let ([if4 (if or-part or-part (let ([AppRand32 (= h2 treeHeight)]) (not AppRand32)))]) (if if4 (println *****BUG:  h1   h2) (void)))))) (let ([AppRand33 (+ i5383 1)]) (doloop5381 AppRand33)))')
debug_merge_point(0, 0, '(vector-ref CellRef(trees) i5383)')
+778: p52 = getfield_gc_r(p38, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize6.inst__vals_4 56 pure>)
+782: p53 = getfield_gc_r(p52, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+786: guard_nonnull_class(p53, ConstClass(W_Vector), descr=<Guard0x3cdf460>) [p0, p1, i2, i3]
+805: i56 = int_ge(i44, 0)
+809: guard_true(i56, descr=<Guard0x3dadf10>) [p0, p1, i2, i3]
+815: i57 = getfield_gc_i(p53, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+819: i58 = int_lt(i44, i57)
+822: guard_true(i58, descr=<Guard0x3dadf58>) [p0, p1, i2, i3]
+828: p59 = getfield_gc_r(p53, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+832: guard_class(p59, 16622984, descr=<Guard0x3dadfa0>) [p0, p1, i2, i3]
+845: p61 = getfield_gc_r(p53, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+849: p62 = getarrayitem_gc_r(p61, i44, descr=<ArrayP 8>)
+854: guard_class(p62, ConstClass(W_Vector), descr=<Guard0x3fde578>) [p0, p1, i2, i3]
debug_merge_point(0, 0, '(let ([h1 (height t5387)]) (let ([h2 (shortestPath t5387)][AppRand31 (= h1 treeHeight)]) (let ([or-part (not AppRand31)]) (let ([if4 (if or-part or-part (let ([AppRand32 (= h2 treeHeight)]) (not AppRand32)))]) (if if4 (println *****BUG:  h1   h2) (void))))))')
debug_merge_point(0, 0, '(height t5387)')
+867: p64 = getfield_gc_r(p38, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize6.inst__vals_1 32 pure>)
+878: guard_value(p64, ConstPtr(ptr65), descr=<Guard0x3cdf4c0>) [p0, p1, i2, i3]
+887: p66 = getfield_gc_r(p38, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height t5387)')
debug_merge_point(0, 0, '(let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))')
debug_merge_point(0, 0, '(vector-ref t 0)')
+887: i67 = getfield_gc_i(p62, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+891: i69 = int_lt(0, i67)
+895: guard_true(i69, descr=<Guard0x3fde5c0>) [p0, p1, i2, i3]
+901: p70 = getfield_gc_r(p62, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+905: guard_class(p70, 16622984, descr=<Guard0x3fde608>) [p0, p1, i2, i3]
+917: p72 = getfield_gc_r(p62, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+921: p74 = getarrayitem_gc_r(p72, 0, descr=<ArrayP 8>)
+925: guard_class(p74, ConstClass(W_Vector), descr=<Guard0x3fde650>) [p0, p1, i2, i3]
debug_merge_point(0, 0, '(let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11))))')
debug_merge_point(0, 0, '(height AppRand7)')
debug_merge_point(0, 0, '(if (eqv? t 0) 0 (let ([AppRand7 (vector-ref t 0)]) (let ([AppRand8 (height AppRand7)][AppRand9 (vector-ref t 1)]) (let ([AppRand8 AppRand8][AppRand10 (height AppRand9)]) (let ([AppRand11 (max AppRand8 AppRand10)]) (+ 1 AppRand11)))))) from (height AppRand7)')
+938: p76 = new_with_vtable(descr=<SizeDescr 24>)
+982: p77 = new_with_vtable(descr=<SizeDescr 40>)
+993: p78 = new_with_vtable(descr=<SizeDescr 24>)
+1004: p79 = new_with_vtable(descr=<SizeDescr 24>)
+1015: setfield_gc(p79, p38, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1019: setfield_gc(p79, i44, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1023: setfield_gc(p78, p79, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1027: setfield_gc(p78, p62, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+1031: p80 = new_with_vtable(descr=<SizeDescr 40>)
+1042: setfield_gc(p80, p40, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1046: setfield_gc(p80, p79, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1050: setfield_gc(p80, p36, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1054: setfield_gc(p80, ConstPtr(ptr81), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+1058: setfield_gc(p77, p40, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1069: setfield_gc(p77, ConstPtr(ptr82), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+1073: setfield_gc(p77, p78, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1077: setfield_gc(p77, p80, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1088: setfield_gc(p76, ConstPtr(ptr83), descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1092: setfield_gc(p76, p62, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+1103: jump(ConstPtr(ptr83), p74, p40, p76, p77, ConstPtr(ptr84), descr=TargetToken(80544416))
+1136: --end of the loop--
[3e4c20ea71ab2c2] jit-log-opt-bridge}
[3e4c20ea74b64a6] {jit-backend
[3e4c20ea750bcec] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c00b
[3e4c20ea7513c76] jit-backend-dump}
[3e4c20ea751edca] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c00c04 +0  20000000
[3e4c20ea7520257] jit-backend-dump}
[3e4c20ea75243cb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c00dd5 +0  20000000
[3e4c20ea75252fb] jit-backend-dump}
[3e4c20ea7528870] {jit-backend-addr
bridge out of Guard 0x7f4eb7188410 has address 0x7f4eb6c00c00 to 0x7f4eb6c00dd0
       gc table: 0x7f4eb6c00b40
    jump target: 0x7f4eb6c00c00
         resops: 0x7f4eb6c00c0e
       failures: 0x7f4eb6c00dd0
            end: 0x7f4eb6c00fef
[3e4c20ea752ad46] jit-backend-addr}
[3e4c20ea752e34b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c00c1e +0  F1010000
[3e4c20ea752f15f] jit-backend-dump}
[3e4c20ea753256e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c00c35 +0  F6010000
[3e4c20ea753322b] jit-backend-dump}
[3e4c20ea7536a28] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c00c3e +0  25020000
[3e4c20ea753772e] jit-backend-dump}
[3e4c20ea753aa74] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c00c4d +0  32020000
[3e4c20ea753b75b] jit-backend-dump}
[3e4c20ea753e9c8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c00c61 +0  3A020000
[3e4c20ea753f6a6] jit-backend-dump}
[3e4c20ea754287f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c00c76 +0  41020000
[3e4c20ea754352d] jit-backend-dump}
[3e4c20ea75466bd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c00c8e +0  45020000
[3e4c20ea7547370] jit-backend-dump}
[3e4c20ea754a54a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c00c9c +0  53020000
[3e4c20ea754b1df] jit-backend-dump}
[3e4c20ea754e34a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c00cad +0  5E020000
[3e4c20ea754f028] jit-backend-dump}
[3e4c20ea75523f4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c00cbe +0  69020000
[3e4c20ea75530a8] jit-backend-dump}
[3e4c20ea75563e1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c00cd2 +0  71020000
[3e4c20ea75570b9] jit-backend-dump}
[3e4c20ea755a2e8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c00ce6 +0  79020000
[3e4c20ea755af9c] jit-backend-dump}
[3e4c20ea755e1e0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c00cfd +0  7E020000
[3e4c20ea755eef3] jit-backend-dump}
[3e4c20ea75620d5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c00d0b +0  8C020000
[3e4c20ea7562dd5] jit-backend-dump}
[3e4c20ea7565f4a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c00d1c +0  97020000
[3e4c20ea7566c31] jit-backend-dump}
[3e4c20ea7569e51] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c00d31 +0  9E020000
[3e4c20ea756aae9] jit-backend-dump}
[3e4c20ea756df79] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf5881 +0  7BB30000
[3e4c20ea756ec45] jit-backend-dump}
[3e4c20ea7572ba2] jit-backend}
[3e4c20ea7576805] {jit-log-opt-bridge
# bridge out of Guard 0x7f4eb7188410 with 57 ops
[p0, p1, i2, i3]
+214: guard_class(p0, 16435920, descr=<Guard0x3cdf520>) [p0, p1, i2, i3]
+226: p5 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+230: guard_nonnull_class(p5, ConstClass(ForwardLink), descr=<Guard0x3cdf580>) [p0, p1, i2, i3]
debug_merge_point(0, 0, '(max AppRand8 AppRand10)')
+249: guard_not_invalidated(descr=<Guard0x3fde698>) [p0, p1, i2, i3]
+249: i7 = int_lt(i3, i2)
+252: guard_false(i7, descr=<Guard0x3fde6e0>) [p0, p1, i2, i3]
debug_merge_point(0, 0, '(+ 1 AppRand11)')
+258: i9 = int_add_ovf(1, i3)
+267: guard_no_overflow(descr=<Guard0x3fde728>) [p0, p1, i2, i3]
+273: p10 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+284: guard_value(p10, ConstPtr(ptr11), descr=<Guard0x3fde770>) [p0, p1, i2, i3]
+293: p12 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+297: p13 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([h2 (shortestPath t5387)][AppRand31 (= h1 treeHeight)]) (let ([or-part (not AppRand31)]) (let ([if4 (if or-part or-part (let ([AppRand32 (= h2 treeHeight)]) (not AppRand32)))]) (if if4 (println *****BUG:  h1   h2) (void))))) from (+ 1 AppRand11)')
+301: guard_class(p13, 16435208, descr=<Guard0x3fde7b8>) [p0, p1, i2, i3]
+314: p15 = getfield_gc_r(p13, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+318: guard_nonnull_class(p15, ConstClass(ForwardLink), descr=<Guard0x3cdf5e0>) [p0, p1, i2, i3]
debug_merge_point(0, 0, '(shortestPath t5387)')
+338: guard_class(p12, 16499664, descr=<Guard0x3fde800>) [p0, p1, i2, i3]
+352: p18 = getfield_gc_r(p12, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+356: guard_class(p18, 16504944, descr=<Guard0x3fde848>) [p0, p1, i2, i3]
+369: p20 = getfield_gc_r(p18, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+373: guard_class(p20, 16479576, descr=<Guard0x3fde890>) [p0, p1, i2, i3]
+386: p22 = getfield_gc_r(p20, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+397: guard_value(p22, ConstPtr(ptr23), descr=<Guard0x3fde8d8>) [p0, p1, i2, i3]
+406: p24 = getfield_gc_r(p20, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize6.inst__vals_2 40 pure>)
+417: guard_value(p24, ConstPtr(ptr25), descr=<Guard0x3cdf640>) [p0, p1, i2, i3]
+426: p26 = getfield_gc_r(p12, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+430: guard_nonnull_class(p26, ConstClass(W_Vector), descr=<Guard0x3cdf6a0>) [p0, p1, i2, i3]
+449: p28 = getfield_gc_r(p20, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath t5387)')
debug_merge_point(0, 0, '(let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))')
debug_merge_point(0, 0, '(vector-ref t5265 0)')
+449: i29 = getfield_gc_i(p26, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+453: i31 = int_lt(0, i29)
+457: guard_true(i31, descr=<Guard0x3fde920>) [p0, p1, i2, i3]
+463: p32 = getfield_gc_r(p26, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+467: guard_class(p32, 16622984, descr=<Guard0x3fde968>) [p0, p1, i2, i3]
+480: p34 = getfield_gc_r(p26, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+484: p36 = getarrayitem_gc_r(p34, 0, descr=<ArrayP 8>)
+488: guard_class(p36, ConstClass(W_Vector), descr=<Guard0x3fde9b0>) [p0, p1, i2, i3]
debug_merge_point(0, 0, '(let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16))))')
debug_merge_point(0, 0, '(shortestPath AppRand12)')
debug_merge_point(0, 0, '(if (eqv? t5265 0) 0 (let ([AppRand12 (vector-ref t5265 0)]) (let ([AppRand13 (shortestPath AppRand12)][AppRand14 (vector-ref t5265 1)]) (let ([AppRand13 AppRand13][AppRand15 (shortestPath AppRand14)]) (let ([AppRand16 (min AppRand13 AppRand15)]) (+ 1 AppRand16)))))) from (shortestPath AppRand12)')
+501: p38 = new_with_vtable(descr=<SizeDescr 24>)
+542: p39 = new_with_vtable(descr=<SizeDescr 40>)
+553: p40 = new_with_vtable(descr=<SizeDescr 24>)
+564: setfield_gc(p40, p12, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+568: setfield_gc(p40, i9, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+572: setfield_gc(p39, p15, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+583: setfield_gc(p39, ConstPtr(ptr41), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+587: setfield_gc(p39, p40, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+591: setfield_gc(p39, p13, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+602: setfield_gc(p38, ConstPtr(ptr42), descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+606: setfield_gc(p38, p26, descr=<FieldP rpython.tool.pairtype.ConsEnvSize1.inst__vals_0 16 pure>)
+617: jump(ConstPtr(ptr42), p36, p15, p38, p39, ConstPtr(ptr43), descr=TargetToken(80549456))
+656: --end of the loop--
[3e4c20ea75ad967] jit-log-opt-bridge}
[3e4c20eacaca95b] {jit-backend
[3e4c20eacb406e4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c
[3e4c20eacb47cb7] jit-backend-dump}
[3e4c20eacb57854] {jit-backend-addr
Loop 80 ((let ([AppRand17 (+ n5280 n5280 -1)]) (let ([if1 (> AppRand17 nodes)]) (if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))))) from (doloop AppRand18 AppRand19)) has address 0x7f4eb6c0120d to 0x7f4eb6c01310 (bootstrap 0x7f4eb6c01180)
       gc table: 0x7f4eb6c01100
       function: 0x7f4eb6c01180
         resops: 0x7f4eb6c0120d
       failures: 0x7f4eb6c01310
            end: 0x7f4eb6c014c6
[3e4c20eacb5ae5f] jit-backend-addr}
[3e4c20eacb5fc87] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c01237 +0  E7000000
[3e4c20eacb61035] jit-backend-dump}
[3e4c20eacb64967] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0124d +0  ED000000
[3e4c20eacb658a0] jit-backend-dump}
[3e4c20eacb68e2e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c01260 +0  12010000
[3e4c20eacb69b84] jit-backend-dump}
[3e4c20eacb6cf53] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0126d +0  21010000
[3e4c20eacb6dc6e] jit-backend-dump}
[3e4c20eacb70f95] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0127a +0  30010000
[3e4c20eacb71c8c] jit-backend-dump}
[3e4c20eacb74efb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0128a +0  3C010000
[3e4c20eacb75bfb] jit-backend-dump}
[3e4c20eacb78e1e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0129e +0  44010000
[3e4c20eacb79b0c] jit-backend-dump}
[3e4c20eacb7cd25] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c012ab +0  53010000
[3e4c20eacb7da28] jit-backend-dump}
[3e4c20eacb80c1d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c012b9 +0  61010000
[3e4c20eacb81939] jit-backend-dump}
[3e4c20eacb84c66] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c012e0 +0  72010000
[3e4c20eacb85981] jit-backend-dump}
[3e4c20eacb88bf4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c012ed +0  81010000
[3e4c20eacb898e4] jit-backend-dump}
[3e4c20eacb8cadc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c012f6 +0  94010000
[3e4c20eacb8d7ca] jit-backend-dump}
[3e4c20eacb909d4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c01303 +0  A3010000
[3e4c20eacb916b9] jit-backend-dump}
[3e4c20eacb957e7] jit-backend}
[3e4c20eacb9998c] {jit-log-opt-loop
# Loop 80 ((let ([AppRand17 (+ n5280 n5280 -1)]) (let ([if1 (> AppRand17 nodes)]) (if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))))) from (doloop AppRand18 AppRand19)) : loop with 52 ops
[p0, p1]
+277: label(p0, p1, descr=TargetToken(139976082360464))
debug_merge_point(0, 0, '(let ([AppRand17 (+ n5280 n5280 -1)]) (let ([if1 (> AppRand17 nodes)]) (if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))))) from (doloop AppRand18 AppRand19)')
+296: guard_class(p1, 16435920, descr=<Guard0x3cdf700>) [p0, p1]
+315: p3 = getfield_gc_r(p1, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+319: guard_nonnull_class(p3, ConstClass(ForwardLink), descr=<Guard0x3cdf760>) [p0, p1]
debug_merge_point(0, 0, '(+ n5280 n5280 -1)')
+337: guard_not_invalidated(descr=<Guard0x3fdea40>) [p0, p1]
+337: guard_class(p0, 16503888, descr=<Guard0x3fdea88>) [p0, p1]
+356: i6 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_1 24 pure>)
+360: i7 = int_add_ovf(i6, i6)
+363: guard_no_overflow(descr=<Guard0x3fdead0>) [p0, p1]
+369: i9 = int_add_ovf(i7, -1)
+376: guard_no_overflow(descr=<Guard0x3fdeb18>) [p0, p1]
debug_merge_point(0, 0, '(let ([if1 (> AppRand17 nodes)]) (if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))))')
debug_merge_point(0, 0, '(> AppRand17 nodes)')
+382: p10 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+386: guard_class(p10, 16482960, descr=<Guard0x3fdeb60>) [p0, p1]
+398: p12 = getfield_gc_r(p10, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+409: guard_value(p12, ConstPtr(ptr13), descr=<Guard0x3fdeba8>) [p0, p1]
+418: i14 = getfield_gc_i(p10, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize1Fixed.inst_vals_fixed_0 24 pure>)
+422: i15 = int_gt(i9, i14)
+425: guard_false(i15, descr=<Guard0x3fdebf0>) [p0, p1]
debug_merge_point(0, 0, '(if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19)))')
debug_merge_point(0, 0, '(let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))')
debug_merge_point(0, 0, '(+ h5278 1)')
+431: i16 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_0 16 pure>)
+435: i18 = int_add_ovf(i16, 1)
+439: guard_no_overflow(descr=<Guard0x3fdec38>) [p0, p1]
debug_merge_point(0, 0, '(+ n5280 n5280)')
debug_merge_point(0, 0, '(doloop AppRand18 AppRand19)')
debug_merge_point(0, 0, '(let ([AppRand17 (+ n5280 n5280 -1)]) (let ([if1 (> AppRand17 nodes)]) (if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))))) from (doloop AppRand18 AppRand19)')
+445: label(p10, i18, i7, p1, p3, i14, descr=TargetToken(139976082360544))
debug_merge_point(0, 0, '(let ([AppRand17 (+ n5280 n5280 -1)]) (let ([if1 (> AppRand17 nodes)]) (if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))))) from (doloop AppRand18 AppRand19)')
debug_merge_point(0, 0, '(+ n5280 n5280 -1)')
+472: guard_not_invalidated(descr=<Guard0x3cdf7c0>) [i7, i18, p10, p1, p3]
+472: i19 = int_add_ovf(i7, i7)
+478: guard_no_overflow(descr=<Guard0x3fdec80>) [i7, i18, p10, p1, p3]
+484: i21 = int_add_ovf(i19, -1)
+491: guard_no_overflow(descr=<Guard0x3fdecc8>) [i7, i18, p10, p1, p3]
debug_merge_point(0, 0, '(let ([if1 (> AppRand17 nodes)]) (if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))))')
debug_merge_point(0, 0, '(> AppRand17 nodes)')
+497: i22 = int_gt(i21, i14)
+500: guard_false(i22, descr=<Guard0x3fded10>) [i7, i18, p10, p1, p3]
debug_merge_point(0, 0, '(if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19)))')
debug_merge_point(0, 0, '(let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))')
debug_merge_point(0, 0, '(+ h5278 1)')
+506: i24 = int_add_ovf(i18, 1)
+513: guard_no_overflow(descr=<Guard0x3fded58>) [i7, i18, p10, p1, p3]
debug_merge_point(0, 0, '(+ n5280 n5280)')
debug_merge_point(0, 0, '(doloop AppRand18 AppRand19)')
debug_merge_point(0, 0, '(let ([AppRand17 (+ n5280 n5280 -1)]) (let ([if1 (> AppRand17 nodes)]) (if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))))) from (doloop AppRand18 AppRand19)')
+519: jump(p10, i24, i19, p1, p3, i14, descr=TargetToken(139976082360544))
+528: --end of the loop--
[3e4c20eacbcb3ef] jit-log-opt-loop}
[3e4c20ead3166e3] {jit-backend
[3e4c20ead3ecdf5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c016e
[3e4c20ead3f8ae6] jit-backend-dump}
[3e4c20ead40769e] {jit-backend-addr
Loop 81 ((let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))) from (doloop5533 AppRand52)) has address 0x7f4eb6c0186d to 0x7f4eb6c01ba0 (bootstrap 0x7f4eb6c017e0)
       gc table: 0x7f4eb6c016e0
       function: 0x7f4eb6c017e0
         resops: 0x7f4eb6c0186d
       failures: 0x7f4eb6c01ba0
            end: 0x7f4eb6c01f66
[3e4c20ead40a98e] jit-backend-addr}
[3e4c20ead40f681] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c01897 +0  67030000
[3e4c20ead410a57] jit-backend-dump}
[3e4c20ead4141bb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c018ad +0  6D030000
[3e4c20ead414f9b] jit-backend-dump}
[3e4c20ead418578] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c018c0 +0  92030000
[3e4c20ead4192a9] jit-backend-dump}
[3e4c20ead41c589] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c018d4 +0  9A030000
[3e4c20ead41d28f] jit-backend-dump}
[3e4c20ead420438] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c018e8 +0  A2030000
[3e4c20ead421101] jit-backend-dump}
[3e4c20ead424254] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c018ff +0  A7030000
[3e4c20ead424eef] jit-backend-dump}
[3e4c20ead428001] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0190c +0  B6030000
[3e4c20ead428ce9] jit-backend-dump}
[3e4c20ead42bd5c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c01927 +0  B7030000
[3e4c20ead42ca0d] jit-backend-dump}
[3e4c20ead42fb4d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c01938 +0  C2030000
[3e4c20ead4307f8] jit-backend-dump}
[3e4c20ead43393b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c01954 +0  C2030000
[3e4c20ead4345dc] jit-backend-dump}
[3e4c20ead4376e6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c01962 +0  D0030000
[3e4c20ead438387] jit-backend-dump}
[3e4c20ead43b459] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c01974 +0  DA030000
[3e4c20ead43c10d] jit-backend-dump}
[3e4c20ead43f241] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c01989 +0  E1030000
[3e4c20ead43ff35] jit-backend-dump}
[3e4c20ead442fc1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c019b5 +0  D1030000
[3e4c20ead443c5c] jit-backend-dump}
[3e4c20ead446d5c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c019c3 +0  DF030000
[3e4c20ead4479fd] jit-backend-dump}
[3e4c20ead44aa80] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c019d4 +0  EA030000
[3e4c20ead44b715] jit-backend-dump}
[3e4c20ead44e7d5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c019e9 +0  F1030000
[3e4c20ead44f47f] jit-backend-dump}
[3e4c20ead452505] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c01a0f +0  E7030000
[3e4c20ead4531f0] jit-backend-dump}
[3e4c20ead456406] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c01a7d +0  B1030000
[3e4c20ead4570ae] jit-backend-dump}
[3e4c20ead45a1ab] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c01a8a +0  C0030000
[3e4c20ead45ae58] jit-backend-dump}
[3e4c20ead45df7d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c01aa1 +0  C5030000
[3e4c20ead45ec2b] jit-backend-dump}
[3e4c20ead461cd8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c01aaf +0  D3030000
[3e4c20ead462970] jit-backend-dump}
[3e4c20ead465a40] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c01ac0 +0  DE030000
[3e4c20ead4666e4] jit-backend-dump}
[3e4c20ead469812] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c01ad4 +0  E6030000
[3e4c20ead46a4cf] jit-backend-dump}
[3e4c20ead46d5b6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c01afb +0  DB030000
[3e4c20ead46e264] jit-backend-dump}
[3e4c20ead471336] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c01b09 +0  E9030000
[3e4c20ead471fd7] jit-backend-dump}
[3e4c20ead4750bf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c01b1a +0  F4030000
[3e4c20ead475d66] jit-backend-dump}
[3e4c20ead478e14] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c01b2f +0  FB030000
[3e4c20ead479aa9] jit-backend-dump}
[3e4c20ead47cb78] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c01b55 +0  F1030000
[3e4c20ead47d820] jit-backend-dump}
[3e4c20ead48167f] jit-backend}
[3e4c20ead4853bb] {jit-log-opt-loop
# Loop 81 ((let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))) from (doloop5533 AppRand52)) : loop with 135 ops
[p0, p1]
+405: label(p0, p1, descr=TargetToken(139976082360624))
debug_merge_point(0, 0, '(let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))) from (doloop5533 AppRand52)')
+424: guard_class(p1, 16435208, descr=<Guard0x3cdf820>) [p0, p1]
+443: p3 = getfield_gc_r(p1, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+447: guard_nonnull_class(p3, ConstClass(ForwardLink), descr=<Guard0x3cdf880>) [p0, p1]
debug_merge_point(0, 0, '(>= i5535 depth)')
+465: guard_not_invalidated(descr=<Guard0x3fdeda0>) [p0, p1]
+465: guard_class(p0, 16504944, descr=<Guard0x3fdede8>) [p0, p1]
+484: i6 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+488: p7 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+492: guard_class(p7, 16478824, descr=<Guard0x3fdee30>) [p0, p1]
+504: p9 = getfield_gc_r(p7, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+515: guard_value(p9, ConstPtr(ptr10), descr=<Guard0x3fdee78>) [p0, p1]
+524: p11 = getfield_gc_r(p7, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_1 32 pure>)
+528: guard_nonnull_class(p11, ConstClass(W_Fixnum), descr=<Guard0x3cdf8e0>) [p0, p1]
+547: i13 = getfield_gc_i(p11, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+551: i14 = int_ge(i6, i13)
+554: guard_false(i14, descr=<Guard0x3fdeec0>) [p0, p1]
debug_merge_point(0, 0, '(if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))')
debug_merge_point(0, 0, '(begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52)))')
debug_merge_point(0, 0, '(if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6))))')
+560: p15 = getfield_gc_r(p7, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_2 40 pure>)
+564: p16 = getfield_gc_r(p15, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+568: guard_nonnull_class(p16, ConstClass(W_CellIntegerStrategy), descr=<Guard0x3cdf940>) [p0, p1]
+587: i18 = getfield_gc_i(p16, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+591: i20 = int_and(i18, 1)
+595: i21 = int_is_zero(i20)
+598: guard_false(i21, descr=<Guard0x3fdef08>) [p0, p1]
debug_merge_point(0, 0, '(let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))')
debug_merge_point(0, 0, '(vector-ref CellRef(tn1) 1)')
+604: p22 = getfield_gc_r(p7, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_0 24 pure>)
+608: p23 = getfield_gc_r(p22, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+613: guard_nonnull_class(p23, ConstClass(W_Vector), descr=<Guard0x3cdfa00>) [p0, p1]
+632: i25 = getfield_gc_i(p23, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+636: i27 = int_lt(1, i25)
+640: guard_true(i27, descr=<Guard0x3fdef50>) [p0, p1]
+646: p28 = getfield_gc_r(p23, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+650: guard_class(p28, 16622984, descr=<Guard0x3fdef98>) [p0, p1]
+664: p30 = getfield_gc_r(p23, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+668: p32 = getarrayitem_gc_r(p30, 1, descr=<ArrayP 8>)
+672: guard_class(p32, ConstClass(W_Vector), descr=<Guard0x3fdefe0>) [p0, p1]
debug_merge_point(0, 0, '(set! tn1 SetBang5)')
debug_merge_point(0, 0, '(let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6))')
debug_merge_point(0, 0, '(vector-ref CellRef(tn2) 1)')
+685: p34 = getfield_gc_r(p7, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_3 48 pure>)
+701: setfield_gc(p22, p32, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+706: p35 = getfield_gc_r(p34, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+710: guard_nonnull_class(p35, ConstClass(W_Vector), descr=<Guard0x3cdfb80>) [p7, p35, p1, p0, p3]
+729: i37 = getfield_gc_i(p35, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+733: i39 = int_lt(1, i37)
+737: guard_true(i39, descr=<Guard0x3fdf028>) [p7, p35, p1, p0, p3]
+743: p40 = getfield_gc_r(p35, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+747: guard_class(p40, 16622984, descr=<Guard0x3fdf070>) [p7, p35, p1, p0, p3]
+760: p42 = getfield_gc_r(p35, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+764: p44 = getarrayitem_gc_r(p42, 1, descr=<ArrayP 8>)
+768: guard_class(p44, ConstClass(W_Vector), descr=<Guard0x3fdf0b8>) [p7, p35, p1, p0, p3]
debug_merge_point(0, 0, '(set! tn2 SetBang6)')
debug_merge_point(0, 0, '(set! path (quotient CellRef(path) 2))')
+792: setfield_gc(p34, p44, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+796: p46 = getfield_gc_r(p15, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+800: guard_nonnull_class(p46, ConstClass(W_CellIntegerStrategy), descr=<Guard0x3cdfc40>) [p0, p46, p1, None, p3]
+819: i49 = getfield_gc_i(p46, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+823: i51 = int_eq(i49, -9223372036854775808)
+823: i53 = int_rshift(i49, 1)
+829: i55 = int_lshift(i53, 1)
+835: i57 = int_xor(i49, 2)
+846: i59 = int_rshift(i57, 63)
+850: i60 = int_ne(i55, i49)
+866: i61 = int_and(i59, i60)
+869: i62 = int_add(i53, i61)
debug_merge_point(0, 0, '(let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))')
debug_merge_point(0, 0, '(+ i5535 1)')
+872: i64 = int_add(i6, 1)
debug_merge_point(0, 0, '(doloop5533 AppRand52)')
debug_merge_point(0, 0, '(let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))) from (doloop5533 AppRand52)')
+876: setfield_gc(p46, i62, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+880: label(p7, i64, p1, p3, p11, i13, p15, p46, i62, p22, p34, descr=TargetToken(139976082360704))
debug_merge_point(0, 0, '(let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))) from (doloop5533 AppRand52)')
debug_merge_point(0, 0, '(>= i5535 depth)')
+920: guard_not_invalidated(descr=<Guard0x3cdfca0>) [i64, p7, p1, p3]
+920: i65 = int_ge(i64, i13)
+923: guard_false(i65, descr=<Guard0x3fdf100>) [i64, p7, p1, p3]
debug_merge_point(0, 0, '(if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))')
debug_merge_point(0, 0, '(begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52)))')
debug_merge_point(0, 0, '(if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6))))')
+929: i67 = int_and(i62, 1)
+933: i68 = int_is_zero(i67)
+936: guard_false(i68, descr=<Guard0x3fdf148>) [i64, p7, p1, p3]
debug_merge_point(0, 0, '(let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))')
debug_merge_point(0, 0, '(vector-ref CellRef(tn1) 1)')
+942: p69 = getfield_gc_r(p22, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+947: guard_nonnull_class(p69, ConstClass(W_Vector), descr=<Guard0x3cdfd60>) [i64, p7, p1, p3]
+965: i71 = getfield_gc_i(p69, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+969: i73 = int_lt(1, i71)
+973: guard_true(i73, descr=<Guard0x3fdf190>) [i64, p7, p1, p3]
+979: p74 = getfield_gc_r(p69, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+983: guard_class(p74, 16622984, descr=<Guard0x3fdf1d8>) [i64, p7, p1, p3]
+996: p76 = getfield_gc_r(p69, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1000: p78 = getarrayitem_gc_r(p76, 1, descr=<ArrayP 8>)
+1004: guard_class(p78, ConstClass(W_Vector), descr=<Guard0x3fdf220>) [i64, p7, p1, p3]
debug_merge_point(0, 0, '(set! tn1 SetBang5)')
debug_merge_point(0, 0, '(let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6))')
debug_merge_point(0, 0, '(vector-ref CellRef(tn2) 1)')
+1028: setfield_gc(p22, p78, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1033: p80 = getfield_gc_r(p34, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1037: guard_nonnull_class(p80, ConstClass(W_Vector), descr=<Guard0x3cdfdc0>) [p7, p80, i64, None, p1, p3]
+1055: i82 = getfield_gc_i(p80, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1059: i84 = int_lt(1, i82)
+1063: guard_true(i84, descr=<Guard0x3fdf268>) [p7, p80, i64, None, p1, p3]
+1069: p85 = getfield_gc_r(p80, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1073: guard_class(p85, 16622984, descr=<Guard0x3fdf2b0>) [p7, p80, i64, None, p1, p3]
+1086: p87 = getfield_gc_r(p80, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1090: p89 = getarrayitem_gc_r(p87, 1, descr=<ArrayP 8>)
+1094: guard_class(p89, ConstClass(W_Vector), descr=<Guard0x3fdf2f8>) [p7, p80, i64, None, p1, p3]
debug_merge_point(0, 0, '(set! tn2 SetBang6)')
debug_merge_point(0, 0, '(set! path (quotient CellRef(path) 2))')
+1118: setfield_gc(p34, p89, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1122: p91 = getfield_gc_r(p15, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1126: guard_nonnull_class(p91, ConstClass(W_CellIntegerStrategy), descr=<Guard0x3cdfe20>) [p91, i64, p7, p1, p3]
+1145: i93 = getfield_gc_i(p91, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1149: i95 = int_eq(i93, -9223372036854775808)
+1149: i97 = int_rshift(i93, 1)
+1155: i99 = int_lshift(i97, 1)
+1161: i101 = int_xor(i93, 2)
+1168: i103 = int_rshift(i101, 63)
+1172: i104 = int_ne(i99, i93)
+1184: i105 = int_and(i103, i104)
+1187: i106 = int_add(i97, i105)
debug_merge_point(0, 0, '(let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))')
debug_merge_point(0, 0, '(+ i5535 1)')
+1190: i108 = int_add(i64, 1)
debug_merge_point(0, 0, '(doloop5533 AppRand52)')
debug_merge_point(0, 0, '(let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))) from (doloop5533 AppRand52)')
+1194: setfield_gc(p91, i106, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1198: jump(p7, i108, p1, p3, p11, i13, p15, p91, i106, p22, p34, descr=TargetToken(139976082360704))
+1216: --end of the loop--
[3e4c20ead4f33d5] jit-log-opt-loop}
[3e4c20eaeb98e38] {jit-backend
[3e4c20eaec6fee1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c
[3e4c20eaec7e86a] jit-backend-dump}
[3e4c20eaec8bb67] {jit-backend-addr
Loop 82 ((let ([AppRand34 (vector-ref full 0)]) (let ([canGoLeft (if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)][AppRand38 (vector-ref full 1)]) (let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))))) from (CellRef(replaceTreeWork) AppRand43 partial (not dir))) has address 0x7f4eb6c025ad to 0x7f4eb6c029e0 (bootstrap 0x7f4eb6c02520)
       gc table: 0x7f4eb6c02330
       function: 0x7f4eb6c02520
         resops: 0x7f4eb6c025ad
       failures: 0x7f4eb6c029e0
            end: 0x7f4eb6c03066
[3e4c20eaec8f2b3] jit-backend-addr}
[3e4c20eaec93b15] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c025d7 +0  17040000
[3e4c20eaec94ec3] jit-backend-dump}
[3e4c20eaec986ae] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c025ed +0  1D040000
[3e4c20eaec994a0] jit-backend-dump}
[3e4c20eaec9ca12] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c02600 +0  42040000
[3e4c20eaec9d7cd] jit-backend-dump}
[3e4c20eaeca0aea] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c02616 +0  48040000
[3e4c20eaeca1831] jit-backend-dump}
[3e4c20eaeca4aa3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c02624 +0  56040000
[3e4c20eaeca57a9] jit-backend-dump}
[3e4c20eaeca89c6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c02634 +0  62040000
[3e4c20eaeca96eb] jit-backend-dump}
[3e4c20eaecac948] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c02648 +0  6A040000
[3e4c20eaecad66f] jit-backend-dump}
[3e4c20eaecb08c6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c02659 +0  75040000
[3e4c20eaecb15c9] jit-backend-dump}
[3e4c20eaecb480b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c02670 +0  7A040000
[3e4c20eaecb552c] jit-backend-dump}
[3e4c20eaecb876b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0267e +0  88040000
[3e4c20eaecbc8b1] jit-backend-dump}
[3e4c20eaecc063d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0268f +0  93040000
[3e4c20eaecc1419] jit-backend-dump}
[3e4c20eaecc481f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c026a3 +0  9B040000
[3e4c20eaecc557e] jit-backend-dump}
[3e4c20eaecc8767] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c026b5 +0  A5040000
[3e4c20eaecc9467] jit-backend-dump}
[3e4c20eaeccc732] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c026c5 +0  B1040000
[3e4c20eaeccd43b] jit-backend-dump}
[3e4c20eaecd06f1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c026db +0  B7040000
[3e4c20eaecd1400] jit-backend-dump}
[3e4c20eaecd4752] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c026e8 +0  C6040000
[3e4c20eaecd54cc] jit-backend-dump}
[3e4c20eaecd8735] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c026f2 +0  D8040000
[3e4c20eaecd9460] jit-backend-dump}
[3e4c20eaecdc66a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c02702 +0  E4040000
[3e4c20eaecdd398] jit-backend-dump}
[3e4c20eaece0547] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c02710 +0  F2040000
[3e4c20eaece127b] jit-backend-dump}
[3e4c20eaece4423] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c02720 +0  FE040000
[3e4c20eaece514e] jit-backend-dump}
[3e4c20eaece829e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c02734 +0  06050000
[3e4c20eaece8fcc] jit-backend-dump}
[3e4c20eaecec112] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c02741 +0  15050000
[3e4c20eaecece3a] jit-backend-dump}
[3e4c20eaeceffc4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0274e +0  24050000
[3e4c20eaecf0d17] jit-backend-dump}
[3e4c20eaecf3e85] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0275e +0  30050000
[3e4c20eaecf4bde] jit-backend-dump}
[3e4c20eaecf7d40] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c02778 +0  32050000
[3e4c20eaecf8a6b] jit-backend-dump}
[3e4c20eaecfbcbb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0278c +0  3A050000
[3e4c20eaecfca20] jit-backend-dump}
[3e4c20eaecffb70] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c02795 +0  4D050000
[3e4c20eaed008b0] jit-backend-dump}
[3e4c20eaed03a09] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c027a6 +0  58050000
[3e4c20eaed04771] jit-backend-dump}
[3e4c20eaed078c7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c027b4 +0  66050000
[3e4c20eaed0861a] jit-backend-dump}
[3e4c20eaed0b720] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c027c6 +0  70050000
[3e4c20eaed0c445] jit-backend-dump}
[3e4c20eaed0f55a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c027dc +0  76050000
[3e4c20eaed1029e] jit-backend-dump}
[3e4c20eaed133a1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c027e9 +0  85050000
[3e4c20eaed140e1] jit-backend-dump}
[3e4c20eaed171fa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c027fb +0  8F050000
[3e4c20eaed17f2b] jit-backend-dump}
[3e4c20eaed1b031] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0280a +0  9C050000
[3e4c20eaed1bd7e] jit-backend-dump}
[3e4c20eaed1ef4b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0281c +0  A6050000
[3e4c20eaed1fc8e] jit-backend-dump}
[3e4c20eaed22dc2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c02832 +0  AC050000
[3e4c20eaed23b3d] jit-backend-dump}
[3e4c20eaed26c99] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0283f +0  BB050000
[3e4c20eaed279ee] jit-backend-dump}
[3e4c20eaed2abf6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c02894 +0  9E050000
[3e4c20eaed2b939] jit-backend-dump}
[3e4c20eaed2eb2b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c028a2 +0  AC050000
[3e4c20eaed2f843] jit-backend-dump}
[3e4c20eaed329cd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c028b2 +0  B8050000
[3e4c20eaed336f5] jit-backend-dump}
[3e4c20eaed368ea] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c028c6 +0  C0050000
[3e4c20eaed3762a] jit-backend-dump}
[3e4c20eaed3a78f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c028d3 +0  CF050000
[3e4c20eaed3b4b1] jit-backend-dump}
[3e4c20eaed3e672] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c028e5 +0  D9050000
[3e4c20eaed3f384] jit-backend-dump}
[3e4c20eaed424d1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c028f3 +0  E7050000
[3e4c20eaed431f9] jit-backend-dump}
[3e4c20eaed4635e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c02904 +0  F2050000
[3e4c20eaed4708f] jit-backend-dump}
[3e4c20eaed4a1e8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0291a +0  F8050000
[3e4c20eaed4af06] jit-backend-dump}
[3e4c20eaed4e078] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c02927 +0  07060000
[3e4c20eaed4eda3] jit-backend-dump}
[3e4c20eaed51ee3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c02938 +0  12060000
[3e4c20eaed52c08] jit-backend-dump}
[3e4c20eaed55d45] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c02946 +0  20060000
[3e4c20eaed56a67] jit-backend-dump}
[3e4c20eaed59bc0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c02958 +0  2A060000
[3e4c20eaed5a8d8] jit-backend-dump}
[3e4c20eaed5da1f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0296d +0  31060000
[3e4c20eaed5e74d] jit-backend-dump}
[3e4c20eaed618b5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0297a +0  40060000
[3e4c20eaed625d7] jit-backend-dump}
[3e4c20eaed65720] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0298c +0  4A060000
[3e4c20eaed66445] jit-backend-dump}
[3e4c20eaed695b3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0299a +0  58060000
[3e4c20eaed6a2ea] jit-backend-dump}
[3e4c20eaed6d43a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c029aa +0  64060000
[3e4c20eaed6e15c] jit-backend-dump}
[3e4c20eaed712b8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c029bf +0  6B060000
[3e4c20eaed71fd3] jit-backend-dump}
[3e4c20eaed75114] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c029cc +0  7A060000
[3e4c20eaed75e2f] jit-backend-dump}
[3e4c20eaed79cf6] jit-backend}
[3e4c20eaed7dca9] {jit-log-opt-loop
# Loop 82 ((let ([AppRand34 (vector-ref full 0)]) (let ([canGoLeft (if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)][AppRand38 (vector-ref full 1)]) (let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))))) from (CellRef(replaceTreeWork) AppRand43 partial (not dir))) : loop with 267 ops
[p0, p1]
+645: label(p0, p1, descr=TargetToken(139976082361104))
+664: guard_class(p1, 16435208, descr=<Guard0x46d6140>) [p0, p1]
+683: p3 = getfield_gc_r(p1, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+687: guard_nonnull_class(p3, ConstClass(ForwardLink), descr=<Guard0x46d6260>) [p0, p1]
debug_merge_point(0, 0, '(vector-ref full 0)')
+705: guard_not_invalidated(descr=<Guard0x3fdf3d0>) [p0, p1]
+705: guard_class(p0, 16500368, descr=<Guard0x3fdf418>) [p0, p1]
+724: p6 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+728: guard_nonnull_class(p6, ConstClass(W_Vector), descr=<Guard0x46d62c0>) [p0, p1]
+746: i8 = getfield_gc_i(p6, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+750: i10 = int_lt(0, i8)
+754: guard_true(i10, descr=<Guard0x3fdf460>) [p0, p1]
+760: p11 = getfield_gc_r(p6, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+764: guard_class(p11, 16622984, descr=<Guard0x3fdf4a8>) [p0, p1]
+776: p13 = getfield_gc_r(p6, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+780: p15 = getarrayitem_gc_r(p13, 0, descr=<ArrayP 8>)
+784: guard_class(p15, ConstClass(W_Vector), descr=<Guard0x3fdf4f0>) [p0, p1]
debug_merge_point(0, 0, '(let ([canGoLeft (if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)][AppRand38 (vector-ref full 1)]) (let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))))')
debug_merge_point(0, 0, '(if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)')
+796: p17 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+800: guard_class(p17, 16482208, descr=<Guard0x3fdf538>) [p0, p1]
+813: i19 = getfield_gc_i(p17, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed10.inst_vals_fixed_0 24 pure>)
debug_merge_point(0, 0, '(let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37)))')
debug_merge_point(0, 0, 'partial')
+813: p20 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+817: guard_nonnull_class(p20, ConstClass(W_Vector), descr=<Guard0x46d6320>) [p0, p1]
+836: p22 = getfield_gc_r(p17, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(vector-ref full 0)')
debug_merge_point(0, 0, '(let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))')
debug_merge_point(0, 0, '(vector-ref AppRand35 2)')
+836: i23 = getfield_gc_i(p15, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+840: i25 = int_lt(2, i23)
+844: guard_true(i25, descr=<Guard0x3fdf580>) [p0, p1]
+850: p26 = getfield_gc_r(p15, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+854: guard_class(p26, 16622984, descr=<Guard0x3fdf5c8>) [p0, p1]
+867: p28 = getfield_gc_r(p15, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+871: p30 = getarrayitem_gc_r(p28, 2, descr=<ArrayP 8>)
+875: guard_class(p30, ConstClass(W_Fixnum), descr=<Guard0x3fdf610>) [p0, p1]
+887: i32 = getfield_gc_i(p30, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(vector-ref partial 2)')
+891: i33 = getfield_gc_i(p20, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+895: i35 = int_lt(2, i33)
+899: guard_true(i35, descr=<Guard0x3fdf658>) [p0, p1]
+905: p36 = getfield_gc_r(p20, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+909: guard_class(p36, 16622984, descr=<Guard0x3fdf6a0>) [p0, p1]
+921: p38 = getfield_gc_r(p20, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+925: p40 = getarrayitem_gc_r(p38, 2, descr=<ArrayP 8>)
+929: guard_class(p40, ConstClass(W_Fixnum), descr=<Guard0x3fdf6e8>) [p0, p1]
+943: i42 = getfield_gc_i(p40, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(> AppRand36 AppRand37)')
+947: i43 = int_gt(i32, i42)
+950: guard_true(i43, descr=<Guard0x3fdf730>) [p0, p1]
debug_merge_point(0, 0, '(vector-ref full 1)')
+956: i45 = int_lt(1, i8)
+960: guard_true(i45, descr=<Guard0x3fdf778>) [p0, p1]
+966: p47 = getarrayitem_gc_r(p13, 1, descr=<ArrayP 8>)
+970: guard_class(p47, ConstClass(W_Vector), descr=<Guard0x3fdf7c0>) [p0, p1]
debug_merge_point(0, 0, '(let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial)))))))')
debug_merge_point(0, 0, '(if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)')
debug_merge_point(0, 0, '(let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41)))')
debug_merge_point(0, 0, 'partial')
debug_merge_point(0, 0, '(vector-ref full 1)')
debug_merge_point(0, 0, '(let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))')
debug_merge_point(0, 0, '(vector-ref AppRand39 2)')
+982: i49 = getfield_gc_i(p47, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+986: i51 = int_lt(2, i49)
+990: guard_true(i51, descr=<Guard0x3fdf808>) [p0, p1]
+996: p52 = getfield_gc_r(p47, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1000: guard_class(p52, 16622984, descr=<Guard0x3fdf850>) [p0, p1]
+1012: p54 = getfield_gc_r(p47, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1016: p56 = getarrayitem_gc_r(p54, 2, descr=<ArrayP 8>)
+1020: guard_class(p56, ConstClass(W_Fixnum), descr=<Guard0x3fdf898>) [p0, p1]
+1032: i58 = getfield_gc_i(p56, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(vector-ref partial 2)')
debug_merge_point(0, 0, '(> AppRand40 AppRand41)')
+1036: i59 = int_gt(i58, i42)
+1039: guard_true(i59, descr=<Guard0x3fdf8e0>) [p0, p1]
debug_merge_point(0, 0, '(let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))')
debug_merge_point(0, 0, '(if canGoLeft canGoRight #f)')
debug_merge_point(0, 0, 'canGoRight')
debug_merge_point(0, 0, '(if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial)))))')
debug_merge_point(0, 0, '(if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir))))')
+1045: p60 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+1049: guard_nonnull(p60, descr=<Guard0x3fdf928>) [p0, p1]
+1065: i62 = instance_ptr_eq(p60, ConstPtr(ptr61))
+1068: guard_false(i62, descr=<Guard0x3fdf970>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir)))')
debug_merge_point(0, 0, '(vector-ref full 0)')
debug_merge_point(0, 0, '(CellRef(replaceTreeWork) AppRand42 partial (not dir))')
+1074: p63 = getfield_gc_r(p17, descr=<FieldP pycket.small_list.W_Closure1AsEnvSize2Fixed10.inst_w_val1 32 pure>)
+1078: p64 = getfield_gc_r(p63, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1082: guard_nonnull_class(p64, 16482208, descr=<Guard0x46d6380>) [p0, p1]
+1100: p66 = getfield_gc_r(p64, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1111: guard_value(p66, ConstPtr(ptr67), descr=<Guard0x3fdf9b8>) [p0, p1]
+1120: i68 = instance_ptr_eq(p17, p64)
+1123: guard_true(i68, descr=<Guard0x3fdfa00>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand34 (vector-ref full 0)]) (let ([canGoLeft (if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)][AppRand38 (vector-ref full 1)]) (let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))))) from (CellRef(replaceTreeWork) AppRand42 partial (not dir))')
debug_merge_point(0, 0, '(vector-ref full 0)')
+1129: p70 = getarrayitem_gc_r(p28, 0, descr=<ArrayP 8>)
+1133: guard_class(p70, ConstClass(W_Vector), descr=<Guard0x3fdfa48>) [p0, p1]
debug_merge_point(0, 0, '(let ([canGoLeft (if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)][AppRand38 (vector-ref full 1)]) (let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))))')
debug_merge_point(0, 0, '(if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)')
debug_merge_point(0, 0, '(let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37)))')
debug_merge_point(0, 0, 'partial')
debug_merge_point(0, 0, '(vector-ref full 0)')
debug_merge_point(0, 0, '(let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))')
debug_merge_point(0, 0, '(vector-ref AppRand35 2)')
+1146: i72 = getfield_gc_i(p70, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1150: i74 = int_lt(2, i72)
+1154: guard_true(i74, descr=<Guard0x3fdfa90>) [p0, p1]
+1160: p75 = getfield_gc_r(p70, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1164: guard_class(p75, 16622984, descr=<Guard0x3fdfad8>) [p0, p1]
+1178: p77 = getfield_gc_r(p70, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1182: p79 = getarrayitem_gc_r(p77, 2, descr=<ArrayP 8>)
+1187: guard_class(p79, ConstClass(W_Fixnum), descr=<Guard0x3fdfb20>) [p0, p1]
+1200: i81 = getfield_gc_i(p79, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(vector-ref partial 2)')
debug_merge_point(0, 0, '(> AppRand36 AppRand37)')
+1204: i82 = int_gt(i81, i42)
+1207: guard_true(i82, descr=<Guard0x3fdfb68>) [p0, p1]
debug_merge_point(0, 0, '(vector-ref full 1)')
+1213: p84 = getarrayitem_gc_r(p28, 1, descr=<ArrayP 8>)
+1217: guard_class(p84, ConstClass(W_Vector), descr=<Guard0x3fdfbb0>) [p0, p1]
debug_merge_point(0, 0, '(let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial)))))))')
debug_merge_point(0, 0, '(if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)')
debug_merge_point(0, 0, '(let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41)))')
debug_merge_point(0, 0, 'partial')
debug_merge_point(0, 0, '(vector-ref full 1)')
debug_merge_point(0, 0, '(let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))')
debug_merge_point(0, 0, '(vector-ref AppRand39 2)')
+1231: i86 = getfield_gc_i(p84, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1236: i88 = int_lt(2, i86)
+1240: guard_true(i88, descr=<Guard0x3fdfbf8>) [p0, p1]
+1246: p89 = getfield_gc_r(p84, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1251: guard_class(p89, 16622984, descr=<Guard0x3fdfc40>) [p0, p1]
+1264: p91 = getfield_gc_r(p84, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1269: p93 = getarrayitem_gc_r(p91, 2, descr=<ArrayP 8>)
+1273: guard_class(p93, ConstClass(W_Fixnum), descr=<Guard0x3fdfc88>) [p0, p1]
+1286: i95 = getfield_gc_i(p93, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(vector-ref partial 2)')
debug_merge_point(0, 0, '(> AppRand40 AppRand41)')
+1290: i96 = int_gt(i95, i42)
+1293: guard_true(i96, descr=<Guard0x3fdfcd0>) [p0, p1]
debug_merge_point(0, 0, '(let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))')
debug_merge_point(0, 0, '(if canGoLeft canGoRight #f)')
debug_merge_point(0, 0, 'canGoRight')
debug_merge_point(0, 0, '(if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial)))))')
debug_merge_point(0, 0, '(if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir))))')
debug_merge_point(0, 0, '(let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))')
debug_merge_point(0, 0, '(vector-ref full 1)')
debug_merge_point(0, 0, '(CellRef(replaceTreeWork) AppRand43 partial (not dir))')
debug_merge_point(0, 0, '(let ([AppRand34 (vector-ref full 0)]) (let ([canGoLeft (if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)][AppRand38 (vector-ref full 1)]) (let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))))) from (CellRef(replaceTreeWork) AppRand43 partial (not dir))')
+1299: label(p17, p84, p20, p1, p3, p91, p38, p40, i42, p63, p64, descr=TargetToken(139976082361184))
debug_merge_point(0, 0, '(vector-ref full 0)')
+1368: guard_not_invalidated(descr=<Guard0x46d63e0>) [p20, p84, p17, p1, p3]
+1368: p98 = getarrayitem_gc_r(p91, 0, descr=<ArrayP 8>)
+1372: guard_class(p98, ConstClass(W_Vector), descr=<Guard0x3fdfd18>) [p20, p84, p17, p1, p3]
debug_merge_point(0, 0, '(let ([canGoLeft (if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)][AppRand38 (vector-ref full 1)]) (let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))))')
debug_merge_point(0, 0, '(if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)')
debug_merge_point(0, 0, '(let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37)))')
debug_merge_point(0, 0, 'partial')
debug_merge_point(0, 0, '(vector-ref full 0)')
debug_merge_point(0, 0, '(let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))')
debug_merge_point(0, 0, '(vector-ref AppRand35 2)')
+1384: i100 = getfield_gc_i(p98, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1388: i102 = int_lt(2, i100)
+1392: guard_true(i102, descr=<Guard0x3fdfd60>) [p20, p84, p17, p1, p3]
+1398: p103 = getfield_gc_r(p98, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1402: guard_class(p103, 16622984, descr=<Guard0x3fdfda8>) [p20, p84, p17, p1, p3]
+1414: p105 = getfield_gc_r(p98, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1418: p107 = getarrayitem_gc_r(p105, 2, descr=<ArrayP 8>)
+1422: guard_class(p107, ConstClass(W_Fixnum), descr=<Guard0x3fdfdf0>) [p20, p84, p17, p1, p3]
+1434: i109 = getfield_gc_i(p107, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(vector-ref partial 2)')
debug_merge_point(0, 0, '(> AppRand36 AppRand37)')
+1438: i110 = int_gt(i109, i42)
+1441: guard_true(i110, descr=<Guard0x3fdfe38>) [p20, p84, p17, p1, p3]
debug_merge_point(0, 0, '(vector-ref full 1)')
+1447: p112 = getarrayitem_gc_r(p91, 1, descr=<ArrayP 8>)
+1451: guard_class(p112, ConstClass(W_Vector), descr=<Guard0x3fdfe80>) [p20, p84, p17, p1, p3]
debug_merge_point(0, 0, '(let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial)))))))')
debug_merge_point(0, 0, '(if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)')
debug_merge_point(0, 0, '(let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41)))')
debug_merge_point(0, 0, 'partial')
debug_merge_point(0, 0, '(vector-ref full 1)')
debug_merge_point(0, 0, '(let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))')
debug_merge_point(0, 0, '(vector-ref AppRand39 2)')
+1465: i114 = getfield_gc_i(p112, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1469: i116 = int_lt(2, i114)
+1473: guard_true(i116, descr=<Guard0x3fdfec8>) [p20, p84, p17, p1, p3]
+1479: p117 = getfield_gc_r(p112, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1483: guard_class(p117, 16622984, descr=<Guard0x3fdff10>) [p20, p84, p17, p1, p3]
+1496: p119 = getfield_gc_r(p112, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1500: p121 = getarrayitem_gc_r(p119, 2, descr=<ArrayP 8>)
+1504: guard_class(p121, ConstClass(W_Fixnum), descr=<Guard0x3fdff58>) [p20, p84, p17, p1, p3]
+1518: i123 = getfield_gc_i(p121, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(vector-ref partial 2)')
debug_merge_point(0, 0, '(> AppRand40 AppRand41)')
+1522: i124 = int_gt(i123, i42)
+1525: guard_true(i124, descr=<Guard0x3fdffa0>) [p20, p84, p17, p1, p3]
debug_merge_point(0, 0, '(let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))')
debug_merge_point(0, 0, '(if canGoLeft canGoRight #f)')
debug_merge_point(0, 0, 'canGoRight')
debug_merge_point(0, 0, '(if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial)))))')
debug_merge_point(0, 0, '(if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir))))')
debug_merge_point(0, 0, '(let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir)))')
debug_merge_point(0, 0, '(vector-ref full 0)')
debug_merge_point(0, 0, '(CellRef(replaceTreeWork) AppRand42 partial (not dir))')
debug_merge_point(0, 0, '(let ([AppRand34 (vector-ref full 0)]) (let ([canGoLeft (if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)][AppRand38 (vector-ref full 1)]) (let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))))) from (CellRef(replaceTreeWork) AppRand42 partial (not dir))')
debug_merge_point(0, 0, '(vector-ref full 0)')
+1531: p126 = getarrayitem_gc_r(p105, 0, descr=<ArrayP 8>)
+1535: guard_class(p126, ConstClass(W_Vector), descr=<Guard0x405e020>) [p20, p84, p17, p1, p3]
debug_merge_point(0, 0, '(let ([canGoLeft (if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)][AppRand38 (vector-ref full 1)]) (let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))))')
debug_merge_point(0, 0, '(if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)')
debug_merge_point(0, 0, '(let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37)))')
debug_merge_point(0, 0, 'partial')
debug_merge_point(0, 0, '(vector-ref full 0)')
debug_merge_point(0, 0, '(let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))')
debug_merge_point(0, 0, '(vector-ref AppRand35 2)')
+1548: i128 = getfield_gc_i(p126, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1552: i130 = int_lt(2, i128)
+1556: guard_true(i130, descr=<Guard0x405e068>) [p20, p84, p17, p1, p3]
+1562: p131 = getfield_gc_r(p126, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1566: guard_class(p131, 16622984, descr=<Guard0x405e0b0>) [p20, p84, p17, p1, p3]
+1580: p133 = getfield_gc_r(p126, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1584: p135 = getarrayitem_gc_r(p133, 2, descr=<ArrayP 8>)
+1588: guard_class(p135, ConstClass(W_Fixnum), descr=<Guard0x405e0f8>) [p20, p84, p17, p1, p3]
+1601: i137 = getfield_gc_i(p135, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(vector-ref partial 2)')
debug_merge_point(0, 0, '(> AppRand36 AppRand37)')
+1605: i138 = int_gt(i137, i42)
+1608: guard_true(i138, descr=<Guard0x405e140>) [p20, p84, p17, p1, p3]
debug_merge_point(0, 0, '(vector-ref full 1)')
+1614: p140 = getarrayitem_gc_r(p105, 1, descr=<ArrayP 8>)
+1618: guard_class(p140, ConstClass(W_Vector), descr=<Guard0x405e188>) [p20, p84, p17, p1, p3]
debug_merge_point(0, 0, '(let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial)))))))')
debug_merge_point(0, 0, '(if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)')
debug_merge_point(0, 0, '(let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41)))')
debug_merge_point(0, 0, 'partial')
debug_merge_point(0, 0, '(vector-ref full 1)')
debug_merge_point(0, 0, '(let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))')
debug_merge_point(0, 0, '(vector-ref AppRand39 2)')
+1632: i142 = getfield_gc_i(p140, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1636: i144 = int_lt(2, i142)
+1640: guard_true(i144, descr=<Guard0x405e1d0>) [p20, p84, p17, p1, p3]
+1646: p145 = getfield_gc_r(p140, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1650: guard_class(p145, 16622984, descr=<Guard0x405e218>) [p20, p84, p17, p1, p3]
+1662: p147 = getfield_gc_r(p140, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1666: p149 = getarrayitem_gc_r(p147, 2, descr=<ArrayP 8>)
+1670: guard_class(p149, ConstClass(W_Fixnum), descr=<Guard0x405e260>) [p20, p84, p17, p1, p3]
+1683: i151 = getfield_gc_i(p149, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(vector-ref partial 2)')
debug_merge_point(0, 0, '(> AppRand40 AppRand41)')
+1687: i152 = int_gt(i151, i42)
+1690: guard_true(i152, descr=<Guard0x405e2a8>) [p20, p84, p17, p1, p3]
debug_merge_point(0, 0, '(let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))')
debug_merge_point(0, 0, '(if canGoLeft canGoRight #f)')
debug_merge_point(0, 0, 'canGoRight')
debug_merge_point(0, 0, '(if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial)))))')
debug_merge_point(0, 0, '(if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir))))')
debug_merge_point(0, 0, '(let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))')
debug_merge_point(0, 0, '(vector-ref full 1)')
debug_merge_point(0, 0, '(CellRef(replaceTreeWork) AppRand43 partial (not dir))')
debug_merge_point(0, 0, '(let ([AppRand34 (vector-ref full 0)]) (let ([canGoLeft (if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)][AppRand38 (vector-ref full 1)]) (let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))))) from (CellRef(replaceTreeWork) AppRand43 partial (not dir))')
+1696: i153 = arraylen_gc(p147, descr=<ArrayP 8>)
+1696: i154 = arraylen_gc(p38, descr=<ArrayP 8>)
+1696: jump(p17, p140, p20, p1, p3, p147, p38, p40, i42, p63, p64, descr=TargetToken(139976082361184))
+1712: --end of the loop--
[3e4c20eaee3390a] jit-log-opt-loop}
[3e4c20eafba8d48] {jit-backend
[3e4c20eafc3f6bd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c031d0 +0  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8CB202000048FF042590ECA3034989C74801C00F80000000004883C0FF0F80000000004C8BB5380100004D8B6E084983FD01720841817D00900F00000F85000000004C8BAD300100004D8B65104C8B15E3FEFFFF4D39D40F85000000004D8B55184C39D00F8E000000004989DA4883EB010F8000000000498B46204C8B25D5FEFFFF4C39E00F85000000004D8B6610498B46188138480E00000F85000000004C8B48084983F9017207418139900F00000F850000000041813C24B01E01000F85000000004D8B44240841813810BD00000F8500000000498B7810488B35A6FEFFFF4839F70F8500000000498B70384883FE017206813EF0C200000F85000000004C8B4610488B3D94FEFFFF4939F80F85000000004885DB0F8400000000488B7E204C8B47084983F8017207418138F08900000F8500000000498B78084883C7010F8000000000498978084989D84883EB010F80000000004C8B7608488B0C25F091F900488D9130010000483B14251092F9000F876501000048891425F091F90048C701B01E0100488D511848C702A81600004C8D6A3049C74500480E00004D894D084D8D552849C702301901004D8D7A2049C707B01E0100498977084D8947104D897A0849897A10498D7F1848C707F08C000048C74708030000004C8D7F2049C7070802000049C747080300000049C747100000000049C747180000000049C74720000000004C897F1048898D30010000488B0DB7FDFFFF48894F1849897A184D8955104D8D572849C702101100004D894A084D8D7A2849C707B01E01004D8967084D8947104D897A1049894218488B0582FDFFFF498942204D8955184C8B157BFDFFFF4D8955204C894A084C8B0D74FDFFFF4C894A204C8972104C896A184C8BAD300100004989750849895D1048897A284C89AD300100004889953801000049BB60B5BEB64E7F000041FFE3662E0F1F84000000000048C7442408FFFFFF0049BB7830C0B64E7F00004C895D204D8D9B7852FEFF41FFD3E928FDFFFF49BBB831C0B64E7F00004C895D204D8D9B3859FEFF41FFD3E986FEFFFFFF3517FCFFFF49BB8830C0B64E7F000041534D8D9B784FFEFF41FFE3FF3503FCFFFF49BB9830C0B64E7F000041534D8D9B684FFEFF41FFE3FF35EFFBFFFF49BBA830C0B64E7F000041534D8D9B584FFEFF41FFE3FF35DBFBFFFF49BBB830C0B64E7F000041534D8D9B484FFEFF41FFE3FF35CFFBFFFF49BBC830C0B64E7F000041534D8D9B384FFEFF41FFE3FF35BBFBFFFF49BBD830C0B64E7F000041534D8D9B284FFEFF41FFE3FF35A7FBFFFF49BBE830C0B64E7F000041534D8D9B184FFEFF41FFE3FF359BFBFFFF49BBF830C0B64E7F000041534D8D9B084FFEFF41FFE3FF3587FBFFFF49BB0831C0B64E7F000041534D8D9BF84EFEFF41FFE3FF3573FBFFFF49BB1831C0B64E7F000041534D8D9BE84EFEFF41FFE3FF355FFBFFFF49BB2831C0B64E7F000041534D8D9BD84EFEFF41FFE3FF354BFBFFFF49BB3831C0B64E7F000041534D8D9BC84EFEFF41FFE3FF353FFBFFFF49BB4831C0B64E7F000041534D8D9BB84EFEFF41FFE3FF352BFBFFFF49BB5831C0B64E7F000041534D8D9BA84EFEFF41FFE3FF351FFBFFFF49BB6831C0B64E7F000041534D8D9B984EFEFF41FFE3FF350BFBFFFF49BB7831C0B64E7F000041534D8D9B884EFEFF41FFE3FF35F7FAFFFF49BB8831C0B64E7F000041534D8D9B784EFEFF41FFE3FF35E3FAFFFF49BB9831C0B64E7F000041534D8D9B684EFEFF41FFE3FF35CFFAFFFF49BBA831C0B64E7F000041534D8D9B584EFEFF41FFE3
[3e4c20eafc482ba] jit-backend-dump}
[3e4c20eafc54a1a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c032b4 +0  22000000
[3e4c20eafc55e85] jit-backend-dump}
[3e4c20eafc59f57] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c03575 +0  22000000
[3e4c20eafc5ae90] jit-backend-dump}
[3e4c20eafc5e440] {jit-backend-addr
bridge out of Guard 0x3fded10 has address 0x7f4eb6c032b0 to 0x7f4eb6c03570
       gc table: 0x7f4eb6c031d0
    jump target: 0x7f4eb6c032b0
         resops: 0x7f4eb6c032be
       failures: 0x7f4eb6c03570
            end: 0x7f4eb6c037c7
[3e4c20eafc609f2] jit-backend-addr}
[3e4c20eafc64047] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c032ce +0  FD020000
[3e4c20eafc64e9a] jit-backend-dump}
[3e4c20eafc682a6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c032d8 +0  0F030000
[3e4c20eafc68fc2] jit-backend-dump}
[3e4c20eafc6c2af] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c032f7 +0  0C030000
[3e4c20eafc6cfd6] jit-backend-dump}
[3e4c20eafc70280] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c03312 +0  0D030000
[3e4c20eafc70f86] jit-backend-dump}
[3e4c20eafc741c4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0331f +0  1C030000
[3e4c20eafc74eda] jit-backend-dump}
[3e4c20eafc78180] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0332c +0  2B030000
[3e4c20eafc78e8c] jit-backend-dump}
[3e4c20eafc7c154] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c03340 +0  33030000
[3e4c20eafc7ce70] jit-backend-dump}
[3e4c20eafc80110] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c03354 +0  3B030000
[3e4c20eafc80dee] jit-backend-dump}
[3e4c20eafc8406d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0336b +0  40030000
[3e4c20eafc84d8c] jit-backend-dump}
[3e4c20eafc87fdf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c03379 +0  4E030000
[3e4c20eafc88ccd] jit-backend-dump}
[3e4c20eafc8bf0e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0338b +0  58030000
[3e4c20eafc8cbff] jit-backend-dump}
[3e4c20eafc8fe4d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0339f +0  60030000
[3e4c20eafc90b31] jit-backend-dump}
[3e4c20eafc93d54] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c033b5 +0  66030000
[3e4c20eafc94a3f] jit-backend-dump}
[3e4c20eafc97c37] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c033c9 +0  6E030000
[3e4c20eafc9890c] jit-backend-dump}
[3e4c20eafc9bb13] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c033d2 +0  81030000
[3e4c20eafc9c801] jit-backend-dump}
[3e4c20eafc9fa0b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c033ed +0  82030000
[3e4c20eafca06e3] jit-backend-dump}
[3e4c20eafca3928] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c033fb +0  90030000
[3e4c20eafca460c] jit-backend-dump}
[3e4c20eafca784b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0340c +0  9B030000
[3e4c20eafca8529] jit-backend-dump}
[3e4c20eafcabb28] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c012f6 +0  B61F0000
[3e4c20eafcac7d2] jit-backend-dump}
[3e4c20eafcb112c] jit-backend}
[3e4c20eafcb4e84] {jit-log-opt-bridge
# bridge out of Guard 0x3fded10 with 100 ops
[i0, i1, p2, p3, p4]
+246: guard_not_invalidated(descr=<Guard0x46d64a0>) [i0, i1, p2, p3, p4]
+246: i5 = int_add_ovf(i0, i0)
+252: guard_no_overflow(descr=<Guard0x405e3c8>) [i0, i1, p2, p3, p4]
+258: i7 = int_add_ovf(i5, -1)
+262: guard_no_overflow(descr=<Guard0x405e410>) [i0, i1, p2, p3, p4]
debug_merge_point(0, 0, '(let ([if1 (> AppRand17 nodes)]) (if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))))')
+268: p8 = getfield_gc_r(p3, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+279: guard_nonnull_class(p8, ConstClass(ForwardLink), descr=<Guard0x46d6500>) [i0, i1, p2, p3, p4]
debug_merge_point(0, 0, '(> AppRand17 nodes)')
+299: p10 = getfield_gc_r(p2, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+317: guard_value(p10, ConstPtr(ptr11), descr=<Guard0x405e458>) [i0, i1, p2, p3, p4]
+326: i12 = getfield_gc_i(p2, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize1Fixed.inst_vals_fixed_0 24 pure>)
+330: i13 = int_gt(i7, i12)
+333: guard_true(i13, descr=<Guard0x405e4a0>) [i0, i1, p2, p3, p4]
debug_merge_point(0, 0, '(if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19)))')
debug_merge_point(0, 0, '(begin (void) (- h5278 1))')
debug_merge_point(0, 0, '(void)')
debug_merge_point(0, 0, '(- h5278 1)')
+339: i15 = int_sub_ovf(i1, 1)
+346: guard_no_overflow(descr=<Guard0x405e4e8>) [i0, i1, p2, p3, p4]
+352: p16 = getfield_gc_r(p3, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+363: guard_value(p16, ConstPtr(ptr17), descr=<Guard0x405e530>) [i0, i1, p2, p3, p4]
+372: p18 = getfield_gc_r(p3, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+376: p19 = getfield_gc_r(p3, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([newTree (makeTree h5494)][AppRand48 (vector-ref CellRef(trees) CellRef(where))]) (CellRef(replaceTree) AppRand48 newTree) (let ([AppRand49 (+ CellRef(where) 1)]) (set! where (modulo AppRand49 (vector-length CellRef(trees))))) (let ([AppRand50 (heightToBytes h5494)]) (let ([AppRand51 (- partial5490 AppRand50)]) (loop5488 AppRand51)))) from (- h5278 1)')
+380: guard_class(p19, 16435208, descr=<Guard0x405e578>) [i0, i1, p2, p3, p4]
+392: p21 = getfield_gc_r(p19, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+396: guard_nonnull_class(p21, ConstClass(ForwardLink), descr=<Guard0x46d6620>) [i0, i1, p2, p3, p4]
debug_merge_point(0, 0, '(makeTree h5494)')
+415: guard_class(p18, 16504944, descr=<Guard0x405e5c0>) [i0, i1, p2, p3, p4]
+429: p24 = getfield_gc_r(p18, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+434: guard_class(p24, 16479952, descr=<Guard0x405e608>) [i0, i1, p2, p3, p4]
+447: p26 = getfield_gc_r(p24, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+458: guard_value(p26, ConstPtr(ptr27), descr=<Guard0x405e650>) [i0, i1, p2, p3, p4]
+467: p28 = getfield_gc_r(p24, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize7.inst__vals_4 56 pure>)
+471: guard_nonnull_class(p28, 16481456, descr=<Guard0x46d6800>) [i0, i1, p2, p3, p4]
+489: p30 = getfield_gc_r(p28, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+500: guard_value(p30, ConstPtr(ptr31), descr=<Guard0x405e698>) [i0, i1, p2, p3, p4]
+509: p32 = getfield_gc_r(p24, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(if (zero? h5329) null (let ([res (vector 0 0 0)][SetBang0 (+ CellRef(nodes5320) 1)]) (set! nodes5320 SetBang0) (let ([AppRand22 (- h5329 1)]) (let ([res res][AppRand23 (makeTree AppRand22)]) (vector-set! res 0 AppRand23))) (let ([AppRand24 (- h5329 1)]) (let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25))) (vector-set! res 2 h5329) res)) from (makeTree h5494)')
+509: i33 = int_is_zero(i15)
+512: guard_false(i33, descr=<Guard0x405e6e0>) [i0, i1, p2, p3, p4]
debug_merge_point(0, 0, '(let ([res (vector 0 0 0)][SetBang0 (+ CellRef(nodes5320) 1)]) (set! nodes5320 SetBang0) (let ([AppRand22 (- h5329 1)]) (let ([res res][AppRand23 (makeTree AppRand22)]) (vector-set! res 0 AppRand23))) (let ([AppRand24 (- h5329 1)]) (let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25))) (vector-set! res 2 h5329) res)')
debug_merge_point(0, 0, '(vector 0 0 0)')
debug_merge_point(0, 0, '(+ CellRef(nodes5320) 1)')
+518: p34 = getfield_gc_r(p28, descr=<FieldP pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_w_val0 32 pure>)
+522: p35 = getfield_gc_r(p34, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+526: guard_nonnull_class(p35, ConstClass(W_CellIntegerStrategy), descr=<Guard0x46d6860>) [i0, i1, p2, p3, p4]
+545: i37 = getfield_gc_i(p35, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+549: i39 = int_add_ovf(i37, 1)
+553: guard_no_overflow(descr=<Guard0x405e728>) [i0, i1, p2, p3, p4]
debug_merge_point(0, 0, '(set! nodes5320 SetBang0)')
debug_merge_point(0, 0, '(let ([AppRand22 (- h5329 1)]) (let ([res res][AppRand23 (makeTree AppRand22)]) (vector-set! res 0 AppRand23)))')
debug_merge_point(0, 0, '(- h5329 1)')
+559: setfield_gc(p35, i39, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+563: i41 = int_sub_ovf(i15, 1)
+570: guard_no_overflow(descr=<Guard0x46d68c0>) [i15, p18, p19, p28, i39, p21, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([res res][AppRand23 (makeTree AppRand22)]) (vector-set! res 0 AppRand23))')
debug_merge_point(0, 0, 'res')
+576: p43 = getfield_gc_r(p28, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(makeTree AppRand22)')
debug_merge_point(0, 0, '(if (zero? h5329) null (let ([res (vector 0 0 0)][SetBang0 (+ CellRef(nodes5320) 1)]) (set! nodes5320 SetBang0) (let ([AppRand22 (- h5329 1)]) (let ([res res][AppRand23 (makeTree AppRand22)]) (vector-set! res 0 AppRand23))) (let ([AppRand24 (- h5329 1)]) (let ([res res][AppRand25 (makeTree AppRand24)]) (vector-set! res 1 AppRand25))) (vector-set! res 2 h5329) res)) from (makeTree AppRand22)')
+580: p44 = new_with_vtable(descr=<SizeDescr 24>)
+624: p45 = new_with_vtable(descr=<SizeDescr 48>)
+635: p46 = new_with_vtable(descr=<SizeDescr 40>)
+647: setfield_gc(p46, p21, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+651: p47 = new_with_vtable(descr=<SizeDescr 32>)
+662: p48 = new_with_vtable(descr=<SizeDescr 24>)
+673: setfield_gc(p48, p28, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+677: setfield_gc(p48, i15, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+681: setfield_gc(p47, p48, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+685: setfield_gc(p47, i39, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed01.inst_vals_fixed_1 16 pure>)
+689: p49 = new_with_vtable(descr=<SizeDescr 32>)
+700: setfield_gc(p49, 3, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+708: p52 = new_array(3, descr=<ArrayS 8>)
+727: setarrayitem_gc(p52, 0, 0, descr=<ArrayS 8>)
+735: setarrayitem_gc(p52, 1, 0, descr=<ArrayS 8>)
+743: setarrayitem_gc(p52, 2, 0, descr=<ArrayS 8>)
+751: setfield_gc(p49, p52, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+769: setfield_gc(p49, ConstPtr(ptr59), descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+773: setfield_gc(p47, p49, descr=<FieldP pycket.small_list.ConsEnvSize2Fixed01.inst_w_val0 24 pure>)
+777: setfield_gc(p46, p47, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+781: p60 = new_with_vtable(descr=<SizeDescr 40>)
+792: setfield_gc(p60, p21, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+796: p61 = new_with_vtable(descr=<SizeDescr 24>)
+807: setfield_gc(p61, p18, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+811: setfield_gc(p61, i15, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+815: setfield_gc(p60, p61, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+819: setfield_gc(p60, p19, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+830: setfield_gc(p60, ConstPtr(ptr62), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+834: setfield_gc(p46, p60, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+845: setfield_gc(p46, ConstPtr(ptr63), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+849: setfield_gc(p45, p21, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+860: setfield_gc(p45, ConstPtr(ptr64), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+864: setfield_gc(p45, p43, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+868: setfield_gc(p45, p46, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+872: setfield_gc(p44, p28, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+883: setfield_gc(p44, i41, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+887: setfield_gc(p45, p49, descr=<FieldP pycket.small_list.LetContSize1.inst__vals_w_0 40 pure>)
+891: jump(p44, p45, descr=TargetToken(79354784))
+928: --end of the loop--
[3e4c20eafd0be8e] jit-log-opt-bridge}
[3e4c20eb0324769] {jit-backend
[3e4c20eb0460d8c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c03bd
[3e4c20eb047100b] jit-backend-dump}
[3e4c20eb047c4e8] {jit-backend-addr
Loop 84 ((let ([AppRand34 (vector-ref full 0)]) (let ([canGoLeft (if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)][AppRand38 (vector-ref full 1)]) (let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))))) from (CellRef(replaceTreeWork) AppRand42 partial (not dir))) has address 0x7f4eb6c03e8d to 0x7f4eb6c043d0 (bootstrap 0x7f4eb6c03e00)
       gc table: 0x7f4eb6c03bd0
       function: 0x7f4eb6c03e00
         resops: 0x7f4eb6c03e8d
       failures: 0x7f4eb6c043d0
            end: 0x7f4eb6c04a88
[3e4c20eb047fc62] jit-backend-addr}
[3e4c20eb04844ff] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c03ea4 +0  72050000
[3e4c20eb0485918] jit-backend-dump}
[3e4c20eb0489073] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c03eba +0  78050000
[3e4c20eb0489ebb] jit-backend-dump}
[3e4c20eb048d405] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c03ecd +0  9D050000
[3e4c20eb048e18c] jit-backend-dump}
[3e4c20eb0491469] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c03ee3 +0  A3050000
[3e4c20eb049218b] jit-backend-dump}
[3e4c20eb04953e8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c03ef1 +0  B1050000
[3e4c20eb04960ee] jit-backend-dump}
[3e4c20eb04992e6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c03f01 +0  BD050000
[3e4c20eb0499fe0] jit-backend-dump}
[3e4c20eb049d15d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c03f15 +0  C5050000
[3e4c20eb049de42] jit-backend-dump}
[3e4c20eb04a0fed] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c03f25 +0  D1050000
[3e4c20eb04a1d09] jit-backend-dump}
[3e4c20eb04a4f2f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c03f3b +0  D7050000
[3e4c20eb04a5c19] jit-backend-dump}
[3e4c20eb04a8dda] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c03f49 +0  E5050000
[3e4c20eb04a9afc] jit-backend-dump}
[3e4c20eb04acc80] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c03f5a +0  F0050000
[3e4c20eb04ad961] jit-backend-dump}
[3e4c20eb04b0acc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c03f6e +0  F8050000
[3e4c20eb04b17dc] jit-backend-dump}
[3e4c20eb04b49b8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c03f80 +0  02060000
[3e4c20eb04b56b5] jit-backend-dump}
[3e4c20eb04b8817] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c03f90 +0  0E060000
[3e4c20eb04b9545] jit-backend-dump}
[3e4c20eb04bc6cf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c03fa5 +0  15060000
[3e4c20eb04bd3c3] jit-backend-dump}
[3e4c20eb04c058d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c03fb2 +0  24060000
[3e4c20eb04c12ab] jit-backend-dump}
[3e4c20eb04c4454] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c03fbc +0  36060000
[3e4c20eb04c513b] jit-backend-dump}
[3e4c20eb04c82a4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c03fcc +0  42060000
[3e4c20eb04c8fb6] jit-backend-dump}
[3e4c20eb04cc103] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c03fda +0  50060000
[3e4c20eb04ccded] jit-backend-dump}
[3e4c20eb04cff31] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c03feb +0  5B060000
[3e4c20eb04d0c3d] jit-backend-dump}
[3e4c20eb04d3de2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c03fff +0  63060000
[3e4c20eb04d4acd] jit-backend-dump}
[3e4c20eb04d7c38] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0400c +0  72060000
[3e4c20eb04d8935] jit-backend-dump}
[3e4c20eb04dbb12] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c04019 +0  81060000
[3e4c20eb04dc7e1] jit-backend-dump}
[3e4c20eb04df9ba] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c04029 +0  8D060000
[3e4c20eb04e06bd] jit-backend-dump}
[3e4c20eb04e38e3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0404b +0  87060000
[3e4c20eb04e45ce] jit-backend-dump}
[3e4c20eb04e77c6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0405f +0  8F060000
[3e4c20eb04e84c9] jit-backend-dump}
[3e4c20eb04eb690] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c04076 +0  94060000
[3e4c20eb04ec384] jit-backend-dump}
[3e4c20eb04ef4f8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c04082 +0  A4060000
[3e4c20eb04f0201] jit-backend-dump}
[3e4c20eb04f3394] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c04092 +0  B0060000
[3e4c20eb04f407c] jit-backend-dump}
[3e4c20eb04f71e4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c040a2 +0  BC060000
[3e4c20eb04f7ee4] jit-backend-dump}
[3e4c20eb04fb07d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c040b6 +0  C4060000
[3e4c20eb04fbd80] jit-backend-dump}
[3e4c20eb04feefe] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c040d1 +0  C5060000
[3e4c20eb04ffbfe] jit-backend-dump}
[3e4c20eb0502d4b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c040df +0  D3060000
[3e4c20eb0503a66] jit-backend-dump}
[3e4c20eb0506bc2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c040fc +0  D2060000
[3e4c20eb05078c2] jit-backend-dump}
[3e4c20eb050a9f6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c04109 +0  E1060000
[3e4c20eb050b6db] jit-backend-dump}
[3e4c20eb050e871] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0414a +0  BC060000
[3e4c20eb050f571] jit-backend-dump}
[3e4c20eb05126d0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c04162 +0  C0060000
[3e4c20eb05133bb] jit-backend-dump}
[3e4c20eb0516526] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c04176 +0  C8060000
[3e4c20eb0517223] jit-backend-dump}
[3e4c20eb051a366] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0418b +0  CF060000
[3e4c20eb051b04b] jit-backend-dump}
[3e4c20eb051e1bf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c041ae +0  C8060000
[3e4c20eb051eede] jit-backend-dump}
[3e4c20eb0521ff4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c041fb +0  97060000
[3e4c20eb0522cf7] jit-backend-dump}
[3e4c20eb0525e5c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c04204 +0  AA060000
[3e4c20eb0526b5c] jit-backend-dump}
[3e4c20eb0529c9c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c04214 +0  B6060000
[3e4c20eb052a987] jit-backend-dump}
[3e4c20eb052dae3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c04229 +0  BD060000
[3e4c20eb052e7f8] jit-backend-dump}
[3e4c20eb0531964] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0423b +0  C1060000
[3e4c20eb0532648] jit-backend-dump}
[3e4c20eb0535812] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0424a +0  CE060000
[3e4c20eb053650f] jit-backend-dump}
[3e4c20eb053966e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c04257 +0  DD060000
[3e4c20eb053a36b] jit-backend-dump}
[3e4c20eb053d4c1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c04260 +0  F0060000
[3e4c20eb053e1ca] jit-backend-dump}
[3e4c20eb05412f8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0426a +0  02070000
[3e4c20eb0541fe6] jit-backend-dump}
[3e4c20eb0545157] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c04277 +0  11070000
[3e4c20eb0545e6a] jit-backend-dump}
[3e4c20eb0548faa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0428d +0  17070000
[3e4c20eb0549c98] jit-backend-dump}
[3e4c20eb054ce00] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0429a +0  26070000
[3e4c20eb054db22] jit-backend-dump}
[3e4c20eb0550ccd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c042b0 +0  2C070000
[3e4c20eb05519e0] jit-backend-dump}
[3e4c20eb0554bd8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c042c4 +0  34070000
[3e4c20eb055598c] jit-backend-dump}
[3e4c20eb0558b6c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c042d1 +0  43070000
[3e4c20eb055985f] jit-backend-dump}
[3e4c20eb055ca0e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c042f6 +0  3A070000
[3e4c20eb055d71a] jit-backend-dump}
[3e4c20eb056086a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0430a +0  42070000
[3e4c20eb056159e] jit-backend-dump}
[3e4c20eb0564768] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c04314 +0  54070000
[3e4c20eb056548a] jit-backend-dump}
[3e4c20eb0569323] jit-backend}
[3e4c20eb056d325] {jit-log-opt-loop
# Loop 84 ((let ([AppRand34 (vector-ref full 0)]) (let ([canGoLeft (if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)][AppRand38 (vector-ref full 1)]) (let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))))) from (CellRef(replaceTreeWork) AppRand42 partial (not dir))) : entry bridge with 230 ops
[p0, p1]
debug_merge_point(0, 0, '(let ([AppRand34 (vector-ref full 0)]) (let ([canGoLeft (if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)][AppRand38 (vector-ref full 1)]) (let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))))) from (CellRef(replaceTreeWork) AppRand42 partial (not dir))')
+709: guard_class(p1, 16435208, descr=<Guard0x46d6920>) [p0, p1]
+728: p3 = getfield_gc_r(p1, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+732: guard_nonnull_class(p3, ConstClass(ForwardLink), descr=<Guard0x46d6980>) [p0, p1]
debug_merge_point(0, 0, '(vector-ref full 0)')
+750: guard_not_invalidated(descr=<Guard0x405e770>) [p0, p1]
+750: guard_class(p0, 16500368, descr=<Guard0x405e7b8>) [p0, p1]
+769: p6 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+773: guard_nonnull_class(p6, ConstClass(W_Vector), descr=<Guard0x46d72e0>) [p0, p1]
+791: i8 = getfield_gc_i(p6, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+795: i10 = int_lt(0, i8)
+799: guard_true(i10, descr=<Guard0x405e800>) [p0, p1]
+805: p11 = getfield_gc_r(p6, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+809: guard_class(p11, 16622984, descr=<Guard0x405e848>) [p0, p1]
+821: p13 = getfield_gc_r(p6, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+825: p15 = getarrayitem_gc_r(p13, 0, descr=<ArrayP 8>)
+829: guard_class(p15, ConstClass(W_Vector), descr=<Guard0x405e890>) [p0, p1]
debug_merge_point(0, 0, '(let ([canGoLeft (if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)][AppRand38 (vector-ref full 1)]) (let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))))')
debug_merge_point(0, 0, '(if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)')
+841: p17 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+845: guard_class(p17, 16482208, descr=<Guard0x405e8d8>) [p0, p1]
+857: i19 = getfield_gc_i(p17, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed10.inst_vals_fixed_0 24 pure>)
debug_merge_point(0, 0, '(let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37)))')
debug_merge_point(0, 0, 'partial')
+857: p20 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+861: guard_nonnull_class(p20, ConstClass(W_Vector), descr=<Guard0x46d7340>) [p0, p1]
+879: p22 = getfield_gc_r(p17, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(vector-ref full 0)')
debug_merge_point(0, 0, '(let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))')
debug_merge_point(0, 0, '(vector-ref AppRand35 2)')
+879: i23 = getfield_gc_i(p15, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+883: i25 = int_lt(2, i23)
+887: guard_true(i25, descr=<Guard0x405e920>) [p0, p1]
+893: p26 = getfield_gc_r(p15, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+897: guard_class(p26, 16622984, descr=<Guard0x405e968>) [p0, p1]
+910: p28 = getfield_gc_r(p15, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+914: p30 = getarrayitem_gc_r(p28, 2, descr=<ArrayP 8>)
+918: guard_class(p30, ConstClass(W_Fixnum), descr=<Guard0x405e9b0>) [p0, p1]
+930: i32 = getfield_gc_i(p30, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(vector-ref partial 2)')
+934: i33 = getfield_gc_i(p20, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+938: i35 = int_lt(2, i33)
+942: guard_true(i35, descr=<Guard0x405e9f8>) [p0, p1]
+948: p36 = getfield_gc_r(p20, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+952: guard_class(p36, 16622984, descr=<Guard0x405ea40>) [p0, p1]
+964: p38 = getfield_gc_r(p20, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+968: p40 = getarrayitem_gc_r(p38, 2, descr=<ArrayP 8>)
+972: guard_class(p40, ConstClass(W_Fixnum), descr=<Guard0x405ea88>) [p0, p1]
+985: i42 = getfield_gc_i(p40, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(> AppRand36 AppRand37)')
+989: i43 = int_gt(i32, i42)
+992: guard_false(i43, descr=<Guard0x405ead0>) [p0, p1]
debug_merge_point(0, 0, '(vector-ref full 1)')
+998: i45 = int_lt(1, i8)
+1002: guard_true(i45, descr=<Guard0x405eb18>) [p0, p1]
+1008: p47 = getarrayitem_gc_r(p13, 1, descr=<ArrayP 8>)
+1012: guard_class(p47, ConstClass(W_Vector), descr=<Guard0x405eb60>) [p0, p1]
debug_merge_point(0, 0, '(let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial)))))))')
debug_merge_point(0, 0, '(if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)')
debug_merge_point(0, 0, '(let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41)))')
debug_merge_point(0, 0, 'partial')
debug_merge_point(0, 0, '(vector-ref full 1)')
debug_merge_point(0, 0, '(let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))')
debug_merge_point(0, 0, '(vector-ref AppRand39 2)')
+1024: i49 = getfield_gc_i(p47, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1028: i51 = int_lt(2, i49)
+1032: guard_true(i51, descr=<Guard0x405eba8>) [p0, p1]
+1038: p52 = getfield_gc_r(p47, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1042: guard_class(p52, 16622984, descr=<Guard0x405ebf0>) [p0, p1]
+1055: p54 = getfield_gc_r(p47, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1059: p56 = getarrayitem_gc_r(p54, 2, descr=<ArrayP 8>)
+1063: guard_class(p56, ConstClass(W_Fixnum), descr=<Guard0x405ec38>) [p0, p1]
+1075: i58 = getfield_gc_i(p56, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(vector-ref partial 2)')
debug_merge_point(0, 0, '(> AppRand40 AppRand41)')
+1079: i59 = int_gt(i58, i42)
+1082: guard_false(i59, descr=<Guard0x405ec80>) [p0, p1]
debug_merge_point(0, 0, '(let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))')
debug_merge_point(0, 0, '(if canGoLeft canGoRight #f)')
debug_merge_point(0, 0, '#f')
debug_merge_point(0, 0, '(if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial)))))')
debug_merge_point(0, 0, '(let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))')
debug_merge_point(0, 0, '(if (not canGoLeft) (not canGoRight) #f)')
debug_merge_point(0, 0, '(not canGoRight)')
debug_merge_point(0, 0, '(if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial)))')
debug_merge_point(0, 0, '(if dir (vector-set! full 0 partial) (vector-set! full 1 partial))')
+1088: p60 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+1092: guard_nonnull(p60, descr=<Guard0x405ecc8>) [p0, p1]
+1108: i62 = instance_ptr_eq(p60, ConstPtr(ptr61))
+1111: guard_true(i62, descr=<Guard0x405ed10>) [p0, p1]
debug_merge_point(0, 0, '(vector-set! full 1 partial)')
+1117: p63 = getfield_gc_r(p1, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+1131: setarrayitem_gc(p13, 1, p20, descr=<ArrayP 8>)
+1142: guard_value(p63, ConstPtr(ptr65), descr=<Guard0x46d73a0>) [p63, p1]
+1151: p66 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1155: p67 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1159: guard_class(p67, 16435208, descr=<Guard0x405ed58>) [p63, p1]
+1171: p69 = getfield_gc_r(p67, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1175: guard_nonnull_class(p69, ConstClass(ForwardLink), descr=<Guard0x46d7400>) [p63, p1]
debug_merge_point(0, 0, '(let ([AppRand49 (+ CellRef(where) 1)]) (set! where (modulo AppRand49 (vector-length CellRef(trees))))) from (vector-set! full 1 partial)')
+1194: guard_class(p66, 16504944, descr=<Guard0x405eda0>) [p63, p1]
+1206: p72 = getfield_gc_r(p66, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1210: guard_class(p72, 16504944, descr=<Guard0x405ede8>) [p63, p1]
+1222: p74 = getfield_gc_r(p72, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(+ CellRef(where) 1)')
+1226: guard_class(p74, 16479952, descr=<Guard0x405ee30>) [p63, p1]
+1238: p76 = getfield_gc_r(p74, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1249: guard_value(p76, ConstPtr(ptr77), descr=<Guard0x405ee78>) [p63, p1]
+1258: p78 = getfield_gc_r(p74, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize7.inst__vals_2 40 pure>)
+1262: p79 = getfield_gc_r(p78, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1266: guard_nonnull_class(p79, ConstClass(W_CellIntegerStrategy), descr=<Guard0x46d7460>) [p63, p1]
+1285: i81 = getfield_gc_i(p79, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1289: i83 = int_add_ovf(i81, 1)
+1293: guard_no_overflow(descr=<Guard0x405eec0>) [p63, p1]
debug_merge_point(0, 0, '(set! where (modulo AppRand49 (vector-length CellRef(trees))))')
+1299: p84 = getfield_gc_r(p74, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize7.inst__vals_5 64 pure>)
+1303: p85 = getfield_gc_r(p84, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1308: guard_nonnull_class(p85, ConstClass(W_Vector), descr=<Guard0x46d74c0>) [p63, p1]
+1328: i87 = getfield_gc_i(p85, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1332: i88 = int_is_zero(i87)
+1335: guard_false(i88, descr=<Guard0x405ef08>) [p63, p1]
+1341: i90 = int_eq(i87, -1)
+1341: i92 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i83, i87, descr=<Calli 8 ii EF=0 OS=14>)
debug_merge_point(0, 0, '(let ([AppRand50 (heightToBytes h5494)]) (let ([AppRand51 (- partial5490 AppRand50)]) (loop5488 AppRand51)))')
debug_merge_point(0, 0, '(heightToBytes h5494)')
+1379: p93 = getfield_gc_r(p74, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize7.inst__vals_6 72 pure>)
+1383: setfield_gc(p79, i92, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1387: guard_nonnull_class(p93, 16481456, descr=<Guard0x46d7520>) [p66, p93, p67, p72, p69]
+1406: i95 = getfield_gc_i(p66, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1410: p96 = getfield_gc_r(p93, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1421: guard_value(p96, ConstPtr(ptr97), descr=<Guard0x405ef50>) [p66, p93, p67, p72, p69]
+1430: p98 = getfield_gc_r(p74, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([AppRand20 (heightToNodes h5299)]) (* bytes/node AppRand20))')
debug_merge_point(0, 0, '(heightToNodes h5299)')
+1430: p99 = getfield_gc_r(p93, descr=<FieldP pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_w_val0 32 pure>)
+1441: guard_value(p99, ConstPtr(ptr100), descr=<Guard0x46d7580>) [p66, p93, p67, p72, p69]
+1450: p101 = getfield_gc_r(p93, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(- (expt 2 h) 1)')
+1450: f102 = cast_int_to_float(i95)
+1455: i103 = float_ne(f102, f102)
+1465: guard_false(i103, descr=<Guard0x405ef98>) [p66, p93, p67, p72, p69]
+1471: f105 = float_add(f102, 11235582092889474423308157442431404585112356118389416079589380072358292237843810195794279832650471001320007117491962084853674360550901038905802964414967132773610493339054092829768888725077880882465817684505312860552384417646403930092119569408801702322709406917786643639996702871154982269052209770601514008576.000000)
+1490: i106 = float_eq(f105, f102)
+1500: guard_false(i106, descr=<Guard0x405efe0>) [p66, p93, p67, p72, p69]
+1506: f109 = call_f(ConstClass(ccall_pow), 2.000000, f102, descr=<Callf 8 ff EF=2>)
+1536: i112 = call_i(ConstClass(_ll_1_threadlocalref_get__INTLlT_Signed), 48, descr=<Calli 4 i EF=2 OS=5>)
+1548: f113 = float_sub(f109, f109)
+1556: i115 = float_eq(f113, 0.000000)
+1577: guard_true(i115, descr=<Guard0x46d76a0>) [i112, f113, f109, i95, p93, p67, p72, p69]
+1583: i116 = int_is_true(i112)
+1586: guard_false(i116, descr=<Guard0x405f028>) [i112, f113, f109, i95, p93, p67, p72, p69]
+1592: i117 = float_ne(f109, f109)
+1602: guard_false(i117, descr=<Guard0x405f070>) [i112, f113, f109, i95, p93, p67, p72, p69]
+1608: i119 = float_ge(f109, -9223372036854775808.000000)
+1623: guard_true(i119, descr=<Guard0x405f0b8>) [i112, f113, f109, i95, p93, p67, p72, p69]
+1629: i121 = float_lt(f109, 9223372036854775808.000000)
+1641: guard_true(i121, descr=<Guard0x405f100>) [i112, f113, f109, i95, p93, p67, p72, p69]
+1647: i122 = cast_float_to_int(f109)
+1652: i124 = int_sub_ovf(i122, 1)
+1656: guard_no_overflow(descr=<Guard0x405f148>) [i112, f113, f109, i95, p93, p67, p72, p69]
debug_merge_point(0, 0, '(* bytes/node AppRand20)')
+1662: i125 = getfield_gc_i(p93, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_vals_fixed_1 24 pure>)
+1666: i126 = int_is_true(i125)
+1669: guard_true(i126, descr=<Guard0x405f190>) [i112, f113, f109, i95, p93, p67, p72, p69]
+1675: i127 = int_is_true(i124)
+1678: guard_true(i127, descr=<Guard0x405f1d8>) [i112, f113, f109, i95, p93, p67, p72, p69]
+1684: i128 = int_mul_ovf(i125, i124)
+1688: guard_no_overflow(descr=<Guard0x405f220>) [i112, f113, f109, i95, p93, p67, p72, p69]
debug_merge_point(0, 0, '(let ([AppRand51 (- partial5490 AppRand50)]) (loop5488 AppRand51)) from (* bytes/node AppRand20)')
debug_merge_point(0, 0, '(- partial5490 AppRand50)')
+1694: i129 = getfield_gc_i(p72, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1698: i130 = int_sub_ovf(i129, i128)
+1701: guard_no_overflow(descr=<Guard0x405f268>) [i112, f113, f109, i95, p93, p67, p72, p69]
debug_merge_point(0, 0, '(loop5488 AppRand51)')
debug_merge_point(0, 0, '(let ([if8 (> partial5490 INSIGNIFICANT)]) (if if8 (let ([h5494 (bytesToHeight partial5490)]) (let ([newTree (makeTree h5494)][AppRand48 (vector-ref CellRef(trees) CellRef(where))]) (CellRef(replaceTree) AppRand48 newTree) (let ([AppRand49 (+ CellRef(where) 1)]) (set! where (modulo AppRand49 (vector-length CellRef(trees))))) (let ([AppRand50 (heightToBytes h5494)]) (let ([AppRand51 (- partial5490 AppRand50)]) (loop5488 AppRand51))))) (void))) from (loop5488 AppRand51)')
debug_merge_point(0, 0, '(> partial5490 INSIGNIFICANT)')
+1707: p131 = getfield_gc_r(p74, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize7.inst__vals_1 32 pure>)
+1711: guard_nonnull_class(p131, ConstClass(W_Fixnum), descr=<Guard0x46d7700>) [i112, f113, f109, i95, p93, p67, p72, p69]
+1729: i133 = getfield_gc_i(p131, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1733: i134 = int_gt(i130, i133)
+1736: guard_true(i134, descr=<Guard0x405f2b0>) [i112, f113, f109, i95, p93, p67, p72, p69]
debug_merge_point(0, 0, '(if if8 (let ([h5494 (bytesToHeight partial5490)]) (let ([newTree (makeTree h5494)][AppRand48 (vector-ref CellRef(trees) CellRef(where))]) (CellRef(replaceTree) AppRand48 newTree) (let ([AppRand49 (+ CellRef(where) 1)]) (set! where (modulo AppRand49 (vector-length CellRef(trees))))) (let ([AppRand50 (heightToBytes h5494)]) (let ([AppRand51 (- partial5490 AppRand50)]) (loop5488 AppRand51))))) (void))')
debug_merge_point(0, 0, '(let ([h5494 (bytesToHeight partial5490)]) (let ([newTree (makeTree h5494)][AppRand48 (vector-ref CellRef(trees) CellRef(where))]) (CellRef(replaceTree) AppRand48 newTree) (let ([AppRand49 (+ CellRef(where) 1)]) (set! where (modulo AppRand49 (vector-length CellRef(trees))))) (let ([AppRand50 (heightToBytes h5494)]) (let ([AppRand51 (- partial5490 AppRand50)]) (loop5488 AppRand51)))))')
debug_merge_point(0, 0, '(bytesToHeight partial5490)')
+1742: p135 = getfield_gc_r(p74, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize7.inst__vals_0 24 pure>)
+1746: guard_nonnull_class(p135, 16482208, descr=<Guard0x46d7760>) [i112, f113, f109, i95, p93, p67, p72, p69]
+1764: p137 = getfield_gc_r(p135, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1775: guard_value(p137, ConstPtr(ptr138), descr=<Guard0x405f4a8>) [i112, f113, f109, i95, p93, p67, p72, p69]
debug_merge_point(0, 0, '(let ([AppRand21 (/ bytes bytes/node)]) (nodesToHeight AppRand21))')
debug_merge_point(0, 0, '(/ bytes bytes/node)')
+1784: i139 = getfield_gc_i(p135, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed10.inst_vals_fixed_0 24 pure>)
+1788: i140 = int_is_zero(i139)
+1791: guard_false(i140, descr=<Guard0x405f4f0>) [i112, f113, f109, i95, p93, p67, p72, p69]
+1797: i142 = int_eq(i139, -1)
+1797: i144 = call_i(ConstClass(ll_int_py_div__Signed_Signed), i130, i139, descr=<Calli 8 ii EF=0 OS=12>)
+1818: i145 = int_mul(i144, i139)
+1825: i146 = int_eq(i145, i130)
+1828: guard_true(i146, descr=<Guard0x46d77c0>) [i130, i145, i139, i144, p74, p135, None, None, p67, None, p69]
debug_merge_point(0, 0, '(nodesToHeight AppRand21)')
+1834: p148 = getfield_gc_r(p135, descr=<FieldP pycket.small_list.W_Closure1AsEnvSize2Fixed10.inst_w_val1 32 pure>)
+1845: guard_value(p148, ConstPtr(ptr149), descr=<Guard0x46d7820>) [i130, i145, i139, i144, p74, p135, None, None, p67, None, p69]
+1854: p150 = getfield_gc_r(p135, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([doloop (lambda (h5278 n5280) (let ([AppRand17 (+ n5280 n5280 -1)]) (let ([if1 (> AppRand17 nodes)]) (if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))))))]) (doloop 1 1))')
debug_merge_point(0, 0, '(lambda (h5278 n5280) (let ([AppRand17 (+ n5280 n5280 -1)]) (let ([if1 (> AppRand17 nodes)]) (if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))))))')
debug_merge_point(0, 0, '(doloop 1 1)')
debug_merge_point(0, 0, '(let ([AppRand17 (+ n5280 n5280 -1)]) (let ([if1 (> AppRand17 nodes)]) (if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))))) from (doloop 1 1)')
debug_merge_point(0, 0, '(+ n5280 n5280 -1)')
debug_merge_point(0, 0, '(let ([if1 (> AppRand17 nodes)]) (if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))))')
debug_merge_point(0, 0, '(> AppRand17 nodes)')
+1854: i152 = int_gt(1, i144)
+1858: guard_false(i152, descr=<Guard0x405f538>) [i130, i145, i139, i144, p74, p135, None, None, p67, None, p69]
debug_merge_point(0, 0, '(if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19)))')
debug_merge_point(0, 0, '(let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))')
debug_merge_point(0, 0, '(+ h5278 1)')
debug_merge_point(0, 0, '(+ n5280 n5280)')
debug_merge_point(0, 0, '(doloop AppRand18 AppRand19)')
debug_merge_point(0, 0, '(let ([AppRand17 (+ n5280 n5280 -1)]) (let ([if1 (> AppRand17 nodes)]) (if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))))) from (doloop AppRand18 AppRand19)')
+1864: p153 = new_with_vtable(descr=<SizeDescr 32>)
+1908: p154 = new_with_vtable(descr=<SizeDescr 40>)
+1919: p155 = new_with_vtable(descr=<SizeDescr 24>)
+1930: setfield_gc(p155, p74, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1934: setfield_gc(p155, i130, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1938: setfield_gc(p154, p69, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1956: setfield_gc(p153, ConstPtr(ptr156), descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1960: setfield_gc(p154, p155, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1964: setfield_gc(p154, p67, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1982: setfield_gc(p153, ConstPtr(ptr157), descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1986: setfield_gc(p153, i144, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize1Fixed.inst_vals_fixed_0 24 pure>)
+1997: setfield_gc(p154, ConstPtr(ptr158), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+2001: jump(p153, 2, 2, p154, p69, i144, descr=TargetToken(139976082360544))
+2048: --end of the loop--
[3e4c20eb064574c] jit-log-opt-loop}
[3e4c20eb0841ec9] {jit-backend
[3e4c20eb08b4b2e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c04bd
[3e4c20eb08bc7e0] jit-backend-dump}
[3e4c20eb08c78fd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c04c74 +0  21000000
[3e4c20eb08c8db2] jit-backend-dump}
[3e4c20eb08cd055] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c04e85 +0  21000000
[3e4c20eb08cdebe] jit-backend-dump}
[3e4c20eb08d13bf] {jit-backend-addr
bridge out of Guard 0x3fdef08 has address 0x7f4eb6c04c70 to 0x7f4eb6c04e80
       gc table: 0x7f4eb6c04bd0
    jump target: 0x7f4eb6c04c70
         resops: 0x7f4eb6c04c7e
       failures: 0x7f4eb6c04e80
            end: 0x7f4eb6c050e0
[3e4c20eb08d3836] jit-backend-addr}
[3e4c20eb08d6e07] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c04c8e +0  3A020000
[3e4c20eb08d7c92] jit-backend-dump}
[3e4c20eb08db098] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c04ca5 +0  3F020000
[3e4c20eb08dbd3f] jit-backend-dump}
[3e4c20eb08df03b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c04cb1 +0  6B020000
[3e4c20eb08dfcfe] jit-backend-dump}
[3e4c20eb08e2ed1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c04cc7 +0  71020000
[3e4c20eb08e3b35] jit-backend-dump}
[3e4c20eb08e6c45] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c04cdb +0  79020000
[3e4c20eb08e7890] jit-backend-dump}
[3e4c20eb08ea9cb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c04cf2 +0  7E020000
[3e4c20eb08eb613] jit-backend-dump}
[3e4c20eb08ee744] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c04cff +0  8D020000
[3e4c20eb08ef3c1] jit-backend-dump}
[3e4c20eb08f24f2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c04d1a +0  8E020000
[3e4c20eb08f3137] jit-backend-dump}
[3e4c20eb08f6262] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c04d2b +0  99020000
[3e4c20eb08f6ee2] jit-backend-dump}
[3e4c20eb08fa010] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c04d46 +0  9A020000
[3e4c20eb08fac62] jit-backend-dump}
[3e4c20eb08fddd6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c04d54 +0  A8020000
[3e4c20eb08fea65] jit-backend-dump}
[3e4c20eb0901c2f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c04d64 +0  B4020000
[3e4c20eb09028fb] jit-backend-dump}
[3e4c20eb0905aa7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c04d79 +0  BB020000
[3e4c20eb09066f2] jit-backend-dump}
[3e4c20eb0909854] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c04da2 +0  AE020000
[3e4c20eb090a4a3] jit-backend-dump}
[3e4c20eb090d61a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c04db0 +0  BC020000
[3e4c20eb090e26f] jit-backend-dump}
[3e4c20eb091139a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c04dc0 +0  C8020000
[3e4c20eb0911fe9] jit-backend-dump}
[3e4c20eb091511a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c04dd4 +0  D0020000
[3e4c20eb0915d93] jit-backend-dump}
[3e4c20eb0918ed7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c04df8 +0  C8020000
[3e4c20eb0919b22] jit-backend-dump}
[3e4c20eb091ceca] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c01938 +0  34330000
[3e4c20eb091db4f] jit-backend-dump}
[3e4c20eb0921bb6] jit-backend}
[3e4c20eb09259aa] {jit-log-opt-bridge
# bridge out of Guard 0x3fdef08 with 75 ops
[p0, p1]
+182: guard_class(p1, 16435208, descr=<Guard0x46d7880>) [p0, p1]
+194: p3 = getfield_gc_r(p1, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+198: guard_nonnull_class(p3, ConstClass(ForwardLink), descr=<Guard0x46d78e0>) [p0, p1]
debug_merge_point(0, 0, '(>= i5535 depth)')
+217: guard_not_invalidated(descr=<Guard0x405f580>) [p0, p1]
+217: guard_class(p0, 16504944, descr=<Guard0x405f610>) [p0, p1]
+229: i6 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+233: p7 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+237: guard_class(p7, 16478824, descr=<Guard0x405f658>) [p0, p1]
+251: p9 = getfield_gc_r(p7, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+262: guard_value(p9, ConstPtr(ptr10), descr=<Guard0x405f7c0>) [p0, p1]
+271: p11 = getfield_gc_r(p7, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_1 32 pure>)
+275: guard_nonnull_class(p11, ConstClass(W_Fixnum), descr=<Guard0x46d7940>) [p0, p1]
+294: i13 = getfield_gc_i(p11, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+298: i14 = int_ge(i6, i13)
+301: guard_false(i14, descr=<Guard0x405f808>) [p0, p1]
debug_merge_point(0, 0, '(if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))')
debug_merge_point(0, 0, '(begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52)))')
debug_merge_point(0, 0, '(if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6))))')
+307: p15 = getfield_gc_r(p7, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_2 40 pure>)
+311: p16 = getfield_gc_r(p15, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+315: guard_nonnull_class(p16, ConstClass(W_CellIntegerStrategy), descr=<Guard0x46d79a0>) [p0, p1]
+334: i18 = getfield_gc_i(p16, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+338: i20 = int_and(i18, 1)
+342: i21 = int_is_zero(i20)
+345: guard_true(i21, descr=<Guard0x405f850>) [p0, p1]
debug_merge_point(0, 0, '(let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4)))')
debug_merge_point(0, 0, '(vector-ref CellRef(tn1) 0)')
+351: p22 = getfield_gc_r(p7, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_0 24 pure>)
+355: p23 = getfield_gc_r(p22, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+359: guard_nonnull_class(p23, ConstClass(W_Vector), descr=<Guard0x46d7a00>) [p0, p1]
+378: i25 = getfield_gc_i(p23, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+382: i27 = int_lt(0, i25)
+386: guard_true(i27, descr=<Guard0x405f898>) [p0, p1]
+392: p28 = getfield_gc_r(p23, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+396: guard_class(p28, 16622984, descr=<Guard0x405f8e0>) [p0, p1]
+408: p30 = getfield_gc_r(p23, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+412: p32 = getarrayitem_gc_r(p30, 0, descr=<ArrayP 8>)
+416: guard_class(p32, ConstClass(W_Vector), descr=<Guard0x405f928>) [p0, p1]
debug_merge_point(0, 0, '(set! tn1 SetBang3)')
debug_merge_point(0, 0, '(let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))')
debug_merge_point(0, 0, '(vector-ref CellRef(tn2) 0)')
+429: p34 = getfield_gc_r(p7, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_3 48 pure>)
+443: setfield_gc(p22, p32, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+447: p35 = getfield_gc_r(p34, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+451: guard_nonnull_class(p35, ConstClass(W_Vector), descr=<Guard0x46d7a60>) [p7, p35, p1, p0, p3]
+470: i37 = getfield_gc_i(p35, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+474: i39 = int_lt(0, i37)
+478: guard_true(i39, descr=<Guard0x405f970>) [p7, p35, p1, p0, p3]
+484: p40 = getfield_gc_r(p35, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+488: guard_class(p40, 16622984, descr=<Guard0x405f9b8>) [p7, p35, p1, p0, p3]
+500: p42 = getfield_gc_r(p35, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+504: p44 = getarrayitem_gc_r(p42, 0, descr=<ArrayP 8>)
+508: guard_class(p44, ConstClass(W_Vector), descr=<Guard0x405fa00>) [p7, p35, p1, p0, p3]
debug_merge_point(0, 0, '(set! tn2 SetBang4)')
debug_merge_point(0, 0, '(set! path (quotient CellRef(path) 2))')
+530: setfield_gc(p34, p44, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+534: p46 = getfield_gc_r(p15, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+538: guard_nonnull_class(p46, ConstClass(W_CellIntegerStrategy), descr=<Guard0x46d7ac0>) [p0, p46, p1, None, p3]
+556: i49 = getfield_gc_i(p46, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+560: i51 = int_eq(i49, -9223372036854775808)
+560: i53 = int_rshift(i49, 1)
+566: i55 = int_lshift(i53, 1)
+572: i57 = int_xor(i49, 2)
+583: i59 = int_rshift(i57, 63)
+587: i60 = int_ne(i55, i49)
+610: i61 = int_and(i59, i60)
+613: i62 = int_add(i53, i61)
debug_merge_point(0, 0, '(let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))')
debug_merge_point(0, 0, '(+ i5535 1)')
+616: i64 = int_add(i6, 1)
debug_merge_point(0, 0, '(doloop5533 AppRand52)')
debug_merge_point(0, 0, '(let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))) from (doloop5533 AppRand52)')
+620: setfield_gc(p46, i62, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+624: jump(p7, i64, p1, p3, p11, i13, p15, p46, i62, p22, p34, descr=TargetToken(139976082360704))
+688: --end of the loop--
[3e4c20eb096819f] jit-log-opt-bridge}
[3e4c20eb14c83d5] {jit-backend
[3e4c20eb152e2ad] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c
[3e4c20eb153564d] jit-backend-dump}
[3e4c20eb15417fa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05294 +0  21000000
[3e4c20eb1542e95] jit-backend-dump}
[3e4c20eb1547295] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05485 +0  21000000
[3e4c20eb154819a] jit-backend-dump}
[3e4c20eb154b774] {jit-backend-addr
bridge out of Guard 0x3fdf148 has address 0x7f4eb6c05290 to 0x7f4eb6c05480
       gc table: 0x7f4eb6c05200
    jump target: 0x7f4eb6c05290
         resops: 0x7f4eb6c0529e
       failures: 0x7f4eb6c05480
            end: 0x7f4eb6c0568c
[3e4c20eb154dd39] jit-backend-addr}
[3e4c20eb155173b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c052bd +0  27020000
[3e4c20eb15525eb] jit-backend-dump}
[3e4c20eb1555b4a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c052d5 +0  2B020000
[3e4c20eb15568bc] jit-backend-dump}
[3e4c20eb1559b9c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c052e3 +0  39020000
[3e4c20eb155a8f2] jit-backend-dump}
[3e4c20eb155db39] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05301 +0  37020000
[3e4c20eb155e864] jit-backend-dump}
[3e4c20eb1561a47] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0531b +0  39020000
[3e4c20eb156273a] jit-backend-dump}
[3e4c20eb15658f2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0532c +0  44020000
[3e4c20eb15665d7] jit-backend-dump}
[3e4c20eb1569757] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05346 +0  46020000
[3e4c20eb156a457] jit-backend-dump}
[3e4c20eb156d668] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05354 +0  54020000
[3e4c20eb156e33d] jit-backend-dump}
[3e4c20eb15714df] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05364 +0  60020000
[3e4c20eb15721c7] jit-backend-dump}
[3e4c20eb157537c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05378 +0  68020000
[3e4c20eb157604e] jit-backend-dump}
[3e4c20eb15791f3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c053a0 +0  5C020000
[3e4c20eb1579ed8] jit-backend-dump}
[3e4c20eb157d05b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c053ae +0  6A020000
[3e4c20eb157dd27] jit-backend-dump}
[3e4c20eb1580ec4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c053be +0  76020000
[3e4c20eb1581bc4] jit-backend-dump}
[3e4c20eb1584d57] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c053d2 +0  7E020000
[3e4c20eb1585a16] jit-backend-dump}
[3e4c20eb1588bfc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c053f6 +0  76020000
[3e4c20eb1589902] jit-backend-dump}
[3e4c20eb158cd5b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c01a8a +0  02380000
[3e4c20eb158da39] jit-backend-dump}
[3e4c20eb1591b5b] jit-backend}
[3e4c20eb15957e3] {jit-log-opt-bridge
# bridge out of Guard 0x3fdf148 with 69 ops
[i0, p1, p2, p3]
+166: guard_not_invalidated(descr=<Guard0x46d7d60>) [i0, p1, p2, p3]
+166: p4 = getfield_gc_r(p1, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+184: guard_value(p4, ConstPtr(ptr5), descr=<Guard0x427cec0>) [i0, p1, p2, p3]
+193: p6 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_1 32 pure>)
+197: guard_nonnull_class(p6, ConstClass(W_Fixnum), descr=<Guard0x46d7dc0>) [i0, p1, p2, p3]
+217: i8 = getfield_gc_i(p6, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+222: i9 = int_ge(i0, i8)
+225: guard_false(i9, descr=<Guard0x427cf08>) [i0, p1, p2, p3]
debug_merge_point(0, 0, '(if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))')
debug_merge_point(0, 0, '(begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52)))')
+231: p10 = getfield_gc_r(p2, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+242: guard_nonnull_class(p10, ConstClass(ForwardLink), descr=<Guard0x46d7e20>) [i0, p1, p2, p3]
debug_merge_point(0, 0, '(if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6))))')
+261: p12 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_2 40 pure>)
+265: p13 = getfield_gc_r(p12, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+269: guard_nonnull_class(p13, ConstClass(W_CellIntegerStrategy), descr=<Guard0x46d7e80>) [i0, p1, p2, p3]
+287: i15 = getfield_gc_i(p13, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+291: i17 = int_and(i15, 1)
+295: i18 = int_is_zero(i17)
+298: guard_true(i18, descr=<Guard0x427cf50>) [i0, p1, p2, p3]
debug_merge_point(0, 0, '(let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4)))')
debug_merge_point(0, 0, '(vector-ref CellRef(tn1) 0)')
+304: p19 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_0 24 pure>)
+308: p20 = getfield_gc_r(p19, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+312: guard_nonnull_class(p20, ConstClass(W_Vector), descr=<Guard0x46d7ee0>) [i0, p1, p2, p3]
+330: i22 = getfield_gc_i(p20, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+334: i24 = int_lt(0, i22)
+338: guard_true(i24, descr=<Guard0x427cf98>) [i0, p1, p2, p3]
+344: p25 = getfield_gc_r(p20, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+348: guard_class(p25, 16622984, descr=<Guard0x427cfe0>) [i0, p1, p2, p3]
+360: p27 = getfield_gc_r(p20, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+364: p29 = getarrayitem_gc_r(p27, 0, descr=<ArrayP 8>)
+368: guard_class(p29, ConstClass(W_Vector), descr=<Guard0x427d028>) [i0, p1, p2, p3]
debug_merge_point(0, 0, '(set! tn1 SetBang3)')
debug_merge_point(0, 0, '(let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))')
debug_merge_point(0, 0, '(vector-ref CellRef(tn2) 0)')
+380: p31 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_3 48 pure>)
+394: setfield_gc(p19, p29, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+398: p32 = getfield_gc_r(p31, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+402: guard_nonnull_class(p32, ConstClass(W_Vector), descr=<Guard0x46d7f40>) [p1, p32, p10, i0, None, p2, None]
+420: i35 = getfield_gc_i(p32, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+424: i37 = int_lt(0, i35)
+428: guard_true(i37, descr=<Guard0x427d070>) [p1, p32, p10, i0, None, p2, None]
+434: p38 = getfield_gc_r(p32, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+438: guard_class(p38, 16622984, descr=<Guard0x427d0b8>) [p1, p32, p10, i0, None, p2, None]
+450: p40 = getfield_gc_r(p32, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+454: p42 = getarrayitem_gc_r(p40, 0, descr=<ArrayP 8>)
+458: guard_class(p42, ConstClass(W_Vector), descr=<Guard0x427d100>) [p1, p32, p10, i0, None, p2, None]
debug_merge_point(0, 0, '(set! tn2 SetBang4)')
debug_merge_point(0, 0, '(set! path (quotient CellRef(path) 2))')
+480: setfield_gc(p31, p42, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+484: p44 = getfield_gc_r(p12, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+488: guard_nonnull_class(p44, ConstClass(W_CellIntegerStrategy), descr=<Guard0x46d7fa0>) [p44, p10, i0, p1, p2, None]
+506: i46 = getfield_gc_i(p44, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+510: i48 = int_eq(i46, -9223372036854775808)
+510: i50 = int_rshift(i46, 1)
+516: i52 = int_lshift(i50, 1)
+522: i54 = int_xor(i46, 2)
+533: i56 = int_rshift(i54, 63)
+537: i57 = int_ne(i52, i46)
+554: i58 = int_and(i56, i57)
+557: i59 = int_add(i50, i58)
debug_merge_point(0, 0, '(let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))')
debug_merge_point(0, 0, '(+ i5535 1)')
+560: i61 = int_add(i0, 1)
debug_merge_point(0, 0, '(doloop5533 AppRand52)')
debug_merge_point(0, 0, '(let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))) from (doloop5533 AppRand52)')
+564: setfield_gc(p44, i59, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+568: jump(p1, i61, p2, p10, p6, i8, p12, p44, i59, p19, p31, descr=TargetToken(139976082360704))
+640: --end of the loop--
[3e4c20eb15d4848] jit-log-opt-bridge}
[3e4c20eb1c186db] {jit-backend
[3e4c20eb5096a13] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c
[3e4c20eb50b066e] jit-backend-dump}
[3e4c20eb50ca794] {jit-backend-addr
Loop 87 ((let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)) from (remainder (quotient CellRef(x) 8) n)) has address 0x7f4eb6c05b7d to 0x7f4eb6c060a0 (bootstrap 0x7f4eb6c05af0)
       gc table: 0x7f4eb6c05970
       function: 0x7f4eb6c05af0
         resops: 0x7f4eb6c05b7d
       failures: 0x7f4eb6c060a0
            end: 0x7f4eb6c06583
[3e4c20eb50ce015] jit-backend-addr}
[3e4c20eb50d2997] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05b94 +0  37050000
[3e4c20eb50d3c62] jit-backend-dump}
[3e4c20eb50d7463] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05bab +0  3C050000
[3e4c20eb50d84ec] jit-backend-dump}
[3e4c20eb50db902] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05bc1 +0  42050000
[3e4c20eb50dc70f] jit-backend-dump}
[3e4c20eb50dfe33] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05bd2 +0  69050000
[3e4c20eb50e0bd2] jit-backend-dump}
[3e4c20eb50e4010] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05bde +0  79050000
[3e4c20eb50e4d4d] jit-backend-dump}
[3e4c20eb50e8092] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05bee +0  85050000
[3e4c20eb50e8df1] jit-backend-dump}
[3e4c20eb50ec17a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05c09 +0  86050000
[3e4c20eb50ece95] jit-backend-dump}
[3e4c20eb50f01b6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05c1f +0  8C050000
[3e4c20eb50f0ece] jit-backend-dump}
[3e4c20eb50f40fa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05c69 +0  5E050000
[3e4c20eb50f4dfa] jit-backend-dump}
[3e4c20eb50f7ffc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05c7d +0  66050000
[3e4c20eb50f8d23] jit-backend-dump}
[3e4c20eb50fbf2b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05c86 +0  79050000
[3e4c20eb50fcc68] jit-backend-dump}
[3e4c20eb50fff27] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05c8f +0  8C050000
[3e4c20eb5100c58] jit-backend-dump}
[3e4c20eb5103e90] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05c9c +0  9B050000
[3e4c20eb5104b84] jit-backend-dump}
[3e4c20eb5107d72] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05cc2 +0  91050000
[3e4c20eb5108a7f] jit-backend-dump}
[3e4c20eb510bcf4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05cf2 +0  7D050000
[3e4c20eb510c9cf] jit-backend-dump}
[3e4c20eb510fc82] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05d1b +0  70050000
[3e4c20eb51109d8] jit-backend-dump}
[3e4c20eb5113d0b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05d2f +0  78050000
[3e4c20eb5114a2c] jit-backend-dump}
[3e4c20eb5117c89] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05d48 +0  7B050000
[3e4c20eb51189a2] jit-backend-dump}
[3e4c20eb511bc1d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05d5f +0  80050000
[3e4c20eb511c914] jit-backend-dump}
[3e4c20eb511fb5c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05d6b +0  90050000
[3e4c20eb5120852] jit-backend-dump}
[3e4c20eb5123a7b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05d7b +0  9C050000
[3e4c20eb51247af] jit-backend-dump}
[3e4c20eb5127ab8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05d95 +0  9E050000
[3e4c20eb51287c7] jit-backend-dump}
[3e4c20eb512b9fc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05da3 +0  AC050000
[3e4c20eb512c6f9] jit-backend-dump}
[3e4c20eb512f8eb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05db7 +0  B4050000
[3e4c20eb51305e8] jit-backend-dump}
[3e4c20eb51337e6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05dcf +0  B8050000
[3e4c20eb51344e9] jit-backend-dump}
[3e4c20eb51376f3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05de4 +0  BF050000
[3e4c20eb5138418] jit-backend-dump}
[3e4c20eb513b6a6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05df2 +0  CD050000
[3e4c20eb513c3a9] jit-backend-dump}
[3e4c20eb513f62b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05dfb +0  E0050000
[3e4c20eb514033d] jit-backend-dump}
[3e4c20eb5143516] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05e0d +0  EA050000
[3e4c20eb514420a] jit-backend-dump}
[3e4c20eb5147467] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05e1e +0  F5050000
[3e4c20eb5148167] jit-backend-dump}
[3e4c20eb514b378] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05e28 +0  07060000
[3e4c20eb514c08d] jit-backend-dump}
[3e4c20eb514f340] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05e38 +0  13060000
[3e4c20eb5150046] jit-backend-dump}
[3e4c20eb5153317] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05e46 +0  21060000
[3e4c20eb5153ff8] jit-backend-dump}
[3e4c20eb515727d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05e56 +0  2D060000
[3e4c20eb5157f83] jit-backend-dump}
[3e4c20eb515b1ac] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05e6a +0  35060000
[3e4c20eb515bea9] jit-backend-dump}
[3e4c20eb515f171] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05e78 +0  43060000
[3e4c20eb515fe99] jit-backend-dump}
[3e4c20eb51631de] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05e88 +0  4F060000
[3e4c20eb5163ecc] jit-backend-dump}
[3e4c20eb516716c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05e9d +0  56060000
[3e4c20eb5167e75] jit-backend-dump}
[3e4c20eb516b1ca] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06019 +0  F6040000
[3e4c20eb516befe] jit-backend-dump}
[3e4c20eb516f3a0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06030 +0  FB040000
[3e4c20eb51700e3] jit-backend-dump}
[3e4c20eb51733ae] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06047 +0  00050000
[3e4c20eb517408d] jit-backend-dump}
[3e4c20eb5177370] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0605a +0  09050000
[3e4c20eb5178070] jit-backend-dump}
[3e4c20eb517ce42] jit-backend}
[3e4c20eb5181da2] {jit-log-opt-loop
# Loop 87 ((let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)) from (remainder (quotient CellRef(x) 8) n)) : entry bridge with 181 ops
[p0, p1]
debug_merge_point(0, 0, '(let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)) from (remainder (quotient CellRef(x) 8) n)')
+533: guard_class(p0, 16503888, descr=<Guard0x4b9a320>) [p1, p0]
+552: p3 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+556: guard_class(p1, 16437216, descr=<Guard0x427da00>) [p1, p0]
+575: p5 = getfield_gc_r(p1, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+579: guard_nonnull_class(p5, ConstClass(ForwardLink), descr=<Guard0x4b9a7a0>) [p1, p0]
debug_merge_point(0, 0, '(+ AppRand2 AppRand3)')
+597: guard_not_invalidated(descr=<Guard0x427d9b8>) [p1, p0]
+597: i7 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_0 16 pure>)
+601: i8 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_1 24 pure>)
+605: i9 = int_add_ovf(i7, i8)
+608: guard_no_overflow(descr=<Guard0x427d970>) [p1, p0]
debug_merge_point(0, 0, '(CellRef(loop) (quotient q 16384) AppRand4 n5224)')
+614: guard_class(p3, 16500368, descr=<Guard0x427d928>) [p1, p0]
+626: p11 = getfield_gc_r(p3, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+630: guard_class(p11, 16478072, descr=<Guard0x427d8e0>) [p1, p0]
+642: p13 = getfield_gc_r(p11, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+646: p14 = getfield_gc_r(p13, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+650: guard_nonnull_class(p14, 16478072, descr=<Guard0x4b9a740>) [p1, p0]
+669: p16 = getfield_gc_r(p3, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+673: guard_nonnull_class(p16, ConstClass(W_Fixnum), descr=<Guard0x4b9a6e0>) [p1, p0]
+691: i18 = getfield_gc_i(p16, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+695: i20 = int_eq(i18, -9223372036854775808)
+695: i22 = int_rshift(i18, 14)
+702: i24 = int_lshift(i22, 14)
+709: i26 = int_xor(i18, 16384)
+719: i28 = int_rshift(i26, 63)
+723: i29 = int_ne(i24, i18)
+736: i30 = int_and(i28, i29)
+739: i31 = int_add(i22, i30)
+742: p32 = getfield_gc_r(p3, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+746: guard_nonnull_class(p32, ConstClass(W_Fixnum), descr=<Guard0x4b9a680>) [p1, p0]
+765: p34 = getfield_gc_r(p14, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+776: guard_value(p34, ConstPtr(ptr35), descr=<Guard0x427d898>) [p1, p0]
+785: i36 = instance_ptr_eq(p11, p14)
+788: guard_true(i36, descr=<Guard0x427d850>) [p1, p0]
debug_merge_point(0, 0, '(if (zero? q) (remainder r n5224) (let ([AppRand2 (* 16384 r)][AppRand3 (CellRef(random14) 16384)]) (let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)))) from (CellRef(loop) (quotient q 16384) AppRand4 n5224)')
+794: i37 = int_is_zero(i31)
+797: guard_true(i37, descr=<Guard0x427d808>) [p1, p0]
debug_merge_point(0, 0, '(remainder r n5224)')
+803: i38 = getfield_gc_i(p32, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+807: i39 = int_is_zero(i38)
+810: guard_false(i39, descr=<Guard0x427d7c0>) [p1, p0]
+816: i41 = int_rshift(i9, 63)
+823: i42 = int_xor(i9, i41)
+829: i43 = int_sub(i42, i41)
+832: i45 = int_rshift(i38, 63)
+839: i46 = int_xor(i38, i45)
+842: i47 = int_sub(i46, i45)
+845: i48 = int_is_zero(i47)
+848: guard_false(i48, descr=<Guard0x427d778>) [p1, p0]
+854: i50 = int_eq(i43, -9223372036854775808)
+877: i52 = int_eq(i47, -1)
+890: i53 = int_and(i50, i52)
+893: guard_false(i53, descr=<Guard0x427d730>) [p1, p0]
+902: i55 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i43, i47, descr=<Calli 8 ii EF=0 OS=14>)
+933: i57 = int_lt(i9, 0)
+937: guard_false(i57, descr=<Guard0x4b9a200>) [p1, i47, i55, i43, i9, p32, p11]
+943: p58 = getfield_gc_r(p1, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+954: guard_value(p58, ConstPtr(ptr59), descr=<Guard0x427d6e8>) [p1, i47, i55, i43, i9, p32, p11]
+963: i60 = getfield_gc_i(p1, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+967: p61 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+971: p62 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+975: guard_class(p62, 16435208, descr=<Guard0x427d6a0>) [p1, i47, i55, i43, i9, p32, p11]
+988: p64 = getfield_gc_r(p62, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+992: guard_nonnull_class(p64, ConstClass(ForwardLink), descr=<Guard0x4b9a2c0>) [p1, i47, i55, i43, i9, p32, p11]
debug_merge_point(0, 0, '(vector-ref CellRef(trees) index1)')
+1011: guard_class(p61, 16503888, descr=<Guard0x427d658>) [p1, i47, i55, i43, i9, p32, p11]
+1023: p67 = getfield_gc_r(p61, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1027: guard_class(p67, 16479200, descr=<Guard0x427d610>) [p1, i47, i55, i43, i9, p32, p11]
+1039: p69 = getfield_gc_r(p67, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_3 48 pure>)
+1043: p70 = getfield_gc_r(p69, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1047: guard_nonnull_class(p70, ConstClass(W_Vector), descr=<Guard0x4b9a260>) [p1, i47, i55, i43, i9, p32, p11]
+1065: i72 = getfield_gc_i(p61, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_0 16 pure>)
+1069: i74 = int_ge(i72, 0)
+1073: guard_true(i74, descr=<Guard0x427d5c8>) [p1, i47, i55, i43, i9, p32, p11]
+1079: i75 = getfield_gc_i(p70, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1090: i76 = int_lt(i72, i75)
+1093: guard_true(i76, descr=<Guard0x427d580>) [p1, i47, i55, i43, i9, p32, p11]
+1099: p77 = getfield_gc_r(p70, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1110: guard_class(p77, 16622984, descr=<Guard0x427d538>) [p1, i47, i55, i43, i9, p32, p11]
+1123: p79 = getfield_gc_r(p70, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1127: p80 = getarrayitem_gc_r(p79, i72, descr=<ArrayP 8>)
+1132: guard_class(p80, ConstClass(W_Vector), descr=<Guard0x427d4f0>) [p1, i47, i55, i43, i9, p32, p11]
debug_merge_point(0, 0, '(vector-ref CellRef(trees) index2)')
+1144: i82 = getfield_gc_i(p61, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_1 24 pure>)
+1148: i84 = int_ge(i82, 0)
+1152: guard_true(i84, descr=<Guard0x427d4a8>) [p1, i47, i55, i43, i9, p32, p11]
+1158: i85 = int_lt(i82, i75)
+1161: guard_true(i85, descr=<Guard0x427d460>) [p1, i47, i55, i43, i9, p32, p11]
+1167: p86 = getarrayitem_gc_r(p79, i82, descr=<ArrayP 8>)
+1172: guard_class(p86, ConstClass(W_Vector), descr=<Guard0x427d418>) [p1, i47, i55, i43, i9, p32, p11]
debug_merge_point(0, 0, '(let ([doloop5533 (lambda (i5535) (let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))))]) (doloop5533 0) (if (even? CellRef(path)) (let ([tmp (vector-ref CellRef(tn1) 0)][AppRand53 (vector-ref CellRef(tn2) 0)]) (vector-set! CellRef(tn1) 0 AppRand53) (vector-set! CellRef(tn2) 0 tmp)) (let ([tmp5560 (vector-ref CellRef(tn1) 1)][AppRand54 (vector-ref CellRef(tn2) 1)]) (vector-set! CellRef(tn1) 1 AppRand54) (vector-set! CellRef(tn2) 1 tmp5560))) (let ([SetBang7 (+ CellRef(actuallyMut) 2)]) (set! actuallyMut SetBang7)))')
debug_merge_point(0, 0, '(lambda (i5535) (let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))))')
+1185: p88 = getfield_gc_r(p67, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1189: guard_class(p88, 16505296, descr=<Guard0x427d3d0>) [p1, i47, i55, i43, i9, p32, p11]
debug_merge_point(0, 0, '(doloop5533 0)')
debug_merge_point(0, 0, '(let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))) from (doloop5533 0)')
debug_merge_point(0, 0, '(>= i5535 depth)')
+1202: i91 = int_ge(0, i60)
+1206: guard_false(i91, descr=<Guard0x427d388>) [p1, i47, i55, i43, i9, p32, p11]
debug_merge_point(0, 0, '(if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))')
debug_merge_point(0, 0, '(begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52)))')
debug_merge_point(0, 0, '(if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6))))')
+1212: i93 = int_and(i55, 1)
+1219: i94 = int_is_zero(i93)
+1222: guard_false(i94, descr=<Guard0x427d340>) [p1, i47, i55, i43, i9, p32, p11]
debug_merge_point(0, 0, '(let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))')
debug_merge_point(0, 0, '(vector-ref CellRef(tn1) 1)')
+1228: i95 = getfield_gc_i(p80, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1232: i97 = int_lt(1, i95)
+1236: guard_true(i97, descr=<Guard0x427d2f8>) [p1, i47, i55, i43, i9, p32, p11]
+1242: p98 = getfield_gc_r(p80, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1246: guard_class(p98, 16622984, descr=<Guard0x427d2b0>) [p1, i47, i55, i43, i9, p32, p11]
+1258: p100 = getfield_gc_r(p80, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1262: p102 = getarrayitem_gc_r(p100, 1, descr=<ArrayP 8>)
+1266: guard_class(p102, ConstClass(W_Vector), descr=<Guard0x427d268>) [p1, i47, i55, i43, i9, p32, p11]
debug_merge_point(0, 0, '(set! tn1 SetBang5)')
debug_merge_point(0, 0, '(let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6))')
debug_merge_point(0, 0, '(vector-ref CellRef(tn2) 1)')
+1278: i104 = getfield_gc_i(p86, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1282: i106 = int_lt(1, i104)
+1286: guard_true(i106, descr=<Guard0x427d220>) [p1, i47, i55, i43, i9, p32, p11]
+1292: p107 = getfield_gc_r(p86, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1296: guard_class(p107, 16622984, descr=<Guard0x427d1d8>) [p1, i47, i55, i43, i9, p32, p11]
+1308: p109 = getfield_gc_r(p86, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1312: p111 = getarrayitem_gc_r(p109, 1, descr=<ArrayP 8>)
+1316: guard_class(p111, ConstClass(W_Vector), descr=<Guard0x427d148>) [p1, i47, i55, i43, i9, p32, p11]
debug_merge_point(0, 0, '(set! tn2 SetBang6)')
debug_merge_point(0, 0, '(set! path (quotient CellRef(path) 2))')
+1329: i114 = int_eq(i55, -9223372036854775808)
+1329: i116 = int_rshift(i55, 1)
+1335: i118 = int_lshift(i116, 1)
+1341: i120 = int_xor(i55, 2)
+1348: i122 = int_rshift(i120, 63)
+1352: i123 = int_ne(i118, i55)
+1365: i124 = int_and(i122, i123)
+1368: i125 = int_add(i116, i124)
debug_merge_point(0, 0, '(let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))')
debug_merge_point(0, 0, '(+ i5535 1)')
debug_merge_point(0, 0, '(doloop5533 AppRand52)')
debug_merge_point(0, 0, '(let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))) from (doloop5533 AppRand52)')
+1371: p126 = new_with_vtable(descr=<SizeDescr 56>)
+1418: p127 = new_with_vtable(descr=<SizeDescr 16>)
+1429: setfield_gc(p127, p102, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1433: p128 = new_with_vtable(descr=<SizeDescr 16>)
+1444: setfield_gc(p128, i60, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1448: p129 = new_with_vtable(descr=<SizeDescr 16>)
+1460: p130 = new_with_vtable(descr=<SizeDescr 16>)
+1472: setfield_gc(p130, i125, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1476: setfield_gc(p129, p130, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1481: p131 = new_with_vtable(descr=<SizeDescr 16>)
+1492: setfield_gc(p131, p111, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1496: p132 = new_with_vtable(descr=<SizeDescr 40>)
+1507: p133 = new_with_vtable(descr=<SizeDescr 48>)
+1518: setfield_gc(p133, p67, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1522: setfield_gc(p133, p128, descr=<FieldP rpython.tool.pairtype.ConsEnvSize4.inst__vals_0 16 pure>)
+1526: setfield_gc(p133, p129, descr=<FieldP rpython.tool.pairtype.ConsEnvSize4.inst__vals_1 24 pure>)
+1530: setfield_gc(p133, p127, descr=<FieldP rpython.tool.pairtype.ConsEnvSize4.inst__vals_2 32 pure>)
+1534: setfield_gc(p133, p131, descr=<FieldP rpython.tool.pairtype.ConsEnvSize4.inst__vals_3 40 pure>)
+1618: i134 = getfield_gc_i(p128, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1622: setfield_gc(p126, p88, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1626: setfield_gc(p132, p64, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1644: setfield_gc(p126, ConstPtr(ptr135), descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1648: setfield_gc(p132, p133, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1652: setfield_gc(p132, p62, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1663: setfield_gc(p126, p127, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_0 24 pure>)
+1667: setfield_gc(p126, p128, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_1 32 pure>)
+1671: setfield_gc(p126, p129, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_2 40 pure>)
+1675: setfield_gc(p126, p131, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_3 48 pure>)
+1686: setfield_gc(p132, ConstPtr(ptr136), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+1690: i138 = int_ge(i134, -9223372036854775807)
+1703: guard_true(i138, descr=<Guard0x4b9a1a0>) [p132, p126, None, None]
+1709: p140 = getfield_gc_r(p129, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1714: guard_nonnull_class(p140, ConstClass(W_CellIntegerStrategy), descr=<Guard0x4b9a140>) [p132, p126, None, None]
+1732: i142 = getfield_gc_i(p140, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1736: i144 = int_ge(i142, -4611686018427387904)
+1749: guard_true(i144, descr=<Guard0x4b9a0e0>) [p132, p126, None, None]
+1755: i146 = int_le(i142, 4611686018427387904)
+1768: guard_true(i146, descr=<Guard0x4b9a080>) [p132, p126, None, None]
+1774: jump(p126, 1, p132, p64, p128, i134, p129, p140, i142, p127, p131, descr=TargetToken(139976082360704))
+1840: --end of the loop--
[3e4c20eb522b3ee] jit-log-opt-loop}
[3e4c20eb58eaa3e] {jit-backend
[3e4c20eb881bc0b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c
[3e4c20eb88354c1] jit-backend-dump}
[3e4c20eb884f59d] {jit-backend-addr
Loop 88 ((if (zero? q) (remainder r n5224) (let ([AppRand2 (* 16384 r)][AppRand3 (CellRef(random14) 16384)]) (let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)))) from (CellRef(loop) (quotient q 16384) AppRand4 n5224)) has address 0x7f4eb6c06a6d to 0x7f4eb6c06fa0 (bootstrap 0x7f4eb6c069e0)
       gc table: 0x7f4eb6c06870
       function: 0x7f4eb6c069e0
         resops: 0x7f4eb6c06a6d
       failures: 0x7f4eb6c06fa0
            end: 0x7f4eb6c07482
[3e4c20eb885327b] jit-backend-addr}
[3e4c20eb8858276] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06a97 +0  17050000
[3e4c20eb88596e5] jit-backend-dump}
[3e4c20eb885cf35] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06aad +0  1D050000
[3e4c20eb885de06] jit-backend-dump}
[3e4c20eb8861274] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06aba +0  2C050000
[3e4c20eb8861fca] jit-backend-dump}
[3e4c20eb8865365] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06acd +0  35050000
[3e4c20eb886618b] jit-backend-dump}
[3e4c20eb8869554] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06ae3 +0  3B050000
[3e4c20eb886a2a3] jit-backend-dump}
[3e4c20eb886d75b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06af9 +0  5D050000
[3e4c20eb886e495] jit-backend-dump}
[3e4c20eb8871732] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06b06 +0  6C050000
[3e4c20eb8872475] jit-backend-dump}
[3e4c20eb887569b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06b13 +0  7B050000
[3e4c20eb8876409] jit-backend-dump}
[3e4c20eb8879718] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06b23 +0  87050000
[3e4c20eb887a427] jit-backend-dump}
[3e4c20eb887d68a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06b3e +0  88050000
[3e4c20eb887e3e9] jit-backend-dump}
[3e4c20eb8881588] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06b52 +0  90050000
[3e4c20eb888225a] jit-backend-dump}
[3e4c20eb88853de] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06b6e +0  90050000
[3e4c20eb88860e4] jit-backend-dump}
[3e4c20eb88892b1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06b8d +0  8D050000
[3e4c20eb8889f9c] jit-backend-dump}
[3e4c20eb888d113] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06b9a +0  9C050000
[3e4c20eb888de23] jit-backend-dump}
[3e4c20eb8894ff8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06ba3 +0  AF050000
[3e4c20eb8895e30] jit-backend-dump}
[3e4c20eb88995c9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06bad +0  C1050000
[3e4c20eb889a30f] jit-backend-dump}
[3e4c20eb889d866] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06bce +0  BC050000
[3e4c20eb889e5a9] jit-backend-dump}
[3e4c20eb88a1960] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06be2 +0  C4050000
[3e4c20eb88a2660] jit-backend-dump}
[3e4c20eb88a59e8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06c04 +0  BE050000
[3e4c20eb88a670a] jit-backend-dump}
[3e4c20eb88a9939] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06c18 +0  C6050000
[3e4c20eb88aa64e] jit-backend-dump}
[3e4c20eb88ad90a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06c4d +0  AD050000
[3e4c20eb88ae60d] jit-backend-dump}
[3e4c20eb88b18c3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06c85 +0  91050000
[3e4c20eb88b26ca] jit-backend-dump}
[3e4c20eb88b59f7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06cc2 +0  70050000
[3e4c20eb88b672b] jit-backend-dump}
[3e4c20eb88b99b0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06d15 +0  39050000
[3e4c20eb88ba6c8] jit-backend-dump}
[3e4c20eb88bd8ab] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06d25 +0  45050000
[3e4c20eb88be5ae] jit-backend-dump}
[3e4c20eb88c17fe] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06d47 +0  3F050000
[3e4c20eb88c252c] jit-backend-dump}
[3e4c20eb88c5774] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06dac +0  F6040000
[3e4c20eb88c647a] jit-backend-dump}
[3e4c20eb88c967b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06dce +0  F0040000
[3e4c20eb88ca387] jit-backend-dump}
[3e4c20eb88cd62b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06dd7 +0  03050000
[3e4c20eb88ce331] jit-backend-dump}
[3e4c20eb88d15a0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06dfd +0  F9040000
[3e4c20eb88d22bc] jit-backend-dump}
[3e4c20eb88d55be] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06e06 +0  28050000
[3e4c20eb88d62a8] jit-backend-dump}
[3e4c20eb88d9502] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06e16 +0  34050000
[3e4c20eb88da23c] jit-backend-dump}
[3e4c20eb88dd419] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06e2a +0  3C050000
[3e4c20eb88de11f] jit-backend-dump}
[3e4c20eb88e1326] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06e33 +0  4F050000
[3e4c20eb88e203c] jit-backend-dump}
[3e4c20eb88e5234] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06e3d +0  61050000
[3e4c20eb88e5f7a] jit-backend-dump}
[3e4c20eb88e916c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06e51 +0  69050000
[3e4c20eb88e9e7e] jit-backend-dump}
[3e4c20eb88ed06a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06e65 +0  71050000
[3e4c20eb88edd6a] jit-backend-dump}
[3e4c20eb88f0f8a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06e8b +0  67050000
[3e4c20eb88f1c93] jit-backend-dump}
[3e4c20eb88f4e97] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06ebc +0  52050000
[3e4c20eb88f5ba6] jit-backend-dump}
[3e4c20eb88f8e00] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06ee5 +0  45050000
[3e4c20eb88f9b1f] jit-backend-dump}
[3e4c20eb88fcd5d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06f40 +0  06050000
[3e4c20eb88fdae4] jit-backend-dump}
[3e4c20eb8900d0a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06f50 +0  12050000
[3e4c20eb8901a1c] jit-backend-dump}
[3e4c20eb8906979] jit-backend}
[3e4c20eb890b9fb] {jit-log-opt-loop
# Loop 88 ((if (zero? q) (remainder r n5224) (let ([AppRand2 (* 16384 r)][AppRand3 (CellRef(random14) 16384)]) (let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)))) from (CellRef(loop) (quotient q 16384) AppRand4 n5224)) : loop with 193 ops
[p0, p1]
+517: label(p0, p1, descr=TargetToken(139976055980064))
debug_merge_point(0, 0, '(if (zero? q) (remainder r n5224) (let ([AppRand2 (* 16384 r)][AppRand3 (CellRef(random14) 16384)]) (let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)))) from (CellRef(loop) (quotient q 16384) AppRand4 n5224)')
+536: guard_class(p0, 16500368, descr=<Guard0x4b9aaa0>) [p1, p0]
+555: p3 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+559: guard_nonnull_class(p3, ConstClass(W_Fixnum), descr=<Guard0x4b9ada0>) [p1, p0]
+577: i5 = getfield_gc_i(p3, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+581: i6 = int_is_zero(i5)
+584: guard_false(i6, descr=<Guard0x42c6338>) [p1, p0]
debug_merge_point(0, 0, '(let ([AppRand2 (* 16384 r)][AppRand3 (CellRef(random14) 16384)]) (let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)))')
+590: guard_class(p1, 16437216, descr=<Guard0x42c62f0>) [p1, p0]
+609: p8 = getfield_gc_r(p1, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+613: guard_nonnull_class(p8, ConstClass(ForwardLink), descr=<Guard0x4b9ad40>) [p1, p0]
debug_merge_point(0, 0, '(* 16384 r)')
+631: guard_not_invalidated(descr=<Guard0x42c62a8>) [p1, p0]
+631: p10 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+635: guard_nonnull_class(p10, ConstClass(W_Fixnum), descr=<Guard0x4b9ace0>) [p1, p0]
+653: i12 = getfield_gc_i(p10, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+657: i13 = int_is_true(i12)
+660: guard_true(i13, descr=<Guard0x42c6260>) [p1, p0]
+666: i15 = int_mul_ovf(16384, i12)
+673: guard_no_overflow(descr=<Guard0x42c6218>) [p1, p0]
debug_merge_point(0, 0, '(CellRef(random14) 16384)')
+679: p16 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+683: guard_class(p16, 16478072, descr=<Guard0x42c61d0>) [p1, p0]
+695: p18 = getfield_gc_r(p16, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+699: p19 = getfield_gc_r(p18, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+703: guard_nonnull_class(p19, 16478824, descr=<Guard0x4b9ac80>) [p1, p0]
+722: p21 = getfield_gc_r(p19, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+733: guard_value(p21, ConstPtr(ptr22), descr=<Guard0x42c6188>) [p1, p0]
+742: p23 = getfield_gc_r(p16, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+742: p24 = getfield_gc_r(p19, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_2 40 pure>)
+746: p25 = getfield_gc_r(p24, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+751: guard_nonnull_class(p25, ConstClass(W_CellIntegerStrategy), descr=<Guard0x4b9ac20>) [p1, p0]
+770: i27 = getfield_gc_i(p25, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+774: p28 = getfield_gc_r(p19, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_3 48 pure>)
+778: p29 = getfield_gc_r(p28, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+782: guard_nonnull_class(p29, ConstClass(W_CellIntegerStrategy), descr=<Guard0x4b9abc0>) [p1, p0]
+801: i31 = getfield_gc_i(p29, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+805: i32 = int_is_true(i27)
+808: guard_true(i32, descr=<Guard0x42c6140>) [p1, p0]
+814: i33 = int_is_true(i31)
+817: guard_true(i33, descr=<Guard0x42c60f8>) [p1, p0]
+823: i34 = int_mul_ovf(i27, i31)
+827: guard_no_overflow(descr=<Guard0x42c60b0>) [p1, p0]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+833: p35 = getfield_gc_r(p19, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_1 32 pure>)
+837: p36 = getfield_gc_r(p35, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+848: guard_nonnull_class(p36, ConstClass(W_CellIntegerStrategy), descr=<Guard0x4b9ab60>) [p1, p0]
+866: i38 = getfield_gc_i(p36, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+877: i39 = int_add_ovf(i34, i38)
+880: guard_no_overflow(descr=<Guard0x42c6068>) [p1, p0]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+886: p40 = getfield_gc_r(p19, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_0 24 pure>)
+890: p41 = getfield_gc_r(p40, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+901: guard_nonnull_class(p41, ConstClass(W_CellIntegerStrategy), descr=<Guard0x4b9ab00>) [p1, p0]
+920: i43 = getfield_gc_i(p41, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+931: i44 = int_is_zero(i43)
+934: guard_false(i44, descr=<Guard0x42c6020>) [p1, p0]
+940: i46 = int_rshift(i39, 63)
+951: i47 = int_xor(i39, i46)
+968: i48 = int_sub(i47, i46)
+971: i50 = int_rshift(i43, 63)
+978: i51 = int_xor(i43, i50)
+981: i52 = int_sub(i51, i50)
+984: i53 = int_is_zero(i52)
+987: guard_false(i53, descr=<Guard0x427dfa0>) [p1, p0]
+993: i55 = int_eq(i48, -9223372036854775808)
+1016: i57 = int_eq(i52, -1)
+1037: i58 = int_and(i55, i57)
+1040: guard_false(i58, descr=<Guard0x427df58>) [p1, p0]
+1049: i60 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i48, i52, descr=<Calli 8 ii EF=0 OS=14>)
+1096: i62 = int_lt(i39, 0)
+1104: guard_false(i62, descr=<Guard0x4b9aa40>) [i52, i60, i48, i39, i15, p1, p0, p19, p8]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+1110: i64 = int_eq(i60, -9223372036854775808)
+1110: i66 = int_rshift(i60, 3)
+1117: i68 = int_lshift(i66, 3)
+1124: i70 = int_xor(i60, 8)
+1131: i72 = int_rshift(i70, 63)
+1135: i73 = int_ne(i68, i60)
+1147: i74 = int_and(i72, i73)
+1150: i75 = int_add(i66, i74)
+1153: i77 = int_rshift(i75, 63)
+1160: i78 = int_xor(i75, i77)
+1166: i79 = int_sub(i78, i77)
+1169: i81 = int_eq(i79, -9223372036854775808)
+1169: i83 = int_and(i79, 16383)
+1179: setfield_gc(p29, i60, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1183: i85 = int_lt(i75, 0)
+1187: guard_false(i85, descr=<Guard0x4b9a980>) [i83, i79, i75, i15, p1, p0, p19, p8]
debug_merge_point(0, 0, '(let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)) from (remainder (quotient CellRef(x) 8) n)')
debug_merge_point(0, 0, '(+ AppRand2 AppRand3)')
+1193: i86 = int_add_ovf(i15, i83)
+1203: guard_no_overflow(descr=<Guard0x427dec8>) [i83, i79, i75, i15, p1, p0, p19, p8]
debug_merge_point(0, 0, '(CellRef(loop) (quotient q 16384) AppRand4 n5224)')
+1209: p87 = getfield_gc_r(p16, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+1220: p88 = getfield_gc_r(p87, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1224: guard_nonnull_class(p88, 16478072, descr=<Guard0x4b9a9e0>) [i83, i79, i75, i15, p1, p0, p19, p8]
+1243: i91 = int_eq(i5, -9223372036854775808)
+1243: i93 = int_rshift(i5, 14)
+1254: i95 = int_lshift(i93, 14)
+1265: i97 = int_xor(i5, 16384)
+1286: i99 = int_rshift(i97, 63)
+1290: i100 = int_ne(i95, i5)
+1314: i101 = int_and(i99, i100)
+1317: i102 = int_add(i93, i101)
+1324: p103 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+1335: guard_nonnull(p103, descr=<Guard0x427de80>) [i83, i79, i75, i15, p1, p0, p19, p8]
+1344: p104 = getfield_gc_r(p88, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1369: guard_value(p104, ConstPtr(ptr105), descr=<Guard0x427de38>) [i83, i79, i75, i15, p1, p0, p19, p8]
+1378: i106 = instance_ptr_eq(p16, p88)
+1381: guard_true(i106, descr=<Guard0x427ddf0>) [i83, i79, i75, i15, p1, p0, p19, p8]
debug_merge_point(0, 0, '(if (zero? q) (remainder r n5224) (let ([AppRand2 (* 16384 r)][AppRand3 (CellRef(random14) 16384)]) (let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)))) from (CellRef(loop) (quotient q 16384) AppRand4 n5224)')
+1387: label(p16, i102, i86, p103, p1, p18, p19, p24, p25, p28, p29, i60, p35, p36, p40, p41, p8, p87, p88, descr=TargetToken(139976055980144))
debug_merge_point(0, 0, '(if (zero? q) (remainder r n5224) (let ([AppRand2 (* 16384 r)][AppRand3 (CellRef(random14) 16384)]) (let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)))) from (CellRef(loop) (quotient q 16384) AppRand4 n5224)')
+1416: i107 = int_is_zero(i102)
+1419: guard_false(i107, descr=<Guard0x4b9a920>) [p1, i102, i86, p103, p16]
debug_merge_point(0, 0, '(let ([AppRand2 (* 16384 r)][AppRand3 (CellRef(random14) 16384)]) (let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)))')
debug_merge_point(0, 0, '(* 16384 r)')
+1425: guard_not_invalidated(descr=<Guard0x427dda8>) [p1, i102, i86, p103, p16]
+1425: i108 = int_is_true(i86)
+1428: guard_true(i108, descr=<Guard0x427dd60>) [p1, i102, i86, p103, p16]
+1434: i110 = int_mul_ovf(16384, i86)
+1444: guard_no_overflow(descr=<Guard0x427dd18>) [p1, i102, i86, p103, p16]
debug_merge_point(0, 0, '(CellRef(random14) 16384)')
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+1450: i111 = getfield_gc_i(p25, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1461: i112 = int_is_true(i111)
+1464: guard_true(i112, descr=<Guard0x427dcd0>) [p1, i102, i86, p103, p16]
+1470: i113 = int_is_true(i60)
+1473: guard_true(i113, descr=<Guard0x427dc88>) [p1, i102, i86, p103, p16]
+1479: i114 = int_mul_ovf(i111, i60)
+1483: guard_no_overflow(descr=<Guard0x427dc40>) [p1, i102, i86, p103, p16]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+1489: i115 = getfield_gc_i(p36, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1500: i116 = int_add_ovf(i114, i115)
+1503: guard_no_overflow(descr=<Guard0x427dbf8>) [p1, i102, i86, p103, p16]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+1509: i117 = getfield_gc_i(p41, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1520: i118 = int_is_zero(i117)
+1523: guard_false(i118, descr=<Guard0x427dbb0>) [p1, i102, i86, p103, p16]
+1529: i120 = int_rshift(i116, 63)
+1536: i121 = int_xor(i116, i120)
+1542: i122 = int_sub(i121, i120)
+1545: i124 = int_rshift(i117, 63)
+1552: i125 = int_xor(i117, i124)
+1555: i126 = int_sub(i125, i124)
+1558: i127 = int_is_zero(i126)
+1561: guard_false(i127, descr=<Guard0x427db68>) [p1, i102, i86, p103, p16]
+1567: i129 = int_eq(i122, -9223372036854775808)
+1590: i131 = int_eq(i126, -1)
+1604: i132 = int_and(i129, i131)
+1607: guard_false(i132, descr=<Guard0x427db20>) [p1, i102, i86, p103, p16]
+1616: i134 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i122, i126, descr=<Calli 8 ii EF=0 OS=14>)
+1647: i136 = int_lt(i116, 0)
+1651: guard_false(i136, descr=<Guard0x4b9a8c0>) [i126, i134, i122, i116, i102, i110, p1, p19, p8, i86, p103, p16]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+1657: i138 = int_eq(i134, -9223372036854775808)
+1657: i140 = int_rshift(i134, 3)
+1664: i142 = int_lshift(i140, 3)
+1671: i144 = int_xor(i134, 8)
+1678: i146 = int_rshift(i144, 63)
+1682: i147 = int_ne(i142, i134)
+1695: i148 = int_and(i146, i147)
+1698: i149 = int_add(i140, i148)
+1701: i151 = int_rshift(i149, 63)
+1708: i152 = int_xor(i149, i151)
+1714: i153 = int_sub(i152, i151)
+1717: i155 = int_eq(i153, -9223372036854775808)
+1717: i157 = int_and(i153, 16383)
+1727: setfield_gc(p29, i134, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1738: i159 = int_lt(i149, 0)
+1742: guard_false(i159, descr=<Guard0x4b9a860>) [i157, i153, i149, i102, i110, p1, p19, p8, i86, p103, p16]
debug_merge_point(0, 0, '(let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)) from (remainder (quotient CellRef(x) 8) n)')
debug_merge_point(0, 0, '(+ AppRand2 AppRand3)')
+1748: i160 = int_add_ovf(i110, i157)
+1758: guard_no_overflow(descr=<Guard0x427da90>) [i157, i153, i149, i102, i110, p1, p19, p8, i86, p103, p16]
debug_merge_point(0, 0, '(CellRef(loop) (quotient q 16384) AppRand4 n5224)')
+1764: i162 = int_eq(i102, -9223372036854775808)
+1764: i164 = int_rshift(i102, 14)
+1771: i166 = int_lshift(i164, 14)
+1778: i168 = int_xor(i102, 16384)
+1788: i170 = int_rshift(i168, 63)
+1792: i171 = int_ne(i166, i102)
+1805: i172 = int_and(i170, i171)
+1808: i173 = int_add(i164, i172)
debug_merge_point(0, 0, '(if (zero? q) (remainder r n5224) (let ([AppRand2 (* 16384 r)][AppRand3 (CellRef(random14) 16384)]) (let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)))) from (CellRef(loop) (quotient q 16384) AppRand4 n5224)')
+1811: jump(p16, i173, i160, p103, p1, p18, p19, p24, p25, p28, p29, i134, p35, p36, p40, p41, p8, p87, p88, descr=TargetToken(139976055980144))
+1840: --end of the loop--
[3e4c20eb89a523a] jit-log-opt-loop}
[3e4c20eb928a9d6] {jit-backend
[3e4c20eb9384f55] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c
[3e4c20eb939dcae] jit-backend-dump}
[3e4c20eb93aa52d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07a24 +0  25000000
[3e4c20eb93abaa6] jit-backend-dump}
[3e4c20eb93b0064] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07f25 +0  25000000
[3e4c20eb93b1027] jit-backend-dump}
[3e4c20eb93b45d0] {jit-backend-addr
bridge out of Guard 0x4c7da90 has address 0x7f4eb6c07a20 to 0x7f4eb6c07f20
       gc table: 0x7f4eb6c07830
    jump target: 0x7f4eb6c07a20
         resops: 0x7f4eb6c07a2e
       failures: 0x7f4eb6c07f20
            end: 0x7f4eb6c085a1
[3e4c20eb93b6bf4] jit-backend-addr}
[3e4c20eb93ba425] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07a3e +0  3F050000
[3e4c20eb93bb23c] jit-backend-dump}
[3e4c20eb93be813] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07a52 +0  47050000
[3e4c20eb93bf4cf] jit-backend-dump}
[3e4c20eb93c2937] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07a67 +0  4E050000
[3e4c20eb93c3628] jit-backend-dump}
[3e4c20eb93c694f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07a7f +0  52050000
[3e4c20eb93c7734] jit-backend-dump}
[3e4c20eb93cad86] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07a8c +0  7D050000
[3e4c20eb93cba58] jit-backend-dump}
[3e4c20eb93ceeee] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07aa4 +0  81050000
[3e4c20eb93cfbaa] jit-backend-dump}
[3e4c20eb93d2f86] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07ab6 +0  8B050000
[3e4c20eb93d3c52] jit-backend-dump}
[3e4c20eb93d6f88] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07acd +0  90050000
[3e4c20eb93d7c38] jit-backend-dump}
[3e4c20eb93dafbb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07adb +0  9E050000
[3e4c20eb93dbc5f] jit-backend-dump}
[3e4c20eb93def4f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07af3 +0  A2050000
[3e4c20eb93dfc15] jit-backend-dump}
[3e4c20eb93e2ffc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07b08 +0  A9050000
[3e4c20eb93e3cc2] jit-backend-dump}
[3e4c20eb93e6f8d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07b1f +0  AE050000
[3e4c20eb93e7c6f] jit-backend-dump}
[3e4c20eb93eaf3a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07b2c +0  BD050000
[3e4c20eb93ebbed] jit-backend-dump}
[3e4c20eb93eeed4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07b3c +0  C9050000
[3e4c20eb93efb94] jit-backend-dump}
[3e4c20eb93f2eb4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07b4c +0  D5050000
[3e4c20eb93f3b83] jit-backend-dump}
[3e4c20eb93f6ead] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07b60 +0  DD050000
[3e4c20eb93f7b67] jit-backend-dump}
[3e4c20eb93faebc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07b7a +0  DF050000
[3e4c20eb93fbb75] jit-backend-dump}
[3e4c20eb93fee5c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07b94 +0  E1050000
[3e4c20eb93ffb2b] jit-backend-dump}
[3e4c20eb9402e1e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07ba2 +0  EF050000
[3e4c20eb9403ace] jit-backend-dump}
[3e4c20eb9406d8a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07baf +0  FE050000
[3e4c20eb9407a44] jit-backend-dump}
[3e4c20eb940ad24] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07bbf +0  0A060000
[3e4c20eb940b9e7] jit-backend-dump}
[3e4c20eb940ecc4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07c1d +0  C8050000
[3e4c20eb940f97b] jit-backend-dump}
[3e4c20eb9412d3e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07c3e +0  C3050000
[3e4c20eb94139fa] jit-backend-dump}
[3e4c20eb9416ccc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07c52 +0  CB050000
[3e4c20eb941798b] jit-backend-dump}
[3e4c20eb941ac66] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07c66 +0  D3050000
[3e4c20eb941b919] jit-backend-dump}
[3e4c20eb941ec65] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07c80 +0  D5050000
[3e4c20eb941f915] jit-backend-dump}
[3e4c20eb9422c08] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07c8e +0  E3050000
[3e4c20eb94238bf] jit-backend-dump}
[3e4c20eb9426bae] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07cac +0  E1050000
[3e4c20eb9427862] jit-backend-dump}
[3e4c20eb942ab4c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07cc0 +0  E9050000
[3e4c20eb942b8cc] jit-backend-dump}
[3e4c20eb942ebe7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07cce +0  F7050000
[3e4c20eb942f89d] jit-backend-dump}
[3e4c20eb9432b6b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07ce7 +0  FA050000
[3e4c20eb9433825] jit-backend-dump}
[3e4c20eb9436b27] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07d04 +0  F9050000
[3e4c20eb94377de] jit-backend-dump}
[3e4c20eb943aaa6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07d1a +0  FF050000
[3e4c20eb943b778] jit-backend-dump}
[3e4c20eb943ea4f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07d2c +0  09060000
[3e4c20eb943f703] jit-backend-dump}
[3e4c20eb94429ec] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07d43 +0  0E060000
[3e4c20eb94436b5] jit-backend-dump}
[3e4c20eb9446996] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07d58 +0  15060000
[3e4c20eb9447652] jit-backend-dump}
[3e4c20eb944a92d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07d62 +0  27060000
[3e4c20eb944b5e0] jit-backend-dump}
[3e4c20eb944e8fe] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07d72 +0  33060000
[3e4c20eb944f5bb] jit-backend-dump}
[3e4c20eb94528de] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07d80 +0  41060000
[3e4c20eb94535a7] jit-backend-dump}
[3e4c20eb945690b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07d92 +0  4B060000
[3e4c20eb94575c8] jit-backend-dump}
[3e4c20eb945a893] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07da6 +0  53060000
[3e4c20eb945b568] jit-backend-dump}
[3e4c20eb945e8c3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07db3 +0  62060000
[3e4c20eb945f634] jit-backend-dump}
[3e4c20eb9462a16] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07dcd +0  64060000
[3e4c20eb94636df] jit-backend-dump}
[3e4c20eb94669c5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07dda +0  73060000
[3e4c20eb9467679] jit-backend-dump}
[3e4c20eb946a93b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07de3 +0  86060000
[3e4c20eb946b5ee] jit-backend-dump}
[3e4c20eb946e8de] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07df4 +0  91060000
[3e4c20eb946f59b] jit-backend-dump}
[3e4c20eb9472894] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07e02 +0  9F060000
[3e4c20eb9473538] jit-backend-dump}
[3e4c20eb94768e5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07e12 +0  AB060000
[3e4c20eb94775a2] jit-backend-dump}
[3e4c20eb947a85b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07e27 +0  B2060000
[3e4c20eb947b524] jit-backend-dump}
[3e4c20eb947e823] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07e34 +0  C1060000
[3e4c20eb947f4f5] jit-backend-dump}
[3e4c20eb94827f1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07e44 +0  CD060000
[3e4c20eb94834b7] jit-backend-dump}
[3e4c20eb94867c5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07e52 +0  DB060000
[3e4c20eb9487472] jit-backend-dump}
[3e4c20eb948a74d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07e63 +0  E6060000
[3e4c20eb948b3fd] jit-backend-dump}
[3e4c20eb948e70f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07e78 +0  ED060000
[3e4c20eb948f45e] jit-backend-dump}
[3e4c20eb9492770] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07e85 +0  FC060000
[3e4c20eb9493429] jit-backend-dump}
[3e4c20eb9496c6d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6befd63 +0  B97C0100
[3e4c20eb949793c] jit-backend-dump}
[3e4c20eb949c88d] jit-backend}
[3e4c20eb94a0797] {jit-log-opt-bridge
# bridge out of Guard 0x4c7da90 with 226 ops
[p0, p1, p2, p3]
+518: guard_class(p0, 16435208, descr=<Guard0x4b9ae00>) [p0, p1, p2, p3]
+530: p5 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+541: guard_value(p5, ConstPtr(ptr6), descr=<Guard0x44016a0>) [p0, p1, p2, p3]
+550: p7 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+554: p8 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+558: guard_class(p8, 16435920, descr=<Guard0x44016e8>) [p0, p1, p2, p3]
+571: p10 = getfield_gc_r(p8, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+575: guard_nonnull_class(p10, ConstClass(ForwardLink), descr=<Guard0x4b9ae60>) [p0, p1, p2, p3]
debug_merge_point(0, 0, '(vector-set! res 2 h5329)')
+595: guard_not_invalidated(descr=<Guard0x4401730>) [p0, p1, p2, p3]
+595: guard_class(p7, 16503536, descr=<Guard0x4401778>) [p0, p1, p2, p3]
+608: p13 = getfield_gc_r(p7, descr=<FieldP pycket.small_list.ConsEnvSize2Fixed01.inst_w_val0 24 pure>)
+612: guard_nonnull_class(p13, ConstClass(W_Vector), descr=<Guard0x4b9aec0>) [p0, p1, p2, p3]
+632: p15 = getfield_gc_r(p7, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+636: guard_class(p15, 16504944, descr=<Guard0x44017c0>) [p0, p1, p2, p3]
+650: i17 = getfield_gc_i(p15, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+655: p18 = getfield_gc_r(p13, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+659: guard_class(p18, 16622984, descr=<Guard0x4401808>) [p0, p1, p2, p3]
+673: i20 = getfield_gc_i(p13, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+677: i22 = int_lt(2, i20)
+681: guard_true(i22, descr=<Guard0x4401850>) [p0, p1, p2, p3]
+687: p23 = getfield_gc_r(p13, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
debug_merge_point(0, 0, 'res')
+691: p24 = getfield_gc_r(p8, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+702: guard_value(p24, ConstPtr(ptr25), descr=<Guard0x4401898>) [p0, p1, p2, p3]
+711: p26 = getfield_gc_r(p8, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+715: p27 = getfield_gc_r(p8, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+719: guard_class(p27, 16435208, descr=<Guard0x44018e0>) [p0, p1, p2, p3]
+732: p29 = getfield_gc_r(p27, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+736: guard_nonnull_class(p29, ConstClass(ForwardLink), descr=<Guard0x4b9af20>) [p0, p1, p2, p3]
debug_merge_point(0, 0, '(vector-ref CellRef(trees) CellRef(where)) from (vector-set! res 2 h5329)')
+755: guard_class(p26, 16504944, descr=<Guard0x4401928>) [p0, p1, p2, p3]
+768: p32 = getfield_gc_r(p26, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+772: guard_class(p32, 16504944, descr=<Guard0x4401970>) [p0, p1, p2, p3]
+784: p34 = getfield_gc_r(p32, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+788: guard_class(p34, 16479952, descr=<Guard0x44019b8>) [p0, p1, p2, p3]
+800: p36 = getfield_gc_r(p34, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+811: guard_value(p36, ConstPtr(ptr37), descr=<Guard0x4401a00>) [p0, p1, p2, p3]
+820: p38 = getfield_gc_r(p34, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize7.inst__vals_5 64 pure>)
+824: p39 = getfield_gc_r(p38, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+828: guard_nonnull_class(p39, ConstClass(W_Vector), descr=<Guard0x4b9af80>) [p0, p1, p2, p3]
+846: p41 = getfield_gc_r(p34, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize7.inst__vals_2 40 pure>)
+850: p42 = getfield_gc_r(p41, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+854: guard_nonnull_class(p42, ConstClass(W_CellIntegerStrategy), descr=<Guard0x4b9afe0>) [p0, p1, p2, p3]
+872: i44 = getfield_gc_i(p42, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+876: i46 = int_ge(i44, 0)
+880: guard_true(i46, descr=<Guard0x4401a48>) [p0, p1, p2, p3]
+886: i47 = getfield_gc_i(p39, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+890: i48 = int_lt(i44, i47)
+893: guard_true(i48, descr=<Guard0x4401a90>) [p0, p1, p2, p3]
+899: p49 = getfield_gc_r(p39, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+903: guard_class(p49, 16622984, descr=<Guard0x4401ad8>) [p0, p1, p2, p3]
+915: p51 = getfield_gc_r(p39, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+919: p52 = new_with_vtable(descr=<SizeDescr 16>)
+970: setfield_gc(p52, i17, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+986: setarrayitem_gc(p23, 2, p52, descr=<ArrayP 8>)
+991: p54 = getarrayitem_gc_r(p51, i44, descr=<ArrayP 8>)
+996: guard_class(p54, ConstClass(W_Vector), descr=<Guard0x4b9b040>) [p26, p54, p13, p27, p29, None, None, None]
debug_merge_point(0, 0, '(CellRef(replaceTree) AppRand48 newTree)')
+1009: p57 = getfield_gc_r(p34, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize7.inst__vals_3 48 pure>)
+1020: p58 = getfield_gc_r(p57, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1024: guard_nonnull_class(p58, 16478072, descr=<Guard0x4b9b0a0>) [p26, p54, p13, p27, p29, None, None, None]
+1042: p60 = getfield_gc_r(p58, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1053: guard_value(p60, ConstPtr(ptr61), descr=<Guard0x4401b20>) [p26, p54, p13, p27, p29, None, None, None]
+1062: p62 = getfield_gc_r(p34, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([AppRand44 (vector-ref partial5450 2)]) (let ([dir5452 (zero? (modulo AppRand44 2))][SetBang2 (+ CellRef(actuallyMut) 1)]) (set! actuallyMut SetBang2) (CellRef(replaceTreeWork) full5448 partial5450 dir5452)))')
debug_merge_point(0, 0, '(vector-ref partial5450 2)')
+1062: i63 = getfield_gc_i(p52, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(let ([dir5452 (zero? (modulo AppRand44 2))][SetBang2 (+ CellRef(actuallyMut) 1)]) (set! actuallyMut SetBang2) (CellRef(replaceTreeWork) full5448 partial5450 dir5452))')
debug_merge_point(0, 0, '(zero? (modulo AppRand44 2))')
+1066: i65 = int_eq(i63, -9223372036854775808)
+1066: i67 = int_and(i63, 1)
+1073: i68 = int_is_zero(i67)
+1076: guard_true(i68, descr=<Guard0x4401b68>) [p26, p54, p13, p27, p29, None, None, None]
debug_merge_point(0, 0, '(+ CellRef(actuallyMut) 1)')
+1082: p69 = getfield_gc_r(p58, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+1086: p70 = getfield_gc_r(p69, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1090: guard_nonnull_class(p70, ConstClass(W_CellIntegerStrategy), descr=<Guard0x4b9b100>) [p26, p54, p13, p27, p29, None, None, None]
+1108: i72 = getfield_gc_i(p70, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1112: i74 = int_add_ovf(i72, 1)
+1116: guard_no_overflow(descr=<Guard0x4401bb0>) [p26, p54, p13, p27, p29, None, None, None]
debug_merge_point(0, 0, '(set! actuallyMut SetBang2)')
debug_merge_point(0, 0, '(CellRef(replaceTreeWork) full5448 partial5450 dir5452)')
+1122: p75 = getfield_gc_r(p58, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+1126: p76 = getfield_gc_r(p75, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1130: setfield_gc(p70, i74, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1134: guard_nonnull_class(p76, 16482208, descr=<Guard0x4b9b160>) [p76, p54, p58, i74, p26, p13, p27, p29, None, None, None]
+1152: p78 = getfield_gc_r(p76, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1163: guard_value(p78, ConstPtr(ptr79), descr=<Guard0x4401bf8>) [p76, p54, p58, i74, p26, p13, p27, p29, None, None, None]
+1172: p80 = getfield_gc_r(p58, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([AppRand34 (vector-ref full 0)]) (let ([canGoLeft (if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)][AppRand38 (vector-ref full 1)]) (let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))))) from (CellRef(replaceTreeWork) full5448 partial5450 dir5452)')
debug_merge_point(0, 0, '(vector-ref full 0)')
+1172: i81 = getfield_gc_i(p54, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1176: i83 = int_lt(0, i81)
+1180: guard_true(i83, descr=<Guard0x4401c40>) [p76, p54, p58, i74, p26, p13, p27, p29, None, None, None]
+1186: p84 = getfield_gc_r(p54, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1197: guard_class(p84, 16622984, descr=<Guard0x4401c88>) [p76, p54, p58, i74, p26, p13, p27, p29, None, None, None]
+1211: p86 = getfield_gc_r(p54, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1215: p88 = getarrayitem_gc_r(p86, 0, descr=<ArrayP 8>)
+1226: guard_class(p88, ConstClass(W_Vector), descr=<Guard0x4401cd0>) [p76, p54, p58, i74, p26, p13, p27, p29, None, None, None]
debug_merge_point(0, 0, '(let ([canGoLeft (if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)][AppRand38 (vector-ref full 1)]) (let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))))')
debug_merge_point(0, 0, '(if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)')
+1240: i90 = getfield_gc_i(p76, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed10.inst_vals_fixed_0 24 pure>)
debug_merge_point(0, 0, '(let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37)))')
debug_merge_point(0, 0, 'partial')
+1240: p91 = getfield_gc_r(p76, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(vector-ref full 0)')
debug_merge_point(0, 0, '(let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))')
debug_merge_point(0, 0, '(vector-ref AppRand35 2)')
+1240: i92 = getfield_gc_i(p88, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1252: i94 = int_lt(2, i92)
+1256: guard_true(i94, descr=<Guard0x4401d18>) [p76, p54, p58, i74, p26, p13, p27, p29, None, None, None]
+1262: p95 = getfield_gc_r(p88, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1267: guard_class(p95, 16622984, descr=<Guard0x4401d60>) [p76, p54, p58, i74, p26, p13, p27, p29, None, None, None]
+1280: p97 = getfield_gc_r(p88, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1285: p99 = getarrayitem_gc_r(p97, 2, descr=<ArrayP 8>)
+1289: guard_class(p99, ConstClass(W_Fixnum), descr=<Guard0x4401da8>) [p76, p54, p58, i74, p26, p13, p27, p29, None, None, None]
+1303: i101 = getfield_gc_i(p99, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(vector-ref partial 2)')
debug_merge_point(0, 0, '(> AppRand36 AppRand37)')
+1315: i102 = int_gt(i101, i63)
+1318: guard_true(i102, descr=<Guard0x4401df0>) [p76, p54, p58, i74, p26, p13, p27, p29, None, None, None]
debug_merge_point(0, 0, '(vector-ref full 1)')
+1324: i104 = int_lt(1, i81)
+1328: guard_true(i104, descr=<Guard0x4401e38>) [p76, p54, p58, i74, p26, p13, p27, p29, None, None, None]
+1334: p106 = getarrayitem_gc_r(p86, 1, descr=<ArrayP 8>)
+1338: guard_class(p106, ConstClass(W_Vector), descr=<Guard0x4401e80>) [p76, p54, p58, i74, p26, p13, p27, p29, None, None, None]
debug_merge_point(0, 0, '(let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial)))))))')
debug_merge_point(0, 0, '(if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)')
debug_merge_point(0, 0, '(let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41)))')
debug_merge_point(0, 0, 'partial')
debug_merge_point(0, 0, '(vector-ref full 1)')
debug_merge_point(0, 0, '(let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))')
debug_merge_point(0, 0, '(vector-ref AppRand39 2)')
+1350: i108 = getfield_gc_i(p106, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1354: i110 = int_lt(2, i108)
+1358: guard_true(i110, descr=<Guard0x4401ec8>) [p76, p54, p58, i74, p26, p13, p27, p29, None, None, None]
+1364: p111 = getfield_gc_r(p106, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1368: guard_class(p111, 16622984, descr=<Guard0x4401f10>) [p76, p54, p58, i74, p26, p13, p27, p29, None, None, None]
+1382: p113 = getfield_gc_r(p106, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1386: p115 = getarrayitem_gc_r(p113, 2, descr=<ArrayP 8>)
+1390: guard_class(p115, ConstClass(W_Fixnum), descr=<Guard0x4401f58>) [p76, p54, p58, i74, p26, p13, p27, p29, None, None, None]
+1402: i117 = getfield_gc_i(p115, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(vector-ref partial 2)')
debug_merge_point(0, 0, '(> AppRand40 AppRand41)')
+1406: i118 = int_gt(i117, i63)
+1409: guard_true(i118, descr=<Guard0x4401fa0>) [p76, p54, p58, i74, p26, p13, p27, p29, None, None, None]
debug_merge_point(0, 0, '(let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))')
debug_merge_point(0, 0, '(if canGoLeft canGoRight #f)')
debug_merge_point(0, 0, 'canGoRight')
debug_merge_point(0, 0, '(if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial)))))')
debug_merge_point(0, 0, '(if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir))))')
debug_merge_point(0, 0, '(let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir)))')
debug_merge_point(0, 0, '(vector-ref full 0)')
debug_merge_point(0, 0, '(CellRef(replaceTreeWork) AppRand42 partial (not dir))')
+1415: p119 = getfield_gc_r(p76, descr=<FieldP pycket.small_list.W_Closure1AsEnvSize2Fixed10.inst_w_val1 32 pure>)
+1419: p120 = getfield_gc_r(p119, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1423: guard_nonnull_class(p120, 16482208, descr=<Guard0x4b9b1c0>) [p76, p54, p58, i74, p26, p13, p27, p29, None, None, None]
+1441: p122 = getfield_gc_r(p120, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1445: guard_value(p122, ConstPtr(ptr123), descr=<Guard0x4476020>) [p76, p54, p58, i74, p26, p13, p27, p29, None, None, None]
+1454: i124 = instance_ptr_eq(p76, p120)
+1457: guard_true(i124, descr=<Guard0x4476068>) [p76, p54, p58, i74, p26, p13, p27, p29, None, None, None]
debug_merge_point(0, 0, '(let ([AppRand34 (vector-ref full 0)]) (let ([canGoLeft (if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)][AppRand38 (vector-ref full 1)]) (let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))))) from (CellRef(replaceTreeWork) AppRand42 partial (not dir))')
debug_merge_point(0, 0, '(vector-ref full 0)')
+1463: p126 = getarrayitem_gc_r(p97, 0, descr=<ArrayP 8>)
+1467: guard_class(p126, ConstClass(W_Vector), descr=<Guard0x44760b0>) [p76, p54, p58, i74, p26, p13, p27, p29, None, None, None]
debug_merge_point(0, 0, '(let ([canGoLeft (if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)][AppRand38 (vector-ref full 1)]) (let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))))')
debug_merge_point(0, 0, '(if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)')
debug_merge_point(0, 0, '(let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37)))')
debug_merge_point(0, 0, 'partial')
debug_merge_point(0, 0, '(vector-ref full 0)')
debug_merge_point(0, 0, '(let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))')
debug_merge_point(0, 0, '(vector-ref AppRand35 2)')
+1480: i128 = getfield_gc_i(p126, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1484: i130 = int_lt(2, i128)
+1488: guard_true(i130, descr=<Guard0x44760f8>) [p76, p54, p58, i74, p26, p13, p27, p29, None, None, None]
+1494: p131 = getfield_gc_r(p126, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1498: guard_class(p131, 16622984, descr=<Guard0x4476140>) [p76, p54, p58, i74, p26, p13, p27, p29, None, None, None]
+1510: p133 = getfield_gc_r(p126, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1514: p135 = getarrayitem_gc_r(p133, 2, descr=<ArrayP 8>)
+1518: guard_class(p135, ConstClass(W_Fixnum), descr=<Guard0x4476188>) [p76, p54, p58, i74, p26, p13, p27, p29, None, None, None]
+1531: i137 = getfield_gc_i(p135, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(vector-ref partial 2)')
debug_merge_point(0, 0, '(> AppRand36 AppRand37)')
+1535: i138 = int_gt(i137, i63)
+1538: guard_true(i138, descr=<Guard0x44761d0>) [p76, p54, p58, i74, p26, p13, p27, p29, None, None, None]
debug_merge_point(0, 0, '(vector-ref full 1)')
+1544: p140 = getarrayitem_gc_r(p97, 1, descr=<ArrayP 8>)
+1548: guard_class(p140, ConstClass(W_Vector), descr=<Guard0x4476218>) [p76, p54, p58, i74, p26, p13, p27, p29, None, None, None]
debug_merge_point(0, 0, '(let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial)))))))')
debug_merge_point(0, 0, '(if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)')
debug_merge_point(0, 0, '(let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41)))')
debug_merge_point(0, 0, 'partial')
debug_merge_point(0, 0, '(vector-ref full 1)')
debug_merge_point(0, 0, '(let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))')
debug_merge_point(0, 0, '(vector-ref AppRand39 2)')
+1560: i142 = getfield_gc_i(p140, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1564: i144 = int_lt(2, i142)
+1568: guard_true(i144, descr=<Guard0x4476260>) [p76, p54, p58, i74, p26, p13, p27, p29, None, None, None]
+1574: p145 = getfield_gc_r(p140, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1578: guard_class(p145, 16622984, descr=<Guard0x44762a8>) [p76, p54, p58, i74, p26, p13, p27, p29, None, None, None]
+1591: p147 = getfield_gc_r(p140, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1595: p149 = getarrayitem_gc_r(p147, 2, descr=<ArrayP 8>)
+1599: guard_class(p149, ConstClass(W_Fixnum), descr=<Guard0x44762f0>) [p76, p54, p58, i74, p26, p13, p27, p29, None, None, None]
+1612: i151 = getfield_gc_i(p149, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(vector-ref partial 2)')
debug_merge_point(0, 0, '(> AppRand40 AppRand41)')
+1616: i152 = int_gt(i151, i63)
+1619: guard_true(i152, descr=<Guard0x4476338>) [p76, p54, p58, i74, p26, p13, p27, p29, None, None, None]
debug_merge_point(0, 0, '(let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))')
debug_merge_point(0, 0, '(if canGoLeft canGoRight #f)')
debug_merge_point(0, 0, 'canGoRight')
debug_merge_point(0, 0, '(if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial)))))')
debug_merge_point(0, 0, '(if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir))))')
debug_merge_point(0, 0, '(let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))')
debug_merge_point(0, 0, '(vector-ref full 1)')
debug_merge_point(0, 0, '(CellRef(replaceTreeWork) AppRand43 partial (not dir))')
debug_merge_point(0, 0, '(let ([AppRand34 (vector-ref full 0)]) (let ([canGoLeft (if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)][AppRand38 (vector-ref full 1)]) (let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))))) from (CellRef(replaceTreeWork) AppRand43 partial (not dir))')
+1625: p153 = new_with_vtable(descr=<SizeDescr 40>)
+1643: i154 = arraylen_gc(p147, descr=<ArrayP 8>)
+1643: i155 = arraylen_gc(p23, descr=<ArrayP 8>)
+1650: setfield_gc(p153, ConstPtr(ptr156), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+1654: setfield_gc(p153, p26, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1658: setfield_gc(p153, p27, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1662: setfield_gc(p153, p29, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1673: jump(p76, p140, p13, p153, p29, p147, p23, p52, i63, p119, p120, descr=TargetToken(139976082361184))
+1776: --end of the loop--
[3e4c20eb956ba21] jit-log-opt-bridge}
[3e4c20ebca32678] {jit-backend
[3e4c20ebcdf4757] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c08fb0 +0  0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8CD211000048FF0425608AAA034C8BBD400100004D8B77084983FE000F8E000000004D8B6F1841817D00C8EB02000F85000000004D8B6F104D8B651041813C24F08C00000F85000000004C8B95380100004D8B4A084983F9017207418139900F00000F85000000004D8B4C24084983F9020F8E000000004D8B4C2418418139C8EB02000F85000000004D8B4C24104D8B612041813C24601400000F85000000004D8B4424084C8BA548010000498B7C24084883FF020F8E00000000498B7C2418813FC8EB02000F8500000000498B7C2410488B7720813E601400000F8500000000488B7E084939F80F8E000000004983FE010F8E000000004D8B751841813EF08C00000F85000000004D8B6E084983FD020F8E000000004D8B6E1841817D00C8EB02000F85000000004D8B6E104D8B752041813E601400000F85000000004D8B6E084939FD0F8E000000004C8BAD300100004D8B75204D8B46084983F8017207418138E0C500000F85000000004D8B7010488B35C7F9FFFF4939F60F85000000004D39C50F85000000004D8B4110418138F08C00000F8500000000498B70084883FE020F8E00000000498B7018813EC8EB02000F8500000000498B70104C8B4620418138601400000F8500000000498B70084839FE0F8F00000000498B7118813EF08C00000F85000000004C8B46084983F8020F8E000000004C8B4618418138C8EB02000F85000000004C8B4610498B7020813E601400000F85000000004C8B46084939F80F8F000000004D8B6A2041F64104810F85C30F00004D8961184C8B2562F9FFFF4D39E50F85000000004D8B62104D8B4A18418139480E00000F85000000004D8B79084983FF01720741813F900F00000F850000000041813C24B01E01000F8500000000498B7C2408813FB01E01000F85000000004C8B470841813810BD00000F8500000000498B70104C8B352AF9FFFF4C39F60F85000000004D8B7028498B76084883FE017206813EF08900000F85000000004C8B76084983C6010F8000000000498B5840488B53084883FA017206813AF08C00000F8500000000488B5A084885DB0F84000000004989F54C898D300100004889BD380100004C8985400100004C89F74889DE41BBB0CBAE0041FFD34C8BB540010000498B5E48498945084883FB017206813BF0C200000F8500000000498B4424104C8B6B104C8B15B2F8FFFF4D39D50F85000000004C8B53204C8B2DAEF8FFFF4D39EA0F8500000000F24C0F2AF066450F2EF67B044883FD000F850000000066450F28EE49BBA088C0B64E7F0000F2450F583366450F2EEE7B044883FD000F84000000004989C449BBB888C0B64E7F0000F2410F100366410F28CD41BBB0FD410041FFD3488B8424B00000004863403066440F28E8F20F5CC049BBC088C0B64E7F000066410F2E037B044883FD000F85000000004885C00F850000000066450F2EED7B044883FD000F850000000049BBF888C0B64E7F000066450F2E2B0F820000000066450F2E6B187B044883FD000F8300000000F24D0F2CED4983ED010F80000000004C8B53184D85D20F84000000004D85ED0F84000000004D0FAFEA0F80000000004C8B9538010000498B72104C29EE0F80000000004D8B6E204983FD01720841817D00601400000F85000000004D8B75084C39F60F8F000000004C8BB530010000498B76204C8B2DDFF7FFFF4C39EE0F85000000004D8B6E10498B761841817D00B01E01000F8500000000498B5508813AB01E01000F8500000000488B4A08813E480E00000F8500000000488B56084883FA017206813A900F00000F85000000004D8B4D10813988BE00000F85000000004C8B69384983FD01720841817D00601400000F8500000000498B7D084C01CF0F80000000004C8B49204D8B69084983FD01720841817D00F08900000F85000000004D8B4D084C29CF0F80000000004883FF000F8E000000004C8B4948498B49084883F9017206813940B400000F85000000004C8B49104C8B2D65F7FFFF4D39E90F85000000004C8B69084C8B491841817D00102001000F85000000004983F9017207418139708700000F85000000004889F948D1FF4883FF000F8E00000000498B79084883FF017206813F20BA00000F85000000004C8B471048899540010000488B152BF7FFFF4939D00F8500000000488B57284883FA017206813AB8B500000F85000000004C8B47304889B548010000498B70084883FE017206813EF08C00000F85000000004C8B4608488B72104C898D500100004C8B0DF5F6FFFF4C39CE0F85000000004981F8004000000F8D000000004C8B4A20498B71084883FE017206813EA8B800000F85000000004C8B4E1048898D58010000488B0DD3F6FFFF4939C90F85000000004C8B4E284C89AD600100004D8B69084983FD01720841817D00F08900000F85000000004D8B4D084889BD68010000488B7E3048899570010000488B57084883FA017206813AF08900000F8500000000488B7A084D85C90F84000000004885FF0F8400000000490FAFF90F80000000004C8B4E204889B578010000498B71084883FE017206813EF08900000F85000000004C8B4E084901F90F8000000000488BBD78010000488B7F1848898D80010000488B4F084883F90172068139F08900000F8500000000488B79084885FF0F84000000004C898D8801000049C1F93F48899590010000488B95880100004C31CA4C29CA4989F948C1FF3F4931F94929F94D85C90F840000000049BB00000000000000804C39DABF00000000400F94C748898D980100004983F9FFB900000000400F94C14821F94885C90F85000000004989D74D89CE4C89C34989F44889D74C89CE41BBB0CBAE0041FFD34883BD88010000000F8C000000004989C748C1F8034989C648C1E0034C89F94983F70849C1FF3F4839C8BA00000000400F95C24C21FA4C01F24C8BB59001000049894E084885DB0F84000000004989D748C1FA3F4C89F84931D74929D74889DA48C1FB3F4989D24831DA4829DA4885D20F840000000049BB00000000000000804D39DFBB00000000400F94C34883FAFF41B900000000410F94C14C21CB4885DB0F85000000004889CB488985300100004C899538010000488995880100004C898DA00100004C89FF4889D641BBB0CBAE0041FFD34883BD30010000000F8C00000000498B4D084885C90F84000000004885DB0F8400000000480FAFD90F8000000000498B4C24084801D90F8000000000488B9D980100004C8B43084D85C00F84000000004889CE48C1F93F4889F74831CE4829CE4C89C149C1F83F4C31C14C29C14885C90F840000000049BB00000000000000804C39DE41B800000000410F94C04883F9FF41BA00000000410F94C24D21C24D85D20F85000000004989FF488985300100004889B5A801000048898DB00100004889F74889CE41BBB0CBAE0041FFD34983FF000F8C000000004989C748C1F8034989C248C1E0034C89FF4983F70849C1FF3F4839F841B800000000410F95C04D21F84D01D04D89C249C1F83F4D89D74D31C24D29C249BB00000000000000804D39DA41B800000000410F94C04C2385A001000049897E084D85C00F85000000004889BDA00100004C8995A80100004C89D7488BB58801000041BBB0CBAE0041FFD34983FF000F8C000000004C8B8568010000498B50384883FA017206813A601400000F85000000004C8B4A084981F9004000000F8D00000000498B55084885D20F84000000004883BDA0010000000F8400000000480FAF95A00100000F8000000000498B7424084801D60F8000000000488B53084885D20F84000000004889F148C1FE3F4889CF4831F14829F14889D648C1FA3F4831D64829D64885F60F840000000049BB00000000000000804C39D9BA00000000400F94C24883FEFF41BA00000000410F94C24921D24D85D20F85000000004989FF488985380100004C898D8801000048898DA00100004889B5A80100004889CF41BBB0CBAE0041FFD34983FF000F8C000000004989C748C1F8034989C248C1E0034C89FF4983F70849C1FF3F4839F8BA00000000400F95C24C21FA4C01D249897E084883BD88010000000F84000000004989D248C1FA3F4D89D74931D24929D2488B958801000048C1FA3F488B85880100004831D04829D04885C00F840000000049BB00000000000000804D39DABA00000000400F94C24883F8FF41B800000000410F94C04921D04D85C00F85000000004889BDA00100004C8995A8010000488985B00100004C89D74889C641BBB0CBAE0041FFD34983FF000F8C000000004C8B8568010000498B50184883FA017206813A601400000F85000000004C8B4A084981F9004000000F8C00000000498B55084885D20F84000000004883BDA0010000000F8400000000480FAF95A00100000F80000000004D8B6C24084901D50F8000000000488B53084885D20F84000000004C89EB49C1FD3F4989DC4C31EB4C29EB4989D548C1FA3F4931D54929D54D85ED0F840000000049BB00000000000000804C39DBBA00000000400F94C24983FDFFB900000000400F94C14821D14885C90F85000000004D89C7488985880100004C898D980100004889DF4C89EE41BBB0CBAE0041FFD34983FC000F8C000000004989C448C1F8034889C348C1E0034D89E54983F40849C1FC3F4C39E8B900000000400F95C14C21E14801D94889CB48C1F93F4989DC4831CB4829CB4889D94881E3FF3F00004D896E084983FC000F8C000000004C8BAD700100004D8B7518498B46084883F80172068138B8B500000F85000000004C8B70104C8B05ABF1FFFF4D39C60F85000000004885DB0F84000000004989DE48C1E30E488B5020488B72084883FE017206813EA8B800000F8500000000488B7E10483BBD800100000F8500000000488B7E284C8B57084983FA01720741813AF08900000F85000000004D8B4A0848898580010000488B463048899590010000488B50084883FA017206813AF08900000F85000000004889B5A0010000488B72084D85C90F84000000004885F60F8400000000490FAFF10F80000000004C8B8DA00100004889BDA8010000498B79204C8995B00100004C8B57084983FA01720741813AF08900000F8500000000488985B8010000498B42084801F00F8000000000498B7118488995C0010000488B56084883FA017206813AF08900000F85000000004C8B4A084D85C90F8400000000488985C801000048C1F83F4889BDD0010000488BBDC80100004831C74829C74C89C849C1F93F4C31C84C29C84885C00F840000000049BB00000000000000804C39DF41B900000000410F94C14C8995D80100004883F8FF41BA00000000410F94C24D21CA4D85D20F85000000004989FD4989C44C8985700100004889B578010000488995E00100004889C641BBB0CBAE0041FFD34883BDC8010000000F8C000000004989C548C1F8034989C448C1E0034D89EA4983F50849C1FD3F4C39D0BF00000000400F95C74C21EF4C01E74989FC48C1FF3F4D89E54931FC4929FC4C89E74981E4FF3F0000488B85C00100004C8950084983FD000F8C000000004889D94C01E34C8B8D800100004D8B4118498B70084883FE017206813EB8B500000F8500000000488B959801000048C1FA0E4C8995C80100004C8B56104C3B95700100000F85000000004939F10F85000000004989D6488B0C25F091F900488D91C8000000483B14251092F9000F870302000048891425F091F90048C70160140000488D511048C702201600004C8D6A3049C74500901A01004D897D084C8BBD300100004D897D104C8BBD380100004D897D184D8D7D2049C707480E0000488BBD4001000049897F084D8D672849C70424B01E01004D8D54241849C702F0C20000488B856001000049894208488B0540EFFFFF49894210488B855801000049894218488B8550010000498942204D8954240849C7442410000000004D8967104C8BA5480100004D8967184C8B250AEFFFFF4D89672048897A084C8BA5980100004C8961084C896A104C897A184C8B3DF0EEFFFF4C897A204C8BBD880100004C897A284C898D480100004D89F74889D848898D30010000488995380100004C8B9D900100004C899D500100004C8B9DA00100004C899D580100004C8B9DA80100004C899D680100004C8B9DB00100004C899D700100004C8B9DB80100004C899D980100004C8B9DC00100004C899DA00100004C8B8DC80100004C8B9DD00100004C899D600100004C8B9D780100004C899D880100004C8B9DE00100004C899D900100004889BD400100004C8985800100004889B5A80100004C8B9DD80100004C899D7801000049BBF06DC0B64E7F000041FFE39048C7442408FFFFFF0049BBB085C0B64E7F00004C895D204D8D9B40FDFDFF41FFD3E908EEFFFF7811415149BBF081BEB64E7F000041FFD37905418049FF01E920F0FFFF49BB988FC0B64E7F00004C895D204D8D9B58FBFDFF41FFD3E9E8FDFFFFFF356AE8FFFF49BBC085C0B64E7F000041534D8D9B40FAFDFF41FFE3FF3556E8FFFF49BBD085C0B64E7F000041534D8D9B30FAFDFF41FFE3FF3542E8FFFF49BBE085C0B64E7F000041534D8D9B20FAFDFF41FFE3FF352EE8FFFF49BBF085C0B64E7F000041534D8D9B10FAFDFF41FFE3FF351AE8FFFF49BB0086C0B64E7F000041534D8D9B00FAFDFF41FFE3FF3506E8FFFF49BB1086C0B64E7F000041534D8D9BF0F9FDFF41FFE3FF35F2E7FFFF49BB2086C0B64E7F000041534D8D9BE0F9FDFF41FFE3FF35DEE7FFFF49BB3086C0B64E7F000041534D8D9BD0F9FDFF41FFE3FF35CAE7FFFF49BB4086C0B64E7F000041534D8D9BC0F9FDFF41FFE3FF35B6E7FFFF49BB5086C0B64E7F000041534D8D9BB0F9FDFF41FFE3FF35A2E7FFFF49BB6086C0B64E7F000041534D8D9BA0F9FDFF41FFE3FF358EE7FFFF49BB7086C0B64E7F000041534D8D9B90F9FDFF41FFE3FF357AE7FFFF49BB8086C0B64E7F000041534D8D9B80F9FDFF41FFE3FF3566E7FFFF49BB9086C0B64E7F000041534D8D9B70F9FDFF41FFE3FF3552E7FFFF49BBA086C0B64E7F000041534D8D9B60F9FDFF41FFE3FF353EE7FFFF49BBB086C0B64E7F000041534D8D9B50F9FDFF41FFE3FF352AE7FFFF49BBC086C0B64E7F000041534D8D9B40F9FDFF41FFE3FF3516E7FFFF49BBD086C0B64E7F000041534D8D9B30F9FDFF41FFE3FF3502E7FFFF49BBE086C0B64E7F000041534D8D9B20F9FDFF41FFE3FF35F6E6FFFF49BBF086C0B64E7F000041534D8D9B10F9FDFF41FFE3FF35E2E6FFFF49BB0087C0B64E7F000041534D8D9B00F9FDFF41FFE3FF35CEE6FFFF49BB1087C0B64E7F000041534D8D9BF0F8FDFF41FFE3FF35BAE6FFFF49BB2087C0B64E7F000041534D8D9BE0F8FDFF41FFE3FF35A6E6FFFF49BB3087C0B64E7F000041534D8D9BD0F8FDFF41FFE3FF3592E6FFFF49BB4087C0B64E7F000041534D8D9BC0F8FDFF41FFE3FF357EE6FFFF49BB5087C0B64E7F000041534D8D9BB0F8FDFF41FFE3FF356AE6FFFF49BB6087C0B64E7F000041534D8D9BA0F8FDFF41FFE3FF3556E6FFFF49BB7087C0B64E7F000041534D8D9B90F8FDFF41FFE3FF3542E6FFFF49BB8087C0B64E7F000041534D8D9B80F8FDFF41FFE3FF352EE6FFFF49BB9087C0B64E7F000041534D8D9B70F8FDFF41FFE3FF351AE6FFFF49BBA087C0B64E7F000041534D8D9B60F8FDFF41FFE3FF350EE6FFFF49BBB087C0B64E7F000041534D8D9B50F8FDFF41FFE3FF35FAE5FFFF49BBC087C0B64E7F000041534D8D9B40F8FDFF41FFE3FF35E6E5FFFF49BBD087C0B64E7F000041534D8D9B30F8FDFF41FFE3FF35D2E5FFFF49BBE087C0B64E7F000041534D8D9B20F8FDFF41FFE3FF35BEE5FFFF49BBF087C0B64E7F000041534D8D9B10F8FDFF41FFE3FF35AAE5FFFF49BB0088C0B64E7F000041534D8D9B00F8FDFF41FFE3FF359EE5FFFF49BB1088C0B64E7F000041534D8D9BF0F7FDFF41FFE3FF358AE5FFFF49BB2088C0B64E7F000041534D8D9BE0F7FDFF41FFE3FF3576E5FFFF49BB3088C0B64E7F000041534D8D9BD0F7FDFF41FFE3FF3562E5FFFF49BB4088C0B64E7F000041534D8D9BC0F7FDFF41FFE3FF354EE5FFFF49BB5088C0B64E7F000041534D8D9BB0F7FDFF41FFE3FF353AE5FFFF49BB6088C0B64E7F000041534D8D9BA0F7FDFF41FFE3FF352EE5FFFF49BB7088C0B64E7F000041534D8D9B90F7FDFF41FFE3FF3522E5FFFF49BB8088C0B64E7F000041534D8D9B80F7FDFF41FFE3FF350EE5FFFF49BB9088C0B64E7F000041534D8D9B70F7FDFF41FFE3FF35FAE4FFFF49BBA888C0B64E7F000041534D8D9B58F7FDFF41FFE3FF35E6E4FFFF49BBC888C0B64E7F000041534D8D9B48FCFDFF41FFE3FF35D2E4FFFF49BBD888C0B64E7F000041534D8D9B38FCFDFF41FFE3FF35BEE4FFFF49BBE888C0B64E7F000041534D8D9B28FCFDFF41FFE3FF35AAE4FFFF4D8D5B0841534D8D9B10FCFDFF41FFE3FF359CE4FFFF49BB1889C0B64E7F000041534D8D9BF8FBFDFF41FFE3FF3588E4FFFF49BB2889C0B64E7F000041534D8D9BE8FBFDFF41FFE3FF3574E4FFFF49BB3889C0B64E7F000041534D8D9BD8FBFDFF41FFE3FF3560E4FFFF49BB4889C0B64E7F000041534D8D9BC8FBFDFF41FFE3FF354CE4FFFF49BB5889C0B64E7F000041534D8D9BB8FBFDFF41FFE3FF3538E4FFFF49BB6889C0B64E7F000041534D8D9BA8FBFDFF41FFE3FF3524E4FFFF49BB7889C0B64E7F000041534D8D9B98FBFDFF41FFE3FF3510E4FFFF49BB8889C0B64E7F000041534D8D9B88FBFDFF41FFE3FF3504E4FFFF49BB9889C0B64E7F000041534D8D9B78FBFDFF41FFE3FF35F0E3FFFF49BBA889C0B64E7F000041534D8D9B68FBFDFF41FFE3FF35DCE3FFFF49BBB889C0B64E7F000041534D8D9B58FBFDFF41FFE3FF35C8E3FFFF49BBC889C0B64E7F000041534D8D9B48FBFDFF41FFE3FF35B4E3FFFF49BBD889C0B64E7F000041534D8D9B38FBFDFF41FFE3FF35A0E3FFFF49BBE889C0B64E7F000041534D8D9B28FBFDFF41FFE3FF358CE3FFFF49BBF889C0B64E7F000041534D8D9B18FBFDFF41FFE3FF3578E3FFFF49BB088AC0B64E7F000041534D8D9B08FBFDFF41FFE3FF3564E3FFFF49BB188AC0B64E7F000041534D8D9BF8FAFDFF41FFE3FF3550E3FFFF49BB288AC0B64E7F000041534D8D9BE8FAFDFF41FFE3FF353CE3FFFF49BB388AC0B64E7F000041534D8D9BD8FAFDFF41FFE3FF3528E3FFFF49BB488AC0B64E7F000041534D8D9BC8FAFDFF41FFE3FF351CE3FFFF49BB588AC0B64E7F000041534D8D9BB8FAFDFF41FFE3FF3508E3FFFF49BB688AC0B64E7F000041534D8D9BA8FAFDFF41FFE3FF35F4E2FFFF49BB788AC0B64E7F000041534D8D9B98FAFDFF41FFE3FF35E0E2FFFF49BB888AC0B64E7F000041534D8D9B88FAFDFF41FFE3FF35CCE2FFFF49BB988AC0B64E7F000041534D8D9B78FAFDFF41FFE3FF35C0E2FFFF49BBA88AC0B64E7F000041534D8D9B68FAFDFF41FFE3FF35ACE2FFFF49BBB88AC0B64E7F000041534D8D9B58FAFDFF41FFE3FF3598E2FFFF49BBC88AC0B64E7F000041534D8D9B48FAFDFF41FFE3FF358CE2FFFF49BBD88AC0B64E7F000041534D8D9B38FAFDFF41FFE3FF3578E2FFFF49BBE88AC0B64E7F000041534D8D9B28FAFDFF41FFE3FF3564E2FFFF49BBF88AC0B64E7F000041534D8D9B18FAFDFF41FFE3FF3558E2FFFF49BB088BC0B64E7F000041534D8D9B08FAFDFF41FFE3FF3544E2FFFF49BB188BC0B64E7F000041534D8D9BF8F9FDFF41FFE3FF3530E2FFFF49BB288BC0B64E7F000041534D8D9BE8F9FDFF41FFE3FF351CE2FFFF49BB388BC0B64E7F000041534D8D9BD8F9FDFF41FFE3FF3508E2FFFF49BB488BC0B64E7F000041534D8D9BC8F9FDFF41FFE3FF35F4E1FFFF49BB588BC0B64E7F000041534D8D9BB8F9FDFF41FFE3FF35E0E1FFFF49BB688BC0B64E7F000041534D8D9BA8F9FDFF41FFE3FF35CCE1FFFF49BB788BC0B64E7F000041534D8D9B98F9FDFF41FFE3FF35B8E1FFFF49BB888BC0B64E7F000041534D8D9B88F9FDFF41FFE3FF35A4E1FFFF49BB988BC0B64E7F000041534D8D9B78F9FDFF41FFE3FF3590E1FFFF49BBA88BC0B64E7F000041534D8D9B68F9FDFF41FFE3FF357CE1FFFF49BBB88BC0B64E7F000041534D8D9B58F9FDFF41FFE3FF3568E1FFFF49BBC88BC0B64E7F000041534D8D9B38F4FDFF41FFE3FF3554E1FFFF49BBD88BC0B64E7F000041534D8D9B28F4FDFF41FFE3FF3540E1FFFF49BBE88BC0B64E7F000041534D8D9B18F4FDFF41FFE3FF352CE1FFFF49BBF88BC0B64E7F000041534D8D9B08F4FDFF41FFE3FF3518E1FFFF49BB088CC0B64E7F000041534D8D9BF8F3FDFF41FFE3FF3504E1FFFF49BB188CC0B64E7F000041534D8D9BE8F3FDFF41FFE3FF35F0E0FFFF49BB288CC0B64E7F000041534D8D9BD8F3FDFF41FFE3FF35DCE0FFFF49BB388CC0B64E7F000041534D8D9BC8F3FDFF41FFE3FF35C8E0FFFF49BB488CC0B64E7F000041534D8D9BB8F3FDFF41FFE3FF35B4E0FFFF49BB588CC0B64E7F000041534D8D9BA8F3FDFF41FFE3FF35A0E0FFFF49BB688CC0B64E7F000041534D8D9B98F3FDFF41FFE3FF358CE0FFFF49BB788CC0B64E7F000041534D8D9B88F3FDFF41FFE3FF3578E0FFFF49BB888CC0B64E7F000041534D8D9B78F3FDFF41FFE3FF3564E0FFFF49BB988CC0B64E7F000041534D8D9B68F3FDFF41FFE3FF3550E0FFFF49BBA88CC0B64E7F000041534D8D9B58F3FDFF41FFE3FF353CE0FFFF49BBB88CC0B64E7F000041534D8D9B48F3FDFF41FFE3FF3528E0FFFF49BBC88CC0B64E7F000041534D8D9B38F3FDFF41FFE3FF3514E0FFFF49BBD88CC0B64E7F000041534D8D9B28F3FDFF41FFE3FF3500E0FFFF49BBE88CC0B64E7F000041534D8D9B18F3FDFF41FFE3FF35ECDFFFFF49BBF88CC0B64E7F000041534D8D9B08F3FDFF41FFE3FF35D8DFFFFF49BB088DC0B64E7F000041534D8D9BF8F2FDFF41FFE3FF35C4DFFFFF49BB188DC0B64E7F000041534D8D9BE8F2FDFF41FFE3FF35B0DFFFFF49BB288DC0B64E7F000041534D8D9BD8F2FDFF41FFE3FF359CDFFFFF49BB388DC0B64E7F000041534D8D9BC8F2FDFF41FFE3FF3588DFFFFF49BB488DC0B64E7F000041534D8D9BB8F2FDFF41FFE3FF3574DFFFFF49BB588DC0B64E7F000041534D8D9BA8F2FDFF41FFE3FF3560DFFFFF49BB688DC0B64E7F000041534D8D9B98F2FDFF41FFE3FF354CDFFFFF49BB788DC0B64E7F000041534D8D9B88F2FDFF41FFE3FF3538DFFFFF49BB888DC0B64E7F000041534D8D9B78F2FDFF41FFE3FF3524DFFFFF49BB988DC0B64E7F000041534D8D9B68F2FDFF41FFE3FF3510DFFFFF49BBA88DC0B64E7F000041534D8D9B58F2FDFF41FFE3FF35FCDEFFFF49BBB88DC0B64E7F000041534D8D9B48F2FDFF41FFE3FF35E8DEFFFF49BBC88DC0B64E7F000041534D8D9B38F2FDFF41FFE3FF35D4DEFFFF49BBD88DC0B64E7F000041534D8D9B28F2FDFF41FFE3FF35C0DEFFFF49BBE88DC0B64E7F000041534D8D9B18F2FDFF41FFE3FF35ACDEFFFF49BBF88DC0B64E7F000041534D8D9B08F2FDFF41FFE3FF3598DEFFFF49BB088EC0B64E7F000041534D8D9BF8F1FDFF41FFE3FF3584DEFFFF49BB188EC0B64E7F000041534D8D9BE8F1FDFF41FFE3FF3570DEFFFF49BB288EC0B64E7F000041534D8D9BD8F1FDFF41FFE3FF355CDEFFFF49BB388EC0B64E7F000041534D8D9BC8F1FDFF41FFE3FF3548DEFFFF49BB488EC0B64E7F000041534D8D9BB8F1FDFF41FFE3FF353CDEFFFF49BB588EC0B64E7F000041534D8D9BA8F1FDFF41FFE3FF3528DEFFFF49BB688EC0B64E7F000041534D8D9B98F1FDFF41FFE3FF3514DEFFFF49BB788EC0B64E7F000041534D8D9B88F1FDFF41FFE3FF3500DEFFFF49BB888EC0B64E7F000041534D8D9B78F1FDFF41FFE3FF35ECDDFFFF49BB988EC0B64E7F000041534D8D9B68F1FDFF41FFE3FF35D8DDFFFF49BBA88EC0B64E7F000041534D8D9B58F1FDFF41FFE3FF35C4DDFFFF49BBB88EC0B64E7F000041534D8D9B48F1FDFF41FFE3FF35B0DDFFFF49BBC88EC0B64E7F000041534D8D9B38F1FDFF41FFE3FF359CDDFFFF49BBD88EC0B64E7F000041534D8D9B28F1FDFF41FFE3FF3588DDFFFF49BBE88EC0B64E7F000041534D8D9B18F1FDFF41FFE3FF3574DDFFFF49BBF88EC0B64E7F000041534D8D9B08F1FDFF41FFE3FF3560DDFFFF49BB088FC0B64E7F000041534D8D9BF8F0FDFF41FFE3FF354CDDFFFF49BB188FC0B64E7F000041534D8D9BE8F0FDFF41FFE3FF3538DDFFFF49BB288FC0B64E7F000041534D8D9BD8F0FDFF41FFE3FF3524DDFFFF49BB388FC0B64E7F000041534D8D9BC8F0FDFF41FFE3FF3510DDFFFF49BB488FC0B64E7F000041534D8D9BB8F0FDFF41FFE3FF35FCDCFFFF49BB588FC0B64E7F000041534D8D9BA8F0FDFF41FFE3FF35E8DCFFFF49BB688FC0B64E7F000041534D8D9B98F0FDFF41FFE3FF35D4DCFFFF49BB788FC0B64E7F000041534D8D9B88F0FDFF41FFE3FF35C0DCFFFF49BB888FC0B64E7F000041534D8D9B78F0FDFF41FFE3
[3e4c20ebce303a4] jit-backend-dump}
[3e4c20ebce4ac3b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09504 +0  33000000
[3e4c20ebce4c587] jit-backend-dump}
[3e4c20ebce50e20] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a6e5 +0  33000000
[3e4c20ebce51d41] jit-backend-dump}
[3e4c20ebce55453] {jit-backend-addr
bridge out of Guard 0x405e140 has address 0x7f4eb6c09500 to 0x7f4eb6c0a6e0
       gc table: 0x7f4eb6c08fb0
    jump target: 0x7f4eb6c09500
         resops: 0x7f4eb6c0950e
       failures: 0x7f4eb6c0a6e0
            end: 0x7f4eb6c0b82e
[3e4c20ebce57dfa] jit-backend-addr}
[3e4c20ebce5b8ab] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09527 +0  31120000
[3e4c20ebce5c6c7] jit-backend-dump}
[3e4c20ebce5fbe4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09539 +0  3B120000
[3e4c20ebce608ea] jit-backend-dump}
[3e4c20ebce63cf9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0954f +0  41120000
[3e4c20ebce64a64] jit-backend-dump}
[3e4c20ebce67df0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0956d +0  3F120000
[3e4c20ebce68ae7] jit-backend-dump}
[3e4c20ebce6be73] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0957c +0  4C120000
[3e4c20ebce6cb45] jit-backend-dump}
[3e4c20ebce70119] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0958e +0  56120000
[3e4c20ebce70e68] jit-backend-dump}
[3e4c20ebce74335] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c095a5 +0  5B120000
[3e4c20ebce7503b] jit-backend-dump}
[3e4c20ebce78365] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c095c0 +0  5C120000
[3e4c20ebce79056] jit-backend-dump}
[3e4c20ebce7c38f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c095d1 +0  67120000
[3e4c20ebce7d092] jit-backend-dump}
[3e4c20ebce803d8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c095e6 +0  6E120000
[3e4c20ebce810bf] jit-backend-dump}
[3e4c20ebce843ec] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c095f3 +0  7D120000
[3e4c20ebce850c1] jit-backend-dump}
[3e4c20ebce8847b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c095fd +0  8F120000
[3e4c20ebce891b2] jit-backend-dump}
[3e4c20ebce8c516] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0960e +0  9A120000
[3e4c20ebce8d1eb] jit-backend-dump}
[3e4c20ebce90568] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0961c +0  A8120000
[3e4c20ebce91243] jit-backend-dump}
[3e4c20ebce945a4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0962e +0  B2120000
[3e4c20ebce952aa] jit-backend-dump}
[3e4c20ebce988bb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09643 +0  B9120000
[3e4c20ebce995a9] jit-backend-dump}
[3e4c20ebce9ca42] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09650 +0  C8120000
[3e4c20ebce9d745] jit-backend-dump}
[3e4c20ebcea0bce] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09672 +0  C2120000
[3e4c20ebcea188e] jit-backend-dump}
[3e4c20ebcea4c32] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09686 +0  CA120000
[3e4c20ebcea5926] jit-backend-dump}
[3e4c20ebcea8c87] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0968f +0  DD120000
[3e4c20ebcea9996] jit-backend-dump}
[3e4c20ebceaccc6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c096a0 +0  E8120000
[3e4c20ebcead9e8] jit-backend-dump}
[3e4c20ebceb0d92] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c096ae +0  F6120000
[3e4c20ebceb1a89] jit-backend-dump}
[3e4c20ebceb4dad] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c096be +0  02130000
[3e4c20ebceb5ab6] jit-backend-dump}
[3e4c20ebceb8e1a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c096d3 +0  09130000
[3e4c20ebceb9b6a] jit-backend-dump}
[3e4c20ebcebcf20] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c096e0 +0  18130000
[3e4c20ebcebdc5a] jit-backend-dump}
[3e4c20ebcec0fdd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c096f0 +0  24130000
[3e4c20ebcec1cd1] jit-backend-dump}
[3e4c20ebcec5053] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c096fe +0  32130000
[3e4c20ebcec5d4d] jit-backend-dump}
[3e4c20ebcec90b1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0970f +0  3D130000
[3e4c20ebcec9dab] jit-backend-dump}
[3e4c20ebcecd10f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09723 +0  45130000
[3e4c20ebcecdde7] jit-backend-dump}
[3e4c20ebced116a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09730 +0  54130000
[3e4c20ebced1e70] jit-backend-dump}
[3e4c20ebced5239] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09753 +0  4D130000
[3e4c20ebced5f33] jit-backend-dump}
[3e4c20ebced92ac] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09768 +0  54130000
[3e4c20ebced9f94] jit-backend-dump}
[3e4c20ebcedd293] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0977f +0  59130000
[3e4c20ebceddf8d] jit-backend-dump}
[3e4c20ebcee1337] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0978d +0  67130000
[3e4c20ebcee2012] jit-backend-dump}
[3e4c20ebcee53aa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0979e +0  72130000
[3e4c20ebcee60ba] jit-backend-dump}
[3e4c20ebcee942d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c097af +0  7D130000
[3e4c20ebceea0f9] jit-backend-dump}
[3e4c20ebceed4c2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c097c3 +0  85130000
[3e4c20ebceee19a] jit-backend-dump}
[3e4c20ebcef1504] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c097dd +0  87130000
[3e4c20ebcef21d3] jit-backend-dump}
[3e4c20ebcef551f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c097eb +0  95130000
[3e4c20ebcef6247] jit-backend-dump}
[3e4c20ebcef9592] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09805 +0  97130000
[3e4c20ebcefa274] jit-backend-dump}
[3e4c20ebcefd5c2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09812 +0  A6130000
[3e4c20ebcefe2c5] jit-backend-dump}
[3e4c20ebcf0161d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0985a +0  7A130000
[3e4c20ebcf022e3] jit-backend-dump}
[3e4c20ebcf056be] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09873 +0  7D130000
[3e4c20ebcf063a3] jit-backend-dump}
[3e4c20ebcf09707] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09887 +0  85130000
[3e4c20ebcf0a3fa] jit-backend-dump}
[3e4c20ebcf0d83b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0989d +0  8B130000
[3e4c20ebcf0e504] jit-backend-dump}
[3e4c20ebcf11849] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c098c2 +0  82130000
[3e4c20ebcf12527] jit-backend-dump}
[3e4c20ebcf15885] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09912 +0  4E130000
[3e4c20ebcf1657c] jit-backend-dump}
[3e4c20ebcf19887] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0991b +0  61130000
[3e4c20ebcf1a56f] jit-backend-dump}
[3e4c20ebcf1d899] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0992c +0  6C130000
[3e4c20ebcf1e5ee] jit-backend-dump}
[3e4c20ebcf2192e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09941 +0  73130000
[3e4c20ebcf2261b] jit-backend-dump}
[3e4c20ebcf25927] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09953 +0  77130000
[3e4c20ebcf26627] jit-backend-dump}
[3e4c20ebcf299bc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09962 +0  84130000
[3e4c20ebcf2a688] jit-backend-dump}
[3e4c20ebcf2d9be] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0996f +0  93130000
[3e4c20ebcf2e6c4] jit-backend-dump}
[3e4c20ebcf319c9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09978 +0  A6130000
[3e4c20ebcf326a4] jit-backend-dump}
[3e4c20ebcf359b3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09982 +0  B8130000
[3e4c20ebcf366a3] jit-backend-dump}
[3e4c20ebcf39ac2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09996 +0  C0130000
[3e4c20ebcf3a788] jit-backend-dump}
[3e4c20ebcf3dacd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c099ae +0  C4130000
[3e4c20ebcf3e7c4] jit-backend-dump}
[3e4c20ebcf41b37] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c099bb +0  D3130000
[3e4c20ebcf42803] jit-backend-dump}
[3e4c20ebcf45b6a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c099d6 +0  D4130000
[3e4c20ebcf468a8] jit-backend-dump}
[3e4c20ebcf49c40] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c099ec +0  DA130000
[3e4c20ebcf4a912] jit-backend-dump}
[3e4c20ebcf4dc48] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c099fc +0  E6130000
[3e4c20ebcf4e93c] jit-backend-dump}
[3e4c20ebcf51cf5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09a0c +0  F2130000
[3e4c20ebcf529c4] jit-backend-dump}
[3e4c20ebcf55d0d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09a22 +0  F8130000
[3e4c20ebcf569f1] jit-backend-dump}
[3e4c20ebcf59d4f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09a32 +0  04140000
[3e4c20ebcf5aa40] jit-backend-dump}
[3e4c20ebcf5dd57] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09a4a +0  08140000
[3e4c20ebcf5ea51] jit-backend-dump}
[3e4c20ebcf61dcb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09a57 +0  17140000
[3e4c20ebcf62a97] jit-backend-dump}
[3e4c20ebcf65de8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09a73 +0  17140000
[3e4c20ebcf66acd] jit-backend-dump}
[3e4c20ebcf69e71] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09a80 +0  26140000
[3e4c20ebcf6ab3a] jit-backend-dump}
[3e4c20ebcf6decc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09a8a +0  38140000
[3e4c20ebcf6eba7] jit-backend-dump}
[3e4c20ebcf71f5b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09aa4 +0  3A140000
[3e4c20ebcf72c24] jit-backend-dump}
[3e4c20ebcf75f63] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09ab8 +0  42140000
[3e4c20ebcf76c3e] jit-backend-dump}
[3e4c20ebcf79f9c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09ace +0  48140000
[3e4c20ebcf7ac68] jit-backend-dump}
[3e4c20ebcf7dfa4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09ae1 +0  51140000
[3e4c20ebcf7ec89] jit-backend-dump}
[3e4c20ebcf82070] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09af1 +0  5D140000
[3e4c20ebcf82dcc] jit-backend-dump}
[3e4c20ebcf8614c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09b07 +0  63140000
[3e4c20ebcf86e2a] jit-backend-dump}
[3e4c20ebcf8a1b0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09b22 +0  64140000
[3e4c20ebcf8aeb9] jit-backend-dump}
[3e4c20ebcf8e232] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09b38 +0  6A140000
[3e4c20ebcf8ef0a] jit-backend-dump}
[3e4c20ebcf922d0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09b59 +0  65140000
[3e4c20ebcf92fd0] jit-backend-dump}
[3e4c20ebcf96337] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09b78 +0  62140000
[3e4c20ebcf97031] jit-backend-dump}
[3e4c20ebcf9a3b4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09b85 +0  71140000
[3e4c20ebcf9b0cc] jit-backend-dump}
[3e4c20ebcf9e427] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09b9f +0  73140000
[3e4c20ebcf9f12a] jit-backend-dump}
[3e4c20ebcfa24b9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09bba +0  74140000
[3e4c20ebcfa3188] jit-backend-dump}
[3e4c20ebcfa64c1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09bdd +0  6D140000
[3e4c20ebcfa71ca] jit-backend-dump}
[3e4c20ebcfaa522] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09c09 +0  5D140000
[3e4c20ebcfab1f7] jit-backend-dump}
[3e4c20ebcfae59f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09c16 +0  6C140000
[3e4c20ebcfaf271] jit-backend-dump}
[3e4c20ebcfb25db] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09c1f +0  7F140000
[3e4c20ebcfb329e] jit-backend-dump}
[3e4c20ebcfb665a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09c29 +0  91140000
[3e4c20ebcfb7339] jit-backend-dump}
[3e4c20ebcfba6d7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09c4a +0  8C140000
[3e4c20ebcfbb3b2] jit-backend-dump}
[3e4c20ebcfbe704] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09c57 +0  9B140000
[3e4c20ebcfbf3dc] jit-backend-dump}
[3e4c20ebcfc2740] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09c7f +0  8F140000
[3e4c20ebcfc3409] jit-backend-dump}
[3e4c20ebcfc672a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09c8c +0  9E140000
[3e4c20ebcfc742d] jit-backend-dump}
[3e4c20ebcfca794] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09cc1 +0  85140000
[3e4c20ebcfcb45d] jit-backend-dump}
[3e4c20ebcfce8bf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09cf7 +0  6B140000
[3e4c20ebcfcf5d1] jit-backend-dump}
[3e4c20ebcfd2a2d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09d20 +0  5E140000
[3e4c20ebcfd3770] jit-backend-dump}
[3e4c20ebcfd6b39] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09d5f +0  3B140000
[3e4c20ebcfd7830] jit-backend-dump}
[3e4c20ebcfdab8b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09d88 +0  2E140000
[3e4c20ebcfdb875] jit-backend-dump}
[3e4c20ebcfdeb9f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09db8 +0  1A140000
[3e4c20ebcfdf893] jit-backend-dump}
[3e4c20ebcfe2c25] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09df4 +0  FA130000
[3e4c20ebcfe3922] jit-backend-dump}
[3e4c20ebcfe6ca4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09e01 +0  09140000
[3e4c20ebcfe79b4] jit-backend-dump}
[3e4c20ebcfead86] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09e0a +0  1C140000
[3e4c20ebcfebac9] jit-backend-dump}
[3e4c20ebcfeefd3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09e14 +0  2E140000
[3e4c20ebcfefcdc] jit-backend-dump}
[3e4c20ebcff313e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09e22 +0  3C140000
[3e4c20ebcff3e47] jit-backend-dump}
[3e4c20ebcff737c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09e36 +0  44140000
[3e4c20ebcff8092] jit-backend-dump}
[3e4c20ebcffb464] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09e5c +0  3A140000
[3e4c20ebcffc161] jit-backend-dump}
[3e4c20ebcfff497] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09e8d +0  25140000
[3e4c20ebd000295] jit-backend-dump}
[3e4c20ebd003602] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09ebe +0  10140000
[3e4c20ebd00431a] jit-backend-dump}
[3e4c20ebd00766f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09f25 +0  C5130000
[3e4c20ebd0083a0] jit-backend-dump}
[3e4c20ebd00b701] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09f50 +0  B6130000
[3e4c20ebd00c426] jit-backend-dump}
[3e4c20ebd00f7f5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09f6d +0  B5130000
[3e4c20ebd0104f8] jit-backend-dump}
[3e4c20ebd0138cd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09f7e +0  C0130000
[3e4c20ebd0145f5] jit-backend-dump}
[3e4c20ebd01797a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09f8b +0  CF130000
[3e4c20ebd018699] jit-backend-dump}
[3e4c20ebd01ba74] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09f99 +0  DD130000
[3e4c20ebd01c7bb] jit-backend-dump}
[3e4c20ebd01fb59] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09fa7 +0  EB130000
[3e4c20ebd02086b] jit-backend-dump}
[3e4c20ebd023c0c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09fb5 +0  F9130000
[3e4c20ebd02493a] jit-backend-dump}
[3e4c20ebd027ce8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09fc2 +0  08140000
[3e4c20ebd028a0c] jit-backend-dump}
[3e4c20ebd02bd83] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c09fe8 +0  FE130000
[3e4c20ebd02cab7] jit-backend-dump}
[3e4c20ebd02feba] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a018 +0  EA130000
[3e4c20ebd030c50] jit-backend-dump}
[3e4c20ebd0340d0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a04d +0  D1130000
[3e4c20ebd034def] jit-backend-dump}
[3e4c20ebd038150] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a08a +0  B0130000
[3e4c20ebd038e7a] jit-backend-dump}
[3e4c20ebd03c200] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a0bb +0  9B130000
[3e4c20ebd03cefa] jit-backend-dump}
[3e4c20ebd0402a7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a0eb +0  87130000
[3e4c20ebd040fb4] jit-backend-dump}
[3e4c20ebd044355] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a119 +0  75130000
[3e4c20ebd045058] jit-backend-dump}
[3e4c20ebd048402] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a136 +0  74130000
[3e4c20ebd049130] jit-backend-dump}
[3e4c20ebd04f81d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a147 +0  7F130000
[3e4c20ebd0507ec] jit-backend-dump}
[3e4c20ebd0541df] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a154 +0  8E130000
[3e4c20ebd054fb8] jit-backend-dump}
[3e4c20ebd0584bf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a162 +0  9C130000
[3e4c20ebd059283] jit-backend-dump}
[3e4c20ebd05c6bd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a170 +0  AA130000
[3e4c20ebd05d3eb] jit-backend-dump}
[3e4c20ebd0607e8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a17e +0  B8130000
[3e4c20ebd0614bd] jit-backend-dump}
[3e4c20ebd0647bf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a18b +0  C7130000
[3e4c20ebd0654ad] jit-backend-dump}
[3e4c20ebd0688b9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a1b1 +0  BD130000
[3e4c20ebd0695cb] jit-backend-dump}
[3e4c20ebd06c917] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a1e0 +0  AA130000
[3e4c20ebd06d694] jit-backend-dump}
[3e4c20ebd070aed] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a20a +0  9C130000
[3e4c20ebd071849] jit-backend-dump}
[3e4c20ebd074c40] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a25d +0  65130000
[3e4c20ebd07594c] jit-backend-dump}
[3e4c20ebd078cfc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a27e +0  60130000
[3e4c20ebd0799ff] jit-backend-dump}
[3e4c20ebd07ce58] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a292 +0  68130000
[3e4c20ebd07db80] jit-backend-dump}
[3e4c20ebd080ebf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a29b +0  7B130000
[3e4c20ebd081bc5] jit-backend-dump}
[3e4c20ebd084f14] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a2bc +0  76130000
[3e4c20ebd085c20] jit-backend-dump}
[3e4c20ebd088f6f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a2cd +0  81130000
[3e4c20ebd089c78] jit-backend-dump}
[3e4c20ebd08cf92] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a2e8 +0  82130000
[3e4c20ebd08dcc6] jit-backend-dump}
[3e4c20ebd090f88] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a314 +0  72130000
[3e4c20ebd091c98] jit-backend-dump}
[3e4c20ebd094fa0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a328 +0  7A130000
[3e4c20ebd095cb8] jit-backend-dump}
[3e4c20ebd098fa5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a331 +0  8D130000
[3e4c20ebd099cd9] jit-backend-dump}
[3e4c20ebd09d009] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a33b +0  9F130000
[3e4c20ebd09dd34] jit-backend-dump}
[3e4c20ebd0a1045] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a36b +0  8B130000
[3e4c20ebd0a1daa] jit-backend-dump}
[3e4c20ebd0a50ce] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a37f +0  93130000
[3e4c20ebd0a5dcb] jit-backend-dump}
[3e4c20ebd0a912c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a3a0 +0  8E130000
[3e4c20ebd0a9e35] jit-backend-dump}
[3e4c20ebd0ad137] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a3ad +0  9D130000
[3e4c20ebd0ade53] jit-backend-dump}
[3e4c20ebd0b114f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a3e2 +0  84130000
[3e4c20ebd0b1e4f] jit-backend-dump}
[3e4c20ebd0b5157] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a41a +0  68130000
[3e4c20ebd0b5ee7] jit-backend-dump}
[3e4c20ebd0b91e6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a44f +0  4F130000
[3e4c20ebd0b9efe] jit-backend-dump}
[3e4c20ebd0bd225] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a4a9 +0  11130000
[3e4c20ebd0bdf34] jit-backend-dump}
[3e4c20ebd0c121e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a4d0 +0  06130000
[3e4c20ebd0c1f2d] jit-backend-dump}
[3e4c20ebd0c5266] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a4f3 +0  FF120000
[3e4c20ebd0c5f7f] jit-backend-dump}
[3e4c20ebd0c9296] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0a4fc +0  12130000
[3e4c20ebd0c9f90] jit-backend-dump}
[3e4c20ebd0cd707] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0297a +0  826B0000
[3e4c20ebd0ce41d] jit-backend-dump}
[3e4c20ebd0d35a0] jit-backend}
[3e4c20ebd0d756b] {jit-log-opt-bridge
# bridge out of Guard 0x405e140 with 709 ops
[p0, p1, p2, p3, p4]
+1382: guard_not_invalidated(descr=<Guard0xa8ac020>) [p0, p1, p2, p3, p4]
+1382: i5 = getfield_gc_i(p1, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1393: i7 = int_lt(0, i5)
+1397: guard_true(i7, descr=<Guard0xa8ae020>) [p0, p1, p2, p3, p4]
+1403: p8 = getfield_gc_r(p1, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1407: guard_class(p8, 16622984, descr=<Guard0xa8ae068>) [p0, p1, p2, p3, p4]
+1421: p10 = getfield_gc_r(p1, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1425: p12 = getarrayitem_gc_r(p10, 0, descr=<ArrayP 8>)
+1429: guard_class(p12, ConstClass(W_Vector), descr=<Guard0xa8ae0b0>) [p0, p1, p2, p3, p4]
debug_merge_point(0, 0, '(let ([canGoLeft (if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)][AppRand38 (vector-ref full 1)]) (let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))))')
+1443: p14 = getfield_gc_r(p3, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1454: guard_nonnull_class(p14, ConstClass(ForwardLink), descr=<Guard0xa8ac080>) [p0, p1, p2, p3, p4]
debug_merge_point(0, 0, '(if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)')
+1473: i16 = getfield_gc_i(p2, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed10.inst_vals_fixed_0 24 pure>)
debug_merge_point(0, 0, '(let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37)))')
debug_merge_point(0, 0, 'partial')
+1473: p17 = getfield_gc_r(p2, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(vector-ref full 0)')
debug_merge_point(0, 0, '(let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))')
debug_merge_point(0, 0, '(vector-ref AppRand35 2)')
+1473: i18 = getfield_gc_i(p12, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1478: i20 = int_lt(2, i18)
+1482: guard_true(i20, descr=<Guard0xa8ae0f8>) [p0, p1, p2, p3, p4]
+1488: p21 = getfield_gc_r(p12, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1493: guard_class(p21, 16622984, descr=<Guard0xa8ae140>) [p0, p1, p2, p3, p4]
+1506: p23 = getfield_gc_r(p12, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1511: p25 = getarrayitem_gc_r(p23, 2, descr=<ArrayP 8>)
+1515: guard_class(p25, ConstClass(W_Fixnum), descr=<Guard0xa8ae188>) [p0, p1, p2, p3, p4]
+1529: i27 = getfield_gc_i(p25, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(vector-ref partial 2)')
+1534: i28 = getfield_gc_i(p0, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1546: i30 = int_lt(2, i28)
+1550: guard_true(i30, descr=<Guard0xa8ae1d0>) [p0, p1, p2, p3, p4]
+1556: p31 = getfield_gc_r(p0, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1561: guard_class(p31, 16622984, descr=<Guard0xa8ae218>) [p0, p1, p2, p3, p4]
+1573: p33 = getfield_gc_r(p0, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1578: p35 = getarrayitem_gc_r(p33, 2, descr=<ArrayP 8>)
+1582: guard_class(p35, ConstClass(W_Fixnum), descr=<Guard0xa8ae260>) [p0, p1, p2, p3, p4]
+1594: i37 = getfield_gc_i(p35, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(> AppRand36 AppRand37)')
+1598: i38 = int_gt(i27, i37)
+1601: guard_true(i38, descr=<Guard0xa8ae2a8>) [p0, p1, p2, p3, p4]
debug_merge_point(0, 0, '(vector-ref full 1)')
+1607: i40 = int_lt(1, i5)
+1611: guard_true(i40, descr=<Guard0xa8ae2f0>) [p0, p1, p2, p3, p4]
+1617: p42 = getarrayitem_gc_r(p10, 1, descr=<ArrayP 8>)
+1621: guard_class(p42, ConstClass(W_Vector), descr=<Guard0xa8ae338>) [p0, p1, p2, p3, p4]
debug_merge_point(0, 0, '(let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial)))))))')
debug_merge_point(0, 0, '(if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)')
debug_merge_point(0, 0, '(let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41)))')
debug_merge_point(0, 0, 'partial')
debug_merge_point(0, 0, '(vector-ref full 1)')
debug_merge_point(0, 0, '(let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))')
debug_merge_point(0, 0, '(vector-ref AppRand39 2)')
+1634: i44 = getfield_gc_i(p42, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1638: i46 = int_lt(2, i44)
+1642: guard_true(i46, descr=<Guard0xa8ae380>) [p0, p1, p2, p3, p4]
+1648: p47 = getfield_gc_r(p42, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1652: guard_class(p47, 16622984, descr=<Guard0xa8ae3c8>) [p0, p1, p2, p3, p4]
+1666: p49 = getfield_gc_r(p42, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1670: p51 = getarrayitem_gc_r(p49, 2, descr=<ArrayP 8>)
+1674: guard_class(p51, ConstClass(W_Fixnum), descr=<Guard0xa8ae410>) [p0, p1, p2, p3, p4]
+1687: i53 = getfield_gc_i(p51, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(vector-ref partial 2)')
debug_merge_point(0, 0, '(> AppRand40 AppRand41)')
+1691: i54 = int_gt(i53, i37)
+1694: guard_true(i54, descr=<Guard0xa8ae458>) [p0, p1, p2, p3, p4]
debug_merge_point(0, 0, '(let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))')
debug_merge_point(0, 0, '(if canGoLeft canGoRight #f)')
debug_merge_point(0, 0, 'canGoRight')
debug_merge_point(0, 0, '(if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial)))))')
debug_merge_point(0, 0, '(if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir))))')
debug_merge_point(0, 0, '(let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir)))')
debug_merge_point(0, 0, '(vector-ref full 0)')
debug_merge_point(0, 0, '(CellRef(replaceTreeWork) AppRand42 partial (not dir))')
+1700: p55 = getfield_gc_r(p2, descr=<FieldP pycket.small_list.W_Closure1AsEnvSize2Fixed10.inst_w_val1 32 pure>)
+1711: p56 = getfield_gc_r(p55, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1715: guard_nonnull_class(p56, 16482208, descr=<Guard0xa8ac0e0>) [p0, p1, p2, p3, p4]
+1734: p58 = getfield_gc_r(p56, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1745: guard_value(p58, ConstPtr(ptr59), descr=<Guard0xa8ae4a0>) [p0, p1, p2, p3, p4]
+1754: i60 = instance_ptr_eq(p2, p56)
+1757: guard_true(i60, descr=<Guard0xa8ae4e8>) [p0, p1, p2, p3, p4]
debug_merge_point(0, 0, '(let ([AppRand34 (vector-ref full 0)]) (let ([canGoLeft (if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)][AppRand38 (vector-ref full 1)]) (let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))))) from (CellRef(replaceTreeWork) AppRand42 partial (not dir))')
debug_merge_point(0, 0, '(vector-ref full 0)')
+1763: p62 = getarrayitem_gc_r(p23, 0, descr=<ArrayP 8>)
+1767: guard_class(p62, ConstClass(W_Vector), descr=<Guard0xa8ae530>) [p0, p1, p2, p3, p4]
debug_merge_point(0, 0, '(let ([canGoLeft (if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)][AppRand38 (vector-ref full 1)]) (let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))))')
debug_merge_point(0, 0, '(if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)')
debug_merge_point(0, 0, '(let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37)))')
debug_merge_point(0, 0, 'partial')
debug_merge_point(0, 0, '(vector-ref full 0)')
debug_merge_point(0, 0, '(let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))')
debug_merge_point(0, 0, '(vector-ref AppRand35 2)')
+1780: i64 = getfield_gc_i(p62, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1784: i66 = int_lt(2, i64)
+1788: guard_true(i66, descr=<Guard0xa8ae578>) [p0, p1, p2, p3, p4]
+1794: p67 = getfield_gc_r(p62, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1798: guard_class(p67, 16622984, descr=<Guard0xa8ae5c0>) [p0, p1, p2, p3, p4]
+1810: p69 = getfield_gc_r(p62, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1814: p71 = getarrayitem_gc_r(p69, 2, descr=<ArrayP 8>)
+1818: guard_class(p71, ConstClass(W_Fixnum), descr=<Guard0xa8ae608>) [p0, p1, p2, p3, p4]
+1831: i73 = getfield_gc_i(p71, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(vector-ref partial 2)')
debug_merge_point(0, 0, '(> AppRand36 AppRand37)')
+1835: i74 = int_gt(i73, i37)
+1838: guard_false(i74, descr=<Guard0xa8ae650>) [p0, p1, p2, p3, p4]
debug_merge_point(0, 0, '(vector-ref full 1)')
+1844: p76 = getarrayitem_gc_r(p23, 1, descr=<ArrayP 8>)
+1848: guard_class(p76, ConstClass(W_Vector), descr=<Guard0xa8ae698>) [p0, p1, p2, p3, p4]
debug_merge_point(0, 0, '(let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial)))))))')
debug_merge_point(0, 0, '(if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)')
debug_merge_point(0, 0, '(let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41)))')
debug_merge_point(0, 0, 'partial')
debug_merge_point(0, 0, '(vector-ref full 1)')
debug_merge_point(0, 0, '(let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))')
debug_merge_point(0, 0, '(vector-ref AppRand39 2)')
+1860: i78 = getfield_gc_i(p76, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1864: i80 = int_lt(2, i78)
+1868: guard_true(i80, descr=<Guard0xa8ae6e0>) [p0, p1, p2, p3, p4]
+1874: p81 = getfield_gc_r(p76, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1878: guard_class(p81, 16622984, descr=<Guard0xa8ae728>) [p0, p1, p2, p3, p4]
+1891: p83 = getfield_gc_r(p76, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1895: p85 = getarrayitem_gc_r(p83, 2, descr=<ArrayP 8>)
+1899: guard_class(p85, ConstClass(W_Fixnum), descr=<Guard0xa8ae770>) [p0, p1, p2, p3, p4]
+1911: i87 = getfield_gc_i(p85, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(vector-ref partial 2)')
debug_merge_point(0, 0, '(> AppRand40 AppRand41)')
+1915: i88 = int_gt(i87, i37)
+1918: guard_false(i88, descr=<Guard0xa8ae7b8>) [p0, p1, p2, p3, p4]
debug_merge_point(0, 0, '(let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))')
debug_merge_point(0, 0, '(if canGoLeft canGoRight #f)')
debug_merge_point(0, 0, '#f')
debug_merge_point(0, 0, '(if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial)))))')
debug_merge_point(0, 0, '(let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))')
debug_merge_point(0, 0, '(if (not canGoLeft) (not canGoRight) #f)')
debug_merge_point(0, 0, '(not canGoRight)')
debug_merge_point(0, 0, '(if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial)))')
debug_merge_point(0, 0, '(if dir (vector-set! full 0 partial) (vector-set! full 1 partial))')
debug_merge_point(0, 0, '(vector-set! full 1 partial)')
+1924: p89 = getfield_gc_r(p3, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+1939: setarrayitem_gc(p23, 1, p0, descr=<ArrayP 8>)
+1950: guard_value(p89, ConstPtr(ptr91), descr=<Guard0xa8ac140>) [p89, p3, None, None, None, None, None]
+1959: p93 = getfield_gc_r(p3, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1963: p94 = getfield_gc_r(p3, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1967: guard_class(p94, 16435208, descr=<Guard0xa8ae800>) [p89, p3, None, None, None, None, None]
+1980: p96 = getfield_gc_r(p94, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1984: guard_nonnull_class(p96, ConstClass(ForwardLink), descr=<Guard0xa8ac1a0>) [p89, p3, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([AppRand49 (+ CellRef(where) 1)]) (set! where (modulo AppRand49 (vector-length CellRef(trees))))) from (vector-set! full 1 partial)')
+2003: guard_class(p93, 16504944, descr=<Guard0xa8ae848>) [p89, p3, None, None, None, None, None]
+2017: p99 = getfield_gc_r(p93, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+2022: guard_class(p99, 16504944, descr=<Guard0xa8ae890>) [p89, p3, None, None, None, None, None]
+2034: p101 = getfield_gc_r(p99, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(+ CellRef(where) 1)')
+2038: guard_class(p101, 16479952, descr=<Guard0xa8ae8d8>) [p89, p3, None, None, None, None, None]
+2051: p103 = getfield_gc_r(p101, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+2062: guard_value(p103, ConstPtr(ptr104), descr=<Guard0xa8ae920>) [p89, p3, None, None, None, None, None]
+2071: p105 = getfield_gc_r(p101, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize7.inst__vals_2 40 pure>)
+2075: p106 = getfield_gc_r(p105, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+2079: guard_nonnull_class(p106, ConstClass(W_CellIntegerStrategy), descr=<Guard0xa8ac200>) [p89, p3, None, None, None, None, None]
+2097: i108 = getfield_gc_i(p106, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2101: i110 = int_add_ovf(i108, 1)
+2105: guard_no_overflow(descr=<Guard0xa8ae968>) [p89, p3, None, None, None, None, None]
debug_merge_point(0, 0, '(set! where (modulo AppRand49 (vector-length CellRef(trees))))')
+2111: p111 = getfield_gc_r(p101, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize7.inst__vals_5 64 pure>)
+2115: p112 = getfield_gc_r(p111, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+2119: guard_nonnull_class(p112, ConstClass(W_Vector), descr=<Guard0xa8ac260>) [p89, p3, None, None, None, None, None]
+2137: i114 = getfield_gc_i(p112, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+2141: i115 = int_is_zero(i114)
+2144: guard_false(i115, descr=<Guard0xa8ae9b0>) [p89, p3, None, None, None, None, None]
+2150: i117 = int_eq(i114, -1)
+2150: i119 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i110, i114, descr=<Calli 8 ii EF=0 OS=14>)
debug_merge_point(0, 0, '(let ([AppRand50 (heightToBytes h5494)]) (let ([AppRand51 (- partial5490 AppRand50)]) (loop5488 AppRand51)))')
debug_merge_point(0, 0, '(heightToBytes h5494)')
+2189: p120 = getfield_gc_r(p101, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize7.inst__vals_6 72 pure>)
+2200: setfield_gc(p106, i119, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2204: guard_nonnull_class(p120, 16481456, descr=<Guard0xa8ac2c0>) [p93, p120, p94, p99, p96, None, None, None, None, None]
+2222: i122 = getfield_gc_i(p93, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+2227: p123 = getfield_gc_r(p120, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+2238: guard_value(p123, ConstPtr(ptr124), descr=<Guard0xa8ae9f8>) [p93, p120, p94, p99, p96, None, None, None, None, None]
+2247: p125 = getfield_gc_r(p101, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([AppRand20 (heightToNodes h5299)]) (* bytes/node AppRand20))')
debug_merge_point(0, 0, '(heightToNodes h5299)')
+2247: p126 = getfield_gc_r(p120, descr=<FieldP pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_w_val0 32 pure>)
+2258: guard_value(p126, ConstPtr(ptr127), descr=<Guard0xa8ac320>) [p93, p120, p94, p99, p96, None, None, None, None, None]
+2267: p128 = getfield_gc_r(p120, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(- (expt 2 h) 1)')
+2267: f129 = cast_int_to_float(i122)
+2272: i130 = float_ne(f129, f129)
+2283: guard_false(i130, descr=<Guard0xa8aea40>) [p93, p120, p94, p99, p96, None, None, None, None, None]
+2289: f132 = float_add(f129, 11235582092889474423308157442431404585112356118389416079589380072358292237843810195794279832650471001320007117491962084853674360550901038905802964414967132773610493339054092829768888725077880882465817684505312860552384417646403930092119569408801702322709406917786643639996702871154982269052209770601514008576.000000)
+2309: i133 = float_eq(f132, f129)
+2320: guard_false(i133, descr=<Guard0xa8aea88>) [p93, p120, p94, p99, p96, None, None, None, None, None]
+2326: f136 = call_f(ConstClass(ccall_pow), 2.000000, f129, descr=<Callf 8 ff EF=2>)
+2358: i139 = call_i(ConstClass(_ll_1_threadlocalref_get__INTLlT_Signed), 48, descr=<Calli 4 i EF=2 OS=5>)
+2370: f140 = float_sub(f136, f136)
+2379: i142 = float_eq(f140, 0.000000)
+2400: guard_true(i142, descr=<Guard0xa8ac380>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
+2406: i143 = int_is_true(i139)
+2409: guard_false(i143, descr=<Guard0xa8aead0>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
+2415: i144 = float_ne(f136, f136)
+2426: guard_false(i144, descr=<Guard0xa8aeb18>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
+2432: i146 = float_ge(f136, -9223372036854775808.000000)
+2447: guard_true(i146, descr=<Guard0xa8aeb60>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
+2453: i148 = float_lt(f136, 9223372036854775808.000000)
+2465: guard_true(i148, descr=<Guard0xa8aeba8>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
+2471: i149 = cast_float_to_int(f136)
+2476: i151 = int_sub_ovf(i149, 1)
+2480: guard_no_overflow(descr=<Guard0xa8aebf0>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
debug_merge_point(0, 0, '(* bytes/node AppRand20)')
+2486: i152 = getfield_gc_i(p120, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_vals_fixed_1 24 pure>)
+2490: i153 = int_is_true(i152)
+2493: guard_true(i153, descr=<Guard0xa8aec38>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
+2499: i154 = int_is_true(i151)
+2502: guard_true(i154, descr=<Guard0xa8aec80>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
+2508: i155 = int_mul_ovf(i152, i151)
+2512: guard_no_overflow(descr=<Guard0xa8aecc8>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([AppRand51 (- partial5490 AppRand50)]) (loop5488 AppRand51)) from (* bytes/node AppRand20)')
debug_merge_point(0, 0, '(- partial5490 AppRand50)')
+2518: i156 = getfield_gc_i(p99, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+2529: i157 = int_sub_ovf(i156, i155)
+2532: guard_no_overflow(descr=<Guard0xa8aed10>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
debug_merge_point(0, 0, '(loop5488 AppRand51)')
debug_merge_point(0, 0, '(let ([if8 (> partial5490 INSIGNIFICANT)]) (if if8 (let ([h5494 (bytesToHeight partial5490)]) (let ([newTree (makeTree h5494)][AppRand48 (vector-ref CellRef(trees) CellRef(where))]) (CellRef(replaceTree) AppRand48 newTree) (let ([AppRand49 (+ CellRef(where) 1)]) (set! where (modulo AppRand49 (vector-length CellRef(trees))))) (let ([AppRand50 (heightToBytes h5494)]) (let ([AppRand51 (- partial5490 AppRand50)]) (loop5488 AppRand51))))) (void))) from (loop5488 AppRand51)')
debug_merge_point(0, 0, '(> partial5490 INSIGNIFICANT)')
+2538: p158 = getfield_gc_r(p101, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize7.inst__vals_1 32 pure>)
+2542: guard_nonnull_class(p158, ConstClass(W_Fixnum), descr=<Guard0xa8ac3e0>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
+2562: i160 = getfield_gc_i(p158, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+2566: i161 = int_gt(i157, i160)
+2569: guard_false(i161, descr=<Guard0xa8aed58>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
debug_merge_point(0, 0, '(if if8 (let ([h5494 (bytesToHeight partial5490)]) (let ([newTree (makeTree h5494)][AppRand48 (vector-ref CellRef(trees) CellRef(where))]) (CellRef(replaceTree) AppRand48 newTree) (let ([AppRand49 (+ CellRef(where) 1)]) (set! where (modulo AppRand49 (vector-length CellRef(trees))))) (let ([AppRand50 (heightToBytes h5494)]) (let ([AppRand51 (- partial5490 AppRand50)]) (loop5488 AppRand51))))) (void))')
debug_merge_point(0, 0, '(void)')
+2575: p162 = getfield_gc_r(p94, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+2593: guard_value(p162, ConstPtr(ptr163), descr=<Guard0xa8aeda0>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
+2602: p164 = getfield_gc_r(p94, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+2606: p165 = getfield_gc_r(p94, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand60 (+ mutations ptrMutRate)]) (let ([AppRand61 (- AppRand60 CellRef(actuallyMut))]) (let ([AppRand62 (max 0 AppRand61)]) (CellRef(oldGenMut) AppRand62))))')
+2610: guard_class(p164, 16504944, descr=<Guard0xa8aede8>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
+2624: p167 = getfield_gc_r(p164, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+2628: guard_class(p167, 16504944, descr=<Guard0xa8aee30>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
+2640: p169 = getfield_gc_r(p167, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+2644: guard_class(p165, 16435208, descr=<Guard0xa8aee78>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
+2656: p171 = getfield_gc_r(p165, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+2660: guard_nonnull_class(p171, ConstClass(ForwardLink), descr=<Guard0xa8ac440>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
debug_merge_point(0, 0, '(+ mutations ptrMutRate)')
+2678: i173 = getfield_gc_i(p164, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+2682: guard_class(p169, 16480328, descr=<Guard0xa8aeec0>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
+2694: p175 = getfield_gc_r(p169, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_4 56 pure>)
+2698: guard_nonnull_class(p175, ConstClass(W_Fixnum), descr=<Guard0xa8ac4a0>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
+2718: i177 = getfield_gc_i(p175, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+2722: i178 = int_add_ovf(i173, i177)
+2725: guard_no_overflow(descr=<Guard0xa8aef08>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([AppRand61 (- AppRand60 CellRef(actuallyMut))]) (let ([AppRand62 (max 0 AppRand61)]) (CellRef(oldGenMut) AppRand62)))')
debug_merge_point(0, 0, '(- AppRand60 CellRef(actuallyMut))')
+2731: p179 = getfield_gc_r(p169, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_1 32 pure>)
+2735: p180 = getfield_gc_r(p179, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+2739: guard_nonnull_class(p180, ConstClass(W_CellIntegerStrategy), descr=<Guard0xa8ac500>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
+2759: i182 = getfield_gc_i(p180, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2763: i183 = int_sub_ovf(i178, i182)
+2766: guard_no_overflow(descr=<Guard0xa8aef50>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([AppRand62 (max 0 AppRand61)]) (CellRef(oldGenMut) AppRand62))')
debug_merge_point(0, 0, '(max 0 AppRand61)')
+2772: i185 = int_lt(0, i183)
+2776: guard_true(i185, descr=<Guard0xa8aef98>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
debug_merge_point(0, 0, '(CellRef(oldGenMut) AppRand62)')
+2782: p186 = getfield_gc_r(p169, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_6 72 pure>)
+2786: p187 = getfield_gc_r(p186, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+2790: guard_nonnull_class(p187, 16477696, descr=<Guard0xa8ac560>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
+2808: p189 = getfield_gc_r(p187, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+2819: guard_value(p189, ConstPtr(ptr190), descr=<Guard0xa8aefe0>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
+2828: p191 = getfield_gc_r(p169, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([doloop5572 (lambda (i5574) (let ([if10 (>= i5574 (quotient n5570 2))]) (if if10 (void) (begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55))))))]) (doloop5572 0))')
+2828: p192 = getfield_gc_r(p187, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(lambda (i5574) (let ([if10 (>= i5574 (quotient n5570 2))]) (if if10 (void) (begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55))))))')
+2832: p193 = getfield_gc_r(p187, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize1.inst__vals_0 24 pure>)
+2836: guard_class(p192, 16505296, descr=<Guard0xa8af028>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
+2850: guard_nonnull_class(p193, ConstClass(W_Cell), descr=<Guard0xa8ac5c0>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
debug_merge_point(0, 0, '(doloop5572 0)')
debug_merge_point(0, 0, '(let ([if10 (>= i5574 (quotient n5570 2))]) (if if10 (void) (begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55))))) from (doloop5572 0)')
debug_merge_point(0, 0, '(>= i5574 (quotient n5570 2))')
+2869: i197 = int_rshift(i183, 1)
+2875: i199 = int_lshift(i197, 1)
+2875: i201 = int_xor(i183, 2)
+2875: i202 = int_ne(i199, i183)
+2875: i204 = int_ge(0, i197)
+2879: guard_false(i204, descr=<Guard0xa8af070>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
debug_merge_point(0, 0, '(if if10 (void) (begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55))))')
debug_merge_point(0, 0, '(begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55)))')
debug_merge_point(0, 0, '(CellRef(oldGenSwapSubtrees))')
+2885: p205 = getfield_gc_r(p193, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+2889: guard_nonnull_class(p205, 16479200, descr=<Guard0xa8ac620>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
+2907: p207 = getfield_gc_r(p205, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+2925: guard_value(p207, ConstPtr(ptr208), descr=<Guard0xa8af0b8>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([index1 (rnd (vector-length CellRef(trees)))][index2 (rnd (vector-length CellRef(trees)))]) (let ([depth (rnd treeHeight)][path (rnd pathBits)][tn1 (vector-ref CellRef(trees) index1)][tn2 (vector-ref CellRef(trees) index2)]) (let ([doloop5533 (lambda (i5535) (let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))))]) (doloop5533 0) (if (even? CellRef(path)) (let ([tmp (vector-ref CellRef(tn1) 0)][AppRand53 (vector-ref CellRef(tn2) 0)]) (vector-set! CellRef(tn1) 0 AppRand53) (vector-set! CellRef(tn2) 0 tmp)) (let ([tmp5560 (vector-ref CellRef(tn1) 1)][AppRand54 (vector-ref CellRef(tn2) 1)]) (vector-set! CellRef(tn1) 1 AppRand54) (vector-set! CellRef(tn2) 1 tmp5560))) (let ([SetBang7 (+ CellRef(actuallyMut) 2)]) (set! actuallyMut SetBang7)))))')
debug_merge_point(0, 0, '(rnd (vector-length CellRef(trees)))')
+2934: p209 = getfield_gc_r(p205, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_2 40 pure>)
+2938: guard_nonnull_class(p209, 16478072, descr=<Guard0xa8ac680>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
+2956: p211 = getfield_gc_r(p205, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_3 48 pure>)
+2960: p212 = getfield_gc_r(p211, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+2971: guard_nonnull_class(p212, ConstClass(W_Vector), descr=<Guard0xa8ac6e0>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
+2989: i214 = getfield_gc_i(p212, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+2993: p215 = getfield_gc_r(p209, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+3011: guard_value(p215, ConstPtr(ptr216), descr=<Guard0xa8af100>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
+3020: p217 = getfield_gc_r(p205, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([if0 (if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)]) (if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))))')
debug_merge_point(0, 0, '(if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)')
debug_merge_point(0, 0, '(if (integer? n5234) (< n5234 16384) #f)')
debug_merge_point(0, 0, '(< n5234 16384)')
+3020: i219 = int_lt(i214, 16384)
+3027: guard_true(i219, descr=<Guard0xa8af148>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
debug_merge_point(0, 0, '(if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234)))')
debug_merge_point(0, 0, '(CellRef(random14) n5234)')
+3033: p220 = getfield_gc_r(p209, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+3037: p221 = getfield_gc_r(p220, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3041: guard_nonnull_class(p221, 16478824, descr=<Guard0xa8ac740>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
+3059: p223 = getfield_gc_r(p221, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+3077: guard_value(p223, ConstPtr(ptr224), descr=<Guard0xa8af190>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
+3086: p225 = getfield_gc_r(p209, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+3086: p226 = getfield_gc_r(p221, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_2 40 pure>)
+3090: p227 = getfield_gc_r(p226, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3101: guard_nonnull_class(p227, ConstClass(W_CellIntegerStrategy), descr=<Guard0xa8ac7a0>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
+3121: i229 = getfield_gc_i(p227, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3125: p230 = getfield_gc_r(p221, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_3 48 pure>)
+3136: p231 = getfield_gc_r(p230, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3147: guard_nonnull_class(p231, ConstClass(W_CellIntegerStrategy), descr=<Guard0xa8ac800>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
+3165: i233 = getfield_gc_i(p231, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3169: i234 = int_is_true(i229)
+3172: guard_true(i234, descr=<Guard0xa8af1d8>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
+3178: i235 = int_is_true(i233)
+3181: guard_true(i235, descr=<Guard0xa8af220>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
+3187: i236 = int_mul_ovf(i229, i233)
+3191: guard_no_overflow(descr=<Guard0xa8af268>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+3197: p237 = getfield_gc_r(p221, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_1 32 pure>)
+3201: p238 = getfield_gc_r(p237, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3212: guard_nonnull_class(p238, ConstClass(W_CellIntegerStrategy), descr=<Guard0xa8ac860>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
+3230: i240 = getfield_gc_i(p238, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3234: i241 = int_add_ovf(i236, i240)
+3237: guard_no_overflow(descr=<Guard0xa8af2b0>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+3243: p242 = getfield_gc_r(p221, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_0 24 pure>)
+3254: p243 = getfield_gc_r(p242, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3265: guard_nonnull_class(p243, ConstClass(W_CellIntegerStrategy), descr=<Guard0xa8ac8c0>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
+3283: i245 = getfield_gc_i(p243, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3287: i246 = int_is_zero(i245)
+3290: guard_false(i246, descr=<Guard0xa8af2f8>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
+3296: i248 = int_rshift(i241, 63)
+3307: i249 = int_xor(i241, i248)
+3324: i250 = int_sub(i249, i248)
+3327: i252 = int_rshift(i245, 63)
+3334: i253 = int_xor(i245, i252)
+3337: i254 = int_sub(i253, i252)
+3340: i255 = int_is_zero(i254)
+3343: guard_false(i255, descr=<Guard0xa8af340>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
+3349: i257 = int_eq(i250, -9223372036854775808)
+3371: i259 = int_eq(i254, -1)
+3391: i260 = int_and(i257, i259)
+3394: guard_false(i260, descr=<Guard0xa8af388>) [i139, f140, f136, i122, p120, p94, p99, p96, None, None, None, None, None]
+3403: i262 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i250, i254, descr=<Calli 8 ii EF=0 OS=14>)
+3430: i264 = int_lt(i241, 0)
+3438: guard_false(i264, descr=<Guard0xa8ac920>) [i254, i262, i250, i241, p193, i183, p192, p165, p205, i214, p221, p171, None, None, None, None, None, None, None, None, None, None]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+3444: i266 = int_eq(i262, -9223372036854775808)
+3444: i268 = int_rshift(i262, 3)
+3451: i270 = int_lshift(i268, 3)
+3458: i272 = int_xor(i262, 8)
+3465: i274 = int_rshift(i272, 63)
+3469: i275 = int_ne(i270, i262)
+3481: i276 = int_and(i274, i275)
+3484: i277 = int_add(i268, i276)
+3487: setfield_gc(p231, i262, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3498: i278 = int_is_zero(i214)
+3501: guard_false(i278, descr=<Guard0xa8ac980>) [i214, i277, p193, i183, p192, p165, p205, None, p221, p171, None, None, None, None, None, None, None, None, None, None]
+3507: i280 = int_rshift(i277, 63)
+3514: i281 = int_xor(i277, i280)
+3520: i282 = int_sub(i281, i280)
+3523: i284 = int_rshift(i214, 63)
+3530: i285 = int_xor(i214, i284)
+3536: i286 = int_sub(i285, i284)
+3539: i287 = int_is_zero(i286)
+3542: guard_false(i287, descr=<Guard0xa8af3d0>) [i214, i277, p193, i183, p192, p165, p205, None, p221, p171, None, None, None, None, None, None, None, None, None, None]
+3548: i289 = int_eq(i282, -9223372036854775808)
+3570: i291 = int_eq(i286, -1)
+3584: i292 = int_and(i289, i291)
+3587: guard_false(i292, descr=<Guard0xa8af418>) [i214, i277, p193, i183, p192, p165, p205, None, p221, p171, None, None, None, None, None, None, None, None, None, None]
+3596: i294 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i282, i286, descr=<Calli 8 ii EF=0 OS=14>)
+3642: i296 = int_lt(i277, 0)
+3650: guard_false(i296, descr=<Guard0xa8ac9e0>) [i286, i294, i282, i277, None, p193, i183, p192, p165, p205, i214, p221, p171, None, None, None, None, None, None, None, None, None, None]
debug_merge_point(0, 0, '(rnd (vector-length CellRef(trees)))')
debug_merge_point(0, 0, '(let ([if0 (if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)]) (if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))))')
debug_merge_point(0, 0, '(if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)')
debug_merge_point(0, 0, '(if (integer? n5234) (< n5234 16384) #f)')
debug_merge_point(0, 0, '(< n5234 16384)')
debug_merge_point(0, 0, '(if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234)))')
debug_merge_point(0, 0, '(CellRef(random14) n5234)')
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+3656: i297 = getfield_gc_i(p227, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3660: i298 = int_is_true(i297)
+3663: guard_true(i298, descr=<Guard0xa8af460>) [i286, i294, i282, i277, None, p193, i183, p192, p165, p205, i214, p221, p171, None, None, None, None, None, None, None, None, None, None]
+3669: i299 = int_is_true(i262)
+3672: guard_true(i299, descr=<Guard0xa8af4a8>) [i286, i294, i282, i277, None, p193, i183, p192, p165, p205, i214, p221, p171, None, None, None, None, None, None, None, None, None, None]
+3678: i300 = int_mul_ovf(i297, i262)
+3682: guard_no_overflow(descr=<Guard0xa8af4f0>) [i286, i294, i282, i277, None, p193, i183, p192, p165, p205, i214, p221, p171, None, None, None, None, None, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+3688: i301 = getfield_gc_i(p238, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3693: i302 = int_add_ovf(i300, i301)
+3696: guard_no_overflow(descr=<Guard0xa8af538>) [i286, i294, i282, i277, None, p193, i183, p192, p165, p205, i214, p221, p171, None, None, None, None, None, None, None, None, None, None]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+3702: i303 = getfield_gc_i(p243, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3713: i304 = int_is_zero(i303)
+3716: guard_false(i304, descr=<Guard0xa8af580>) [i286, i294, i282, i277, None, p193, i183, p192, p165, p205, i214, p221, p171, None, None, None, None, None, None, None, None, None, None]
+3722: i306 = int_rshift(i302, 63)
+3729: i307 = int_xor(i302, i306)
+3735: i308 = int_sub(i307, i306)
+3738: i310 = int_rshift(i303, 63)
+3745: i311 = int_xor(i303, i310)
+3748: i312 = int_sub(i311, i310)
+3751: i313 = int_is_zero(i312)
+3754: guard_false(i313, descr=<Guard0xa8af5c8>) [i286, i294, i282, i277, None, p193, i183, p192, p165, p205, i214, p221, p171, None, None, None, None, None, None, None, None, None, None]
+3760: i315 = int_eq(i308, -9223372036854775808)
+3783: i317 = int_eq(i312, -1)
+3797: i318 = int_and(i315, i317)
+3800: guard_false(i318, descr=<Guard0xa8af610>) [i286, i294, i282, i277, None, p193, i183, p192, p165, p205, i214, p221, p171, None, None, None, None, None, None, None, None, None, None]
+3809: i320 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i308, i312, descr=<Calli 8 ii EF=0 OS=14>)
+3848: i322 = int_lt(i302, 0)
+3852: guard_false(i322, descr=<Guard0xa8aca40>) [i312, i320, i308, i302, i294, None, p193, i183, p192, p165, p205, i214, p221, p171, None, None, None, None, None, None, None, None, None, None]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+3858: i324 = int_eq(i320, -9223372036854775808)
+3858: i326 = int_rshift(i320, 3)
+3865: i328 = int_lshift(i326, 3)
+3872: i330 = int_xor(i320, 8)
+3879: i332 = int_rshift(i330, 63)
+3883: i333 = int_ne(i328, i320)
+3896: i334 = int_and(i332, i333)
+3899: i335 = int_add(i326, i334)
+3902: i337 = int_rshift(i335, 63)
+3909: i338 = int_xor(i335, i337)
+3915: i339 = int_sub(i338, i337)
+3918: i341 = int_eq(i339, -9223372036854775808)
+3941: i342 = int_and(i341, i291)
+3948: setfield_gc(p231, i320, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3952: guard_false(i342, descr=<Guard0xa8acaa0>) [i286, i339, i342, i335, i294, None, p193, i183, p192, p165, p205, i214, p221, p171, None, None, None, None, None, None, None, None, None, None]
+3961: i344 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i339, i286, descr=<Calli 8 ii EF=0 OS=14>)
+3994: i346 = int_lt(i335, 0)
+3998: guard_false(i346, descr=<Guard0xa8acb00>) [i286, i344, i339, i335, None, i294, None, p193, i183, p192, p165, p205, i214, p221, p171, None, None, None, None, None, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([depth (rnd treeHeight)][path (rnd pathBits)][tn1 (vector-ref CellRef(trees) index1)][tn2 (vector-ref CellRef(trees) index2)]) (let ([doloop5533 (lambda (i5535) (let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))))]) (doloop5533 0) (if (even? CellRef(path)) (let ([tmp (vector-ref CellRef(tn1) 0)][AppRand53 (vector-ref CellRef(tn2) 0)]) (vector-set! CellRef(tn1) 0 AppRand53) (vector-set! CellRef(tn2) 0 tmp)) (let ([tmp5560 (vector-ref CellRef(tn1) 1)][AppRand54 (vector-ref CellRef(tn2) 1)]) (vector-set! CellRef(tn1) 1 AppRand54) (vector-set! CellRef(tn2) 1 tmp5560))) (let ([SetBang7 (+ CellRef(actuallyMut) 2)]) (set! actuallyMut SetBang7))))')
debug_merge_point(0, 0, '(rnd treeHeight)')
+4004: p347 = getfield_gc_r(p205, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_4 56 pure>)
+4015: guard_nonnull_class(p347, ConstClass(W_Fixnum), descr=<Guard0xa8acb60>) [i286, i344, i339, i335, None, i294, None, p193, i183, p192, p165, p205, i214, p221, p171, None, None, None, None, None, None, None, None, None, None]
+4033: i349 = getfield_gc_i(p347, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(let ([if0 (if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)]) (if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))))')
debug_merge_point(0, 0, '(if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)')
debug_merge_point(0, 0, '(if (integer? n5234) (< n5234 16384) #f)')
debug_merge_point(0, 0, '(< n5234 16384)')
+4037: i351 = int_lt(i349, 16384)
+4044: guard_true(i351, descr=<Guard0xa8af658>) [i286, i344, i339, i335, None, i294, None, p193, i183, p192, p165, p205, i214, p221, p171, None, None, None, None, None, None, None, None, None, None]
debug_merge_point(0, 0, '(if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234)))')
debug_merge_point(0, 0, '(CellRef(random14) n5234)')
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+4050: i352 = getfield_gc_i(p227, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+4054: i353 = int_is_true(i352)
+4057: guard_true(i353, descr=<Guard0xa8af6a0>) [i286, i344, i339, i335, None, i294, None, p193, i183, p192, p165, p205, i214, p221, p171, None, None, None, None, None, None, None, None, None, None]
+4063: i354 = int_is_true(i320)
+4071: guard_true(i354, descr=<Guard0xa8af6e8>) [i286, i344, i339, i335, None, i294, None, p193, i183, p192, p165, p205, i214, p221, p171, None, None, None, None, None, None, None, None, None, None]
+4077: i355 = int_mul_ovf(i352, i320)
+4085: guard_no_overflow(descr=<Guard0xa8af730>) [i286, i344, i339, i335, None, i294, None, p193, i183, p192, p165, p205, i214, p221, p171, None, None, None, None, None, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+4091: i356 = getfield_gc_i(p238, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+4096: i357 = int_add_ovf(i355, i356)
+4099: guard_no_overflow(descr=<Guard0xa8af778>) [i286, i344, i339, i335, None, i294, None, p193, i183, p192, p165, p205, i214, p221, p171, None, None, None, None, None, None, None, None, None, None]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+4105: i358 = getfield_gc_i(p243, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+4109: i359 = int_is_zero(i358)
+4112: guard_false(i359, descr=<Guard0xa8af7c0>) [i286, i344, i339, i335, None, i294, None, p193, i183, p192, p165, p205, i214, p221, p171, None, None, None, None, None, None, None, None, None, None]
+4118: i361 = int_rshift(i357, 63)
+4125: i362 = int_xor(i357, i361)
+4131: i363 = int_sub(i362, i361)
+4134: i365 = int_rshift(i358, 63)
+4141: i366 = int_xor(i358, i365)
+4144: i367 = int_sub(i366, i365)
+4147: i368 = int_is_zero(i367)
+4150: guard_false(i368, descr=<Guard0xa8af808>) [i286, i344, i339, i335, None, i294, None, p193, i183, p192, p165, p205, i214, p221, p171, None, None, None, None, None, None, None, None, None, None]
+4156: i370 = int_eq(i363, -9223372036854775808)
+4178: i372 = int_eq(i367, -1)
+4192: i373 = int_and(i370, i372)
+4195: guard_false(i373, descr=<Guard0xa8af850>) [i286, i344, i339, i335, None, i294, None, p193, i183, p192, p165, p205, i214, p221, p171, None, None, None, None, None, None, None, None, None, None]
+4204: i375 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i363, i367, descr=<Calli 8 ii EF=0 OS=14>)
+4247: i377 = int_lt(i357, 0)
+4251: guard_false(i377, descr=<Guard0xa8acbc0>) [i367, i375, i363, i357, i344, i349, None, i294, None, p193, i183, p192, p165, p205, None, p221, p171, None, None, None, None, None, None, None, None, None, None]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+4257: i379 = int_eq(i375, -9223372036854775808)
+4257: i381 = int_rshift(i375, 3)
+4264: i383 = int_lshift(i381, 3)
+4271: i385 = int_xor(i375, 8)
+4278: i387 = int_rshift(i385, 63)
+4282: i388 = int_ne(i383, i375)
+4294: i389 = int_and(i387, i388)
+4297: i390 = int_add(i381, i389)
+4300: setfield_gc(p231, i375, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+4304: i391 = int_is_zero(i349)
+4312: guard_false(i391, descr=<Guard0xa8acc20>) [i349, i390, i344, None, None, i294, None, p193, i183, p192, p165, p205, None, p221, p171, None, None, None, None, None, None, None, None, None, None]
+4318: i393 = int_rshift(i390, 63)
+4325: i394 = int_xor(i390, i393)
+4331: i395 = int_sub(i394, i393)
+4334: i397 = int_rshift(i349, 63)
+4345: i398 = int_xor(i349, i397)
+4355: i399 = int_sub(i398, i397)
+4358: i400 = int_is_zero(i399)
+4361: guard_false(i400, descr=<Guard0xa8af898>) [i349, i390, i344, None, None, i294, None, p193, i183, p192, p165, p205, None, p221, p171, None, None, None, None, None, None, None, None, None, None]
+4367: i402 = int_eq(i395, -9223372036854775808)
+4389: i404 = int_eq(i399, -1)
+4403: i405 = int_and(i402, i404)
+4406: guard_false(i405, descr=<Guard0xa8af8e0>) [i349, i390, i344, None, None, i294, None, p193, i183, p192, p165, p205, None, p221, p171, None, None, None, None, None, None, None, None, None, None]
+4415: i407 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i395, i399, descr=<Calli 8 ii EF=0 OS=14>)
+4451: i409 = int_lt(i390, 0)
+4455: guard_false(i409, descr=<Guard0xa8acc80>) [i399, i407, i395, i390, None, i344, i349, None, i294, None, p193, i183, p192, p165, p205, None, p221, p171, None, None, None, None, None, None, None, None, None, None]
debug_merge_point(0, 0, '(rnd pathBits)')
+4461: p410 = getfield_gc_r(p205, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_0 24 pure>)
+4472: guard_nonnull_class(p410, ConstClass(W_Fixnum), descr=<Guard0xa8acce0>) [i399, i407, i395, i390, None, i344, i349, None, i294, None, p193, i183, p192, p165, p205, None, p221, p171, None, None, None, None, None, None, None, None, None, None]
+4490: i412 = getfield_gc_i(p410, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(let ([if0 (if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)]) (if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))))')
debug_merge_point(0, 0, '(if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)')
debug_merge_point(0, 0, '(if (integer? n5234) (< n5234 16384) #f)')
debug_merge_point(0, 0, '(< n5234 16384)')
+4494: i414 = int_lt(i412, 16384)
+4501: guard_false(i414, descr=<Guard0xa8af928>) [i399, i407, i395, i390, None, i344, i349, None, i294, None, p193, i183, p192, p165, p205, None, p221, p171, None, None, None, None, None, None, None, None, None, None]
debug_merge_point(0, 0, '(if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234)))')
debug_merge_point(0, 0, '(let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))')
debug_merge_point(0, 0, '(CellRef(random14) 16384)')
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+4507: i415 = getfield_gc_i(p227, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+4511: i416 = int_is_true(i415)
+4514: guard_true(i416, descr=<Guard0xa8af970>) [i399, i407, i395, i390, None, i344, i349, None, i294, None, p193, i183, p192, p165, p205, None, p221, p171, None, None, None, None, None, None, None, None, None, None]
+4520: i417 = int_is_true(i375)
+4528: guard_true(i417, descr=<Guard0xa8af9b8>) [i399, i407, i395, i390, None, i344, i349, None, i294, None, p193, i183, p192, p165, p205, None, p221, p171, None, None, None, None, None, None, None, None, None, None]
+4534: i418 = int_mul_ovf(i415, i375)
+4542: guard_no_overflow(descr=<Guard0xa8afa00>) [i399, i407, i395, i390, None, i344, i349, None, i294, None, p193, i183, p192, p165, p205, None, p221, p171, None, None, None, None, None, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+4548: i419 = getfield_gc_i(p238, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+4553: i420 = int_add_ovf(i418, i419)
+4556: guard_no_overflow(descr=<Guard0xa8afa48>) [i399, i407, i395, i390, None, i344, i349, None, i294, None, p193, i183, p192, p165, p205, None, p221, p171, None, None, None, None, None, None, None, None, None, None]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+4562: i421 = getfield_gc_i(p243, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+4566: i422 = int_is_zero(i421)
+4569: guard_false(i422, descr=<Guard0xa8afa90>) [i399, i407, i395, i390, None, i344, i349, None, i294, None, p193, i183, p192, p165, p205, None, p221, p171, None, None, None, None, None, None, None, None, None, None]
+4575: i424 = int_rshift(i420, 63)
+4582: i425 = int_xor(i420, i424)
+4588: i426 = int_sub(i425, i424)
+4591: i428 = int_rshift(i421, 63)
+4598: i429 = int_xor(i421, i428)
+4601: i430 = int_sub(i429, i428)
+4604: i431 = int_is_zero(i430)
+4607: guard_false(i431, descr=<Guard0xa8afad8>) [i399, i407, i395, i390, None, i344, i349, None, i294, None, p193, i183, p192, p165, p205, None, p221, p171, None, None, None, None, None, None, None, None, None, None]
+4613: i433 = int_eq(i426, -9223372036854775808)
+4635: i435 = int_eq(i430, -1)
+4648: i436 = int_and(i433, i435)
+4651: guard_false(i436, descr=<Guard0xa8afb20>) [i399, i407, i395, i390, None, i344, i349, None, i294, None, p193, i183, p192, p165, p205, None, p221, p171, None, None, None, None, None, None, None, None, None, None]
+4660: i438 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i426, i430, descr=<Calli 8 ii EF=0 OS=14>)
+4692: i440 = int_lt(i420, 0)
+4696: guard_false(i440, descr=<Guard0xa8acd40>) [i430, i438, i426, i420, i407, i412, p209, None, i344, None, None, i294, None, p193, i183, p192, p165, p205, None, p221, p171, None, None, None, None, None, None, None, None, None, None]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+4702: i442 = int_eq(i438, -9223372036854775808)
+4702: i444 = int_rshift(i438, 3)
+4709: i446 = int_lshift(i444, 3)
+4716: i448 = int_xor(i438, 8)
+4723: i450 = int_rshift(i448, 63)
+4727: i451 = int_ne(i446, i438)
+4739: i452 = int_and(i450, i451)
+4742: i453 = int_add(i444, i452)
+4745: i455 = int_rshift(i453, 63)
+4752: i456 = int_xor(i453, i455)
+4758: i457 = int_sub(i456, i455)
+4761: i459 = int_eq(i457, -9223372036854775808)
+4761: i461 = int_and(i457, 16383)
+4771: setfield_gc(p231, i438, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+4775: i463 = int_lt(i453, 0)
+4779: guard_false(i463, descr=<Guard0xa8acda0>) [i461, i457, i453, i407, i412, p209, None, i344, None, None, i294, None, p193, i183, p192, p165, p205, None, p221, p171, None, None, None, None, None, None, None, None, None, None]
debug_merge_point(0, 0, '(CellRef(loop) n5234 AppRand5 n5234)')
+4785: p464 = getfield_gc_r(p209, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+4796: p465 = getfield_gc_r(p464, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+4800: guard_nonnull_class(p465, 16478072, descr=<Guard0xa8ace00>) [i461, i457, i453, i407, i412, p209, None, i344, None, None, i294, None, p193, i183, p192, p165, p205, None, p221, p171, None, None, None, None, None, None, None, None, None, None]
+4818: p467 = getfield_gc_r(p465, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+4829: guard_value(p467, ConstPtr(ptr468), descr=<Guard0xa8afb68>) [i461, i457, i453, i407, i412, p209, None, i344, None, None, i294, None, p193, i183, p192, p165, p205, None, p221, p171, None, None, None, None, None, None, None, None, None, None]
debug_merge_point(0, 0, '(if (zero? q) (remainder r n5224) (let ([AppRand2 (* 16384 r)][AppRand3 (CellRef(random14) 16384)]) (let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)))) from (CellRef(loop) n5234 AppRand5 n5234)')
debug_merge_point(0, 0, '(let ([AppRand2 (* 16384 r)][AppRand3 (CellRef(random14) 16384)]) (let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)))')
debug_merge_point(0, 0, '(* 16384 r)')
+4838: i469 = int_is_true(i461)
+4841: guard_true(i469, descr=<Guard0xa8afbb0>) [i461, i457, i453, i407, i412, p209, None, i344, None, None, i294, None, p193, i183, p192, p165, p205, None, p221, p171, None, None, None, None, None, None, None, None, None, None]
+4847: i471 = int_lshift(i461, 14)
debug_merge_point(0, 0, '(CellRef(random14) 16384)')
+4854: p472 = getfield_gc_r(p465, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+4858: p473 = getfield_gc_r(p472, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+4862: guard_nonnull_class(p473, 16478824, descr=<Guard0xa8ace60>) [i461, i457, i453, i407, i412, p209, None, i344, None, None, i294, None, p193, i183, p192, p165, p205, None, p221, p171, None, None, None, None, None, None, None, None, None, None]
+4880: p475 = getfield_gc_r(p473, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+4884: guard_value(p475, ConstPtr(ptr476), descr=<Guard0xa8afbf8>) [i461, i457, i453, i407, i412, p209, None, i344, None, None, i294, None, p193, i183, p192, p165, p205, None, p221, p171, None, None, None, None, None, None, None, None, None, None]
+4897: p477 = getfield_gc_r(p465, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+4897: p478 = getfield_gc_r(p473, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_2 40 pure>)
+4901: p479 = getfield_gc_r(p478, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+4905: guard_nonnull_class(p479, ConstClass(W_CellIntegerStrategy), descr=<Guard0xa8acec0>) [i461, i457, i453, i407, i412, p209, None, i344, None, None, i294, None, p193, i183, p192, p165, p205, None, p221, p171, None, None, None, None, None, None, None, None, None, None]
+4924: i481 = getfield_gc_i(p479, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+4928: p482 = getfield_gc_r(p473, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_3 48 pure>)
+4939: p483 = getfield_gc_r(p482, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+4950: guard_nonnull_class(p483, ConstClass(W_CellIntegerStrategy), descr=<Guard0xa8acf20>) [i461, i457, i453, i407, i412, p209, None, i344, None, None, i294, None, p193, i183, p192, p165, p205, None, p221, p171, None, None, None, None, None, None, None, None, None, None]
+4968: i485 = getfield_gc_i(p483, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+4979: i486 = int_is_true(i481)
+4982: guard_true(i486, descr=<Guard0xa8afc40>) [i461, i457, i453, i407, i412, p209, None, i344, None, None, i294, None, p193, i183, p192, p165, p205, None, p221, p171, None, None, None, None, None, None, None, None, None, None]
+4988: i487 = int_is_true(i485)
+4991: guard_true(i487, descr=<Guard0xa8afc88>) [i461, i457, i453, i407, i412, p209, None, i344, None, None, i294, None, p193, i183, p192, p165, p205, None, p221, p171, None, None, None, None, None, None, None, None, None, None]
+4997: i488 = int_mul_ovf(i481, i485)
+5001: guard_no_overflow(descr=<Guard0xa8afcd0>) [i461, i457, i453, i407, i412, p209, None, i344, None, None, i294, None, p193, i183, p192, p165, p205, None, p221, p171, None, None, None, None, None, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+5007: p489 = getfield_gc_r(p473, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_1 32 pure>)
+5025: p490 = getfield_gc_r(p489, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+5036: guard_nonnull_class(p490, ConstClass(W_CellIntegerStrategy), descr=<Guard0xa8acf80>) [i461, i457, i453, i407, i412, p209, None, i344, None, None, i294, None, p193, i183, p192, p165, p205, None, p221, p171, None, None, None, None, None, None, None, None, None, None]
+5055: i492 = getfield_gc_i(p490, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+5066: i493 = int_add_ovf(i488, i492)
+5069: guard_no_overflow(descr=<Guard0xa8afd18>) [i461, i457, i453, i407, i412, p209, None, i344, None, None, i294, None, p193, i183, p192, p165, p205, None, p221, p171, None, None, None, None, None, None, None, None, None, None]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+5075: p494 = getfield_gc_r(p473, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_0 24 pure>)
+5079: p495 = getfield_gc_r(p494, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+5090: guard_nonnull_class(p495, ConstClass(W_CellIntegerStrategy), descr=<Guard0xa8acfe0>) [i461, i457, i453, i407, i412, p209, None, i344, None, None, i294, None, p193, i183, p192, p165, p205, None, p221, p171, None, None, None, None, None, None, None, None, None, None]
+5108: i497 = getfield_gc_i(p495, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+5112: i498 = int_is_zero(i497)
+5115: guard_false(i498, descr=<Guard0xa8afd60>) [i461, i457, i453, i407, i412, p209, None, i344, None, None, i294, None, p193, i183, p192, p165, p205, None, p221, p171, None, None, None, None, None, None, None, None, None, None]
+5121: i500 = int_rshift(i493, 63)
+5132: i501 = int_xor(i493, i500)
+5149: i502 = int_sub(i501, i500)
+5152: i504 = int_rshift(i497, 63)
+5159: i505 = int_xor(i497, i504)
+5162: i506 = int_sub(i505, i504)
+5165: i507 = int_is_zero(i506)
+5168: guard_false(i507, descr=<Guard0xa8afda8>) [i461, i457, i453, i407, i412, p209, None, i344, None, None, i294, None, p193, i183, p192, p165, p205, None, p221, p171, None, None, None, None, None, None, None, None, None, None]
+5174: i509 = int_eq(i502, -9223372036854775808)
+5197: i511 = int_eq(i506, -1)
+5218: i512 = int_and(i509, i511)
+5221: guard_false(i512, descr=<Guard0xa8afdf0>) [i461, i457, i453, i407, i412, p209, None, i344, None, None, i294, None, p193, i183, p192, p165, p205, None, p221, p171, None, None, None, None, None, None, None, None, None, None]
+5230: i514 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i502, i506, descr=<Calli 8 ii EF=0 OS=14>)
+5269: i516 = int_lt(i493, 0)
+5277: guard_false(i516, descr=<Guard0xa8ad040>) [i506, i514, i502, i493, i461, p465, i471, p473, i407, i412, None, None, i344, None, None, i294, None, p193, i183, p192, p165, p205, None, None, p171, None, None, None, None, None, None, None, None, None, None]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+5283: i518 = int_eq(i514, -9223372036854775808)
+5283: i520 = int_rshift(i514, 3)
+5290: i522 = int_lshift(i520, 3)
+5297: i524 = int_xor(i514, 8)
+5304: i526 = int_rshift(i524, 63)
+5308: i527 = int_ne(i522, i514)
+5320: i528 = int_and(i526, i527)
+5323: i529 = int_add(i520, i528)
+5326: i531 = int_rshift(i529, 63)
+5333: i532 = int_xor(i529, i531)
+5339: i533 = int_sub(i532, i531)
+5342: i535 = int_eq(i533, -9223372036854775808)
+5342: i537 = int_and(i533, 16383)
+5352: setfield_gc(p483, i514, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+5363: i539 = int_lt(i529, 0)
+5367: guard_false(i539, descr=<Guard0xa8ad0a0>) [i537, i533, i529, i461, p465, i471, p473, i407, i412, None, None, i344, None, None, i294, None, p193, i183, p192, p165, p205, None, None, p171, None, None, None, None, None, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)) from (remainder (quotient CellRef(x) 8) n)')
debug_merge_point(0, 0, '(+ AppRand2 AppRand3)')
+5373: i540 = int_add(i471, i537)
debug_merge_point(0, 0, '(CellRef(loop) (quotient q 16384) AppRand4 n5224)')
+5379: p541 = getfield_gc_r(p465, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+5390: p542 = getfield_gc_r(p541, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+5394: guard_nonnull_class(p542, 16478072, descr=<Guard0xa8ad100>) [i537, i533, i529, i461, p465, i471, p473, i407, i412, None, None, i344, None, None, i294, None, p193, i183, p192, p165, p205, None, None, p171, None, None, None, None, None, None, None, None, None, None]
+5412: i545 = int_rshift(i412, 14)
+5423: i547 = int_lshift(i545, 14)
+5423: i549 = int_xor(i412, 16384)
+5423: i550 = int_ne(i547, i412)
+5423: p551 = getfield_gc_r(p542, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+5434: guard_value(p551, ConstPtr(ptr552), descr=<Guard0xa8afe38>) [i537, i533, i529, i461, p465, i471, p473, i407, i412, None, None, i344, None, None, i294, None, p193, i183, p192, p165, p205, None, None, p171, None, None, None, None, None, None, None, None, None, None]
+5447: i553 = instance_ptr_eq(p465, p542)
+5450: guard_true(i553, descr=<Guard0xa8afe80>) [i537, i533, i529, i461, p465, i471, p473, i407, i412, None, None, i344, None, None, i294, None, p193, i183, p192, p165, p205, None, None, p171, None, None, None, None, None, None, None, None, None, None]
debug_merge_point(0, 0, '(if (zero? q) (remainder r n5224) (let ([AppRand2 (* 16384 r)][AppRand3 (CellRef(random14) 16384)]) (let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)))) from (CellRef(loop) (quotient q 16384) AppRand4 n5224)')
+5456: p554 = new_with_vtable(descr=<SizeDescr 16>)
+5503: p555 = new_with_vtable(descr=<SizeDescr 48>)
+5514: p556 = new_with_vtable(descr=<SizeDescr 32>)
+5526: setfield_gc(p556, p205, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+5530: setfield_gc(p556, i294, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_0 16 pure>)
+5541: setfield_gc(p556, i344, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_1 24 pure>)
+5552: p557 = new_with_vtable(descr=<SizeDescr 40>)
+5563: setfield_gc(p557, p171, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+5574: p558 = new_with_vtable(descr=<SizeDescr 24>)
+5586: p559 = new_with_vtable(descr=<SizeDescr 40>)
+5598: setfield_gc(p559, p192, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+5616: setfield_gc(p559, ConstPtr(ptr560), descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+5620: setfield_gc(p559, i183, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_vals_fixed_1 24 pure>)
+5631: setfield_gc(p559, p193, descr=<FieldP pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_w_val0 32 pure>)
+5642: setfield_gc(p558, p559, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+5647: setfield_gc(p558, 0, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+5656: setfield_gc(p557, p558, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+5660: setfield_gc(p557, p165, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+5678: setfield_gc(p557, ConstPtr(ptr561), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+5682: setfield_gc(p555, p171, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+5686: setfield_gc(p554, i412, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+5697: setfield_gc(p555, p556, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+5701: setfield_gc(p555, p557, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+5712: setfield_gc(p555, ConstPtr(ptr562), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+5716: setfield_gc(p555, i407, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+5727: jump(p465, i545, i540, p554, p555, p472, p473, p478, p479, p482, p483, i514, p489, p490, p494, p495, p171, p541, p542, descr=TargetToken(139976055980144))
+5936: --end of the loop--
[3e4c20ebd3574b6] jit-log-opt-bridge}
[3e4c20ed6fb89ac] {jit-backend
[3e4c20ed76a603a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0bf
[3e4c20ed76c4538] jit-backend-dump}
[3e4c20ed76d2633] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c2e4 +0  33000000
[3e4c20ed76d3ec4] jit-backend-dump}
[3e4c20ed76d7e3c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0d125 +0  33000000
[3e4c20ed76d8e42] jit-backend-dump}
[3e4c20ed76dc07a] {jit-backend-addr
bridge out of Guard 0x3fdf100 has address 0x7f4eb6c0c2e0 to 0x7f4eb6c0d120
       gc table: 0x7f4eb6c0bf30
    jump target: 0x7f4eb6c0c2e0
         resops: 0x7f4eb6c0c2ee
       failures: 0x7f4eb6c0d120
            end: 0x7f4eb6c0dd85
[3e4c20ed76de614] jit-backend-addr}
[3e4c20ed76e1fb8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c30d +0  A40E0000
[3e4c20ed76e2e52] jit-backend-dump}
[3e4c20ed76e601f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c325 +0  A80E0000
[3e4c20ed76e6d2e] jit-backend-dump}
[3e4c20ed76e9e9d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c333 +0  B60E0000
[3e4c20ed76eabd4] jit-backend-dump}
[3e4c20ed76ede80] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c34e +0  B70E0000
[3e4c20ed76eebc4] jit-backend-dump}
[3e4c20ed76f1c12] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c363 +0  BE0E0000
[3e4c20ed76f297a] jit-backend-dump}
[3e4c20ed76f5a6b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c375 +0  C80E0000
[3e4c20ed76f676e] jit-backend-dump}
[3e4c20ed76f979f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c38d +0  CC0E0000
[3e4c20ed76fa4eb] jit-backend-dump}
[3e4c20ed76fd5b1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c3a7 +0  CE0E0000
[3e4c20ed76fe2d6] jit-backend-dump}
[3e4c20ed7701289] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c3b8 +0  D90E0000
[3e4c20ed7702022] jit-backend-dump}
[3e4c20ed770504f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c3d2 +0  DB0E0000
[3e4c20ed7705d83] jit-backend-dump}
[3e4c20ed7708dde] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c3e0 +0  E90E0000
[3e4c20ed7709b3a] jit-backend-dump}
[3e4c20ed770cb30] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c3f0 +0  F50E0000
[3e4c20ed770d85e] jit-backend-dump}
[3e4c20ed7710814] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c404 +0  FD0E0000
[3e4c20ed7711569] jit-backend-dump}
[3e4c20ed7714596] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c41f +0  FE0E0000
[3e4c20ed77152c1] jit-backend-dump}
[3e4c20ed77182dc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c42d +0  0C0F0000
[3e4c20ed7719078] jit-backend-dump}
[3e4c20ed771c050] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c43d +0  180F0000
[3e4c20ed771cd90] jit-backend-dump}
[3e4c20ed771fd67] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c452 +0  1F0F0000
[3e4c20ed7720ac3] jit-backend-dump}
[3e4c20ed7723b6e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c47b +0  120F0000
[3e4c20ed7724892] jit-backend-dump}
[3e4c20ed7727861] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c495 +0  140F0000
[3e4c20ed77285cf] jit-backend-dump}
[3e4c20ed772b608] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c4a3 +0  220F0000
[3e4c20ed772c32d] jit-backend-dump}
[3e4c20ed772f2c7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c4bc +0  250F0000
[3e4c20ed773001a] jit-backend-dump}
[3e4c20ed7733019] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c4d2 +0  2B0F0000
[3e4c20ed7733d44] jit-backend-dump}
[3e4c20ed7736d28] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c4e3 +0  360F0000
[3e4c20ed7737a77] jit-backend-dump}
[3e4c20ed773aa5b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c4f9 +0  3C0F0000
[3e4c20ed773b79e] jit-backend-dump}
[3e4c20ed773e75a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c507 +0  4A0F0000
[3e4c20ed773f4d2] jit-backend-dump}
[3e4c20ed77424dd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c514 +0  590F0000
[3e4c20ed77431f9] jit-backend-dump}
[3e4c20ed7749042] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c528 +0  610F0000
[3e4c20ed7749f72] jit-backend-dump}
[3e4c20ed774d766] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c55e +0  470F0000
[3e4c20ed774e4a3] jit-backend-dump}
[3e4c20ed77515f6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c579 +0  480F0000
[3e4c20ed7752358] jit-backend-dump}
[3e4c20ed775534e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c58d +0  500F0000
[3e4c20ed7756073] jit-backend-dump}
[3e4c20ed7758f7a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c5a3 +0  560F0000
[3e4c20ed7759ccd] jit-backend-dump}
[3e4c20ed775ccba] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c5bd +0  580F0000
[3e4c20ed775d9c6] jit-backend-dump}
[3e4c20ed7760897] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c5d5 +0  5C0F0000
[3e4c20ed77615d1] jit-backend-dump}
[3e4c20ed7764512] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c5e2 +0  6B0F0000
[3e4c20ed776521c] jit-backend-dump}
[3e4c20ed776811a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c5fc +0  6D0F0000
[3e4c20ed7768e66] jit-backend-dump}
[3e4c20ed776bdc4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c610 +0  750F0000
[3e4c20ed776cafb] jit-backend-dump}
[3e4c20ed776f9b0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c631 +0  700F0000
[3e4c20ed77706d7] jit-backend-dump}
[3e4c20ed77735f7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c65e +0  5F0F0000
[3e4c20ed7774310] jit-backend-dump}
[3e4c20ed7777258] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c66b +0  6E0F0000
[3e4c20ed7777f9e] jit-backend-dump}
[3e4c20ed777aee6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c674 +0  810F0000
[3e4c20ed777bc51] jit-backend-dump}
[3e4c20ed777eb1e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c67e +0  930F0000
[3e4c20ed777f868] jit-backend-dump}
[3e4c20ed77827a0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c6a1 +0  8C0F0000
[3e4c20ed77834a9] jit-backend-dump}
[3e4c20ed7786324] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c6ae +0  9B0F0000
[3e4c20ed7787067] jit-backend-dump}
[3e4c20ed7789f97] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c6d0 +0  950F0000
[3e4c20ed778aca6] jit-backend-dump}
[3e4c20ed778db5e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c6dd +0  A40F0000
[3e4c20ed778e89b] jit-backend-dump}
[3e4c20ed779182c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c712 +0  8B0F0000
[3e4c20ed779253c] jit-backend-dump}
[3e4c20ed779539b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c748 +0  710F0000
[3e4c20ed77960c9] jit-backend-dump}
[3e4c20ed7799020] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c787 +0  4E0F0000
[3e4c20ed7799d2c] jit-backend-dump}
[3e4c20ed779cbb6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c7c7 +0  2A0F0000
[3e4c20ed779d903] jit-backend-dump}
[3e4c20ed77a080d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c7f0 +0  1D0F0000
[3e4c20ed77a1526] jit-backend-dump}
[3e4c20ed77a4391] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c81f +0  0A0F0000
[3e4c20ed77a50b9] jit-backend-dump}
[3e4c20ed77a7fe5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c85b +0  EA0E0000
[3e4c20ed77a8ceb] jit-backend-dump}
[3e4c20ed77abb7f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c869 +0  F80E0000
[3e4c20ed77ac897] jit-backend-dump}
[3e4c20ed77af7ba] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c872 +0  0B0F0000
[3e4c20ed77b04d6] jit-backend-dump}
[3e4c20ed77b334a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c87c +0  1D0F0000
[3e4c20ed77b409a] jit-backend-dump}
[3e4c20ed77b6fb4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c889 +0  2C0F0000
[3e4c20ed77b7ccc] jit-backend-dump}
[3e4c20ed77bab94] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c89d +0  340F0000
[3e4c20ed77bb8bb] jit-backend-dump}
[3e4c20ed77be7cc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c8c3 +0  2A0F0000
[3e4c20ed77bf4d5] jit-backend-dump}
[3e4c20ed77c23b5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c8f2 +0  170F0000
[3e4c20ed77c3108] jit-backend-dump}
[3e4c20ed77c6062] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c923 +0  020F0000
[3e4c20ed77c6dd0] jit-backend-dump}
[3e4c20ed77c9cda] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c988 +0  B90E0000
[3e4c20ed77caa1b] jit-backend-dump}
[3e4c20ed77cd990] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c9b3 +0  AA0E0000
[3e4c20ed77ce6b2] jit-backend-dump}
[3e4c20ed77d154e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c9d1 +0  A80E0000
[3e4c20ed77d227f] jit-backend-dump}
[3e4c20ed77d51fb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c9e2 +0  B30E0000
[3e4c20ed77d5f0a] jit-backend-dump}
[3e4c20ed77d8dcc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c9f0 +0  C10E0000
[3e4c20ed77d9aea] jit-backend-dump}
[3e4c20ed77dca2f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c9fe +0  CF0E0000
[3e4c20ed77dd74a] jit-backend-dump}
[3e4c20ed77e0652] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ca0c +0  DD0E0000
[3e4c20ed77e137d] jit-backend-dump}
[3e4c20ed77e42e3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ca19 +0  EC0E0000
[3e4c20ed77e4ff2] jit-backend-dump}
[3e4c20ed77e7e83] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ca26 +0  FB0E0000
[3e4c20ed77e8bbd] jit-backend-dump}
[3e4c20ed77ebb11] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ca4c +0  F10E0000
[3e4c20ed77ec832] jit-backend-dump}
[3e4c20ed77ef6a1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ca7c +0  DD0E0000
[3e4c20ed77f03cc] jit-backend-dump}
[3e4c20ed77f3307] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0cab1 +0  C40E0000
[3e4c20ed77f4014] jit-backend-dump}
[3e4c20ed77f6ec2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0caef +0  A20E0000
[3e4c20ed77f7be7] jit-backend-dump}
[3e4c20ed77fab0d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0cb20 +0  8D0E0000
[3e4c20ed77fb816] jit-backend-dump}
[3e4c20ed77fe6e1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0cb50 +0  790E0000
[3e4c20ed77ff412] jit-backend-dump}
[3e4c20ed780234d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0cb7e +0  670E0000
[3e4c20ed7803050] jit-backend-dump}
[3e4c20ed7805eea] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0cb9c +0  650E0000
[3e4c20ed7806c02] jit-backend-dump}
[3e4c20ed7809b22] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0cbad +0  700E0000
[3e4c20ed780a825] jit-backend-dump}
[3e4c20ed780d6af] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0cbbb +0  7E0E0000
[3e4c20ed780e3d1] jit-backend-dump}
[3e4c20ed78112e8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0cbc9 +0  8C0E0000
[3e4c20ed7811fee] jit-backend-dump}
[3e4c20ed7814e81] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0cbd7 +0  9A0E0000
[3e4c20ed7815bc8] jit-backend-dump}
[3e4c20ed7818af7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0cbe4 +0  A90E0000
[3e4c20ed78197f7] jit-backend-dump}
[3e4c20ed781c67b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0cbf1 +0  B80E0000
[3e4c20ed781d3a6] jit-backend-dump}
[3e4c20ed78202c0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0cc17 +0  AE0E0000
[3e4c20ed7820fdb] jit-backend-dump}
[3e4c20ed7823e9c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0cc47 +0  9A0E0000
[3e4c20ed7824bc1] jit-backend-dump}
[3e4c20ed7827aea] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0cc71 +0  8C0E0000
[3e4c20ed78287f6] jit-backend-dump}
[3e4c20ed782b693] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ccc4 +0  550E0000
[3e4c20ed782c3dc] jit-backend-dump}
[3e4c20ed782f2f0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0cce6 +0  4F0E0000
[3e4c20ed782fff6] jit-backend-dump}
[3e4c20ed7832e71] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ccfa +0  570E0000
[3e4c20ed7833b96] jit-backend-dump}
[3e4c20ed7836aea] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0cd03 +0  6A0E0000
[3e4c20ed78377f3] jit-backend-dump}
[3e4c20ed783a6a5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0cd25 +0  640E0000
[3e4c20ed783b3bd] jit-backend-dump}
[3e4c20ed783e2e0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0cd36 +0  6F0E0000
[3e4c20ed783efe6] jit-backend-dump}
[3e4c20ed7841e89] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0cd50 +0  710E0000
[3e4c20ed7842bbd] jit-backend-dump}
[3e4c20ed7845add] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0cd7d +0  600E0000
[3e4c20ed78467e3] jit-backend-dump}
[3e4c20ed7849655] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0cd91 +0  680E0000
[3e4c20ed784a373] jit-backend-dump}
[3e4c20ed784d284] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0cd9a +0  7B0E0000
[3e4c20ed784df8a] jit-backend-dump}
[3e4c20ed7850e1a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0cda4 +0  8D0E0000
[3e4c20ed7851b3f] jit-backend-dump}
[3e4c20ed7854a90] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0cdd3 +0  7A0E0000
[3e4c20ed78557a2] jit-backend-dump}
[3e4c20ed7858667] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0cde7 +0  820E0000
[3e4c20ed78593b0] jit-backend-dump}
[3e4c20ed785c307] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ce09 +0  7C0E0000
[3e4c20ed785d00a] jit-backend-dump}
[3e4c20ed785fe9a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ce16 +0  8B0E0000
[3e4c20ed7860bb9] jit-backend-dump}
[3e4c20ed7863ad0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ce4b +0  720E0000
[3e4c20ed78647d9] jit-backend-dump}
[3e4c20ed786779e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ce81 +0  580E0000
[3e4c20ed78684d8] jit-backend-dump}
[3e4c20ed786b4b0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ceb9 +0  3C0E0000
[3e4c20ed786c1b9] jit-backend-dump}
[3e4c20ed786f052] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0cf14 +0  FD0D0000
[3e4c20ed786fd7a] jit-backend-dump}
[3e4c20ed7872cc2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0cf3c +0  F10D0000
[3e4c20ed78739ce] jit-backend-dump}
[3e4c20ed7876855] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0cf5f +0  EA0D0000
[3e4c20ed787758f] jit-backend-dump}
[3e4c20ed787a4d7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0cf68 +0  FD0D0000
[3e4c20ed787b1e0] jit-backend-dump}
[3e4c20ed787e395] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c01a7d +0  5FA80000
[3e4c20ed787f0aa] jit-backend-dump}
[3e4c20ed7882f81] jit-backend}
[3e4c20ed78869c7] {jit-log-opt-bridge
# bridge out of Guard 0x3fdf100 with 519 ops
[i0, p1, p2, p3]
+966: guard_not_invalidated(descr=<Guard0xa8ade80>) [i0, p1, p2, p3]
+966: p4 = getfield_gc_r(p1, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+984: guard_value(p4, ConstPtr(ptr5), descr=<Guard0xa8e5580>) [i0, p1, p2, p3]
+993: p6 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_1 32 pure>)
+997: guard_nonnull_class(p6, ConstClass(W_Fixnum), descr=<Guard0xa8fc080>) [i0, p1, p2, p3]
+1017: i8 = getfield_gc_i(p6, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1022: i9 = int_ge(i0, i8)
+1025: guard_true(i9, descr=<Guard0xa8e5538>) [i0, p1, p2, p3]
debug_merge_point(0, 0, '(if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))')
debug_merge_point(0, 0, '(void)')
+1031: p10 = getfield_gc_r(p2, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+1049: guard_value(p10, ConstPtr(ptr11), descr=<Guard0xa8e54f0>) [i0, p1, p2, p3]
+1058: p12 = getfield_gc_r(p2, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1062: p13 = getfield_gc_r(p2, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1066: guard_class(p12, 16500720, descr=<Guard0xa8e54a8>) [i0, p1, p2, p3]
+1079: p15 = getfield_gc_r(p12, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1083: guard_class(p13, 16435208, descr=<Guard0xa8e5460>) [i0, p1, p2, p3]
+1097: p17 = getfield_gc_r(p13, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1102: guard_nonnull_class(p17, ConstClass(ForwardLink), descr=<Guard0xa8fc020>) [i0, p1, p2, p3]
debug_merge_point(0, 0, '(if (even? CellRef(path)) (let ([tmp (vector-ref CellRef(tn1) 0)][AppRand53 (vector-ref CellRef(tn2) 0)]) (vector-set! CellRef(tn1) 0 AppRand53) (vector-set! CellRef(tn2) 0 tmp)) (let ([tmp5560 (vector-ref CellRef(tn1) 1)][AppRand54 (vector-ref CellRef(tn2) 1)]) (vector-set! CellRef(tn1) 1 AppRand54) (vector-set! CellRef(tn2) 1 tmp5560)))')
+1121: p19 = getfield_gc_r(p12, descr=<FieldP rpython.tool.pairtype.ConsEnvSize4.inst__vals_1 24 pure>)
+1125: p20 = getfield_gc_r(p19, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1129: guard_nonnull_class(p20, ConstClass(W_CellIntegerStrategy), descr=<Guard0xa8adfa0>) [i0, p1, p2, p3]
+1147: i22 = getfield_gc_i(p20, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1151: i24 = int_and(i22, 1)
+1155: i25 = int_is_zero(i24)
+1158: guard_true(i25, descr=<Guard0xa8e5418>) [i0, p1, p2, p3]
debug_merge_point(0, 0, '(let ([tmp (vector-ref CellRef(tn1) 0)][AppRand53 (vector-ref CellRef(tn2) 0)]) (vector-set! CellRef(tn1) 0 AppRand53) (vector-set! CellRef(tn2) 0 tmp))')
debug_merge_point(0, 0, '(vector-ref CellRef(tn1) 0)')
+1164: p26 = getfield_gc_r(p12, descr=<FieldP rpython.tool.pairtype.ConsEnvSize4.inst__vals_2 32 pure>)
+1168: p27 = getfield_gc_r(p26, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1172: guard_nonnull_class(p27, ConstClass(W_Vector), descr=<Guard0xa8adf40>) [i0, p1, p2, p3]
+1190: i29 = getfield_gc_i(p27, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1194: i31 = int_lt(0, i29)
+1198: guard_true(i31, descr=<Guard0xa8e53d0>) [i0, p1, p2, p3]
+1204: p32 = getfield_gc_r(p27, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1208: guard_class(p32, 16622984, descr=<Guard0xa8e5388>) [i0, p1, p2, p3]
+1220: p34 = getfield_gc_r(p27, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1224: p36 = getarrayitem_gc_r(p34, 0, descr=<ArrayP 8>)
+1228: guard_class(p36, ConstClass(W_Vector), descr=<Guard0xa8e5340>) [i0, p1, p2, p3]
debug_merge_point(0, 0, '(vector-ref CellRef(tn2) 0)')
+1240: p38 = getfield_gc_r(p12, descr=<FieldP rpython.tool.pairtype.ConsEnvSize4.inst__vals_3 40 pure>)
+1244: p39 = getfield_gc_r(p38, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1248: guard_nonnull_class(p39, ConstClass(W_Vector), descr=<Guard0xa8adee0>) [i0, p1, p2, p3]
+1267: i41 = getfield_gc_i(p39, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1271: i43 = int_lt(0, i41)
+1275: guard_true(i43, descr=<Guard0xa8e52f8>) [i0, p1, p2, p3]
+1281: p44 = getfield_gc_r(p39, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1285: guard_class(p44, 16622984, descr=<Guard0xa8e52b0>) [i0, p1, p2, p3]
+1297: p46 = getfield_gc_r(p39, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1301: p48 = getarrayitem_gc_r(p46, 0, descr=<ArrayP 8>)
+1305: guard_class(p48, ConstClass(W_Vector), descr=<Guard0xa8e5268>) [i0, p1, p2, p3]
debug_merge_point(0, 0, '(vector-set! CellRef(tn1) 0 AppRand53)')
debug_merge_point(0, 0, '(vector-set! CellRef(tn2) 0 tmp)')
+1328: setarrayitem_gc(p34, 0, p48, descr=<ArrayP 8>)
debug_merge_point(0, 0, '(let ([SetBang7 (+ CellRef(actuallyMut) 2)]) (set! actuallyMut SetBang7))')
debug_merge_point(0, 0, '(+ CellRef(actuallyMut) 2)')
+1342: setarrayitem_gc(p46, 0, p36, descr=<ArrayP 8>)
+1346: guard_class(p15, 16479200, descr=<Guard0xa8addc0>) [p15, p13, p17, None, None, None, None]
+1359: p54 = getfield_gc_r(p15, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_1 32 pure>)
+1363: p55 = getfield_gc_r(p54, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1367: guard_nonnull_class(p55, ConstClass(W_CellIntegerStrategy), descr=<Guard0xa8ade20>) [p15, p13, p17, None, None, None, None]
+1385: i57 = getfield_gc_i(p55, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1389: i59 = int_add_ovf(i57, 2)
+1393: guard_no_overflow(descr=<Guard0xa8e5100>) [p15, p13, p17, None, None, None, None]
debug_merge_point(0, 0, '(set! actuallyMut SetBang7)')
+1399: p60 = getfield_gc_r(p13, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+1404: setfield_gc(p55, i59, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1415: guard_value(p60, ConstPtr(ptr61), descr=<Guard0xa8ada00>) [p60, p13, None, None, None, None, None, None]
+1424: p62 = getfield_gc_r(p13, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1429: p63 = getfield_gc_r(p13, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55)) from (+ CellRef(actuallyMut) 2)')
+1434: guard_class(p62, 16504944, descr=<Guard0xa8e50b8>) [p60, p13, None, None, None, None, None, None]
+1446: p65 = getfield_gc_r(p62, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1450: guard_class(p63, 16435208, descr=<Guard0xa8e5070>) [p60, p13, None, None, None, None, None, None]
+1463: p67 = getfield_gc_r(p63, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1467: guard_nonnull_class(p67, ConstClass(ForwardLink), descr=<Guard0xa8add60>) [p60, p13, None, None, None, None, None, None]
debug_merge_point(0, 0, '(+ i5574 1)')
+1485: i69 = getfield_gc_i(p62, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1489: i71 = int_add_ovf(i69, 1)
+1493: guard_no_overflow(descr=<Guard0xa8e5028>) [p60, p13, None, None, None, None, None, None]
debug_merge_point(0, 0, '(doloop5572 AppRand55)')
+1499: guard_class(p65, 16481456, descr=<Guard0xa8e4fe0>) [p60, p13, None, None, None, None, None, None]
+1512: p73 = getfield_gc_r(p65, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1523: guard_value(p73, ConstPtr(ptr74), descr=<Guard0xa8e4f98>) [p60, p13, None, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([if10 (>= i5574 (quotient n5570 2))]) (if if10 (void) (begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55))))) from (doloop5572 AppRand55)')
debug_merge_point(0, 0, '(>= i5574 (quotient n5570 2))')
+1532: i75 = getfield_gc_i(p65, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_vals_fixed_1 24 pure>)
+1536: i77 = int_eq(i75, -9223372036854775808)
+1536: i79 = int_rshift(i75, 1)
+1542: i81 = int_lshift(i79, 1)
+1548: i83 = int_xor(i75, 2)
+1555: i85 = int_rshift(i83, 63)
+1559: i86 = int_ne(i81, i75)
+1571: i87 = int_and(i85, i86)
+1574: i88 = int_add(i79, i87)
+1577: i89 = int_ge(i71, i88)
+1580: guard_false(i89, descr=<Guard0xa8e4f50>) [p60, p13, None, None, None, None, None, None]
debug_merge_point(0, 0, '(if if10 (void) (begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55))))')
debug_merge_point(0, 0, '(begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55)))')
debug_merge_point(0, 0, '(CellRef(oldGenSwapSubtrees))')
+1586: p90 = getfield_gc_r(p65, descr=<FieldP pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_w_val0 32 pure>)
+1590: p91 = getfield_gc_r(p90, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1594: guard_nonnull_class(p91, 16479200, descr=<Guard0xa8add00>) [p60, p13, None, None, None, None, None, None]
+1613: p93 = getfield_gc_r(p91, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1624: guard_value(p93, ConstPtr(ptr94), descr=<Guard0xa8e4f08>) [p60, p13, None, None, None, None, None, None]
+1633: p95 = getfield_gc_r(p65, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([index1 (rnd (vector-length CellRef(trees)))][index2 (rnd (vector-length CellRef(trees)))]) (let ([depth (rnd treeHeight)][path (rnd pathBits)][tn1 (vector-ref CellRef(trees) index1)][tn2 (vector-ref CellRef(trees) index2)]) (let ([doloop5533 (lambda (i5535) (let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))))]) (doloop5533 0) (if (even? CellRef(path)) (let ([tmp (vector-ref CellRef(tn1) 0)][AppRand53 (vector-ref CellRef(tn2) 0)]) (vector-set! CellRef(tn1) 0 AppRand53) (vector-set! CellRef(tn2) 0 tmp)) (let ([tmp5560 (vector-ref CellRef(tn1) 1)][AppRand54 (vector-ref CellRef(tn2) 1)]) (vector-set! CellRef(tn1) 1 AppRand54) (vector-set! CellRef(tn2) 1 tmp5560))) (let ([SetBang7 (+ CellRef(actuallyMut) 2)]) (set! actuallyMut SetBang7)))))')
debug_merge_point(0, 0, '(rnd (vector-length CellRef(trees)))')
+1633: p96 = getfield_gc_r(p91, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_2 40 pure>)
+1637: guard_nonnull_class(p96, 16478072, descr=<Guard0xa8adca0>) [p60, p13, None, None, None, None, None, None]
+1655: p98 = getfield_gc_r(p91, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_3 48 pure>)
+1659: p99 = getfield_gc_r(p98, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1663: guard_nonnull_class(p99, ConstClass(W_Vector), descr=<Guard0xa8adc40>) [p60, p13, None, None, None, None, None, None]
+1681: i101 = getfield_gc_i(p99, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1685: p102 = getfield_gc_r(p96, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1696: guard_value(p102, ConstPtr(ptr103), descr=<Guard0xa8e4ec0>) [p60, p13, None, None, None, None, None, None]
+1705: p104 = getfield_gc_r(p91, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([if0 (if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)]) (if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))))')
debug_merge_point(0, 0, '(if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)')
debug_merge_point(0, 0, '(if (integer? n5234) (< n5234 16384) #f)')
debug_merge_point(0, 0, '(< n5234 16384)')
+1705: i106 = int_lt(i101, 16384)
+1712: guard_true(i106, descr=<Guard0xa8e4e78>) [p60, p13, None, None, None, None, None, None]
debug_merge_point(0, 0, '(if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234)))')
debug_merge_point(0, 0, '(CellRef(random14) n5234)')
+1718: p107 = getfield_gc_r(p96, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+1722: p108 = getfield_gc_r(p107, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1726: guard_nonnull_class(p108, 16478824, descr=<Guard0xa8adbe0>) [p60, p13, None, None, None, None, None, None]
+1744: p110 = getfield_gc_r(p108, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1755: guard_value(p110, ConstPtr(ptr111), descr=<Guard0xa8e4e30>) [p60, p13, None, None, None, None, None, None]
+1764: p112 = getfield_gc_r(p96, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+1764: p113 = getfield_gc_r(p108, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_2 40 pure>)
+1768: p114 = getfield_gc_r(p113, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1779: guard_nonnull_class(p114, ConstClass(W_CellIntegerStrategy), descr=<Guard0xa8adb80>) [p60, p13, None, None, None, None, None, None]
+1797: i116 = getfield_gc_i(p114, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1801: p117 = getfield_gc_r(p108, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_3 48 pure>)
+1812: p118 = getfield_gc_r(p117, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1823: guard_nonnull_class(p118, ConstClass(W_CellIntegerStrategy), descr=<Guard0xa8adb20>) [p60, p13, None, None, None, None, None, None]
+1842: i120 = getfield_gc_i(p118, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1846: i121 = int_is_true(i116)
+1849: guard_true(i121, descr=<Guard0xa8e4de8>) [p60, p13, None, None, None, None, None, None]
+1855: i122 = int_is_true(i120)
+1858: guard_true(i122, descr=<Guard0xa8e4da0>) [p60, p13, None, None, None, None, None, None]
+1864: i123 = int_mul_ovf(i116, i120)
+1868: guard_no_overflow(descr=<Guard0xa8e4d58>) [p60, p13, None, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+1874: p124 = getfield_gc_r(p108, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_1 32 pure>)
+1878: p125 = getfield_gc_r(p124, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1889: guard_nonnull_class(p125, ConstClass(W_CellIntegerStrategy), descr=<Guard0xa8adac0>) [p60, p13, None, None, None, None, None, None]
+1909: i127 = getfield_gc_i(p125, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1913: i128 = int_add_ovf(i123, i127)
+1916: guard_no_overflow(descr=<Guard0xa8e4d10>) [p60, p13, None, None, None, None, None, None]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+1922: p129 = getfield_gc_r(p108, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_0 24 pure>)
+1926: p130 = getfield_gc_r(p129, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1937: guard_nonnull_class(p130, ConstClass(W_CellIntegerStrategy), descr=<Guard0xa8ada60>) [p60, p13, None, None, None, None, None, None]
+1956: i132 = getfield_gc_i(p130, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1960: i133 = int_is_zero(i132)
+1963: guard_false(i133, descr=<Guard0xa8e4cc8>) [p60, p13, None, None, None, None, None, None]
+1969: i135 = int_rshift(i128, 63)
+1980: i136 = int_xor(i128, i135)
+1997: i137 = int_sub(i136, i135)
+2000: i139 = int_rshift(i132, 63)
+2007: i140 = int_xor(i132, i139)
+2010: i141 = int_sub(i140, i139)
+2013: i142 = int_is_zero(i141)
+2016: guard_false(i142, descr=<Guard0xa8e4c80>) [p60, p13, None, None, None, None, None, None]
+2022: i144 = int_eq(i137, -9223372036854775808)
+2044: i146 = int_eq(i141, -1)
+2064: i147 = int_and(i144, i146)
+2067: guard_false(i147, descr=<Guard0xa8e4c38>) [p60, p13, None, None, None, None, None, None]
+2076: i149 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i137, i141, descr=<Calli 8 ii EF=0 OS=14>)
+2125: i151 = int_lt(i128, 0)
+2133: guard_false(i151, descr=<Guard0xa8ad9a0>) [i141, i149, i137, i128, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+2139: i153 = int_eq(i149, -9223372036854775808)
+2139: i155 = int_rshift(i149, 3)
+2146: i157 = int_lshift(i155, 3)
+2153: i159 = int_xor(i149, 8)
+2160: i161 = int_rshift(i159, 63)
+2164: i162 = int_ne(i157, i149)
+2177: i163 = int_and(i161, i162)
+2180: i164 = int_add(i155, i163)
+2183: setfield_gc(p118, i149, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2194: i165 = int_is_zero(i101)
+2197: guard_false(i165, descr=<Guard0xa8ad940>) [i101, i164, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+2203: i167 = int_rshift(i164, 63)
+2210: i168 = int_xor(i164, i167)
+2216: i169 = int_sub(i168, i167)
+2219: i171 = int_rshift(i101, 63)
+2226: i172 = int_xor(i101, i171)
+2232: i173 = int_sub(i172, i171)
+2235: i174 = int_is_zero(i173)
+2238: guard_false(i174, descr=<Guard0xa8e4b60>) [i101, i164, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+2244: i176 = int_eq(i169, -9223372036854775808)
+2266: i178 = int_eq(i173, -1)
+2279: i179 = int_and(i176, i178)
+2282: guard_false(i179, descr=<Guard0xa8e4ad0>) [i101, i164, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+2291: i181 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i169, i173, descr=<Calli 8 ii EF=0 OS=14>)
+2337: i183 = int_lt(i164, 0)
+2345: guard_false(i183, descr=<Guard0xa8ad8e0>) [i173, i181, i169, i164, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(rnd (vector-length CellRef(trees)))')
debug_merge_point(0, 0, '(let ([if0 (if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)]) (if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))))')
debug_merge_point(0, 0, '(if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)')
debug_merge_point(0, 0, '(if (integer? n5234) (< n5234 16384) #f)')
debug_merge_point(0, 0, '(< n5234 16384)')
debug_merge_point(0, 0, '(if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234)))')
debug_merge_point(0, 0, '(CellRef(random14) n5234)')
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+2351: i184 = getfield_gc_i(p114, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2356: i185 = int_is_true(i184)
+2359: guard_true(i185, descr=<Guard0xa8e4a88>) [i173, i181, i169, i164, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
+2365: i186 = int_is_true(i149)
+2368: guard_true(i186, descr=<Guard0xa8e4a40>) [i173, i181, i169, i164, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
+2374: i187 = int_mul_ovf(i184, i149)
+2378: guard_no_overflow(descr=<Guard0xa8e49f8>) [i173, i181, i169, i164, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+2384: i188 = getfield_gc_i(p125, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2388: i189 = int_add_ovf(i187, i188)
+2391: guard_no_overflow(descr=<Guard0xa8e49b0>) [i173, i181, i169, i164, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+2397: i190 = getfield_gc_i(p130, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2408: i191 = int_is_zero(i190)
+2411: guard_false(i191, descr=<Guard0xa8e4968>) [i173, i181, i169, i164, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
+2417: i193 = int_rshift(i189, 63)
+2424: i194 = int_xor(i189, i193)
+2430: i195 = int_sub(i194, i193)
+2433: i197 = int_rshift(i190, 63)
+2440: i198 = int_xor(i190, i197)
+2443: i199 = int_sub(i198, i197)
+2446: i200 = int_is_zero(i199)
+2449: guard_false(i200, descr=<Guard0xa8e4920>) [i173, i181, i169, i164, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
+2455: i202 = int_eq(i195, -9223372036854775808)
+2477: i204 = int_eq(i199, -1)
+2490: i205 = int_and(i202, i204)
+2493: guard_false(i205, descr=<Guard0xa8e4890>) [i173, i181, i169, i164, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
+2502: i207 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i195, i199, descr=<Calli 8 ii EF=0 OS=14>)
+2541: i209 = int_lt(i189, 0)
+2545: guard_false(i209, descr=<Guard0xa8ad880>) [i199, i207, i195, i189, i181, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+2551: i211 = int_eq(i207, -9223372036854775808)
+2551: i213 = int_rshift(i207, 3)
+2558: i215 = int_lshift(i213, 3)
+2565: i217 = int_xor(i207, 8)
+2572: i219 = int_rshift(i217, 63)
+2576: i220 = int_ne(i215, i207)
+2588: i221 = int_and(i219, i220)
+2591: i222 = int_add(i213, i221)
+2594: i224 = int_rshift(i222, 63)
+2601: i225 = int_xor(i222, i224)
+2607: i226 = int_sub(i225, i224)
+2610: i228 = int_eq(i226, -9223372036854775808)
+2632: i229 = int_and(i228, i178)
+2639: setfield_gc(p118, i207, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2643: guard_false(i229, descr=<Guard0xa8ad820>) [i173, i226, i229, i222, i181, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
+2652: i231 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i226, i173, descr=<Calli 8 ii EF=0 OS=14>)
+2685: i233 = int_lt(i222, 0)
+2689: guard_false(i233, descr=<Guard0xa8ad760>) [i173, i231, i226, i222, None, i181, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([depth (rnd treeHeight)][path (rnd pathBits)][tn1 (vector-ref CellRef(trees) index1)][tn2 (vector-ref CellRef(trees) index2)]) (let ([doloop5533 (lambda (i5535) (let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))))]) (doloop5533 0) (if (even? CellRef(path)) (let ([tmp (vector-ref CellRef(tn1) 0)][AppRand53 (vector-ref CellRef(tn2) 0)]) (vector-set! CellRef(tn1) 0 AppRand53) (vector-set! CellRef(tn2) 0 tmp)) (let ([tmp5560 (vector-ref CellRef(tn1) 1)][AppRand54 (vector-ref CellRef(tn2) 1)]) (vector-set! CellRef(tn1) 1 AppRand54) (vector-set! CellRef(tn2) 1 tmp5560))) (let ([SetBang7 (+ CellRef(actuallyMut) 2)]) (set! actuallyMut SetBang7))))')
debug_merge_point(0, 0, '(rnd treeHeight)')
+2695: p234 = getfield_gc_r(p91, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_4 56 pure>)
+2706: guard_nonnull_class(p234, ConstClass(W_Fixnum), descr=<Guard0xa8ad7c0>) [i173, i231, i226, i222, None, i181, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
+2725: i236 = getfield_gc_i(p234, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(let ([if0 (if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)]) (if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))))')
debug_merge_point(0, 0, '(if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)')
debug_merge_point(0, 0, '(if (integer? n5234) (< n5234 16384) #f)')
debug_merge_point(0, 0, '(< n5234 16384)')
+2729: i238 = int_lt(i236, 16384)
+2736: guard_true(i238, descr=<Guard0xa8e4800>) [i173, i231, i226, i222, None, i181, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234)))')
debug_merge_point(0, 0, '(CellRef(random14) n5234)')
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+2742: i239 = getfield_gc_i(p114, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2747: i240 = int_is_true(i239)
+2750: guard_true(i240, descr=<Guard0xa8e47b8>) [i173, i231, i226, i222, None, i181, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
+2756: i241 = int_is_true(i207)
+2764: guard_true(i241, descr=<Guard0xa8e4770>) [i173, i231, i226, i222, None, i181, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
+2770: i242 = int_mul_ovf(i239, i207)
+2778: guard_no_overflow(descr=<Guard0xa8e4728>) [i173, i231, i226, i222, None, i181, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+2784: i243 = getfield_gc_i(p125, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2788: i244 = int_add_ovf(i242, i243)
+2791: guard_no_overflow(descr=<Guard0xa8e46e0>) [i173, i231, i226, i222, None, i181, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+2797: i245 = getfield_gc_i(p130, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2801: i246 = int_is_zero(i245)
+2804: guard_false(i246, descr=<Guard0xa8e4698>) [i173, i231, i226, i222, None, i181, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
+2810: i248 = int_rshift(i244, 63)
+2817: i249 = int_xor(i244, i248)
+2823: i250 = int_sub(i249, i248)
+2826: i252 = int_rshift(i245, 63)
+2833: i253 = int_xor(i245, i252)
+2836: i254 = int_sub(i253, i252)
+2839: i255 = int_is_zero(i254)
+2842: guard_false(i255, descr=<Guard0xa8e4650>) [i173, i231, i226, i222, None, i181, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
+2848: i257 = int_eq(i250, -9223372036854775808)
+2871: i259 = int_eq(i254, -1)
+2884: i260 = int_and(i257, i259)
+2887: guard_false(i260, descr=<Guard0xa8e4608>) [i173, i231, i226, i222, None, i181, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
+2896: i262 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i250, i254, descr=<Calli 8 ii EF=0 OS=14>)
+2939: i264 = int_lt(i244, 0)
+2943: guard_false(i264, descr=<Guard0xa8ad700>) [i254, i262, i250, i244, i231, i236, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+2949: i266 = int_eq(i262, -9223372036854775808)
+2949: i268 = int_rshift(i262, 3)
+2956: i270 = int_lshift(i268, 3)
+2963: i272 = int_xor(i262, 8)
+2970: i274 = int_rshift(i272, 63)
+2974: i275 = int_ne(i270, i262)
+2987: i276 = int_and(i274, i275)
+2990: i277 = int_add(i268, i276)
+2993: setfield_gc(p118, i262, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2997: i278 = int_is_zero(i236)
+3005: guard_false(i278, descr=<Guard0xa8ad6a0>) [i236, i277, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3011: i280 = int_rshift(i277, 63)
+3018: i281 = int_xor(i277, i280)
+3024: i282 = int_sub(i281, i280)
+3027: i284 = int_rshift(i236, 63)
+3038: i285 = int_xor(i236, i284)
+3048: i286 = int_sub(i285, i284)
+3051: i287 = int_is_zero(i286)
+3054: guard_false(i287, descr=<Guard0xa8e4578>) [i236, i277, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3060: i289 = int_eq(i282, -9223372036854775808)
+3083: i291 = int_eq(i286, -1)
+3096: i292 = int_and(i289, i291)
+3099: guard_false(i292, descr=<Guard0xa8e4530>) [i236, i277, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3108: i294 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i282, i286, descr=<Calli 8 ii EF=0 OS=14>)
+3144: i296 = int_lt(i277, 0)
+3148: guard_false(i296, descr=<Guard0xa8ad5e0>) [i286, i294, i282, i277, None, i231, i236, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(rnd pathBits)')
+3154: p297 = getfield_gc_r(p91, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_0 24 pure>)
+3165: guard_nonnull_class(p297, ConstClass(W_Fixnum), descr=<Guard0xa8ad640>) [i286, i294, i282, i277, None, i231, i236, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3184: i299 = getfield_gc_i(p297, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(let ([if0 (if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)]) (if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))))')
debug_merge_point(0, 0, '(if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)')
debug_merge_point(0, 0, '(if (integer? n5234) (< n5234 16384) #f)')
debug_merge_point(0, 0, '(< n5234 16384)')
+3188: i301 = int_lt(i299, 16384)
+3195: guard_false(i301, descr=<Guard0xa8e44e8>) [i286, i294, i282, i277, None, i231, i236, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234)))')
debug_merge_point(0, 0, '(let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))')
debug_merge_point(0, 0, '(CellRef(random14) 16384)')
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+3201: i302 = getfield_gc_i(p114, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3206: i303 = int_is_true(i302)
+3209: guard_true(i303, descr=<Guard0xa8e44a0>) [i286, i294, i282, i277, None, i231, i236, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3215: i304 = int_is_true(i262)
+3223: guard_true(i304, descr=<Guard0xa8e4458>) [i286, i294, i282, i277, None, i231, i236, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3229: i305 = int_mul_ovf(i302, i262)
+3237: guard_no_overflow(descr=<Guard0xa8e4410>) [i286, i294, i282, i277, None, i231, i236, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+3243: i306 = getfield_gc_i(p125, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3247: i307 = int_add_ovf(i305, i306)
+3250: guard_no_overflow(descr=<Guard0xa8e43c8>) [i286, i294, i282, i277, None, i231, i236, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+3256: i308 = getfield_gc_i(p130, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3260: i309 = int_is_zero(i308)
+3263: guard_false(i309, descr=<Guard0xa8e4380>) [i286, i294, i282, i277, None, i231, i236, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3269: i311 = int_rshift(i307, 63)
+3276: i312 = int_xor(i307, i311)
+3282: i313 = int_sub(i312, i311)
+3285: i315 = int_rshift(i308, 63)
+3292: i316 = int_xor(i308, i315)
+3295: i317 = int_sub(i316, i315)
+3298: i318 = int_is_zero(i317)
+3301: guard_false(i318, descr=<Guard0xa8e4338>) [i286, i294, i282, i277, None, i231, i236, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3307: i320 = int_eq(i313, -9223372036854775808)
+3330: i322 = int_eq(i317, -1)
+3343: i323 = int_and(i320, i322)
+3346: guard_false(i323, descr=<Guard0xa8e42f0>) [i286, i294, i282, i277, None, i231, i236, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3355: i325 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i313, i317, descr=<Calli 8 ii EF=0 OS=14>)
+3387: i327 = int_lt(i307, 0)
+3391: guard_false(i327, descr=<Guard0xa8ad580>) [i317, i325, i313, i307, i294, i299, p96, None, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+3397: i329 = int_eq(i325, -9223372036854775808)
+3397: i331 = int_rshift(i325, 3)
+3404: i333 = int_lshift(i331, 3)
+3411: i335 = int_xor(i325, 8)
+3418: i337 = int_rshift(i335, 63)
+3422: i338 = int_ne(i333, i325)
+3434: i339 = int_and(i337, i338)
+3437: i340 = int_add(i331, i339)
+3440: i342 = int_rshift(i340, 63)
+3447: i343 = int_xor(i340, i342)
+3453: i344 = int_sub(i343, i342)
+3456: i346 = int_eq(i344, -9223372036854775808)
+3456: i348 = int_and(i344, 16383)
+3466: setfield_gc(p118, i325, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3470: i350 = int_lt(i340, 0)
+3474: guard_false(i350, descr=<Guard0xa8ad2e0>) [i348, i344, i340, i294, i299, p96, None, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(CellRef(loop) n5234 AppRand5 n5234)')
+3480: p351 = getfield_gc_r(p96, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+3492: p352 = getfield_gc_r(p351, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3496: guard_nonnull_class(p352, 16478072, descr=<Guard0xa8ad520>) [i348, i344, i340, i294, i299, p96, None, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3514: p354 = getfield_gc_r(p352, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+3525: guard_value(p354, ConstPtr(ptr355), descr=<Guard0xa8e4260>) [i348, i344, i340, i294, i299, p96, None, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(if (zero? q) (remainder r n5224) (let ([AppRand2 (* 16384 r)][AppRand3 (CellRef(random14) 16384)]) (let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)))) from (CellRef(loop) n5234 AppRand5 n5234)')
debug_merge_point(0, 0, '(let ([AppRand2 (* 16384 r)][AppRand3 (CellRef(random14) 16384)]) (let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)))')
debug_merge_point(0, 0, '(* 16384 r)')
+3534: i356 = int_is_true(i348)
+3537: guard_true(i356, descr=<Guard0xa8e4218>) [i348, i344, i340, i294, i299, p96, None, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3543: i358 = int_lshift(i348, 14)
debug_merge_point(0, 0, '(CellRef(random14) 16384)')
+3550: p359 = getfield_gc_r(p352, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+3554: p360 = getfield_gc_r(p359, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3558: guard_nonnull_class(p360, 16478824, descr=<Guard0xa8ad4c0>) [i348, i344, i340, i294, i299, p96, None, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3577: p362 = getfield_gc_r(p360, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+3581: guard_value(p362, ConstPtr(ptr363), descr=<Guard0xa8e41d0>) [i348, i344, i340, i294, i299, p96, None, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3594: p364 = getfield_gc_r(p352, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+3594: p365 = getfield_gc_r(p360, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_2 40 pure>)
+3598: p366 = getfield_gc_r(p365, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3602: guard_nonnull_class(p366, ConstClass(W_CellIntegerStrategy), descr=<Guard0xa8ad460>) [i348, i344, i340, i294, i299, p96, None, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3620: i368 = getfield_gc_i(p366, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3624: p369 = getfield_gc_r(p360, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_3 48 pure>)
+3635: p370 = getfield_gc_r(p369, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3646: guard_nonnull_class(p370, ConstClass(W_CellIntegerStrategy), descr=<Guard0xa8ad400>) [i348, i344, i340, i294, i299, p96, None, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3665: i372 = getfield_gc_i(p370, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3676: i373 = int_is_true(i368)
+3679: guard_true(i373, descr=<Guard0xa8e4188>) [i348, i344, i340, i294, i299, p96, None, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3685: i374 = int_is_true(i372)
+3688: guard_true(i374, descr=<Guard0xa8e4140>) [i348, i344, i340, i294, i299, p96, None, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3694: i375 = int_mul_ovf(i368, i372)
+3698: guard_no_overflow(descr=<Guard0xa8e40f8>) [i348, i344, i340, i294, i299, p96, None, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+3704: p376 = getfield_gc_r(p360, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_1 32 pure>)
+3722: p377 = getfield_gc_r(p376, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3733: guard_nonnull_class(p377, ConstClass(W_CellIntegerStrategy), descr=<Guard0xa8ad3a0>) [i348, i344, i340, i294, i299, p96, None, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3751: i379 = getfield_gc_i(p377, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3762: i380 = int_add_ovf(i375, i379)
+3765: guard_no_overflow(descr=<Guard0xa8e40b0>) [i348, i344, i340, i294, i299, p96, None, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+3771: p381 = getfield_gc_r(p360, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_0 24 pure>)
+3775: p382 = getfield_gc_r(p381, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3786: guard_nonnull_class(p382, ConstClass(W_CellIntegerStrategy), descr=<Guard0xa8ad340>) [i348, i344, i340, i294, i299, p96, None, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3805: i384 = getfield_gc_i(p382, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3809: i385 = int_is_zero(i384)
+3812: guard_false(i385, descr=<Guard0xa8e4068>) [i348, i344, i340, i294, i299, p96, None, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3818: i387 = int_rshift(i380, 63)
+3829: i388 = int_xor(i380, i387)
+3846: i389 = int_sub(i388, i387)
+3849: i391 = int_rshift(i384, 63)
+3856: i392 = int_xor(i384, i391)
+3859: i393 = int_sub(i392, i391)
+3862: i394 = int_is_zero(i393)
+3865: guard_false(i394, descr=<Guard0xa8e4020>) [i348, i344, i340, i294, i299, p96, None, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3871: i396 = int_eq(i389, -9223372036854775808)
+3893: i398 = int_eq(i393, -1)
+3913: i399 = int_and(i396, i398)
+3916: guard_false(i399, descr=<Guard0xa8affa0>) [i348, i344, i340, i294, i299, p96, None, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3925: i401 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i389, i393, descr=<Calli 8 ii EF=0 OS=14>)
+3967: i403 = int_lt(i380, 0)
+3975: guard_false(i403, descr=<Guard0xa8ad280>) [i393, i401, i389, i380, i348, p352, i358, p360, i294, i299, None, None, i231, None, None, i181, None, i71, p65, p63, p91, None, None, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+3981: i405 = int_eq(i401, -9223372036854775808)
+3981: i407 = int_rshift(i401, 3)
+3988: i409 = int_lshift(i407, 3)
+3995: i411 = int_xor(i401, 8)
+4002: i413 = int_rshift(i411, 63)
+4006: i414 = int_ne(i409, i401)
+4019: i415 = int_and(i413, i414)
+4022: i416 = int_add(i407, i415)
+4025: i418 = int_rshift(i416, 63)
+4032: i419 = int_xor(i416, i418)
+4038: i420 = int_sub(i419, i418)
+4041: i422 = int_eq(i420, -9223372036854775808)
+4041: i424 = int_and(i420, 16383)
+4051: setfield_gc(p370, i401, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+4062: i426 = int_lt(i416, 0)
+4066: guard_false(i426, descr=<Guard0xa8ad160>) [i424, i420, i416, i348, p352, i358, p360, i294, i299, None, None, i231, None, None, i181, None, i71, p65, p63, p91, None, None, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)) from (remainder (quotient CellRef(x) 8) n)')
debug_merge_point(0, 0, '(+ AppRand2 AppRand3)')
+4072: i427 = int_add(i358, i424)
debug_merge_point(0, 0, '(CellRef(loop) (quotient q 16384) AppRand4 n5224)')
+4078: p428 = getfield_gc_r(p352, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+4089: p429 = getfield_gc_r(p428, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+4093: guard_nonnull_class(p429, 16478072, descr=<Guard0xa8ad220>) [i424, i420, i416, i348, p352, i358, p360, i294, i299, None, None, i231, None, None, i181, None, i71, p65, p63, p91, None, None, p67, None, None, None, None, None, None]
+4112: i432 = int_rshift(i299, 14)
+4123: i434 = int_lshift(i432, 14)
+4123: i436 = int_xor(i299, 16384)
+4123: i437 = int_ne(i434, i299)
+4123: p438 = getfield_gc_r(p429, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+4134: guard_value(p438, ConstPtr(ptr439), descr=<Guard0xa8aff10>) [i424, i420, i416, i348, p352, i358, p360, i294, i299, None, None, i231, None, None, i181, None, i71, p65, p63, p91, None, None, p67, None, None, None, None, None, None]
+4147: i440 = instance_ptr_eq(p352, p429)
+4150: guard_true(i440, descr=<Guard0xa8afec8>) [i424, i420, i416, i348, p352, i358, p360, i294, i299, None, None, i231, None, None, i181, None, i71, p65, p63, p91, None, None, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(if (zero? q) (remainder r n5224) (let ([AppRand2 (* 16384 r)][AppRand3 (CellRef(random14) 16384)]) (let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)))) from (CellRef(loop) (quotient q 16384) AppRand4 n5224)')
+4156: p441 = new_with_vtable(descr=<SizeDescr 16>)
+4206: p442 = new_with_vtable(descr=<SizeDescr 48>)
+4217: p443 = new_with_vtable(descr=<SizeDescr 32>)
+4228: setfield_gc(p443, p91, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+4232: setfield_gc(p443, i181, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_0 16 pure>)
+4243: setfield_gc(p443, i231, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_1 24 pure>)
+4254: p444 = new_with_vtable(descr=<SizeDescr 40>)
+4265: setfield_gc(p444, p67, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+4276: p445 = new_with_vtable(descr=<SizeDescr 24>)
+4288: setfield_gc(p445, p65, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+4299: setfield_gc(p445, i71, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+4310: setfield_gc(p444, p445, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+4314: setfield_gc(p444, p63, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+4325: setfield_gc(p444, ConstPtr(ptr446), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+4336: setfield_gc(p441, i299, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+4347: setfield_gc(p442, p443, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+4351: setfield_gc(p442, p444, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+4355: setfield_gc(p442, p67, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+4366: setfield_gc(p442, ConstPtr(ptr447), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+4370: setfield_gc(p442, i294, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+4381: jump(p352, i432, i427, p441, p442, p359, p360, p365, p366, p369, p370, i401, p376, p377, p381, p382, p67, p428, p429, descr=TargetToken(139976055980144))
+4592: --end of the loop--
[3e4c20ed79eb76b] jit-log-opt-bridge}
[3e4c20eda05b740] {jit-backend
[3e4c20eda38848b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0e
[3e4c20eda3ba571] jit-backend-dump}
[3e4c20eda3de75b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0e914 +0  34000000
[3e4c20eda3e0091] jit-backend-dump}
[3e4c20eda3e4dc7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f815 +0  34000000
[3e4c20eda3e5d59] jit-backend-dump}
[3e4c20eda3e9207] {jit-backend-addr
bridge out of Guard 0x4b9a920 has address 0x7f4eb6c0e910 to 0x7f4eb6c0f810
       gc table: 0x7f4eb6c0e520
    jump target: 0x7f4eb6c0e910
         resops: 0x7f4eb6c0e91e
       failures: 0x7f4eb6c0f810
            end: 0x7f4eb6c1058d
[3e4c20eda3ebd30] jit-backend-addr}
[3e4c20eda3ef3be] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0e92b +0  5A0F0000
[3e4c20eda3f025e] jit-backend-dump}
[3e4c20eda3f33b4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0e945 +0  5C0F0000
[3e4c20eda3f429e] jit-backend-dump}
[3e4c20eda3f7395] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0e952 +0  6B0F0000
[3e4c20eda3f8146] jit-backend-dump}
[3e4c20eda3fb1f4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0e978 +0  610F0000
[3e4c20eda3fbf71] jit-backend-dump}
[3e4c20eda3fef77] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0e9a9 +0  4C0F0000
[3e4c20eda3ffd47] jit-backend-dump}
[3e4c20eda402dae] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0e9c8 +0  490F0000
[3e4c20eda403af7] jit-backend-dump}
[3e4c20eda406b03] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0e9e3 +0  4A0F0000
[3e4c20eda40786b] jit-backend-dump}
[3e4c20eda40a909] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0e9fb +0  4E0F0000
[3e4c20eda40b735] jit-backend-dump}
[3e4c20eda40e79f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ea11 +0  540F0000
[3e4c20eda40f57c] jit-backend-dump}
[3e4c20eda4127df] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ea1d +0  800F0000
[3e4c20eda41355f] jit-backend-dump}
[3e4c20eda416506] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ea2d +0  8C0F0000
[3e4c20eda4172ae] jit-backend-dump}
[3e4c20eda41a202] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ea4f +0  860F0000
[3e4c20eda41af6a] jit-backend-dump}
[3e4c20eda41def5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ea5d +0  940F0000
[3e4c20eda41ec6c] jit-backend-dump}
[3e4c20eda421c04] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ea71 +0  9C0F0000
[3e4c20eda422972] jit-backend-dump}
[3e4c20eda42596e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ea88 +0  A10F0000
[3e4c20eda4266e8] jit-backend-dump}
[3e4c20eda429624] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ea9e +0  A70F0000
[3e4c20eda42a39b] jit-backend-dump}
[3e4c20eda42d2c7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0eaac +0  B50F0000
[3e4c20eda42e063] jit-backend-dump}
[3e4c20eda430fae] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0eab5 +0  C80F0000
[3e4c20eda431d32] jit-backend-dump}
[3e4c20eda434ca7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0eac6 +0  D30F0000
[3e4c20eda435a40] jit-backend-dump}
[3e4c20eda4389f0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ead6 +0  DF0F0000
[3e4c20eda43975e] jit-backend-dump}
[3e4c20eda43c947] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0eae0 +0  F10F0000
[3e4c20eda43d6fb] jit-backend-dump}
[3e4c20eda440741] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0eaf0 +0  FD0F0000
[3e4c20eda4414cb] jit-backend-dump}
[3e4c20eda4445a6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0eafe +0  0B100000
[3e4c20eda4452f3] jit-backend-dump}
[3e4c20eda448281] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0eb0e +0  17100000
[3e4c20eda449007] jit-backend-dump}
[3e4c20eda44c0f5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0eb23 +0  1E100000
[3e4c20eda44ce45] jit-backend-dump}
[3e4c20eda44fdb7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0eb31 +0  2C100000
[3e4c20eda450b38] jit-backend-dump}
[3e4c20eda453b6b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0eb41 +0  38100000
[3e4c20eda454929] jit-backend-dump}
[3e4c20eda457984] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0eb55 +0  40100000
[3e4c20eda4586e3] jit-backend-dump}
[3e4c20eda45b71f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0eb8b +0  26100000
[3e4c20eda45c4a3] jit-backend-dump}
[3e4c20eda45f4b4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0eb99 +0  34100000
[3e4c20eda460256] jit-backend-dump}
[3e4c20eda463394] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ebb8 +0  31100000
[3e4c20eda46411a] jit-backend-dump}
[3e4c20eda4671ea] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ebcc +0  39100000
[3e4c20eda467f89] jit-backend-dump}
[3e4c20eda46b0eb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ebdc +0  45100000
[3e4c20eda46be90] jit-backend-dump}
[3e4c20eda46ef75] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ebf3 +0  4A100000
[3e4c20eda46fcf5] jit-backend-dump}
[3e4c20eda472d1c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ec01 +0  58100000
[3e4c20eda473a97] jit-backend-dump}
[3e4c20eda476b69] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ec0e +0  67100000
[3e4c20eda4778e6] jit-backend-dump}
[3e4c20eda47a9da] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ec22 +0  6F100000
[3e4c20eda47b74f] jit-backend-dump}
[3e4c20eda47e892] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ec58 +0  55100000
[3e4c20eda47f5df] jit-backend-dump}
[3e4c20eda48263a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ec74 +0  55100000
[3e4c20eda48337d] jit-backend-dump}
[3e4c20eda486412] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ec88 +0  5D100000
[3e4c20eda487143] jit-backend-dump}
[3e4c20eda48a1a7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ec9e +0  63100000
[3e4c20eda48af1f] jit-backend-dump}
[3e4c20eda48dfe8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ecb9 +0  64100000
[3e4c20eda48ed59] jit-backend-dump}
[3e4c20eda491db7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ecd1 +0  68100000
[3e4c20eda492b4a] jit-backend-dump}
[3e4c20eda495b83] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ecde +0  77100000
[3e4c20eda4968fb] jit-backend-dump}
[3e4c20eda49993d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ecf9 +0  78100000
[3e4c20eda49a6d0] jit-backend-dump}
[3e4c20eda49d6f7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ed0d +0  80100000
[3e4c20eda49e484] jit-backend-dump}
[3e4c20eda4a1434] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ed2f +0  7A100000
[3e4c20eda4a21e5] jit-backend-dump}
[3e4c20eda4a51c9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ed5b +0  6A100000
[3e4c20eda4a5f49] jit-backend-dump}
[3e4c20eda4a8eed] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ed68 +0  79100000
[3e4c20eda4a9c6a] jit-backend-dump}
[3e4c20eda4acbbb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ed71 +0  8C100000
[3e4c20eda4ad945] jit-backend-dump}
[3e4c20eda4b0890] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ed7b +0  9E100000
[3e4c20eda4b1607] jit-backend-dump}
[3e4c20eda4b45fa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ed9e +0  97100000
[3e4c20eda4b53df] jit-backend-dump}
[3e4c20eda4b83b4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0edac +0  A5100000
[3e4c20eda4b914d] jit-backend-dump}
[3e4c20eda4bc0b9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0edce +0  9F100000
[3e4c20eda4bce24] jit-backend-dump}
[3e4c20eda4bfdbf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0eddb +0  AE100000
[3e4c20eda4c0b48] jit-backend-dump}
[3e4c20eda4c3ae3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ee10 +0  95100000
[3e4c20eda4c486c] jit-backend-dump}
[3e4c20eda4c7804] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ee47 +0  7A100000
[3e4c20eda4c8584] jit-backend-dump}
[3e4c20eda4cb500] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ee80 +0  5D100000
[3e4c20eda4cc29f] jit-backend-dump}
[3e4c20eda4cf1f6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0eec0 +0  39100000
[3e4c20eda4cff98] jit-backend-dump}
[3e4c20eda4d2f9a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0eee9 +0  2C100000
[3e4c20eda4d3d2a] jit-backend-dump}
[3e4c20eda4d6ca0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ef18 +0  19100000
[3e4c20eda4d7a20] jit-backend-dump}
[3e4c20eda4da9ab] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ef54 +0  F90F0000
[3e4c20eda4db716] jit-backend-dump}
[3e4c20eda4de674] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ef61 +0  08100000
[3e4c20eda4df3f1] jit-backend-dump}
[3e4c20eda4e2357] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ef6a +0  1B100000
[3e4c20eda4e30e4] jit-backend-dump}
[3e4c20eda4e60af] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ef74 +0  2D100000
[3e4c20eda4e6e8c] jit-backend-dump}
[3e4c20eda4e9efc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ef82 +0  3B100000
[3e4c20eda4eac6d] jit-backend-dump}
[3e4c20eda4edebb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ef8f +0  4A100000
[3e4c20eda4eec57] jit-backend-dump}
[3e4c20eda4f1d0e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0efb5 +0  40100000
[3e4c20eda4f2aad] jit-backend-dump}
[3e4c20eda4f5a60] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0efe4 +0  2D100000
[3e4c20eda4f67ec] jit-backend-dump}
[3e4c20eda4f978a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f011 +0  1C100000
[3e4c20eda4fa513] jit-backend-dump}
[3e4c20eda4fd52b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f07f +0  CA0F0000
[3e4c20eda4fe2ec] jit-backend-dump}
[3e4c20eda501353] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f0a3 +0  C20F0000
[3e4c20eda5020e3] jit-backend-dump}
[3e4c20eda505135] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f0c0 +0  C10F0000
[3e4c20eda505ed7] jit-backend-dump}
[3e4c20eda508e90] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f0d1 +0  CC0F0000
[3e4c20eda509bf5] jit-backend-dump}
[3e4c20eda50cbe5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f0de +0  DB0F0000
[3e4c20eda50d996] jit-backend-dump}
[3e4c20eda510946] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f0ec +0  E90F0000
[3e4c20eda5116b1] jit-backend-dump}
[3e4c20eda51469b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f0fa +0  F70F0000
[3e4c20eda5154d9] jit-backend-dump}
[3e4c20eda5185ae] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f108 +0  05100000
[3e4c20eda519310] jit-backend-dump}
[3e4c20eda51c274] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f115 +0  14100000
[3e4c20eda51d013] jit-backend-dump}
[3e4c20eda51ffb6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f13b +0  0A100000
[3e4c20eda520d1e] jit-backend-dump}
[3e4c20eda523c88] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f16a +0  F70F0000
[3e4c20eda524a0b] jit-backend-dump}
[3e4c20eda527996] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f19b +0  E20F0000
[3e4c20eda52870a] jit-backend-dump}
[3e4c20eda52b6d0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f1df +0  BA0F0000
[3e4c20eda52c46f] jit-backend-dump}
[3e4c20eda52f437] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f210 +0  A50F0000
[3e4c20eda530196] jit-backend-dump}
[3e4c20eda53316d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f23f +0  920F0000
[3e4c20eda533efa] jit-backend-dump}
[3e4c20eda536e7f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f271 +0  7C0F0000
[3e4c20eda537bea] jit-backend-dump}
[3e4c20eda53ab50] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f28e +0  7B0F0000
[3e4c20eda53b8d7] jit-backend-dump}
[3e4c20eda53e8f5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f29f +0  860F0000
[3e4c20eda53f6a9] jit-backend-dump}
[3e4c20eda54273b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f2ac +0  950F0000
[3e4c20eda54351e] jit-backend-dump}
[3e4c20eda5466bd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f2ba +0  A30F0000
[3e4c20eda547459] jit-backend-dump}
[3e4c20eda54a3c2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f2c8 +0  B10F0000
[3e4c20eda54b186] jit-backend-dump}
[3e4c20eda54e148] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f2d6 +0  BF0F0000
[3e4c20eda54eed2] jit-backend-dump}
[3e4c20eda551e48] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f2e3 +0  CE0F0000
[3e4c20eda552be4] jit-backend-dump}
[3e4c20eda555b6c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f309 +0  C40F0000
[3e4c20eda5568ef] jit-backend-dump}
[3e4c20eda55990d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f339 +0  B00F0000
[3e4c20eda55a6cb] jit-backend-dump}
[3e4c20eda55d7a0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f363 +0  A20F0000
[3e4c20eda55e505] jit-backend-dump}
[3e4c20eda5614b2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f3b7 +0  6A0F0000
[3e4c20eda562235] jit-backend-dump}
[3e4c20eda5651ae] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f3d8 +0  650F0000
[3e4c20eda565f25] jit-backend-dump}
[3e4c20eda568ed8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f3ec +0  6D0F0000
[3e4c20eda569c5c] jit-backend-dump}
[3e4c20eda56cba0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f3f5 +0  800F0000
[3e4c20eda56d924] jit-backend-dump}
[3e4c20eda570881] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f417 +0  7A0F0000
[3e4c20eda571617] jit-backend-dump}
[3e4c20eda57459c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f428 +0  850F0000
[3e4c20eda57532c] jit-backend-dump}
[3e4c20eda5782a7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f442 +0  870F0000
[3e4c20eda579037] jit-backend-dump}
[3e4c20eda57c030] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f46e +0  770F0000
[3e4c20eda57cd98] jit-backend-dump}
[3e4c20eda57fdbf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f482 +0  7F0F0000
[3e4c20eda580b40] jit-backend-dump}
[3e4c20eda583ae6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f48b +0  920F0000
[3e4c20eda58486a] jit-backend-dump}
[3e4c20eda58783b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f495 +0  A40F0000
[3e4c20eda588608] jit-backend-dump}
[3e4c20eda58b61a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f4c4 +0  910F0000
[3e4c20eda58c3e7] jit-backend-dump}
[3e4c20eda58f3c8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f4d8 +0  990F0000
[3e4c20eda59013c] jit-backend-dump}
[3e4c20eda593101] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f4f9 +0  940F0000
[3e4c20eda593e69] jit-backend-dump}
[3e4c20eda596e8a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f506 +0  A30F0000
[3e4c20eda597c14] jit-backend-dump}
[3e4c20eda59acc4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f53b +0  8A0F0000
[3e4c20eda59ba73] jit-backend-dump}
[3e4c20eda59eacb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f572 +0  6F0F0000
[3e4c20eda59f86a] jit-backend-dump}
[3e4c20eda5a2869] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f5aa +0  530F0000
[3e4c20eda5a3602] jit-backend-dump}
[3e4c20eda5a661d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f604 +0  150F0000
[3e4c20eda5a73b0] jit-backend-dump}
[3e4c20eda5aa381] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f62c +0  090F0000
[3e4c20eda5ab10e] jit-backend-dump}
[3e4c20eda5ae0a8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f64f +0  020F0000
[3e4c20eda5aee35] jit-backend-dump}
[3e4c20eda5b1dcf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0f658 +0  150F0000
[3e4c20eda5b2ba2] jit-backend-dump}
[3e4c20eda5b5ffb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c06dfd +0  0F7B0000
[3e4c20eda5b6d7e] jit-backend-dump}
[3e4c20eda5bb747] jit-backend}
[3e4c20eda5bf38e] {jit-log-opt-bridge
# bridge out of Guard 0x4b9a920 with 557 ops
[p0, i1, i2, p3, p4]
+1030: i5 = int_is_zero(i1)
+1033: guard_true(i5, descr=<Guard0x4b9b280>) [p0, i1, i2, p3, p4]
debug_merge_point(0, 0, '(remainder r n5224)')
+1039: guard_nonnull_class(p3, ConstClass(W_Fixnum), descr=<Guard0x4b9b2e0>) [p0, i1, i2, p3, p4]
+1065: i7 = getfield_gc_i(p3, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1069: i8 = int_is_zero(i7)
+1072: guard_false(i8, descr=<Guard0x4c30b18>) [p0, i1, i2, p3, p4]
+1078: i10 = int_rshift(i2, 63)
+1085: i11 = int_xor(i2, i10)
+1091: i12 = int_sub(i11, i10)
+1094: i14 = int_rshift(i7, 63)
+1101: i15 = int_xor(i7, i14)
+1104: i16 = int_sub(i15, i14)
+1107: i17 = int_is_zero(i16)
+1110: guard_false(i17, descr=<Guard0x4c30b60>) [p0, i1, i2, p3, p4]
+1116: i19 = int_eq(i12, -9223372036854775808)
+1139: i21 = int_eq(i16, -1)
+1153: i22 = int_and(i19, i21)
+1156: guard_false(i22, descr=<Guard0x4c310b8>) [p0, i1, i2, p3, p4]
+1165: i24 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i12, i16, descr=<Calli 8 ii EF=0 OS=14>)
+1186: i26 = int_lt(i2, 0)
+1190: guard_false(i26, descr=<Guard0x4b9b340>) [p0, i16, i24, i12, i2, None, p3, p4]
+1196: p28 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+1214: guard_value(p28, ConstPtr(ptr29), descr=<Guard0x4c312b0>) [p0, i16, i24, i12, i2, None, p3, p4]
+1223: i30 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+1227: p31 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1231: p32 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1235: guard_class(p32, 16435208, descr=<Guard0x4c31cd0>) [p0, i16, i24, i12, i2, None, p3, p4]
+1247: p34 = getfield_gc_r(p32, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1251: guard_nonnull_class(p34, ConstClass(ForwardLink), descr=<Guard0x4b9b3a0>) [p0, i16, i24, i12, i2, None, p3, p4]
debug_merge_point(0, 0, '(vector-ref CellRef(trees) index1)')
+1269: guard_not_invalidated(descr=<Guard0x4bd6b60>) [p0, i16, i24, i12, i2, None, p3, p4]
+1269: guard_class(p31, 16503888, descr=<Guard0x4bd6ba8>) [p0, i16, i24, i12, i2, None, p3, p4]
+1281: p37 = getfield_gc_r(p31, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1285: guard_class(p37, 16479200, descr=<Guard0x4bd6bf0>) [p0, i16, i24, i12, i2, None, p3, p4]
+1297: p39 = getfield_gc_r(p37, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_3 48 pure>)
+1301: p40 = getfield_gc_r(p39, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1312: guard_nonnull_class(p40, ConstClass(W_Vector), descr=<Guard0x3cdee60>) [p0, i16, i24, i12, i2, None, p3, p4]
+1331: i42 = getfield_gc_i(p31, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_0 16 pure>)
+1335: i44 = int_ge(i42, 0)
+1339: guard_true(i44, descr=<Guard0x4bd6c38>) [p0, i16, i24, i12, i2, None, p3, p4]
+1345: i45 = getfield_gc_i(p40, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1356: i46 = int_lt(i42, i45)
+1359: guard_true(i46, descr=<Guard0x4bd6c80>) [p0, i16, i24, i12, i2, None, p3, p4]
+1365: p47 = getfield_gc_r(p40, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1376: guard_class(p47, 16622984, descr=<Guard0x4bd6cc8>) [p0, i16, i24, i12, i2, None, p3, p4]
+1388: p49 = getfield_gc_r(p40, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1392: p50 = getarrayitem_gc_r(p49, i42, descr=<ArrayP 8>)
+1397: guard_class(p50, ConstClass(W_Vector), descr=<Guard0x4bd6d10>) [p0, i16, i24, i12, i2, None, p3, p4]
debug_merge_point(0, 0, '(vector-ref CellRef(trees) index2)')
+1410: i52 = getfield_gc_i(p31, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_1 24 pure>)
+1414: i54 = int_ge(i52, 0)
+1418: guard_true(i54, descr=<Guard0x4bd6d58>) [p0, i16, i24, i12, i2, None, p3, p4]
+1424: i55 = int_lt(i52, i45)
+1427: guard_true(i55, descr=<Guard0x4bd6da0>) [p0, i16, i24, i12, i2, None, p3, p4]
+1433: p56 = getarrayitem_gc_r(p49, i52, descr=<ArrayP 8>)
+1438: guard_class(p56, ConstClass(W_Vector), descr=<Guard0x4bd6de8>) [p0, i16, i24, i12, i2, None, p3, p4]
debug_merge_point(0, 0, '(let ([doloop5533 (lambda (i5535) (let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))))]) (doloop5533 0) (if (even? CellRef(path)) (let ([tmp (vector-ref CellRef(tn1) 0)][AppRand53 (vector-ref CellRef(tn2) 0)]) (vector-set! CellRef(tn1) 0 AppRand53) (vector-set! CellRef(tn2) 0 tmp)) (let ([tmp5560 (vector-ref CellRef(tn1) 1)][AppRand54 (vector-ref CellRef(tn2) 1)]) (vector-set! CellRef(tn1) 1 AppRand54) (vector-set! CellRef(tn2) 1 tmp5560))) (let ([SetBang7 (+ CellRef(actuallyMut) 2)]) (set! actuallyMut SetBang7)))')
debug_merge_point(0, 0, '(lambda (i5535) (let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))))')
+1450: p58 = getfield_gc_r(p37, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1454: guard_class(p58, 16505296, descr=<Guard0x4bd6e30>) [p0, i16, i24, i12, i2, None, p3, p4]
debug_merge_point(0, 0, '(doloop5533 0)')
debug_merge_point(0, 0, '(let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))) from (doloop5533 0)')
debug_merge_point(0, 0, '(>= i5535 depth)')
+1466: i61 = int_ge(0, i30)
+1470: guard_true(i61, descr=<Guard0x4bd6e78>) [p0, i16, i24, i12, i2, None, p3, p4]
debug_merge_point(0, 0, '(if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))')
debug_merge_point(0, 0, '(void)')
debug_merge_point(0, 0, '(if (even? CellRef(path)) (let ([tmp (vector-ref CellRef(tn1) 0)][AppRand53 (vector-ref CellRef(tn2) 0)]) (vector-set! CellRef(tn1) 0 AppRand53) (vector-set! CellRef(tn2) 0 tmp)) (let ([tmp5560 (vector-ref CellRef(tn1) 1)][AppRand54 (vector-ref CellRef(tn2) 1)]) (vector-set! CellRef(tn1) 1 AppRand54) (vector-set! CellRef(tn2) 1 tmp5560)))')
+1476: i63 = int_and(i24, 1)
+1483: i64 = int_is_zero(i63)
+1486: guard_false(i64, descr=<Guard0x4bd6ec0>) [p0, i16, i24, i12, i2, None, p3, p4]
debug_merge_point(0, 0, '(let ([tmp5560 (vector-ref CellRef(tn1) 1)][AppRand54 (vector-ref CellRef(tn2) 1)]) (vector-set! CellRef(tn1) 1 AppRand54) (vector-set! CellRef(tn2) 1 tmp5560))')
debug_merge_point(0, 0, '(vector-ref CellRef(tn1) 1)')
+1492: i65 = getfield_gc_i(p50, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1496: i67 = int_lt(1, i65)
+1500: guard_true(i67, descr=<Guard0x4bd6f08>) [p0, i16, i24, i12, i2, None, p3, p4]
+1506: p68 = getfield_gc_r(p50, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1510: guard_class(p68, 16622984, descr=<Guard0x4bd6f50>) [p0, i16, i24, i12, i2, None, p3, p4]
+1522: p70 = getfield_gc_r(p50, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1526: p72 = getarrayitem_gc_r(p70, 1, descr=<ArrayP 8>)
+1530: guard_class(p72, ConstClass(W_Vector), descr=<Guard0x4bd6f98>) [p0, i16, i24, i12, i2, None, p3, p4]
debug_merge_point(0, 0, '(vector-ref CellRef(tn2) 1)')
+1543: i74 = getfield_gc_i(p56, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1547: i76 = int_lt(1, i74)
+1551: guard_true(i76, descr=<Guard0x4bd6fe0>) [p0, i16, i24, i12, i2, None, p3, p4]
+1557: p77 = getfield_gc_r(p56, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1561: guard_class(p77, 16622984, descr=<Guard0x4bd7028>) [p0, i16, i24, i12, i2, None, p3, p4]
+1573: p79 = getfield_gc_r(p56, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1577: p81 = getarrayitem_gc_r(p79, 1, descr=<ArrayP 8>)
+1581: guard_class(p81, ConstClass(W_Vector), descr=<Guard0x4bd7070>) [p0, i16, i24, i12, i2, None, p3, p4]
debug_merge_point(0, 0, '(vector-set! CellRef(tn1) 1 AppRand54)')
debug_merge_point(0, 0, '(vector-set! CellRef(tn2) 1 tmp5560)')
+1603: setarrayitem_gc(p70, 1, p81, descr=<ArrayP 8>)
debug_merge_point(0, 0, '(let ([SetBang7 (+ CellRef(actuallyMut) 2)]) (set! actuallyMut SetBang7))')
debug_merge_point(0, 0, '(+ CellRef(actuallyMut) 2)')
+1607: p84 = getfield_gc_r(p37, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_1 32 pure>)
+1611: p85 = getfield_gc_r(p84, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1625: setarrayitem_gc(p79, 1, p72, descr=<ArrayP 8>)
+1629: guard_nonnull_class(p85, ConstClass(W_CellIntegerStrategy), descr=<Guard0x3cdf1c0>) [p37, p85, p32, p34, None, None, None]
+1647: i88 = getfield_gc_i(p85, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1651: i90 = int_add_ovf(i88, 2)
+1655: guard_no_overflow(descr=<Guard0x4bd70b8>) [p37, p85, p32, p34, None, None, None]
debug_merge_point(0, 0, '(set! actuallyMut SetBang7)')
+1661: p91 = getfield_gc_r(p32, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+1672: setfield_gc(p85, i90, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1683: guard_value(p91, ConstPtr(ptr92), descr=<Guard0xa8fc1a0>) [p91, p32, None, None, None, None, None]
+1692: p93 = getfield_gc_r(p32, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1696: p94 = getfield_gc_r(p32, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55)) from (+ CellRef(actuallyMut) 2)')
+1700: guard_class(p93, 16504944, descr=<Guard0x4bd7100>) [p91, p32, None, None, None, None, None]
+1712: p96 = getfield_gc_r(p93, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1716: guard_class(p94, 16435208, descr=<Guard0x4bd7148>) [p91, p32, None, None, None, None, None]
+1728: p98 = getfield_gc_r(p94, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1732: guard_nonnull_class(p98, ConstClass(ForwardLink), descr=<Guard0xa8fc200>) [p91, p32, None, None, None, None, None]
debug_merge_point(0, 0, '(+ i5574 1)')
+1751: i100 = getfield_gc_i(p93, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1755: i102 = int_add_ovf(i100, 1)
+1759: guard_no_overflow(descr=<Guard0x4bd7190>) [p91, p32, None, None, None, None, None]
debug_merge_point(0, 0, '(doloop5572 AppRand55)')
+1765: guard_class(p96, 16481456, descr=<Guard0x4bd71d8>) [p91, p32, None, None, None, None, None]
+1778: p104 = getfield_gc_r(p96, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1789: guard_value(p104, ConstPtr(ptr105), descr=<Guard0x4bd7220>) [p91, p32, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([if10 (>= i5574 (quotient n5570 2))]) (if if10 (void) (begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55))))) from (doloop5572 AppRand55)')
debug_merge_point(0, 0, '(>= i5574 (quotient n5570 2))')
+1798: i106 = getfield_gc_i(p96, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_vals_fixed_1 24 pure>)
+1802: i108 = int_eq(i106, -9223372036854775808)
+1802: i110 = int_rshift(i106, 1)
+1808: i112 = int_lshift(i110, 1)
+1814: i114 = int_xor(i106, 2)
+1821: i116 = int_rshift(i114, 63)
+1825: i117 = int_ne(i112, i106)
+1837: i118 = int_and(i116, i117)
+1840: i119 = int_add(i110, i118)
+1843: i120 = int_ge(i102, i119)
+1846: guard_false(i120, descr=<Guard0x4bd7268>) [p91, p32, None, None, None, None, None]
debug_merge_point(0, 0, '(if if10 (void) (begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55))))')
debug_merge_point(0, 0, '(begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55)))')
debug_merge_point(0, 0, '(CellRef(oldGenSwapSubtrees))')
+1852: p121 = getfield_gc_r(p96, descr=<FieldP pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_w_val0 32 pure>)
+1856: p122 = getfield_gc_r(p121, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1860: guard_nonnull_class(p122, 16479200, descr=<Guard0xa8fc260>) [p91, p32, None, None, None, None, None]
+1880: p124 = getfield_gc_r(p122, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1891: guard_value(p124, ConstPtr(ptr125), descr=<Guard0x4bd72b0>) [p91, p32, None, None, None, None, None]
+1900: p126 = getfield_gc_r(p96, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([index1 (rnd (vector-length CellRef(trees)))][index2 (rnd (vector-length CellRef(trees)))]) (let ([depth (rnd treeHeight)][path (rnd pathBits)][tn1 (vector-ref CellRef(trees) index1)][tn2 (vector-ref CellRef(trees) index2)]) (let ([doloop5533 (lambda (i5535) (let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))))]) (doloop5533 0) (if (even? CellRef(path)) (let ([tmp (vector-ref CellRef(tn1) 0)][AppRand53 (vector-ref CellRef(tn2) 0)]) (vector-set! CellRef(tn1) 0 AppRand53) (vector-set! CellRef(tn2) 0 tmp)) (let ([tmp5560 (vector-ref CellRef(tn1) 1)][AppRand54 (vector-ref CellRef(tn2) 1)]) (vector-set! CellRef(tn1) 1 AppRand54) (vector-set! CellRef(tn2) 1 tmp5560))) (let ([SetBang7 (+ CellRef(actuallyMut) 2)]) (set! actuallyMut SetBang7)))))')
debug_merge_point(0, 0, '(rnd (vector-length CellRef(trees)))')
+1900: p127 = getfield_gc_r(p122, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_2 40 pure>)
+1904: guard_nonnull_class(p127, 16478072, descr=<Guard0xa8fc2c0>) [p91, p32, None, None, None, None, None]
+1922: p129 = getfield_gc_r(p122, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_3 48 pure>)
+1926: p130 = getfield_gc_r(p129, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1930: guard_nonnull_class(p130, ConstClass(W_Vector), descr=<Guard0xa8fc320>) [p91, p32, None, None, None, None, None]
+1949: i132 = getfield_gc_i(p130, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1953: p133 = getfield_gc_r(p127, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1964: guard_value(p133, ConstPtr(ptr134), descr=<Guard0x4bd72f8>) [p91, p32, None, None, None, None, None]
+1973: p135 = getfield_gc_r(p122, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([if0 (if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)]) (if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))))')
debug_merge_point(0, 0, '(if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)')
debug_merge_point(0, 0, '(if (integer? n5234) (< n5234 16384) #f)')
debug_merge_point(0, 0, '(< n5234 16384)')
+1973: i137 = int_lt(i132, 16384)
+1980: guard_true(i137, descr=<Guard0x4bd7340>) [p91, p32, None, None, None, None, None]
debug_merge_point(0, 0, '(if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234)))')
debug_merge_point(0, 0, '(CellRef(random14) n5234)')
+1986: p138 = getfield_gc_r(p127, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+1990: p139 = getfield_gc_r(p138, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1994: guard_nonnull_class(p139, 16478824, descr=<Guard0xa8fc380>) [p91, p32, None, None, None, None, None]
+2013: p141 = getfield_gc_r(p139, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+2024: guard_value(p141, ConstPtr(ptr142), descr=<Guard0x4bd7388>) [p91, p32, None, None, None, None, None]
+2033: p143 = getfield_gc_r(p127, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+2033: p144 = getfield_gc_r(p139, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_2 40 pure>)
+2037: p145 = getfield_gc_r(p144, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+2048: guard_nonnull_class(p145, ConstClass(W_CellIntegerStrategy), descr=<Guard0xa8fc3e0>) [p91, p32, None, None, None, None, None]
+2067: i147 = getfield_gc_i(p145, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2071: p148 = getfield_gc_r(p139, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_3 48 pure>)
+2082: p149 = getfield_gc_r(p148, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+2093: guard_nonnull_class(p149, ConstClass(W_CellIntegerStrategy), descr=<Guard0xa8fc440>) [p91, p32, None, None, None, None, None]
+2111: i151 = getfield_gc_i(p149, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2115: i152 = int_is_true(i147)
+2118: guard_true(i152, descr=<Guard0x4bd73d0>) [p91, p32, None, None, None, None, None]
+2124: i153 = int_is_true(i151)
+2127: guard_true(i153, descr=<Guard0x4bd7418>) [p91, p32, None, None, None, None, None]
+2133: i154 = int_mul_ovf(i147, i151)
+2137: guard_no_overflow(descr=<Guard0x4bd7460>) [p91, p32, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+2143: p155 = getfield_gc_r(p139, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_1 32 pure>)
+2147: p156 = getfield_gc_r(p155, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+2158: guard_nonnull_class(p156, ConstClass(W_CellIntegerStrategy), descr=<Guard0xa8fc4a0>) [p91, p32, None, None, None, None, None]
+2178: i158 = getfield_gc_i(p156, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2183: i159 = int_add_ovf(i154, i158)
+2186: guard_no_overflow(descr=<Guard0x4bd74a8>) [p91, p32, None, None, None, None, None]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+2192: p160 = getfield_gc_r(p139, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_0 24 pure>)
+2196: p161 = getfield_gc_r(p160, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+2207: guard_nonnull_class(p161, ConstClass(W_CellIntegerStrategy), descr=<Guard0xa8fc500>) [p91, p32, None, None, None, None, None]
+2226: i163 = getfield_gc_i(p161, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2230: i164 = int_is_zero(i163)
+2233: guard_false(i164, descr=<Guard0x4bd74f0>) [p91, p32, None, None, None, None, None]
+2239: i166 = int_rshift(i159, 63)
+2250: i167 = int_xor(i159, i166)
+2267: i168 = int_sub(i167, i166)
+2270: i170 = int_rshift(i163, 63)
+2277: i171 = int_xor(i163, i170)
+2280: i172 = int_sub(i171, i170)
+2283: i173 = int_is_zero(i172)
+2286: guard_false(i173, descr=<Guard0x4bd7538>) [p91, p32, None, None, None, None, None]
+2292: i175 = int_eq(i168, -9223372036854775808)
+2315: i177 = int_eq(i172, -1)
+2335: i178 = int_and(i175, i177)
+2338: guard_false(i178, descr=<Guard0x4bd7580>) [p91, p32, None, None, None, None, None]
+2347: i180 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i168, i172, descr=<Calli 8 ii EF=0 OS=14>)
+2390: i182 = int_lt(i159, 0)
+2398: guard_false(i182, descr=<Guard0xa8fc560>) [i172, i180, i168, i159, i102, p96, p94, p122, i132, p139, p98, None, None, None, None, None]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+2404: i184 = int_eq(i180, -9223372036854775808)
+2404: i186 = int_rshift(i180, 3)
+2411: i188 = int_lshift(i186, 3)
+2418: i190 = int_xor(i180, 8)
+2425: i192 = int_rshift(i190, 63)
+2429: i193 = int_ne(i188, i180)
+2442: i194 = int_and(i192, i193)
+2445: i195 = int_add(i186, i194)
+2448: setfield_gc(p149, i180, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2459: i196 = int_is_zero(i132)
+2462: guard_false(i196, descr=<Guard0xa8fc5c0>) [i132, i195, i102, p96, p94, p122, None, p139, p98, None, None, None, None, None]
+2468: i198 = int_rshift(i195, 63)
+2475: i199 = int_xor(i195, i198)
+2481: i200 = int_sub(i199, i198)
+2484: i202 = int_rshift(i132, 63)
+2491: i203 = int_xor(i132, i202)
+2497: i204 = int_sub(i203, i202)
+2500: i205 = int_is_zero(i204)
+2503: guard_false(i205, descr=<Guard0x4bd75c8>) [i132, i195, i102, p96, p94, p122, None, p139, p98, None, None, None, None, None]
+2509: i207 = int_eq(i200, -9223372036854775808)
+2531: i209 = int_eq(i204, -1)
+2544: i210 = int_and(i207, i209)
+2547: guard_false(i210, descr=<Guard0x4bd7610>) [i132, i195, i102, p96, p94, p122, None, p139, p98, None, None, None, None, None]
+2556: i212 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i200, i204, descr=<Calli 8 ii EF=0 OS=14>)
+2602: i214 = int_lt(i195, 0)
+2610: guard_false(i214, descr=<Guard0xa8fc620>) [i204, i212, i200, i195, None, i102, p96, p94, p122, i132, p139, p98, None, None, None, None, None]
debug_merge_point(0, 0, '(rnd (vector-length CellRef(trees)))')
debug_merge_point(0, 0, '(let ([if0 (if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)]) (if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))))')
debug_merge_point(0, 0, '(if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)')
debug_merge_point(0, 0, '(if (integer? n5234) (< n5234 16384) #f)')
debug_merge_point(0, 0, '(< n5234 16384)')
debug_merge_point(0, 0, '(if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234)))')
debug_merge_point(0, 0, '(CellRef(random14) n5234)')
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+2616: i215 = getfield_gc_i(p145, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2620: i216 = int_is_true(i215)
+2623: guard_true(i216, descr=<Guard0x4bd7658>) [i204, i212, i200, i195, None, i102, p96, p94, p122, i132, p139, p98, None, None, None, None, None]
+2629: i217 = int_is_true(i180)
+2632: guard_true(i217, descr=<Guard0x4bd76a0>) [i204, i212, i200, i195, None, i102, p96, p94, p122, i132, p139, p98, None, None, None, None, None]
+2638: i218 = int_mul_ovf(i215, i180)
+2642: guard_no_overflow(descr=<Guard0x4bd76e8>) [i204, i212, i200, i195, None, i102, p96, p94, p122, i132, p139, p98, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+2648: i219 = getfield_gc_i(p156, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2653: i220 = int_add_ovf(i218, i219)
+2656: guard_no_overflow(descr=<Guard0x4bd7730>) [i204, i212, i200, i195, None, i102, p96, p94, p122, i132, p139, p98, None, None, None, None, None]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+2662: i221 = getfield_gc_i(p161, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2666: i222 = int_is_zero(i221)
+2669: guard_false(i222, descr=<Guard0x4bd7778>) [i204, i212, i200, i195, None, i102, p96, p94, p122, i132, p139, p98, None, None, None, None, None]
+2675: i224 = int_rshift(i220, 63)
+2682: i225 = int_xor(i220, i224)
+2688: i226 = int_sub(i225, i224)
+2691: i228 = int_rshift(i221, 63)
+2698: i229 = int_xor(i221, i228)
+2701: i230 = int_sub(i229, i228)
+2704: i231 = int_is_zero(i230)
+2707: guard_false(i231, descr=<Guard0x4bd77c0>) [i204, i212, i200, i195, None, i102, p96, p94, p122, i132, p139, p98, None, None, None, None, None]
+2713: i233 = int_eq(i226, -9223372036854775808)
+2735: i235 = int_eq(i230, -1)
+2748: i236 = int_and(i233, i235)
+2751: guard_false(i236, descr=<Guard0x4bd7808>) [i204, i212, i200, i195, None, i102, p96, p94, p122, i132, p139, p98, None, None, None, None, None]
+2760: i238 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i226, i230, descr=<Calli 8 ii EF=0 OS=14>)
+2795: i240 = int_lt(i220, 0)
+2799: guard_false(i240, descr=<Guard0xa8fc680>) [i230, i238, i226, i220, i212, None, i102, p96, p94, p122, i132, p139, p98, None, None, None, None, None]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+2805: i242 = int_eq(i238, -9223372036854775808)
+2805: i244 = int_rshift(i238, 3)
+2812: i246 = int_lshift(i244, 3)
+2819: i248 = int_xor(i238, 8)
+2826: i250 = int_rshift(i248, 63)
+2830: i251 = int_ne(i246, i238)
+2843: i252 = int_and(i250, i251)
+2846: i253 = int_add(i244, i252)
+2849: i255 = int_rshift(i253, 63)
+2856: i256 = int_xor(i253, i255)
+2862: i257 = int_sub(i256, i255)
+2865: i259 = int_eq(i257, -9223372036854775808)
+2888: i260 = int_and(i259, i209)
+2895: setfield_gc(p149, i238, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2906: guard_false(i260, descr=<Guard0xa8fc6e0>) [i204, i257, i260, i253, i212, None, i102, p96, p94, p122, i132, p139, p98, None, None, None, None, None]
+2915: i262 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i257, i204, descr=<Calli 8 ii EF=0 OS=14>)
+2941: i264 = int_lt(i253, 0)
+2945: guard_false(i264, descr=<Guard0xa8fc740>) [i204, i262, i257, i253, None, i212, None, i102, p96, p94, p122, i132, p139, p98, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([depth (rnd treeHeight)][path (rnd pathBits)][tn1 (vector-ref CellRef(trees) index1)][tn2 (vector-ref CellRef(trees) index2)]) (let ([doloop5533 (lambda (i5535) (let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))))]) (doloop5533 0) (if (even? CellRef(path)) (let ([tmp (vector-ref CellRef(tn1) 0)][AppRand53 (vector-ref CellRef(tn2) 0)]) (vector-set! CellRef(tn1) 0 AppRand53) (vector-set! CellRef(tn2) 0 tmp)) (let ([tmp5560 (vector-ref CellRef(tn1) 1)][AppRand54 (vector-ref CellRef(tn2) 1)]) (vector-set! CellRef(tn1) 1 AppRand54) (vector-set! CellRef(tn2) 1 tmp5560))) (let ([SetBang7 (+ CellRef(actuallyMut) 2)]) (set! actuallyMut SetBang7))))')
debug_merge_point(0, 0, '(rnd treeHeight)')
+2951: p265 = getfield_gc_r(p122, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_4 56 pure>)
+2962: guard_nonnull_class(p265, ConstClass(W_Fixnum), descr=<Guard0xa8fc7a0>) [i204, i262, i257, i253, None, i212, None, i102, p96, p94, p122, i132, p139, p98, None, None, None, None, None]
+2980: i267 = getfield_gc_i(p265, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(let ([if0 (if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)]) (if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))))')
debug_merge_point(0, 0, '(if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)')
debug_merge_point(0, 0, '(if (integer? n5234) (< n5234 16384) #f)')
debug_merge_point(0, 0, '(< n5234 16384)')
+2984: i269 = int_lt(i267, 16384)
+2991: guard_true(i269, descr=<Guard0x4bd7850>) [i204, i262, i257, i253, None, i212, None, i102, p96, p94, p122, i132, p139, p98, None, None, None, None, None]
debug_merge_point(0, 0, '(if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234)))')
debug_merge_point(0, 0, '(CellRef(random14) n5234)')
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+2997: i270 = getfield_gc_i(p145, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3001: i271 = int_is_true(i270)
+3004: guard_true(i271, descr=<Guard0x4bd7898>) [i204, i262, i257, i253, None, i212, None, i102, p96, p94, p122, i132, p139, p98, None, None, None, None, None]
+3010: i272 = int_is_true(i238)
+3018: guard_true(i272, descr=<Guard0x4bd78e0>) [i204, i262, i257, i253, None, i212, None, i102, p96, p94, p122, i132, p139, p98, None, None, None, None, None]
+3024: i273 = int_mul_ovf(i270, i238)
+3032: guard_no_overflow(descr=<Guard0x4bd7928>) [i204, i262, i257, i253, None, i212, None, i102, p96, p94, p122, i132, p139, p98, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+3038: i274 = getfield_gc_i(p156, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3043: i275 = int_add_ovf(i273, i274)
+3046: guard_no_overflow(descr=<Guard0x4bd7970>) [i204, i262, i257, i253, None, i212, None, i102, p96, p94, p122, i132, p139, p98, None, None, None, None, None]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+3052: i276 = getfield_gc_i(p161, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3056: i277 = int_is_zero(i276)
+3059: guard_false(i277, descr=<Guard0x4bd79b8>) [i204, i262, i257, i253, None, i212, None, i102, p96, p94, p122, i132, p139, p98, None, None, None, None, None]
+3065: i279 = int_rshift(i275, 63)
+3072: i280 = int_xor(i275, i279)
+3078: i281 = int_sub(i280, i279)
+3081: i283 = int_rshift(i276, 63)
+3088: i284 = int_xor(i276, i283)
+3091: i285 = int_sub(i284, i283)
+3094: i286 = int_is_zero(i285)
+3097: guard_false(i286, descr=<Guard0x4bd7a00>) [i204, i262, i257, i253, None, i212, None, i102, p96, p94, p122, i132, p139, p98, None, None, None, None, None]
+3103: i288 = int_eq(i281, -9223372036854775808)
+3125: i290 = int_eq(i285, -1)
+3138: i291 = int_and(i288, i290)
+3141: guard_false(i291, descr=<Guard0x4bd7a48>) [i204, i262, i257, i253, None, i212, None, i102, p96, p94, p122, i132, p139, p98, None, None, None, None, None]
+3150: i293 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i281, i285, descr=<Calli 8 ii EF=0 OS=14>)
+3189: i295 = int_lt(i275, 0)
+3193: guard_false(i295, descr=<Guard0xa8fc800>) [i285, i293, i281, i275, i262, i267, None, i212, None, i102, p96, p94, p122, None, p139, p98, None, None, None, None, None]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+3199: i297 = int_eq(i293, -9223372036854775808)
+3199: i299 = int_rshift(i293, 3)
+3206: i301 = int_lshift(i299, 3)
+3213: i303 = int_xor(i293, 8)
+3220: i305 = int_rshift(i303, 63)
+3224: i306 = int_ne(i301, i293)
+3236: i307 = int_and(i305, i306)
+3239: i308 = int_add(i299, i307)
+3242: setfield_gc(p149, i293, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3253: i309 = int_is_zero(i267)
+3261: guard_false(i309, descr=<Guard0xa8fc860>) [i267, i308, i262, None, None, i212, None, i102, p96, p94, p122, None, p139, p98, None, None, None, None, None]
+3267: i311 = int_rshift(i308, 63)
+3274: i312 = int_xor(i308, i311)
+3280: i313 = int_sub(i312, i311)
+3283: i315 = int_rshift(i267, 63)
+3294: i316 = int_xor(i267, i315)
+3304: i317 = int_sub(i316, i315)
+3307: i318 = int_is_zero(i317)
+3310: guard_false(i318, descr=<Guard0x4bd7a90>) [i267, i308, i262, None, None, i212, None, i102, p96, p94, p122, None, p139, p98, None, None, None, None, None]
+3316: i320 = int_eq(i313, -9223372036854775808)
+3338: i322 = int_eq(i317, -1)
+3351: i323 = int_and(i320, i322)
+3354: guard_false(i323, descr=<Guard0x4bd7ad8>) [i267, i308, i262, None, None, i212, None, i102, p96, p94, p122, None, p139, p98, None, None, None, None, None]
+3363: i325 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i313, i317, descr=<Calli 8 ii EF=0 OS=14>)
+3399: i327 = int_lt(i308, 0)
+3407: guard_false(i327, descr=<Guard0xa8fc8c0>) [i317, i325, i313, i308, None, i262, i267, None, i212, None, i102, p96, p94, p122, None, p139, p98, None, None, None, None, None]
debug_merge_point(0, 0, '(rnd pathBits)')
+3413: p328 = getfield_gc_r(p122, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_0 24 pure>)
+3424: guard_nonnull_class(p328, ConstClass(W_Fixnum), descr=<Guard0xa8fc920>) [i317, i325, i313, i308, None, i262, i267, None, i212, None, i102, p96, p94, p122, None, p139, p98, None, None, None, None, None]
+3442: i330 = getfield_gc_i(p328, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(let ([if0 (if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)]) (if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))))')
debug_merge_point(0, 0, '(if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)')
debug_merge_point(0, 0, '(if (integer? n5234) (< n5234 16384) #f)')
debug_merge_point(0, 0, '(< n5234 16384)')
+3446: i332 = int_lt(i330, 16384)
+3453: guard_false(i332, descr=<Guard0x4bd7b20>) [i317, i325, i313, i308, None, i262, i267, None, i212, None, i102, p96, p94, p122, None, p139, p98, None, None, None, None, None]
debug_merge_point(0, 0, '(if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234)))')
debug_merge_point(0, 0, '(let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))')
debug_merge_point(0, 0, '(CellRef(random14) 16384)')
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+3459: i333 = getfield_gc_i(p145, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3463: i334 = int_is_true(i333)
+3466: guard_true(i334, descr=<Guard0x4bd7b68>) [i317, i325, i313, i308, None, i262, i267, None, i212, None, i102, p96, p94, p122, None, p139, p98, None, None, None, None, None]
+3472: i335 = int_is_true(i293)
+3480: guard_true(i335, descr=<Guard0x4b28020>) [i317, i325, i313, i308, None, i262, i267, None, i212, None, i102, p96, p94, p122, None, p139, p98, None, None, None, None, None]
+3486: i336 = int_mul_ovf(i333, i293)
+3494: guard_no_overflow(descr=<Guard0x4b28068>) [i317, i325, i313, i308, None, i262, i267, None, i212, None, i102, p96, p94, p122, None, p139, p98, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+3500: i337 = getfield_gc_i(p156, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3505: i338 = int_add_ovf(i336, i337)
+3508: guard_no_overflow(descr=<Guard0x4b280b0>) [i317, i325, i313, i308, None, i262, i267, None, i212, None, i102, p96, p94, p122, None, p139, p98, None, None, None, None, None]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+3514: i339 = getfield_gc_i(p161, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3518: i340 = int_is_zero(i339)
+3521: guard_false(i340, descr=<Guard0x4b280f8>) [i317, i325, i313, i308, None, i262, i267, None, i212, None, i102, p96, p94, p122, None, p139, p98, None, None, None, None, None]
+3527: i342 = int_rshift(i338, 63)
+3534: i343 = int_xor(i338, i342)
+3540: i344 = int_sub(i343, i342)
+3543: i346 = int_rshift(i339, 63)
+3550: i347 = int_xor(i339, i346)
+3553: i348 = int_sub(i347, i346)
+3556: i349 = int_is_zero(i348)
+3559: guard_false(i349, descr=<Guard0x4b28140>) [i317, i325, i313, i308, None, i262, i267, None, i212, None, i102, p96, p94, p122, None, p139, p98, None, None, None, None, None]
+3565: i351 = int_eq(i344, -9223372036854775808)
+3587: i353 = int_eq(i348, -1)
+3601: i354 = int_and(i351, i353)
+3604: guard_false(i354, descr=<Guard0x49d0578>) [i317, i325, i313, i308, None, i262, i267, None, i212, None, i102, p96, p94, p122, None, p139, p98, None, None, None, None, None]
+3613: i356 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i344, i348, descr=<Calli 8 ii EF=0 OS=14>)
+3645: i358 = int_lt(i338, 0)
+3649: guard_false(i358, descr=<Guard0xa8fc980>) [i348, i356, i344, i338, i325, i330, p127, None, i262, None, None, i212, None, i102, p96, p94, p122, None, p139, p98, None, None, None, None, None]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+3655: i360 = int_eq(i356, -9223372036854775808)
+3655: i362 = int_rshift(i356, 3)
+3662: i364 = int_lshift(i362, 3)
+3669: i366 = int_xor(i356, 8)
+3676: i368 = int_rshift(i366, 63)
+3680: i369 = int_ne(i364, i356)
+3693: i370 = int_and(i368, i369)
+3696: i371 = int_add(i362, i370)
+3699: i373 = int_rshift(i371, 63)
+3706: i374 = int_xor(i371, i373)
+3712: i375 = int_sub(i374, i373)
+3715: i377 = int_eq(i375, -9223372036854775808)
+3715: i379 = int_and(i375, 16383)
+3725: setfield_gc(p149, i356, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3729: i381 = int_lt(i371, 0)
+3733: guard_false(i381, descr=<Guard0xa8fc9e0>) [i379, i375, i371, i325, i330, p127, None, i262, None, None, i212, None, i102, p96, p94, p122, None, p139, p98, None, None, None, None, None]
debug_merge_point(0, 0, '(CellRef(loop) n5234 AppRand5 n5234)')
+3739: p382 = getfield_gc_r(p127, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+3750: p383 = getfield_gc_r(p382, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3754: guard_nonnull_class(p383, 16478072, descr=<Guard0xa8fca40>) [i379, i375, i371, i325, i330, p127, None, i262, None, None, i212, None, i102, p96, p94, p122, None, p139, p98, None, None, None, None, None]
+3772: p385 = getfield_gc_r(p383, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+3783: guard_value(p385, ConstPtr(ptr386), descr=<Guard0x49d0608>) [i379, i375, i371, i325, i330, p127, None, i262, None, None, i212, None, i102, p96, p94, p122, None, p139, p98, None, None, None, None, None]
debug_merge_point(0, 0, '(if (zero? q) (remainder r n5224) (let ([AppRand2 (* 16384 r)][AppRand3 (CellRef(random14) 16384)]) (let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)))) from (CellRef(loop) n5234 AppRand5 n5234)')
debug_merge_point(0, 0, '(let ([AppRand2 (* 16384 r)][AppRand3 (CellRef(random14) 16384)]) (let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)))')
debug_merge_point(0, 0, '(* 16384 r)')
+3792: i387 = int_is_true(i379)
+3795: guard_true(i387, descr=<Guard0x49d0698>) [i379, i375, i371, i325, i330, p127, None, i262, None, None, i212, None, i102, p96, p94, p122, None, p139, p98, None, None, None, None, None]
+3801: i389 = int_lshift(i379, 14)
debug_merge_point(0, 0, '(CellRef(random14) 16384)')
+3808: p390 = getfield_gc_r(p383, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+3812: p391 = getfield_gc_r(p390, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3816: guard_nonnull_class(p391, 16478824, descr=<Guard0xa8fcaa0>) [i379, i375, i371, i325, i330, p127, None, i262, None, None, i212, None, i102, p96, p94, p122, None, p139, p98, None, None, None, None, None]
+3835: p393 = getfield_gc_r(p391, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+3839: guard_value(p393, ConstPtr(ptr394), descr=<Guard0x49d0728>) [i379, i375, i371, i325, i330, p127, None, i262, None, None, i212, None, i102, p96, p94, p122, None, p139, p98, None, None, None, None, None]
+3852: p395 = getfield_gc_r(p383, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+3852: p396 = getfield_gc_r(p391, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_2 40 pure>)
+3856: p397 = getfield_gc_r(p396, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3860: guard_nonnull_class(p397, ConstClass(W_CellIntegerStrategy), descr=<Guard0xa8fcb00>) [i379, i375, i371, i325, i330, p127, None, i262, None, None, i212, None, i102, p96, p94, p122, None, p139, p98, None, None, None, None, None]
+3878: i399 = getfield_gc_i(p397, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3882: p400 = getfield_gc_r(p391, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_3 48 pure>)
+3893: p401 = getfield_gc_r(p400, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3904: guard_nonnull_class(p401, ConstClass(W_CellIntegerStrategy), descr=<Guard0xa8fcb60>) [i379, i375, i371, i325, i330, p127, None, i262, None, None, i212, None, i102, p96, p94, p122, None, p139, p98, None, None, None, None, None]
+3922: i403 = getfield_gc_i(p401, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3933: i404 = int_is_true(i399)
+3936: guard_true(i404, descr=<Guard0x49d0770>) [i379, i375, i371, i325, i330, p127, None, i262, None, None, i212, None, i102, p96, p94, p122, None, p139, p98, None, None, None, None, None]
+3942: i405 = int_is_true(i403)
+3945: guard_true(i405, descr=<Guard0x49d07b8>) [i379, i375, i371, i325, i330, p127, None, i262, None, None, i212, None, i102, p96, p94, p122, None, p139, p98, None, None, None, None, None]
+3951: i406 = int_mul_ovf(i399, i403)
+3955: guard_no_overflow(descr=<Guard0x49d0800>) [i379, i375, i371, i325, i330, p127, None, i262, None, None, i212, None, i102, p96, p94, p122, None, p139, p98, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+3961: p407 = getfield_gc_r(p391, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_1 32 pure>)
+3979: p408 = getfield_gc_r(p407, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3990: guard_nonnull_class(p408, ConstClass(W_CellIntegerStrategy), descr=<Guard0xa8fcbc0>) [i379, i375, i371, i325, i330, p127, None, i262, None, None, i212, None, i102, p96, p94, p122, None, p139, p98, None, None, None, None, None]
+4008: i410 = getfield_gc_i(p408, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+4019: i411 = int_add_ovf(i406, i410)
+4022: guard_no_overflow(descr=<Guard0x49d0848>) [i379, i375, i371, i325, i330, p127, None, i262, None, None, i212, None, i102, p96, p94, p122, None, p139, p98, None, None, None, None, None]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+4028: p412 = getfield_gc_r(p391, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_0 24 pure>)
+4032: p413 = getfield_gc_r(p412, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+4043: guard_nonnull_class(p413, ConstClass(W_CellIntegerStrategy), descr=<Guard0xa8fcc20>) [i379, i375, i371, i325, i330, p127, None, i262, None, None, i212, None, i102, p96, p94, p122, None, p139, p98, None, None, None, None, None]
+4061: i415 = getfield_gc_i(p413, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+4065: i416 = int_is_zero(i415)
+4068: guard_false(i416, descr=<Guard0x49d0890>) [i379, i375, i371, i325, i330, p127, None, i262, None, None, i212, None, i102, p96, p94, p122, None, p139, p98, None, None, None, None, None]
+4074: i418 = int_rshift(i411, 63)
+4085: i419 = int_xor(i411, i418)
+4102: i420 = int_sub(i419, i418)
+4105: i422 = int_rshift(i415, 63)
+4112: i423 = int_xor(i415, i422)
+4115: i424 = int_sub(i423, i422)
+4118: i425 = int_is_zero(i424)
+4121: guard_false(i425, descr=<Guard0x49d08d8>) [i379, i375, i371, i325, i330, p127, None, i262, None, None, i212, None, i102, p96, p94, p122, None, p139, p98, None, None, None, None, None]
+4127: i427 = int_eq(i420, -9223372036854775808)
+4150: i429 = int_eq(i424, -1)
+4170: i430 = int_and(i427, i429)
+4173: guard_false(i430, descr=<Guard0x49d0920>) [i379, i375, i371, i325, i330, p127, None, i262, None, None, i212, None, i102, p96, p94, p122, None, p139, p98, None, None, None, None, None]
+4182: i432 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i420, i424, descr=<Calli 8 ii EF=0 OS=14>)
+4224: i434 = int_lt(i411, 0)
+4232: guard_false(i434, descr=<Guard0xa8fcc80>) [i424, i432, i420, i411, i379, p383, i389, p391, i325, i330, None, None, i262, None, None, i212, None, i102, p96, p94, p122, None, None, p98, None, None, None, None, None]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+4238: i436 = int_eq(i432, -9223372036854775808)
+4238: i438 = int_rshift(i432, 3)
+4245: i440 = int_lshift(i438, 3)
+4252: i442 = int_xor(i432, 8)
+4259: i444 = int_rshift(i442, 63)
+4263: i445 = int_ne(i440, i432)
+4275: i446 = int_and(i444, i445)
+4278: i447 = int_add(i438, i446)
+4281: i449 = int_rshift(i447, 63)
+4288: i450 = int_xor(i447, i449)
+4294: i451 = int_sub(i450, i449)
+4297: i453 = int_eq(i451, -9223372036854775808)
+4297: i455 = int_and(i451, 16383)
+4307: setfield_gc(p401, i432, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+4318: i457 = int_lt(i447, 0)
+4322: guard_false(i457, descr=<Guard0xa8fcce0>) [i455, i451, i447, i379, p383, i389, p391, i325, i330, None, None, i262, None, None, i212, None, i102, p96, p94, p122, None, None, p98, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)) from (remainder (quotient CellRef(x) 8) n)')
debug_merge_point(0, 0, '(+ AppRand2 AppRand3)')
+4328: i458 = int_add(i389, i455)
debug_merge_point(0, 0, '(CellRef(loop) (quotient q 16384) AppRand4 n5224)')
+4334: p459 = getfield_gc_r(p383, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+4345: p460 = getfield_gc_r(p459, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+4349: guard_nonnull_class(p460, 16478072, descr=<Guard0xa8fcd40>) [i455, i451, i447, i379, p383, i389, p391, i325, i330, None, None, i262, None, None, i212, None, i102, p96, p94, p122, None, None, p98, None, None, None, None, None]
+4368: i463 = int_rshift(i330, 14)
+4379: i465 = int_lshift(i463, 14)
+4379: i467 = int_xor(i330, 16384)
+4379: i468 = int_ne(i465, i330)
+4379: p469 = getfield_gc_r(p460, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+4390: guard_value(p469, ConstPtr(ptr470), descr=<Guard0x49d0968>) [i455, i451, i447, i379, p383, i389, p391, i325, i330, None, None, i262, None, None, i212, None, i102, p96, p94, p122, None, None, p98, None, None, None, None, None]
+4403: i471 = instance_ptr_eq(p383, p460)
+4406: guard_true(i471, descr=<Guard0x49d09b0>) [i455, i451, i447, i379, p383, i389, p391, i325, i330, None, None, i262, None, None, i212, None, i102, p96, p94, p122, None, None, p98, None, None, None, None, None]
debug_merge_point(0, 0, '(if (zero? q) (remainder r n5224) (let ([AppRand2 (* 16384 r)][AppRand3 (CellRef(random14) 16384)]) (let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)))) from (CellRef(loop) (quotient q 16384) AppRand4 n5224)')
+4412: p472 = new_with_vtable(descr=<SizeDescr 16>)
+4459: p473 = new_with_vtable(descr=<SizeDescr 48>)
+4470: p474 = new_with_vtable(descr=<SizeDescr 32>)
+4481: setfield_gc(p474, p122, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+4485: setfield_gc(p474, i212, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_0 16 pure>)
+4496: setfield_gc(p474, i262, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_1 24 pure>)
+4507: p475 = new_with_vtable(descr=<SizeDescr 40>)
+4519: setfield_gc(p475, p98, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+4530: p476 = new_with_vtable(descr=<SizeDescr 24>)
+4542: setfield_gc(p476, p96, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+4554: setfield_gc(p476, i102, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+4566: setfield_gc(p475, p476, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+4570: setfield_gc(p475, p94, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+4581: setfield_gc(p475, ConstPtr(ptr477), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+4592: setfield_gc(p472, i330, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+4603: setfield_gc(p473, ConstPtr(ptr478), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+4614: setfield_gc(p473, i325, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+4625: setfield_gc(p473, p474, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+4629: setfield_gc(p473, p475, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+4633: setfield_gc(p473, p98, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+4637: jump(p383, i463, i458, p472, p473, p390, p391, p396, p397, p400, p401, i432, p407, p408, p412, p413, p98, p459, p460, descr=TargetToken(139976055980144))
+4848: --end of the loop--
[3e4c20eda7b089f] jit-log-opt-bridge}
[3e4c20edbbd9bcf] {jit-backend
[3e4c20edbc6f5e7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c
[3e4c20edbc7dcde] jit-backend-dump}
[3e4c20edbc9f365] {jit-backend-addr
Loop 93 ((let ([AppRand34 (vector-ref full 0)]) (let ([canGoLeft (if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)][AppRand38 (vector-ref full 1)]) (let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))))) from (CellRef(replaceTreeWork) full5448 partial5450 dir5452)) has address 0x7f4eb6c108ed to 0x7f4eb6c10b20 (bootstrap 0x7f4eb6c10860)
       gc table: 0x7f4eb6c10770
       function: 0x7f4eb6c10860
         resops: 0x7f4eb6c108ed
       failures: 0x7f4eb6c10b20
            end: 0x7f4eb6c10e42
[3e4c20edbca37fe] jit-backend-addr}
[3e4c20edbca883d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c10904 +0  2A020000
[3e4c20edbca9dce] jit-backend-dump}
[3e4c20edbcad413] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1091a +0  30020000
[3e4c20edbcae380] jit-backend-dump}
[3e4c20edbcb17d9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1092d +0  55020000
[3e4c20edbcb24f8] jit-backend-dump}
[3e4c20edbcb572d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c10943 +0  5B020000
[3e4c20edbcb644b] jit-backend-dump}
[3e4c20edbcb9634] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c10951 +0  69020000
[3e4c20edbcba384] jit-backend-dump}
[3e4c20edbcbd487] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c10961 +0  75020000
[3e4c20edbcbe1ac] jit-backend-dump}
[3e4c20edbcc12b2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c10975 +0  7D020000
[3e4c20edbcc2008] jit-backend-dump}
[3e4c20edbcc515a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c10986 +0  88020000
[3e4c20edbcc5e7f] jit-backend-dump}
[3e4c20edbcc8f61] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1099d +0  8D020000
[3e4c20edbcc9cb3] jit-backend-dump}
[3e4c20edbcccdba] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c109ab +0  9B020000
[3e4c20edbccdb12] jit-backend-dump}
[3e4c20edbcd0b92] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c109bc +0  A6020000
[3e4c20edbcd18dc] jit-backend-dump}
[3e4c20edbcd49ae] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c109d0 +0  AE020000
[3e4c20edbcd56d9] jit-backend-dump}
[3e4c20edbcd877a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c109e2 +0  B8020000
[3e4c20edbcd94cd] jit-backend-dump}
[3e4c20edbcdc593] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c109f2 +0  C4020000
[3e4c20edbcdd2fe] jit-backend-dump}
[3e4c20edbce0396] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c10a08 +0  CA020000
[3e4c20edbce10d3] jit-backend-dump}
[3e4c20edbce4153] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c10a16 +0  D8020000
[3e4c20edbce4e8a] jit-backend-dump}
[3e4c20edbce7ee2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c10a20 +0  EA020000
[3e4c20edbce8c22] jit-backend-dump}
[3e4c20edbcebcb8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c10a30 +0  F6020000
[3e4c20edbcec9c1] jit-backend-dump}
[3e4c20edbcefa78] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c10a3e +0  04030000
[3e4c20edbcf07fe] jit-backend-dump}
[3e4c20edbcf38d7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c10a4e +0  10030000
[3e4c20edbcf462c] jit-backend-dump}
[3e4c20edbcf766f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c10a63 +0  17030000
[3e4c20edbcf83c8] jit-backend-dump}
[3e4c20edbcfb47b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c10a70 +0  26030000
[3e4c20edbcfc1ac] jit-backend-dump}
[3e4c20edbcff65e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c10a7d +0  35030000
[3e4c20edbd00398] jit-backend-dump}
[3e4c20edbd03543] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c10a8d +0  41030000
[3e4c20edbd0427a] jit-backend-dump}
[3e4c20edbd072eb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c10aa8 +0  42030000
[3e4c20edbd08031] jit-backend-dump}
[3e4c20edbd0b09c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c10abc +0  4A030000
[3e4c20edbd0bdb1] jit-backend-dump}
[3e4c20edbd0ee74] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c10ac5 +0  5D030000
[3e4c20edbd0fbb1] jit-backend-dump}
[3e4c20edbd13b82] jit-backend}
[3e4c20edbd17768] {jit-log-opt-loop
# Loop 93 ((let ([AppRand34 (vector-ref full 0)]) (let ([canGoLeft (if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)][AppRand38 (vector-ref full 1)]) (let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))))) from (CellRef(replaceTreeWork) full5448 partial5450 dir5452)) : entry bridge with 100 ops
[p0, p1]
debug_merge_point(0, 0, '(let ([AppRand34 (vector-ref full 0)]) (let ([canGoLeft (if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)][AppRand38 (vector-ref full 1)]) (let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))))) from (CellRef(replaceTreeWork) full5448 partial5450 dir5452)')
+389: guard_class(p1, 16435208, descr=<Guard0xa8fce00>) [p0, p1]
+408: p3 = getfield_gc_r(p1, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+412: guard_nonnull_class(p3, ConstClass(ForwardLink), descr=<Guard0xa8fce60>) [p0, p1]
debug_merge_point(0, 0, '(vector-ref full 0)')
+430: guard_not_invalidated(descr=<Guard0x49d0c38>) [p0, p1]
+430: guard_class(p0, 16500368, descr=<Guard0x49d0c80>) [p0, p1]
+449: p6 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+453: guard_nonnull_class(p6, ConstClass(W_Vector), descr=<Guard0xa8fcec0>) [p0, p1]
+471: i8 = getfield_gc_i(p6, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+475: i10 = int_lt(0, i8)
+479: guard_true(i10, descr=<Guard0x49d0cc8>) [p0, p1]
+485: p11 = getfield_gc_r(p6, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+489: guard_class(p11, 16622984, descr=<Guard0x49d0d10>) [p0, p1]
+501: p13 = getfield_gc_r(p6, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+505: p15 = getarrayitem_gc_r(p13, 0, descr=<ArrayP 8>)
+509: guard_class(p15, ConstClass(W_Vector), descr=<Guard0x49d0d58>) [p0, p1]
debug_merge_point(0, 0, '(let ([canGoLeft (if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)][AppRand38 (vector-ref full 1)]) (let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))))')
debug_merge_point(0, 0, '(if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)')
+521: p17 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+525: guard_class(p17, 16482208, descr=<Guard0x49d0da0>) [p0, p1]
+538: i19 = getfield_gc_i(p17, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed10.inst_vals_fixed_0 24 pure>)
debug_merge_point(0, 0, '(let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37)))')
debug_merge_point(0, 0, 'partial')
+538: p20 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_1 24 pure>)
+542: guard_nonnull_class(p20, ConstClass(W_Vector), descr=<Guard0xa8fcf20>) [p0, p1]
+561: p22 = getfield_gc_r(p17, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(vector-ref full 0)')
debug_merge_point(0, 0, '(let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))')
debug_merge_point(0, 0, '(vector-ref AppRand35 2)')
+561: i23 = getfield_gc_i(p15, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+565: i25 = int_lt(2, i23)
+569: guard_true(i25, descr=<Guard0x49d0e30>) [p0, p1]
+575: p26 = getfield_gc_r(p15, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+579: guard_class(p26, 16622984, descr=<Guard0x49d0e78>) [p0, p1]
+592: p28 = getfield_gc_r(p15, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+596: p30 = getarrayitem_gc_r(p28, 2, descr=<ArrayP 8>)
+600: guard_class(p30, ConstClass(W_Fixnum), descr=<Guard0x49d0ec0>) [p0, p1]
+612: i32 = getfield_gc_i(p30, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(vector-ref partial 2)')
+616: i33 = getfield_gc_i(p20, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+620: i35 = int_lt(2, i33)
+624: guard_true(i35, descr=<Guard0x49d0f08>) [p0, p1]
+630: p36 = getfield_gc_r(p20, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+634: guard_class(p36, 16622984, descr=<Guard0x49d0f50>) [p0, p1]
+646: p38 = getfield_gc_r(p20, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+650: p40 = getarrayitem_gc_r(p38, 2, descr=<ArrayP 8>)
+654: guard_class(p40, ConstClass(W_Fixnum), descr=<Guard0x49d0f98>) [p0, p1]
+668: i42 = getfield_gc_i(p40, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(> AppRand36 AppRand37)')
+673: i43 = int_gt(i32, i42)
+676: guard_true(i43, descr=<Guard0x49d0fe0>) [p0, p1]
debug_merge_point(0, 0, '(vector-ref full 1)')
+682: i45 = int_lt(1, i8)
+686: guard_true(i45, descr=<Guard0x49d1028>) [p0, p1]
+692: p47 = getarrayitem_gc_r(p13, 1, descr=<ArrayP 8>)
+696: guard_class(p47, ConstClass(W_Vector), descr=<Guard0x49d1070>) [p0, p1]
debug_merge_point(0, 0, '(let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial)))))))')
debug_merge_point(0, 0, '(if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)')
debug_merge_point(0, 0, '(let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41)))')
debug_merge_point(0, 0, 'partial')
debug_merge_point(0, 0, '(vector-ref full 1)')
debug_merge_point(0, 0, '(let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))')
debug_merge_point(0, 0, '(vector-ref AppRand39 2)')
+708: i49 = getfield_gc_i(p47, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+712: i51 = int_lt(2, i49)
+716: guard_true(i51, descr=<Guard0x49d10b8>) [p0, p1]
+722: p52 = getfield_gc_r(p47, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+726: guard_class(p52, 16622984, descr=<Guard0x49d1100>) [p0, p1]
+738: p54 = getfield_gc_r(p47, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+742: p56 = getarrayitem_gc_r(p54, 2, descr=<ArrayP 8>)
+746: guard_class(p56, ConstClass(W_Fixnum), descr=<Guard0x49d1148>) [p0, p1]
+759: i58 = getfield_gc_i(p56, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(vector-ref partial 2)')
debug_merge_point(0, 0, '(> AppRand40 AppRand41)')
+763: i59 = int_gt(i58, i42)
+766: guard_true(i59, descr=<Guard0x49d1190>) [p0, p1]
debug_merge_point(0, 0, '(let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))')
debug_merge_point(0, 0, '(if canGoLeft canGoRight #f)')
debug_merge_point(0, 0, 'canGoRight')
debug_merge_point(0, 0, '(if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial)))))')
debug_merge_point(0, 0, '(if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir))))')
+772: p60 = getfield_gc_r(p0, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+776: guard_nonnull(p60, descr=<Guard0x49d11d8>) [p0, p1]
+792: i62 = instance_ptr_eq(p60, ConstPtr(ptr61))
+795: guard_true(i62, descr=<Guard0x49d1220>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))')
debug_merge_point(0, 0, '(vector-ref full 1)')
debug_merge_point(0, 0, '(CellRef(replaceTreeWork) AppRand43 partial (not dir))')
+801: p63 = getfield_gc_r(p17, descr=<FieldP pycket.small_list.W_Closure1AsEnvSize2Fixed10.inst_w_val1 32 pure>)
+805: p64 = getfield_gc_r(p63, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+809: guard_nonnull_class(p64, 16482208, descr=<Guard0xa8fcf80>) [p0, p1]
+828: p66 = getfield_gc_r(p64, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+839: guard_value(p66, ConstPtr(ptr67), descr=<Guard0x49d1268>) [p0, p1]
+848: i68 = instance_ptr_eq(p17, p64)
+851: guard_true(i68, descr=<Guard0x49d12b0>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand34 (vector-ref full 0)]) (let ([canGoLeft (if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)][AppRand38 (vector-ref full 1)]) (let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))))) from (CellRef(replaceTreeWork) AppRand43 partial (not dir))')
+857: i69 = arraylen_gc(p54, descr=<ArrayP 8>)
+857: i70 = arraylen_gc(p38, descr=<ArrayP 8>)
+857: jump(p17, p47, p20, p1, p3, p54, p38, p40, i42, p63, p64, descr=TargetToken(139976082361184))
+944: --end of the loop--
[3e4c20edbd74095] jit-log-opt-loop}
[3e4c20edc479461] {jit-backend
[3e4c20edc4f0be2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c10fa
[3e4c20edc4fb7cc] jit-backend-dump}
[3e4c20edc5069a4] {jit-backend-addr
Loop 94 ((let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))) from (doloop5533 0)) has address 0x7f4eb6c110cd to 0x7f4eb6c112d0 (bootstrap 0x7f4eb6c11040)
       gc table: 0x7f4eb6c10fa0
       function: 0x7f4eb6c11040
         resops: 0x7f4eb6c110cd
       failures: 0x7f4eb6c112d0
            end: 0x7f4eb6c1151e
[3e4c20edc509b86] jit-backend-addr}
[3e4c20edc50e23c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c110e4 +0  22020000
[3e4c20edc50f6fa] jit-backend-dump}
[3e4c20edc512eef] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c110fa +0  28020000
[3e4c20edc513dc9] jit-backend-dump}
[3e4c20edc51716d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1110d +0  4D020000
[3e4c20edc517ed2] jit-backend-dump}
[3e4c20edc51b157] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c11121 +0  55020000
[3e4c20edc51bf4c] jit-backend-dump}
[3e4c20edc51f20a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c11135 +0  5D020000
[3e4c20edc51ffa6] jit-backend-dump}
[3e4c20edc523054] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1114c +0  62020000
[3e4c20edc523db0] jit-backend-dump}
[3e4c20edc526da3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c11159 +0  71020000
[3e4c20edc527aff] jit-backend-dump}
[3e4c20edc52ab97] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c11174 +0  72020000
[3e4c20edc52b8e0] jit-backend-dump}
[3e4c20edc52e91d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c11185 +0  7D020000
[3e4c20edc52f6bf] jit-backend-dump}
[3e4c20edc5326d4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c111a1 +0  7D020000
[3e4c20edc533423] jit-backend-dump}
[3e4c20edc536450] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c111af +0  8B020000
[3e4c20edc5371b8] jit-backend-dump}
[3e4c20edc53a22f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c111c1 +0  95020000
[3e4c20edc53af72] jit-backend-dump}
[3e4c20edc53dfd6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c111d6 +0  9C020000
[3e4c20edc53ed35] jit-backend-dump}
[3e4c20edc541de3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c11202 +0  8C020000
[3e4c20edc542b23] jit-backend-dump}
[3e4c20edc545b13] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c11210 +0  9A020000
[3e4c20edc546878] jit-backend-dump}
[3e4c20edc549862] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c11221 +0  A5020000
[3e4c20edc54a5cd] jit-backend-dump}
[3e4c20edc54d5bd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c11236 +0  AC020000
[3e4c20edc54e319] jit-backend-dump}
[3e4c20edc55135e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1125c +0  A2020000
[3e4c20edc5520ab] jit-backend-dump}
[3e4c20edc555ddb] jit-backend}
[3e4c20edc559b33] {jit-log-opt-loop
# Loop 94 ((let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))) from (doloop5533 0)) : entry bridge with 76 ops
[p0, p1]
debug_merge_point(0, 0, '(let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))) from (doloop5533 0)')
+309: guard_class(p1, 16435208, descr=<Guard0xa8fcfe0>) [p0, p1]
+328: p3 = getfield_gc_r(p1, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+332: guard_nonnull_class(p3, ConstClass(ForwardLink), descr=<Guard0xa8fd040>) [p0, p1]
debug_merge_point(0, 0, '(>= i5535 depth)')
+350: guard_not_invalidated(descr=<Guard0x49d12f8>) [p0, p1]
+350: guard_class(p0, 16504944, descr=<Guard0x49d1340>) [p0, p1]
+369: i6 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+373: p7 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+377: guard_class(p7, 16478824, descr=<Guard0x49d1388>) [p0, p1]
+389: p9 = getfield_gc_r(p7, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+400: guard_value(p9, ConstPtr(ptr10), descr=<Guard0x49d13d0>) [p0, p1]
+409: p11 = getfield_gc_r(p7, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_1 32 pure>)
+413: guard_nonnull_class(p11, ConstClass(W_Fixnum), descr=<Guard0xa8fd0a0>) [p0, p1]
+432: i13 = getfield_gc_i(p11, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+436: i14 = int_ge(i6, i13)
+439: guard_false(i14, descr=<Guard0x49d1418>) [p0, p1]
debug_merge_point(0, 0, '(if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))')
debug_merge_point(0, 0, '(begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52)))')
debug_merge_point(0, 0, '(if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6))))')
+445: p15 = getfield_gc_r(p7, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_2 40 pure>)
+449: p16 = getfield_gc_r(p15, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+453: guard_nonnull_class(p16, ConstClass(W_CellIntegerStrategy), descr=<Guard0xa8fd100>) [p0, p1]
+472: i18 = getfield_gc_i(p16, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+476: i20 = int_and(i18, 1)
+480: i21 = int_is_zero(i20)
+483: guard_true(i21, descr=<Guard0x49d1460>) [p0, p1]
debug_merge_point(0, 0, '(let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4)))')
debug_merge_point(0, 0, '(vector-ref CellRef(tn1) 0)')
+489: p22 = getfield_gc_r(p7, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_0 24 pure>)
+493: p23 = getfield_gc_r(p22, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+498: guard_nonnull_class(p23, ConstClass(W_Vector), descr=<Guard0xa8fd160>) [p0, p1]
+517: i25 = getfield_gc_i(p23, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+521: i27 = int_lt(0, i25)
+525: guard_true(i27, descr=<Guard0x49d14a8>) [p0, p1]
+531: p28 = getfield_gc_r(p23, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+535: guard_class(p28, 16622984, descr=<Guard0x49d14f0>) [p0, p1]
+549: p30 = getfield_gc_r(p23, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+553: p32 = getarrayitem_gc_r(p30, 0, descr=<ArrayP 8>)
+557: guard_class(p32, ConstClass(W_Vector), descr=<Guard0x49d1538>) [p0, p1]
debug_merge_point(0, 0, '(set! tn1 SetBang3)')
debug_merge_point(0, 0, '(let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))')
debug_merge_point(0, 0, '(vector-ref CellRef(tn2) 0)')
+570: p34 = getfield_gc_r(p7, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_3 48 pure>)
+586: setfield_gc(p22, p32, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+591: p35 = getfield_gc_r(p34, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+595: guard_nonnull_class(p35, ConstClass(W_Vector), descr=<Guard0xa8fd1c0>) [p7, p35, p1, p0, p3]
+614: i37 = getfield_gc_i(p35, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+618: i39 = int_lt(0, i37)
+622: guard_true(i39, descr=<Guard0x49d1580>) [p7, p35, p1, p0, p3]
+628: p40 = getfield_gc_r(p35, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+632: guard_class(p40, 16622984, descr=<Guard0x49d15c8>) [p7, p35, p1, p0, p3]
+645: p42 = getfield_gc_r(p35, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+649: p44 = getarrayitem_gc_r(p42, 0, descr=<ArrayP 8>)
+653: guard_class(p44, ConstClass(W_Vector), descr=<Guard0x49d1610>) [p7, p35, p1, p0, p3]
debug_merge_point(0, 0, '(set! tn2 SetBang4)')
debug_merge_point(0, 0, '(set! path (quotient CellRef(path) 2))')
+677: setfield_gc(p34, p44, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+681: p46 = getfield_gc_r(p15, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+685: guard_nonnull_class(p46, ConstClass(W_CellIntegerStrategy), descr=<Guard0xa8fd220>) [p0, p46, p1, None, p3]
+704: i49 = getfield_gc_i(p46, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+708: i51 = int_eq(i49, -9223372036854775808)
+708: i53 = int_rshift(i49, 1)
+714: i55 = int_lshift(i53, 1)
+720: i57 = int_xor(i49, 2)
+731: i59 = int_rshift(i57, 63)
+735: i60 = int_ne(i55, i49)
+751: i61 = int_and(i59, i60)
+754: i62 = int_add(i53, i61)
debug_merge_point(0, 0, '(let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))')
debug_merge_point(0, 0, '(+ i5535 1)')
+757: i64 = int_add(i6, 1)
debug_merge_point(0, 0, '(doloop5533 AppRand52)')
debug_merge_point(0, 0, '(let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))) from (doloop5533 AppRand52)')
+761: setfield_gc(p46, i62, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+765: jump(p7, i64, p1, p3, p11, i13, p15, p46, i62, p22, p34, descr=TargetToken(139976082360704))
+816: --end of the loop--
[3e4c20edc5a43aa] jit-log-opt-loop}
[3e4c20eddc5534b] {jit-backend
[3e4c20eddd39fbd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c
[3e4c20eddd4a5a6] jit-backend-dump}
[3e4c20eddd69332] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c11874 +0  34000000
[3e4c20eddd6a818] jit-backend-dump}
[3e4c20eddd6ea04] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c11b95 +0  34000000
[3e4c20eddd6f943] jit-backend-dump}
[3e4c20eddd72e56] {jit-backend-addr
bridge out of Guard 0x4401b68 has address 0x7f4eb6c11870 to 0x7f4eb6c11b90
       gc table: 0x7f4eb6c11750
    jump target: 0x7f4eb6c11870
         resops: 0x7f4eb6c1187e
       failures: 0x7f4eb6c11b90
            end: 0x7f4eb6c11f53
[3e4c20eddd75935] jit-backend-addr}
[3e4c20eddd78dc8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1188f +0  40030000
[3e4c20eddd79c2e] jit-backend-dump}
[3e4c20eddd7d413] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c118a7 +0  60030000
[3e4c20eddd7e175] jit-backend-dump}
[3e4c20eddd81519] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c118b8 +0  6B030000
[3e4c20eddd82382] jit-backend-dump}
[3e4c20eddd85558] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c118c8 +0  77030000
[3e4c20eddd862bd] jit-backend-dump}
[3e4c20eddd892fa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c118dc +0  7F030000
[3e4c20eddd8a018] jit-backend-dump}
[3e4c20eddd8d0a4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c118f6 +0  81030000
[3e4c20eddd8dd9e] jit-backend-dump}
[3e4c20eddd90e15] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1190a +0  89030000
[3e4c20eddd91b33] jit-backend-dump}
[3e4c20eddd94b4b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c11918 +0  97030000
[3e4c20eddd95864] jit-backend-dump}
[3e4c20eddd9893c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c11929 +0  A2030000
[3e4c20eddd99636] jit-backend-dump}
[3e4c20eddd9c708] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1193d +0  AA030000
[3e4c20eddd9d40b] jit-backend-dump}
[3e4c20eddda044e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c11951 +0  B2030000
[3e4c20eddda113f] jit-backend-dump}
[3e4c20eddda40ee] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1196b +0  B4030000
[3e4c20eddda4de5] jit-backend-dump}
[3e4c20eddda7d9b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c11979 +0  C2030000
[3e4c20eddda8aa4] jit-backend-dump}
[3e4c20edddaba88] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c11997 +0  C0030000
[3e4c20edddac75a] jit-backend-dump}
[3e4c20edddaf76f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c119ab +0  C8030000
[3e4c20edddb0447] jit-backend-dump}
[3e4c20edddb3535] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c119b9 +0  D6030000
[3e4c20edddb4204] jit-backend-dump}
[3e4c20edddb71d2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c119d2 +0  D9030000
[3e4c20edddb7ebd] jit-backend-dump}
[3e4c20edddbaea1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c119ef +0  D8030000
[3e4c20edddbbb79] jit-backend-dump}
[3e4c20edddbeb5a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c11a05 +0  DE030000
[3e4c20edddbf832] jit-backend-dump}
[3e4c20edddc2831] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c11a17 +0  E8030000
[3e4c20edddc34fd] jit-backend-dump}
[3e4c20edddc64b3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c11a2e +0  ED030000
[3e4c20edddc7185] jit-backend-dump}
[3e4c20edddca191] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c11a3c +0  FB030000
[3e4c20edddcaec5] jit-backend-dump}
[3e4c20edddcde9c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c11a46 +0  0D040000
[3e4c20edddceb81] jit-backend-dump}
[3e4c20edddd1b3d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c11a56 +0  19040000
[3e4c20edddd2803] jit-backend-dump}
[3e4c20edddd5805] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c11a64 +0  27040000
[3e4c20edddd64da] jit-backend-dump}
[3e4c20edddd9484] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c11a76 +0  31040000
[3e4c20edddda150] jit-backend-dump}
[3e4c20eddddd0e4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c11a8b +0  38040000
[3e4c20eddddddb6] jit-backend-dump}
[3e4c20eddde0d97] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c11a98 +0  47040000
[3e4c20eddde1b2d] jit-backend-dump}
[3e4c20eddde4b20] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c11ab4 +0  47040000
[3e4c20eddde588e] jit-backend-dump}
[3e4c20eddde88e0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c11ac8 +0  4F040000
[3e4c20eddde960b] jit-backend-dump}
[3e4c20edddec678] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c11ad1 +0  62040000
[3e4c20eddded3af] jit-backend-dump}
[3e4c20edddf0845] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07c66 +0  069C0000
[3e4c20edddf1545] jit-backend-dump}
[3e4c20edddf5f2f] jit-backend}
[3e4c20edddf99be] {jit-log-opt-bridge
# bridge out of Guard 0x4401b68 with 131 ops
[p0, p1, p2, p3, p4]
+310: guard_class(p1, ConstClass(W_Vector), descr=<Guard0xa8fd2e0>) [p0, p1, p2, p3, p4]
+323: guard_not_invalidated(descr=<Guard0x49d16a0>) [p0, p1, p2, p3, p4]
+323: p6 = getfield_gc_r(p3, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+327: guard_nonnull_class(p6, ConstClass(ForwardLink), descr=<Guard0xa8fd340>) [p0, p1, p2, p3, p4]
debug_merge_point(0, 0, '(CellRef(replaceTree) AppRand48 newTree)')
+347: p8 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+351: guard_class(p8, 16504944, descr=<Guard0x49d16e8>) [p0, p1, p2, p3, p4]
+364: p10 = getfield_gc_r(p8, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+368: guard_class(p10, 16479952, descr=<Guard0x49d1730>) [p0, p1, p2, p3, p4]
+380: p12 = getfield_gc_r(p10, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+391: guard_value(p12, ConstPtr(ptr13), descr=<Guard0x49d1778>) [p0, p1, p2, p3, p4]
+400: p14 = getfield_gc_r(p10, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize7.inst__vals_3 48 pure>)
+404: p15 = getfield_gc_r(p14, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+408: guard_nonnull_class(p15, 16478072, descr=<Guard0xa8fd3a0>) [p0, p1, p2, p3, p4]
+426: p17 = getfield_gc_r(p15, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+437: guard_value(p17, ConstPtr(ptr18), descr=<Guard0x49d17c0>) [p0, p1, p2, p3, p4]
+446: p19 = getfield_gc_r(p10, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([AppRand44 (vector-ref partial5450 2)]) (let ([dir5452 (zero? (modulo AppRand44 2))][SetBang2 (+ CellRef(actuallyMut) 1)]) (set! actuallyMut SetBang2) (CellRef(replaceTreeWork) full5448 partial5450 dir5452)))')
debug_merge_point(0, 0, '(vector-ref partial5450 2)')
+446: i20 = getfield_gc_i(p2, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+450: i22 = int_lt(2, i20)
+454: guard_true(i22, descr=<Guard0x49d1808>) [p0, p1, p2, p3, p4]
+460: p23 = getfield_gc_r(p2, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+464: guard_class(p23, 16622984, descr=<Guard0x49d1850>) [p0, p1, p2, p3, p4]
+477: p25 = getfield_gc_r(p2, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+481: p27 = getarrayitem_gc_r(p25, 2, descr=<ArrayP 8>)
+485: guard_class(p27, ConstClass(W_Fixnum), descr=<Guard0x49d1898>) [p0, p1, p2, p3, p4]
+497: i29 = getfield_gc_i(p27, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(let ([dir5452 (zero? (modulo AppRand44 2))][SetBang2 (+ CellRef(actuallyMut) 1)]) (set! actuallyMut SetBang2) (CellRef(replaceTreeWork) full5448 partial5450 dir5452))')
debug_merge_point(0, 0, '(zero? (modulo AppRand44 2))')
+501: i31 = int_eq(i29, -9223372036854775808)
+501: i33 = int_and(i29, 1)
+508: i34 = int_is_zero(i33)
+511: guard_false(i34, descr=<Guard0x49d18e0>) [p0, p1, p2, p3, p4]
debug_merge_point(0, 0, '(+ CellRef(actuallyMut) 1)')
+517: p35 = getfield_gc_r(p15, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+521: p36 = getfield_gc_r(p35, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+525: guard_nonnull_class(p36, ConstClass(W_CellIntegerStrategy), descr=<Guard0xa8fd400>) [p0, p1, p2, p3, p4]
+543: i38 = getfield_gc_i(p36, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+547: i40 = int_add_ovf(i38, 1)
+551: guard_no_overflow(descr=<Guard0x49d1928>) [p0, p1, p2, p3, p4]
debug_merge_point(0, 0, '(set! actuallyMut SetBang2)')
debug_merge_point(0, 0, '(CellRef(replaceTreeWork) full5448 partial5450 dir5452)')
+557: p41 = getfield_gc_r(p15, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+561: p42 = getfield_gc_r(p41, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+565: setfield_gc(p36, i40, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+569: guard_nonnull_class(p42, 16482208, descr=<Guard0xa8fd460>) [p42, p1, p15, i40, p0, p6, p2, p3, None]
+587: p45 = getfield_gc_r(p42, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+598: guard_value(p45, ConstPtr(ptr46), descr=<Guard0x49d1970>) [p42, p1, p15, i40, p0, p6, p2, p3, None]
+607: p47 = getfield_gc_r(p15, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([AppRand34 (vector-ref full 0)]) (let ([canGoLeft (if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)][AppRand38 (vector-ref full 1)]) (let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))))) from (CellRef(replaceTreeWork) full5448 partial5450 dir5452)')
debug_merge_point(0, 0, '(vector-ref full 0)')
+607: i48 = getfield_gc_i(p1, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+611: i50 = int_lt(0, i48)
+615: guard_true(i50, descr=<Guard0x49d19b8>) [p42, p1, p15, i40, p0, p6, p2, p3, None]
+621: p51 = getfield_gc_r(p1, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+632: guard_class(p51, 16622984, descr=<Guard0x49d1a00>) [p42, p1, p15, i40, p0, p6, p2, p3, None]
+646: p53 = getfield_gc_r(p1, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+650: p55 = getarrayitem_gc_r(p53, 0, descr=<ArrayP 8>)
+661: guard_class(p55, ConstClass(W_Vector), descr=<Guard0x49d1a48>) [p42, p1, p15, i40, p0, p6, p2, p3, None]
debug_merge_point(0, 0, '(let ([canGoLeft (if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)][AppRand38 (vector-ref full 1)]) (let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))))')
debug_merge_point(0, 0, '(if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)')
+675: i57 = getfield_gc_i(p42, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed10.inst_vals_fixed_0 24 pure>)
debug_merge_point(0, 0, '(let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37)))')
debug_merge_point(0, 0, 'partial')
+675: p58 = getfield_gc_r(p42, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(vector-ref full 0)')
debug_merge_point(0, 0, '(let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))')
debug_merge_point(0, 0, '(vector-ref AppRand35 2)')
+675: i59 = getfield_gc_i(p55, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+687: i61 = int_lt(2, i59)
+691: guard_true(i61, descr=<Guard0x49d1a90>) [p42, p1, p15, i40, p0, p6, p2, p3, None]
+697: p62 = getfield_gc_r(p55, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+702: guard_class(p62, 16622984, descr=<Guard0x49d1ad8>) [p42, p1, p15, i40, p0, p6, p2, p3, None]
+715: p64 = getfield_gc_r(p55, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+720: p66 = getarrayitem_gc_r(p64, 2, descr=<ArrayP 8>)
+724: guard_class(p66, ConstClass(W_Fixnum), descr=<Guard0x49d1b20>) [p42, p1, p15, i40, p0, p6, p2, p3, None]
+738: i68 = getfield_gc_i(p66, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(vector-ref partial 2)')
debug_merge_point(0, 0, '(> AppRand36 AppRand37)')
+743: i69 = int_gt(i68, i29)
+746: guard_true(i69, descr=<Guard0x49d1b68>) [p42, p1, p15, i40, p0, p6, p2, p3, None]
debug_merge_point(0, 0, '(vector-ref full 1)')
+752: i71 = int_lt(1, i48)
+756: guard_true(i71, descr=<Guard0x49d1bb0>) [p42, p1, p15, i40, p0, p6, p2, p3, None]
+762: p73 = getarrayitem_gc_r(p53, 1, descr=<ArrayP 8>)
+766: guard_class(p73, ConstClass(W_Vector), descr=<Guard0x49d1bf8>) [p42, p1, p15, i40, p0, p6, p2, p3, None]
debug_merge_point(0, 0, '(let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial)))))))')
debug_merge_point(0, 0, '(if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)')
debug_merge_point(0, 0, '(let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41)))')
debug_merge_point(0, 0, 'partial')
debug_merge_point(0, 0, '(vector-ref full 1)')
debug_merge_point(0, 0, '(let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))')
debug_merge_point(0, 0, '(vector-ref AppRand39 2)')
+778: i75 = getfield_gc_i(p73, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+782: i77 = int_lt(2, i75)
+786: guard_true(i77, descr=<Guard0x49d1c40>) [p42, p1, p15, i40, p0, p6, p2, p3, None]
+792: p78 = getfield_gc_r(p73, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+796: guard_class(p78, 16622984, descr=<Guard0x49d1c88>) [p42, p1, p15, i40, p0, p6, p2, p3, None]
+810: p80 = getfield_gc_r(p73, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+814: p82 = getarrayitem_gc_r(p80, 2, descr=<ArrayP 8>)
+818: guard_class(p82, ConstClass(W_Fixnum), descr=<Guard0x49d1cd0>) [p42, p1, p15, i40, p0, p6, p2, p3, None]
+831: i84 = getfield_gc_i(p82, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(vector-ref partial 2)')
debug_merge_point(0, 0, '(> AppRand40 AppRand41)')
+835: i85 = int_gt(i84, i29)
+838: guard_true(i85, descr=<Guard0x49d1d18>) [p42, p1, p15, i40, p0, p6, p2, p3, None]
debug_merge_point(0, 0, '(let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))')
debug_merge_point(0, 0, '(if canGoLeft canGoRight #f)')
debug_merge_point(0, 0, 'canGoRight')
debug_merge_point(0, 0, '(if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial)))))')
debug_merge_point(0, 0, '(if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir))))')
debug_merge_point(0, 0, '(let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))')
debug_merge_point(0, 0, '(vector-ref full 1)')
debug_merge_point(0, 0, '(CellRef(replaceTreeWork) AppRand43 partial (not dir))')
+844: p86 = getfield_gc_r(p42, descr=<FieldP pycket.small_list.W_Closure1AsEnvSize2Fixed10.inst_w_val1 32 pure>)
+848: p87 = getfield_gc_r(p86, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+853: guard_nonnull_class(p87, 16482208, descr=<Guard0xa8fd4c0>) [p42, p1, p15, i40, p0, p6, p2, p3, None]
+872: p89 = getfield_gc_r(p87, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+883: guard_value(p89, ConstPtr(ptr90), descr=<Guard0x49d1d60>) [p42, p1, p15, i40, p0, p6, p2, p3, None]
+892: i91 = instance_ptr_eq(p42, p87)
+895: guard_true(i91, descr=<Guard0x49d1da8>) [p42, p1, p15, i40, p0, p6, p2, p3, None]
debug_merge_point(0, 0, '(let ([AppRand34 (vector-ref full 0)]) (let ([canGoLeft (if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)][AppRand38 (vector-ref full 1)]) (let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))))) from (CellRef(replaceTreeWork) AppRand43 partial (not dir))')
+901: p92 = new_with_vtable(descr=<SizeDescr 40>)
+948: i93 = arraylen_gc(p80, descr=<ArrayP 8>)
+948: i94 = arraylen_gc(p25, descr=<ArrayP 8>)
+948: setfield_gc(p92, p6, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+959: setfield_gc(p92, p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+963: setfield_gc(p92, p3, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+974: setfield_gc(p92, ConstPtr(ptr95), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+978: jump(p42, p73, p2, p92, p6, p80, p25, p27, i29, p86, p87, descr=TargetToken(139976082361184))
+1088: --end of the loop--
[3e4c20edde7dfb4] jit-log-opt-bridge}
[3e4c20ede0fa999] {jit-backend
[3e4c20ede136e9c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c
[3e4c20ede13e0b8] jit-backend-dump}
[3e4c20ede148c2b] {jit-backend-addr
Loop 96 ((let ([AppRand17 (+ n5280 n5280 -1)]) (let ([if1 (> AppRand17 nodes)]) (if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))))) from (doloop 1 1)) has address 0x7f4eb6c120fd to 0x7f4eb6c121c0 (bootstrap 0x7f4eb6c12070)
       gc table: 0x7f4eb6c12010
       function: 0x7f4eb6c12070
         resops: 0x7f4eb6c120fd
       failures: 0x7f4eb6c121c0
            end: 0x7f4eb6c122ea
[3e4c20ede14bd8a] jit-backend-addr}
[3e4c20ede1500de] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c12114 +0  BA000000
[3e4c20ede151556] jit-backend-dump}
[3e4c20ede154a66] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1212a +0  C0000000
[3e4c20ede155987] jit-backend-dump}
[3e4c20ede158dec] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1213d +0  E5000000
[3e4c20ede159b9a] jit-backend-dump}
[3e4c20ede15cd0e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1214a +0  F4000000
[3e4c20ede15da6a] jit-backend-dump}
[3e4c20ede160a79] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c12157 +0  03010000
[3e4c20ede1617b3] jit-backend-dump}
[3e4c20ede1647a9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c12167 +0  0F010000
[3e4c20ede165517] jit-backend-dump}
[3e4c20ede16850d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1217b +0  17010000
[3e4c20ede16927e] jit-backend-dump}
[3e4c20ede16c231] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c12188 +0  26010000
[3e4c20ede16d072] jit-backend-dump}
[3e4c20ede170019] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c12196 +0  34010000
[3e4c20ede170d50] jit-backend-dump}
[3e4c20ede1749b0] jit-backend}
[3e4c20ede17865d] {jit-log-opt-loop
# Loop 96 ((let ([AppRand17 (+ n5280 n5280 -1)]) (let ([if1 (> AppRand17 nodes)]) (if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))))) from (doloop 1 1)) : entry bridge with 31 ops
[p0, p1]
debug_merge_point(0, 0, '(let ([AppRand17 (+ n5280 n5280 -1)]) (let ([if1 (> AppRand17 nodes)]) (if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))))) from (doloop 1 1)')
+245: guard_class(p1, 16435920, descr=<Guard0xa8fd520>) [p0, p1]
+264: p3 = getfield_gc_r(p1, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+268: guard_nonnull_class(p3, ConstClass(ForwardLink), descr=<Guard0xa8fd580>) [p0, p1]
debug_merge_point(0, 0, '(+ n5280 n5280 -1)')
+286: guard_not_invalidated(descr=<Guard0x49d1df0>) [p0, p1]
+286: guard_class(p0, 16503888, descr=<Guard0x49d1e38>) [p0, p1]
+305: i6 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_1 24 pure>)
+309: i7 = int_add_ovf(i6, i6)
+312: guard_no_overflow(descr=<Guard0x49d1e80>) [p0, p1]
+318: i9 = int_add_ovf(i7, -1)
+325: guard_no_overflow(descr=<Guard0x49d1ec8>) [p0, p1]
debug_merge_point(0, 0, '(let ([if1 (> AppRand17 nodes)]) (if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))))')
debug_merge_point(0, 0, '(> AppRand17 nodes)')
+331: p10 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+335: guard_class(p10, 16482960, descr=<Guard0x49d1f10>) [p0, p1]
+347: p12 = getfield_gc_r(p10, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+358: guard_value(p12, ConstPtr(ptr13), descr=<Guard0x49d1f58>) [p0, p1]
+367: i14 = getfield_gc_i(p10, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize1Fixed.inst_vals_fixed_0 24 pure>)
+371: i15 = int_gt(i9, i14)
+374: guard_false(i15, descr=<Guard0x49d1fa0>) [p0, p1]
debug_merge_point(0, 0, '(if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19)))')
debug_merge_point(0, 0, '(let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))')
debug_merge_point(0, 0, '(+ h5278 1)')
+380: i16 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_0 16 pure>)
+384: i18 = int_add_ovf(i16, 1)
+388: guard_no_overflow(descr=<Guard0x498a020>) [p0, p1]
debug_merge_point(0, 0, '(+ n5280 n5280)')
debug_merge_point(0, 0, '(doloop AppRand18 AppRand19)')
debug_merge_point(0, 0, '(let ([AppRand17 (+ n5280 n5280 -1)]) (let ([if1 (> AppRand17 nodes)]) (if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))))) from (doloop AppRand18 AppRand19)')
+394: jump(p10, i18, i7, p1, p3, i14, descr=TargetToken(139976082360544))
+432: --end of the loop--
[3e4c20ede1985d8] jit-log-opt-loop}
[3e4c20edf46f3cd] {jit-backend
[3e4c20edf54744c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c124d
[3e4c20edf55614e] jit-backend-dump}
[3e4c20edf57113f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c125c4 +0  34000000
[3e4c20edf57295c] jit-backend-dump}
[3e4c20edf5773b4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c128f5 +0  34000000
[3e4c20edf5782f9] jit-backend-dump}
[3e4c20edf57b92c] {jit-backend-addr
bridge out of Guard 0x427d808 has address 0x7f4eb6c125c0 to 0x7f4eb6c128f0
       gc table: 0x7f4eb6c124d0
    jump target: 0x7f4eb6c125c0
         resops: 0x7f4eb6c125ce
       failures: 0x7f4eb6c128f0
            end: 0x7f4eb6c12c26
[3e4c20edf57e6ef] jit-backend-addr}
[3e4c20edf581b3e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c125de +0  34030000
[3e4c20edf582976] jit-backend-dump}
[3e4c20edf585d95] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c125ee +0  40030000
[3e4c20edf586ac6] jit-backend-dump}
[3e4c20edf589b98] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c12605 +0  45030000
[3e4c20edf58a916] jit-backend-dump}
[3e4c20edf58dc12] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c12616 +0  6C030000
[3e4c20edf58e933] jit-backend-dump}
[3e4c20edf591ab7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c12623 +0  7B030000
[3e4c20edf592850] jit-backend-dump}
[3e4c20edf5959d1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c12635 +0  85030000
[3e4c20edf5966e6] jit-backend-dump}
[3e4c20edf599769] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c12650 +0  86030000
[3e4c20edf59a469] jit-backend-dump}
[3e4c20edf59d4e9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c12667 +0  8B030000
[3e4c20edf59e1e6] jit-backend-dump}
[3e4c20edf5a1284] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c126a6 +0  68030000
[3e4c20edf5a1f8a] jit-backend-dump}
[3e4c20edf5a4f99] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c126ba +0  70030000
[3e4c20edf5a5c7d] jit-backend-dump}
[3e4c20edf5a8c83] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c126c3 +0  83030000
[3e4c20edf5a99fd] jit-backend-dump}
[3e4c20edf5aca12] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c126d0 +0  92030000
[3e4c20edf5ad6fc] jit-backend-dump}
[3e4c20edf5b0723] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c126ec +0  92030000
[3e4c20edf5b1426] jit-backend-dump}
[3e4c20edf5b4423] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c12703 +0  97030000
[3e4c20edf5b5110] jit-backend-dump}
[3e4c20edf5b8605] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c12717 +0  9F030000
[3e4c20edf5b930e] jit-backend-dump}
[3e4c20edf5bc4b7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c12724 +0  AE030000
[3e4c20edf5bd1aa] jit-backend-dump}
[3e4c20edf5c0218] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c12740 +0  AE030000
[3e4c20edf5c0f4f] jit-backend-dump}
[3e4c20edf5c40ab] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c12757 +0  B3030000
[3e4c20edf5c4dab] jit-backend-dump}
[3e4c20edf5c7d8c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c12764 +0  C2030000
[3e4c20edf5c8a95] jit-backend-dump}
[3e4c20edf5cba91] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c12786 +0  BC030000
[3e4c20edf5cc791] jit-backend-dump}
[3e4c20edf5cf74d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1279c +0  C2030000
[3e4c20edf5d0453] jit-backend-dump}
[3e4c20edf5d3446] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c127bb +0  BF030000
[3e4c20edf5d414c] jit-backend-dump}
[3e4c20edf5d7127] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c127df +0  B7030000
[3e4c20edf5d7e27] jit-backend-dump}
[3e4c20edf5daef6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c127f8 +0  BA030000
[3e4c20edf5dbbed] jit-backend-dump}
[3e4c20edf5debb8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1280c +0  C2030000
[3e4c20edf5df8cb] jit-backend-dump}
[3e4c20edf5e287a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1282f +0  BB030000
[3e4c20edf5e358d] jit-backend-dump}
[3e4c20edf5e6564] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c12846 +0  C0030000
[3e4c20edf5e7267] jit-backend-dump}
[3e4c20edf5ea74d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c05c8f +0  2DC90000
[3e4c20edf5eb465] jit-backend-dump}
[3e4c20edf5f00f6] jit-backend}
[3e4c20edf5f3c68] {jit-log-opt-bridge
# bridge out of Guard 0x427d808 with 66 ops
[p0, p1]
+262: guard_class(p1, 16503888, descr=<Guard0xa8fd640>) [p0, p1]
+274: p3 = getfield_gc_r(p1, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+278: guard_class(p0, 16437216, descr=<Guard0x498a068>) [p0, p1]
+290: p5 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+294: guard_nonnull_class(p5, ConstClass(ForwardLink), descr=<Guard0xa8fd6a0>) [p0, p1]
debug_merge_point(0, 0, '(+ AppRand2 AppRand3)')
+313: guard_not_invalidated(descr=<Guard0x498a0b0>) [p0, p1]
+313: i7 = getfield_gc_i(p1, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_0 16 pure>)
+317: i8 = getfield_gc_i(p1, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_1 24 pure>)
+321: i9 = int_add_ovf(i7, i8)
+324: guard_no_overflow(descr=<Guard0x498a0f8>) [p0, p1]
debug_merge_point(0, 0, '(CellRef(loop) (quotient q 16384) AppRand4 n5224)')
+330: guard_class(p3, 16500368, descr=<Guard0x498a140>) [p0, p1]
+343: p11 = getfield_gc_r(p3, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+347: guard_class(p11, 16478072, descr=<Guard0x498a188>) [p0, p1]
+361: p13 = getfield_gc_r(p11, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+365: p14 = getfield_gc_r(p13, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+369: guard_nonnull_class(p14, 16478072, descr=<Guard0xa8fd700>) [p0, p1]
+388: p16 = getfield_gc_r(p3, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_0 16 pure>)
+392: guard_nonnull_class(p16, ConstClass(W_Fixnum), descr=<Guard0xa8fd760>) [p0, p1]
+411: i18 = getfield_gc_i(p16, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+415: i20 = int_eq(i18, -9223372036854775808)
+415: i22 = int_rshift(i18, 14)
+422: i24 = int_lshift(i22, 14)
+429: i26 = int_xor(i18, 16384)
+439: i28 = int_rshift(i26, 63)
+443: i29 = int_ne(i24, i18)
+455: i30 = int_and(i28, i29)
+458: i31 = int_add(i22, i30)
+461: p32 = getfield_gc_r(p3, descr=<FieldP rpython.tool.pairtype.ConsEnvSize3.inst__vals_2 32 pure>)
+465: guard_nonnull(p32, descr=<Guard0x498a1d0>) [p0, p1]
+474: p33 = getfield_gc_r(p14, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+485: guard_value(p33, ConstPtr(ptr34), descr=<Guard0x498a218>) [p0, p1]
+494: i35 = instance_ptr_eq(p11, p14)
+497: guard_true(i35, descr=<Guard0x498a260>) [p0, p1]
debug_merge_point(0, 0, '(if (zero? q) (remainder r n5224) (let ([AppRand2 (* 16384 r)][AppRand3 (CellRef(random14) 16384)]) (let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)))) from (CellRef(loop) (quotient q 16384) AppRand4 n5224)')
+503: p36 = getfield_gc_r(p11, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+507: guard_nonnull(p36, descr=<Guard0xa8fd7c0>) [p0, i9, i31, p32, p11]
+516: guard_subclass(p36, ConstClass(W_Cell), descr=<Guard0xa8fd820>) [p0, i9, i31, p32, p11]
+544: p38 = getfield_gc_r(p36, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+548: guard_nonnull_class(p38, 16478824, descr=<Guard0xa8fd880>) [p0, i9, i31, p32, p11]
+567: p40 = getfield_gc_r(p38, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+578: guard_value(p40, ConstPtr(ptr41), descr=<Guard0xa8fd8e0>) [p0, i9, i31, p32, p11]
+587: p42 = getfield_gc_r(p11, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+587: p43 = getfield_gc_r(p38, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_2 40 pure>)
+591: guard_nonnull(p43, descr=<Guard0xa8fd940>) [p0, i9, i31, p32, p11]
+600: guard_subclass(p43, ConstClass(W_Cell), descr=<Guard0xa8fd9a0>) [p0, i9, i31, p32, p11]
+628: p45 = getfield_gc_r(p43, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+632: guard_nonnull_class(p45, ConstClass(W_CellIntegerStrategy), descr=<Guard0xa8fda00>) [p0, i9, i31, p32, p11]
+651: p47 = getfield_gc_r(p38, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_3 48 pure>)
+655: guard_nonnull(p47, descr=<Guard0xa8fda60>) [p0, i9, i31, p32, p11]
+664: guard_subclass(p47, ConstClass(W_Cell), descr=<Guard0xa8fdac0>) [p0, i9, i31, p32, p11]
+698: p49 = getfield_gc_r(p47, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+702: guard_nonnull_class(p49, ConstClass(W_CellIntegerStrategy), descr=<Guard0xa8fdb20>) [p0, i9, i31, p32, p11]
+720: i51 = getfield_gc_i(p49, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+731: p52 = getfield_gc_r(p38, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_1 32 pure>)
+742: guard_nonnull(p52, descr=<Guard0xa8fdb80>) [p0, i9, i31, p32, p11]
+751: guard_subclass(p52, ConstClass(W_Cell), descr=<Guard0xa8fdbe0>) [p0, i9, i31, p32, p11]
+787: p54 = getfield_gc_r(p52, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+792: guard_nonnull_class(p54, ConstClass(W_CellIntegerStrategy), descr=<Guard0xa8fdc40>) [p0, i9, i31, p32, p11]
+812: p56 = getfield_gc_r(p38, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_0 24 pure>)
+823: guard_nonnull(p56, descr=<Guard0xa8fdca0>) [p0, i9, i31, p32, p11]
+832: guard_subclass(p56, ConstClass(W_Cell), descr=<Guard0xa8fdd00>) [p0, i9, i31, p32, p11]
+867: p58 = getfield_gc_r(p56, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+871: guard_nonnull_class(p58, ConstClass(W_CellIntegerStrategy), descr=<Guard0xa8fdd60>) [p0, i9, i31, p32, p11]
+890: jump(p11, i31, i9, p32, p0, p36, p38, p43, p45, p47, p49, i51, p52, p54, p56, p58, p5, p13, p14, descr=TargetToken(139976055980144))
+1056: --end of the loop--
[3e4c20edf63bfc2] jit-log-opt-bridge}
[3e4c20edfaf9928] {jit-backend
[3e4c20edfbd3311] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c12e
[3e4c20edfbe544e] jit-backend-dump}
[3e4c20edfbf085b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c12fa4 +0  34000000
[3e4c20edfbf1f9f] jit-backend-dump}
[3e4c20edfbf60d3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c13465 +0  34000000
[3e4c20edfbf6fcb] jit-backend-dump}
[3e4c20edfbfa3f0] {jit-backend-addr
bridge out of Guard 0x7f4eb8aaa0e0 has address 0x7f4eb6c12fa0 to 0x7f4eb6c13460
       gc table: 0x7f4eb6c12e50
    jump target: 0x7f4eb6c12fa0
         resops: 0x7f4eb6c12fae
       failures: 0x7f4eb6c13460
            end: 0x7f4eb6c13807
[3e4c20edfbfc80c] jit-backend-addr}
[3e4c20edfbffc7a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c12fc2 +0  DD040000
[3e4c20edfc00b94] jit-backend-dump}
[3e4c20edfc03eb5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c12fd8 +0  E3040000
[3e4c20edfc04bbb] jit-backend-dump}
[3e4c20edfc07ce3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c12ff0 +0  E7040000
[3e4c20edfc08a0e] jit-backend-dump}
[3e4c20edfc0bb2a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c12ffe +0  F5040000
[3e4c20edfc0c82a] jit-backend-dump}
[3e4c20edfc0f942] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1300f +0  00050000
[3e4c20edfc10624] jit-backend-dump}
[3e4c20edfc136fc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c13020 +0  0B050000
[3e4c20edfc143ed] jit-backend-dump}
[3e4c20edfc174ea] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1303a +0  0D050000
[3e4c20edfc18274] jit-backend-dump}
[3e4c20edfc1b3e2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c13052 +0  11050000
[3e4c20edfc1c0ee] jit-backend-dump}
[3e4c20edfc1f471] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1305f +0  3C050000
[3e4c20edfc2023e] jit-backend-dump}
[3e4c20edfc23498] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c13073 +0  44050000
[3e4c20edfc241de] jit-backend-dump}
[3e4c20edfc27396] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c13086 +0  4D050000
[3e4c20edfc280d9] jit-backend-dump}
[3e4c20edfc2b2fc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1309c +0  53050000
[3e4c20edfc2c008] jit-backend-dump}
[3e4c20edfc2f17d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c130b7 +0  54050000
[3e4c20edfc2fe7d] jit-backend-dump}
[3e4c20edfc33197] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c130cd +0  5A050000
[3e4c20edfc33f21] jit-backend-dump}
[3e4c20edfc3714d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c130da +0  69050000
[3e4c20edfc37dfa] jit-backend-dump}
[3e4c20edfc3af9d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c13109 +0  56050000
[3e4c20edfc3bc63] jit-backend-dump}
[3e4c20edfc3ed5d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1315a +0  21050000
[3e4c20edfc3fa04] jit-backend-dump}
[3e4c20edfc42af2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c13171 +0  26050000
[3e4c20edfc43799] jit-backend-dump}
[3e4c20edfc468a9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1317e +0  35050000
[3e4c20edfc47550] jit-backend-dump}
[3e4c20edfc4a6ce] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c131ae +0  21050000
[3e4c20edfc4b378] jit-backend-dump}
[3e4c20edfc4e497] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1321c +0  CF040000
[3e4c20edfc4f1a0] jit-backend-dump}
[3e4c20edfc52297] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1322a +0  DD040000
[3e4c20edfc52f48] jit-backend-dump}
[3e4c20edfc560b3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c13254 +0  CF040000
[3e4c20edfc56d5d] jit-backend-dump}
[3e4c20edfc59e6d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c13268 +0  D7040000
[3e4c20edfc5ab1d] jit-backend-dump}
[3e4c20edfc5dbf3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1327a +0  E1040000
[3e4c20edfc5e894] jit-backend-dump}
[3e4c20edfc6194b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c13295 +0  E2040000
[3e4c20edfc62638] jit-backend-dump}
[3e4c20edfc6577f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c132a2 +0  F1040000
[3e4c20edfc66442] jit-backend-dump}
[3e4c20edfc69557] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c132ee +0  C1040000
[3e4c20edfc6a21d] jit-backend-dump}
[3e4c20edfc6d2dd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c13302 +0  C9040000
[3e4c20edfc6df97] jit-backend-dump}
[3e4c20edfc7106c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1330c +0  DB040000
[3e4c20edfc71d57] jit-backend-dump}
[3e4c20edfc7516c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6bf09a4 +0  F8250200
[3e4c20edfc75e23] jit-backend-dump}
[3e4c20edfc79d4f] jit-backend}
[3e4c20edfc7d90d] {jit-log-opt-bridge
# bridge out of Guard 0x7f4eb8aaa0e0 with 179 ops
[p0, p1]
+365: guard_value(p0, ConstPtr(ptr2), descr=<Guard0xa8fddc0>) [p0, p1]
+374: p3 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+378: p4 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+382: guard_class(p4, 16435208, descr=<Guard0x498a2a8>) [p0, p1]
+396: p6 = getfield_gc_r(p4, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+401: guard_nonnull_class(p6, ConstClass(ForwardLink), descr=<Guard0xa8fde20>) [p0, p1]
debug_merge_point(0, 0, '(CellRef(doMutWork) n5623)')
+420: guard_class(p3, 16504944, descr=<Guard0x498a2f0>) [p0, p1]
+434: p9 = getfield_gc_r(p3, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+438: guard_class(p9, 16504944, descr=<Guard0x498a338>) [p0, p1]
+451: p11 = getfield_gc_r(p9, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+455: guard_class(p11, 16480328, descr=<Guard0x498a380>) [p0, p1]
+468: p13 = getfield_gc_r(p11, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_5 64 pure>)
+472: p14 = getfield_gc_r(p13, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+476: guard_nonnull_class(p14, 16482208, descr=<Guard0xa8fde80>) [p0, p1]
+494: i16 = getfield_gc_i(p9, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+498: p17 = getfield_gc_r(p14, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+509: guard_value(p17, ConstPtr(ptr18), descr=<Guard0x498a3c8>) [p0, p1]
+518: p19 = getfield_gc_r(p11, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([AppRand56 (* workUnits n5583)]) (let ([limit (quotient AppRand56 10)]) (let ([doloop5588 (lambda (k sum) (let ([if11 (>= k limit)]) (if if11 (begin (void) (let ([SetBang8 (+ CellRef(mutatorSum) sum)]) (set! mutatorSum SetBang8))) (let ([AppRand57 (+ k 1)][AppRand58 (+ sum 1)]) (doloop5588 AppRand57 AppRand58)))))]) (doloop5588 0 0))))')
debug_merge_point(0, 0, '(* workUnits n5583)')
+518: guard_not_invalidated(descr=<Guard0x498a410>) [p0, p1]
+518: i20 = getfield_gc_i(p14, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed10.inst_vals_fixed_0 24 pure>)
+522: i21 = int_is_true(i20)
+525: guard_false(i21, descr=<Guard0x498a458>) [p0, p1]
debug_merge_point(0, 0, '(let ([limit (quotient AppRand56 10)]) (let ([doloop5588 (lambda (k sum) (let ([if11 (>= k limit)]) (if if11 (begin (void) (let ([SetBang8 (+ CellRef(mutatorSum) sum)]) (set! mutatorSum SetBang8))) (let ([AppRand57 (+ k 1)][AppRand58 (+ sum 1)]) (doloop5588 AppRand57 AppRand58)))))]) (doloop5588 0 0)))')
debug_merge_point(0, 0, '(quotient AppRand56 10)')
debug_merge_point(0, 0, '(let ([doloop5588 (lambda (k sum) (let ([if11 (>= k limit)]) (if if11 (begin (void) (let ([SetBang8 (+ CellRef(mutatorSum) sum)]) (set! mutatorSum SetBang8))) (let ([AppRand57 (+ k 1)][AppRand58 (+ sum 1)]) (doloop5588 AppRand57 AppRand58)))))]) (doloop5588 0 0))')
+531: p22 = getfield_gc_r(p14, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(lambda (k sum) (let ([if11 (>= k limit)]) (if if11 (begin (void) (let ([SetBang8 (+ CellRef(mutatorSum) sum)]) (set! mutatorSum SetBang8))) (let ([AppRand57 (+ k 1)][AppRand58 (+ sum 1)]) (doloop5588 AppRand57 AppRand58)))))')
+535: p23 = getfield_gc_r(p14, descr=<FieldP pycket.small_list.W_Closure1AsEnvSize2Fixed10.inst_w_val1 32 pure>)
+539: guard_class(p22, 16505296, descr=<Guard0x498a4a0>) [p0, p1]
+551: guard_nonnull_class(p23, ConstClass(W_Cell), descr=<Guard0xa8fdee0>) [p0, p1]
debug_merge_point(0, 0, '(doloop5588 0 0)')
debug_merge_point(0, 0, '(let ([if11 (>= k limit)]) (if if11 (begin (void) (let ([SetBang8 (+ CellRef(mutatorSum) sum)]) (set! mutatorSum SetBang8))) (let ([AppRand57 (+ k 1)][AppRand58 (+ sum 1)]) (doloop5588 AppRand57 AppRand58))))')
debug_merge_point(0, 0, '(>= k limit)')
debug_merge_point(0, 0, '(if if11 (begin (void) (let ([SetBang8 (+ CellRef(mutatorSum) sum)]) (set! mutatorSum SetBang8))) (let ([AppRand57 (+ k 1)][AppRand58 (+ sum 1)]) (doloop5588 AppRand57 AppRand58)))')
debug_merge_point(0, 0, '(begin (void) (let ([SetBang8 (+ CellRef(mutatorSum) sum)]) (set! mutatorSum SetBang8)))')
debug_merge_point(0, 0, '(void)')
debug_merge_point(0, 0, '(let ([SetBang8 (+ CellRef(mutatorSum) sum)]) (set! mutatorSum SetBang8))')
debug_merge_point(0, 0, '(+ CellRef(mutatorSum) sum)')
+570: p26 = getfield_gc_r(p23, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+574: guard_nonnull_class(p26, ConstClass(W_CellIntegerStrategy), descr=<Guard0xa8fdf40>) [p0, p1]
+592: i28 = getfield_gc_i(p26, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
debug_merge_point(0, 0, '(set! mutatorSum SetBang8)')
debug_merge_point(0, 0, '(CellRef(oldGenAlloc) (quotient n5623 promoteRate))')
+592: p29 = getfield_gc_r(p11, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_2 40 pure>)
+596: p30 = getfield_gc_r(p29, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+600: guard_nonnull_class(p30, 16480704, descr=<Guard0xa8fdfa0>) [p0, p1]
+619: p32 = getfield_gc_r(p11, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_0 24 pure>)
+623: guard_nonnull_class(p32, ConstClass(W_Fixnum), descr=<Guard0x97e6020>) [p0, p1]
+641: i34 = getfield_gc_i(p32, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+645: i35 = int_is_true(i34)
+648: guard_true(i35, descr=<Guard0x498a4e8>) [p0, p1]
+654: i37 = int_eq(i16, -9223372036854775808)
+676: i39 = int_eq(i34, -1)
+689: i40 = int_and(i37, i39)
+692: guard_false(i40, descr=<Guard0x498a530>) [p0, p1]
+701: i42 = call_i(ConstClass(ll_int_py_div__Signed_Signed), i16, i34, descr=<Calli 8 ii EF=0 OS=12>)
+729: i43 = int_mul(i42, i34)
+736: i44 = int_xor(i16, i34)
+739: i46 = int_rshift(i44, 63)
+743: i47 = int_ne(i43, i16)
+756: i48 = int_and(i46, i47)
+759: i49 = int_add(i42, i48)
+762: p50 = getfield_gc_r(p30, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+773: guard_value(p50, ConstPtr(ptr51), descr=<Guard0x97e6080>) [p50, p3, p30, i49, p4, p6]
debug_merge_point(0, 0, '(let ([full5464 (quotient n5462 treeSize)]) (let ([partial5468 (modulo n5462 treeSize)][doloop5472 (lambda (i5474) (let ([if7 (>= i5474 full5464)]) (if if7 (void) (let ([AppRand45 (makeTree treeHeight)]) (vector-set! CellRef(trees) CellRef(where) AppRand45) (let ([AppRand46 (+ CellRef(where) 1)]) (set! where (modulo AppRand46 (vector-length CellRef(trees))))) (let ([AppRand47 (+ i5474 1)]) (doloop5472 AppRand47))))))]) (doloop5472 0) (let ([partial5468 partial5468][loop5488 (lambda (partial5490) (let ([if8 (> partial5490 INSIGNIFICANT)]) (if if8 (let ([h5494 (bytesToHeight partial5490)]) (let ([newTree (makeTree h5494)][AppRand48 (vector-ref CellRef(trees) CellRef(where))]) (CellRef(replaceTree) AppRand48 newTree) (let ([AppRand49 (+ CellRef(where) 1)]) (set! where (modulo AppRand49 (vector-length CellRef(trees))))) (let ([AppRand50 (heightToBytes h5494)]) (let ([AppRand51 (- partial5490 AppRand50)]) (loop5488 AppRand51))))) (void))))]) (loop5488 partial5468))))')
debug_merge_point(0, 0, '(quotient n5462 treeSize)')
+782: p52 = getfield_gc_r(p30, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize9.inst__vals_2 40 pure>)
+786: guard_nonnull_class(p52, ConstClass(W_Fixnum), descr=<Guard0x97e60e0>) [p50, p3, p30, i49, p4, p6]
+805: i54 = getfield_gc_i(p52, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+809: i55 = int_is_true(i54)
+812: guard_true(i55, descr=<Guard0x498a578>) [p50, p3, p30, i49, p4, p6]
+818: i57 = int_eq(i49, -9223372036854775808)
+841: i59 = int_eq(i54, -1)
+854: i60 = int_and(i57, i59)
+857: guard_false(i60, descr=<Guard0x498a5c0>) [p50, p3, p30, i49, p4, p6]
+866: i62 = call_i(ConstClass(ll_int_py_div__Signed_Signed), i49, i54, descr=<Calli 8 ii EF=0 OS=12>)
+884: i63 = int_mul(i62, i54)
+891: i64 = int_xor(i49, i54)
+897: i66 = int_rshift(i64, 63)
+901: i67 = int_ne(i63, i49)
+913: i68 = int_and(i66, i67)
+916: i69 = int_add(i62, i68)
debug_merge_point(0, 0, '(let ([partial5468 (modulo n5462 treeSize)][doloop5472 (lambda (i5474) (let ([if7 (>= i5474 full5464)]) (if if7 (void) (let ([AppRand45 (makeTree treeHeight)]) (vector-set! CellRef(trees) CellRef(where) AppRand45) (let ([AppRand46 (+ CellRef(where) 1)]) (set! where (modulo AppRand46 (vector-length CellRef(trees))))) (let ([AppRand47 (+ i5474 1)]) (doloop5472 AppRand47))))))]) (doloop5472 0) (let ([partial5468 partial5468][loop5488 (lambda (partial5490) (let ([if8 (> partial5490 INSIGNIFICANT)]) (if if8 (let ([h5494 (bytesToHeight partial5490)]) (let ([newTree (makeTree h5494)][AppRand48 (vector-ref CellRef(trees) CellRef(where))]) (CellRef(replaceTree) AppRand48 newTree) (let ([AppRand49 (+ CellRef(where) 1)]) (set! where (modulo AppRand49 (vector-length CellRef(trees))))) (let ([AppRand50 (heightToBytes h5494)]) (let ([AppRand51 (- partial5490 AppRand50)]) (loop5488 AppRand51))))) (void))))]) (loop5488 partial5468)))')
debug_merge_point(0, 0, '(modulo n5462 treeSize)')
+919: i71 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i49, i54, descr=<Calli 8 ii EF=0 OS=14>)
debug_merge_point(0, 0, '(lambda (i5474) (let ([if7 (>= i5474 full5464)]) (if if7 (void) (let ([AppRand45 (makeTree treeHeight)]) (vector-set! CellRef(trees) CellRef(where) AppRand45) (let ([AppRand46 (+ CellRef(where) 1)]) (set! where (modulo AppRand46 (vector-length CellRef(trees))))) (let ([AppRand47 (+ i5474 1)]) (doloop5472 AppRand47))))))')
+944: p72 = getfield_gc_r(p30, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize9.inst__vals_3 48 pure>)
+948: p73 = getfield_gc_r(p30, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize9.inst__vals_5 64 pure>)
+952: p74 = getfield_gc_r(p30, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize9.inst__vals_6 72 pure>)
+956: p75 = getfield_gc_r(p30, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize9.inst__vals_8 88 pure>)
+960: p76 = getfield_gc_r(p30, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+964: guard_class(p76, 16505296, descr=<Guard0x97e6140>) [p76, p75, p74, p73, p72, i69, p3, i71, p30, i49, p4, p6]
debug_merge_point(0, 0, '(doloop5472 0)')
debug_merge_point(0, 0, '(let ([if7 (>= i5474 full5464)]) (if if7 (void) (let ([AppRand45 (makeTree treeHeight)]) (vector-set! CellRef(trees) CellRef(where) AppRand45) (let ([AppRand46 (+ CellRef(where) 1)]) (set! where (modulo AppRand46 (vector-length CellRef(trees))))) (let ([AppRand47 (+ i5474 1)]) (doloop5472 AppRand47)))))')
debug_merge_point(0, 0, '(>= i5474 full5464)')
+976: i79 = int_ge(0, i69)
+984: guard_true(i79, descr=<Guard0x498a608>) [p76, p75, p74, p73, p72, i69, p3, i71, p30, i49, p4, p6]
debug_merge_point(0, 0, '(if if7 (void) (let ([AppRand45 (makeTree treeHeight)]) (vector-set! CellRef(trees) CellRef(where) AppRand45) (let ([AppRand46 (+ CellRef(where) 1)]) (set! where (modulo AppRand46 (vector-length CellRef(trees))))) (let ([AppRand47 (+ i5474 1)]) (doloop5472 AppRand47))))')
debug_merge_point(0, 0, '(void)')
debug_merge_point(0, 0, '(let ([partial5468 partial5468][loop5488 (lambda (partial5490) (let ([if8 (> partial5490 INSIGNIFICANT)]) (if if8 (let ([h5494 (bytesToHeight partial5490)]) (let ([newTree (makeTree h5494)][AppRand48 (vector-ref CellRef(trees) CellRef(where))]) (CellRef(replaceTree) AppRand48 newTree) (let ([AppRand49 (+ CellRef(where) 1)]) (set! where (modulo AppRand49 (vector-length CellRef(trees))))) (let ([AppRand50 (heightToBytes h5494)]) (let ([AppRand51 (- partial5490 AppRand50)]) (loop5488 AppRand51))))) (void))))]) (loop5488 partial5468))')
debug_merge_point(0, 0, 'partial5468')
debug_merge_point(0, 0, '(lambda (partial5490) (let ([if8 (> partial5490 INSIGNIFICANT)]) (if if8 (let ([h5494 (bytesToHeight partial5490)]) (let ([newTree (makeTree h5494)][AppRand48 (vector-ref CellRef(trees) CellRef(where))]) (CellRef(replaceTree) AppRand48 newTree) (let ([AppRand49 (+ CellRef(where) 1)]) (set! where (modulo AppRand49 (vector-length CellRef(trees))))) (let ([AppRand50 (heightToBytes h5494)]) (let ([AppRand51 (- partial5490 AppRand50)]) (loop5488 AppRand51))))) (void))))')
+990: p80 = getfield_gc_r(p30, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize9.inst__vals_0 24 pure>)
+994: p81 = getfield_gc_r(p30, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize9.inst__vals_1 32 pure>)
+998: p82 = getfield_gc_r(p30, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize9.inst__vals_4 56 pure>)
+1002: p83 = getfield_gc_r(p30, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize9.inst__vals_7 80 pure>)
debug_merge_point(0, 0, '(loop5488 partial5468)')
debug_merge_point(0, 0, '(let ([if8 (> partial5490 INSIGNIFICANT)]) (if if8 (let ([h5494 (bytesToHeight partial5490)]) (let ([newTree (makeTree h5494)][AppRand48 (vector-ref CellRef(trees) CellRef(where))]) (CellRef(replaceTree) AppRand48 newTree) (let ([AppRand49 (+ CellRef(where) 1)]) (set! where (modulo AppRand49 (vector-length CellRef(trees))))) (let ([AppRand50 (heightToBytes h5494)]) (let ([AppRand51 (- partial5490 AppRand50)]) (loop5488 AppRand51))))) (void))) from (loop5488 partial5468)')
debug_merge_point(0, 0, '(> partial5490 INSIGNIFICANT)')
+1013: guard_nonnull_class(p81, ConstClass(W_Fixnum), descr=<Guard0x97e61a0>) [p76, p75, p74, p73, p72, i69, p3, i71, p30, i49, p4, p6]
+1032: i85 = getfield_gc_i(p81, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1043: i86 = int_gt(i71, i85)
+1046: guard_true(i86, descr=<Guard0x498a650>) [p76, p75, p74, p73, p72, i69, p3, i71, p30, i49, p4, p6]
debug_merge_point(0, 0, '(if if8 (let ([h5494 (bytesToHeight partial5490)]) (let ([newTree (makeTree h5494)][AppRand48 (vector-ref CellRef(trees) CellRef(where))]) (CellRef(replaceTree) AppRand48 newTree) (let ([AppRand49 (+ CellRef(where) 1)]) (set! where (modulo AppRand49 (vector-length CellRef(trees))))) (let ([AppRand50 (heightToBytes h5494)]) (let ([AppRand51 (- partial5490 AppRand50)]) (loop5488 AppRand51))))) (void))')
debug_merge_point(0, 0, '(let ([h5494 (bytesToHeight partial5490)]) (let ([newTree (makeTree h5494)][AppRand48 (vector-ref CellRef(trees) CellRef(where))]) (CellRef(replaceTree) AppRand48 newTree) (let ([AppRand49 (+ CellRef(where) 1)]) (set! where (modulo AppRand49 (vector-length CellRef(trees))))) (let ([AppRand50 (heightToBytes h5494)]) (let ([AppRand51 (- partial5490 AppRand50)]) (loop5488 AppRand51)))))')
debug_merge_point(0, 0, '(bytesToHeight partial5490)')
+1052: guard_nonnull_class(p80, 16482208, descr=<Guard0x97e6200>) [p76, p75, p74, p73, p72, i69, p3, i71, p30, i49, p4, p6]
+1070: p88 = getfield_gc_r(p80, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1088: guard_value(p88, ConstPtr(ptr89), descr=<Guard0x498a698>) [p76, p75, p74, p73, p72, i69, p3, i71, p30, i49, p4, p6]
debug_merge_point(0, 0, '(let ([AppRand21 (/ bytes bytes/node)]) (nodesToHeight AppRand21))')
debug_merge_point(0, 0, '(/ bytes bytes/node)')
+1097: i90 = getfield_gc_i(p80, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed10.inst_vals_fixed_0 24 pure>)
+1101: i91 = int_is_zero(i90)
+1104: guard_false(i91, descr=<Guard0x498a6e0>) [p76, p75, p74, p73, p72, i69, p3, i71, p30, i49, p4, p6]
+1110: i93 = int_eq(i90, -1)
+1110: i95 = call_i(ConstClass(ll_int_py_div__Signed_Signed), i71, i90, descr=<Calli 8 ii EF=0 OS=12>)
+1166: i96 = int_mul(i95, i90)
+1173: i97 = int_eq(i96, i71)
+1180: guard_true(i97, descr=<Guard0x97e6260>) [i71, i96, i90, i95, p83, p82, p81, p76, p80, None, p74, p73, p72, None, p3, None, None, None, p4, p6]
debug_merge_point(0, 0, '(nodesToHeight AppRand21)')
+1186: p99 = getfield_gc_r(p80, descr=<FieldP pycket.small_list.W_Closure1AsEnvSize2Fixed10.inst_w_val1 32 pure>)
+1197: guard_value(p99, ConstPtr(ptr100), descr=<Guard0x97e62c0>) [i71, i96, i90, i95, p83, p82, p81, p76, p80, None, p74, p73, p72, None, p3, None, None, None, p4, p6]
+1206: p101 = getfield_gc_r(p80, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([doloop (lambda (h5278 n5280) (let ([AppRand17 (+ n5280 n5280 -1)]) (let ([if1 (> AppRand17 nodes)]) (if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))))))]) (doloop 1 1))')
debug_merge_point(0, 0, '(lambda (h5278 n5280) (let ([AppRand17 (+ n5280 n5280 -1)]) (let ([if1 (> AppRand17 nodes)]) (if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))))))')
debug_merge_point(0, 0, '(doloop 1 1)')
debug_merge_point(0, 0, '(let ([AppRand17 (+ n5280 n5280 -1)]) (let ([if1 (> AppRand17 nodes)]) (if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))))) from (doloop 1 1)')
debug_merge_point(0, 0, '(+ n5280 n5280 -1)')
debug_merge_point(0, 0, '(let ([if1 (> AppRand17 nodes)]) (if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))))')
debug_merge_point(0, 0, '(> AppRand17 nodes)')
+1206: i103 = int_gt(1, i95)
+1210: guard_false(i103, descr=<Guard0x498a728>) [i71, i96, i90, i95, p83, p82, p81, p76, p80, None, p74, p73, p72, None, p3, None, None, None, p4, p6]
debug_merge_point(0, 0, '(if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19)))')
debug_merge_point(0, 0, '(let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))')
debug_merge_point(0, 0, '(+ h5278 1)')
debug_merge_point(0, 0, '(+ n5280 n5280)')
debug_merge_point(0, 0, '(doloop AppRand18 AppRand19)')
debug_merge_point(0, 0, '(let ([AppRand17 (+ n5280 n5280 -1)]) (let ([if1 (> AppRand17 nodes)]) (if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))))) from (doloop AppRand18 AppRand19)')
+1216: p104 = new_with_vtable(descr=<SizeDescr 32>)
+1263: p105 = new_with_vtable(descr=<SizeDescr 40>)
+1274: p106 = new_with_vtable(descr=<SizeDescr 24>)
+1285: p107 = new_with_vtable(descr=<SizeDescr 80>)
+1296: setfield_gc(p107, p76, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1307: setfield_gc(p107, ConstPtr(ptr108), descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1311: setfield_gc(p107, p80, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize7.inst__vals_0 24 pure>)
+1315: setfield_gc(p107, p81, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize7.inst__vals_1 32 pure>)
+1326: setfield_gc(p107, p72, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize7.inst__vals_2 40 pure>)
+1330: setfield_gc(p107, p82, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize7.inst__vals_3 48 pure>)
+1341: setfield_gc(p107, p73, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize7.inst__vals_4 56 pure>)
+1352: setfield_gc(p107, p74, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize7.inst__vals_5 64 pure>)
+1363: setfield_gc(p107, p83, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize7.inst__vals_6 72 pure>)
+1367: setfield_gc(p106, p107, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1371: setfield_gc(p106, i71, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1382: p109 = new_with_vtable(descr=<SizeDescr 40>)
+1394: setfield_gc(p109, p6, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1406: setfield_gc(p109, p3, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1418: setfield_gc(p109, p4, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1437: setfield_gc(p109, ConstPtr(ptr110), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+1442: setfield_gc(p105, p106, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1446: setfield_gc(p105, p109, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1450: setfield_gc(p105, p6, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1461: setfield_gc(p104, ConstPtr(ptr111), descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1472: setfield_gc(p104, ConstPtr(ptr112), descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1476: setfield_gc(p104, i95, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize1Fixed.inst_vals_fixed_0 24 pure>)
+1487: setfield_gc(p105, ConstPtr(ptr113), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+1491: jump(p104, 2, 2, p105, p6, i95, descr=TargetToken(139976082360544))
+1552: --end of the loop--
[3e4c20edfd2abde] jit-log-opt-bridge}
[3e4c20ee0073bdc] {jit-backend
[3e4c20ee01043ff] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c139b0 +0  000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8C4202000048FF042520300D0449BB2038C1B64E7F000066410F2E037B044883FD000F85000000004885C00F850000000066450F2EED7B044883FD000F850000000049BB5838C1B64E7F000066450F2E2B0F820000000066450F2E6B187B044883FD000F8300000000F24D0F2CF54983EE010F80000000004C8B6B184D85ED0F84000000004D85F60F84000000004D0FAFF50F80000000004D8B6A084C8B8D300100004D8B41084983F8017207418138900F00000F8500000000498B7A104C29F70F800000000041817D0010BD00000F85000000004D8B7510488B359FFEFFFF4939F60F8500000000498B75204883FE017206813E601400000F85000000004C8B76084C39F70F8E000000004D8B75184983FE01720741813EE0C500000F8500000000498B7610488B1579FEFFFF4839D60F8500000000498B56184885D20F84000000004989D74889FB4D89CC4C8985380100004889D641BB70CBAE0041FFD34889C2490FAFC74839D80F8500000000498B7E204C8B154CFEFFFF4C39D70F85000000004883FA010F8C000000004989D6488B0C25F091F900488D5160483B14251092F9000F87C200000048891425F091F90048C701D0C80000488D512048C702101100004C8D7A2849C707B01E01004D896F0849895F10488B1D00FEFFFF48895908488B9D3801000048895A084C8B2DF2FDFFFF4C8969104C8971184C897A104C8962184C8B25E3FDFFFF4C89622048898D30010000BE020000004889953801000048899D400100004D89F1BB0200000049BBD012C0B64E7F000041FFE30F1F84000000000048C7442408FFFFFF0049BB1038C1B64E7F00004C895D204D8D9BE04AFDFF41FFD3E998FDFFFF49BB9839C1B64E7F00004C895D204D8D9B5851FDFF41FFD3E929FFFFFFFF3587FCFFFF49BB2838C1B64E7F000041534D8D9BE84CFDFF41FFE3FF3573FCFFFF49BB3838C1B64E7F000041534D8D9BD84CFDFF41FFE3FF355FFCFFFF49BB4838C1B64E7F000041534D8D9BC84CFDFF41FFE3FF354BFCFFFF4D8D5B0841534D8D9BB04CFDFF41FFE3FF353DFCFFFF49BB7838C1B64E7F000041534D8D9B984CFDFF41FFE3FF3529FCFFFF49BB8838C1B64E7F000041534D8D9B884CFDFF41FFE3FF3515FCFFFF49BB9838C1B64E7F000041534D8D9B784CFDFF41FFE3FF3501FCFFFF49BBA838C1B64E7F000041534D8D9B684CFDFF41FFE3FF35EDFBFFFF49BBB838C1B64E7F000041534D8D9B584CFDFF41FFE3FF35D9FBFFFF49BBC838C1B64E7F000041534D8D9B484CFDFF41FFE3FF35C5FBFFFF49BBD838C1B64E7F000041534D8D9B384CFDFF41FFE3FF35B1FBFFFF49BBE838C1B64E7F000041534D8D9B284CFDFF41FFE3FF359DFBFFFF49BBF838C1B64E7F000041534D8D9B184CFDFF41FFE3FF3591FBFFFF49BB0839C1B64E7F000041534D8D9B084CFDFF41FFE3FF357DFBFFFF49BB1839C1B64E7F000041534D8D9BF84BFDFF41FFE3FF3569FBFFFF49BB2839C1B64E7F000041534D8D9BE84BFDFF41FFE3FF3555FBFFFF49BB3839C1B64E7F000041534D8D9BD84BFDFF41FFE3FF3549FBFFFF49BB4839C1B64E7F000041534D8D9BC84BFDFF41FFE3FF3535FBFFFF49BB5839C1B64E7F000041534D8D9BB84BFDFF41FFE3FF3521FBFFFF49BB6839C1B64E7F000041534D8D9B9846FDFF41FFE3FF3515FBFFFF49BB7839C1B64E7F000041534D8D9B8846FDFF41FFE3FF3501FBFFFF49BB8839C1B64E7F000041534D8D9B7846FDFF41FFE3
[3e4c20ee0110442] jit-backend-dump}
[3e4c20ee011adc9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c13a94 +0  34000000
[3e4c20ee011c348] jit-backend-dump}
[3e4c20ee01204f3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c13ce5 +0  34000000
[3e4c20ee0121511] jit-backend-dump}
[3e4c20ee012492a] {jit-backend-addr
bridge out of Guard 0xa8aed58 has address 0x7f4eb6c13a90 to 0x7f4eb6c13ce0
       gc table: 0x7f4eb6c139b0
    jump target: 0x7f4eb6c13a90
         resops: 0x7f4eb6c13a9e
       failures: 0x7f4eb6c13ce0
            end: 0x7f4eb6c13f85
[3e4c20ee0126d24] jit-backend-addr}
[3e4c20ee012a0e7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c13abd +0  62020000
[3e4c20ee012aefa] jit-backend-dump}
[3e4c20ee012e031] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c13ac6 +0  75020000
[3e4c20ee012ed03] jit-backend-dump}
[3e4c20ee0131f29] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c13ad7 +0  80020000
[3e4c20ee0132c54] jit-backend-dump}
[3e4c20ee0135eb4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c13aec +0  87020000
[3e4c20ee0136b7a] jit-backend-dump}
[3e4c20ee0139c43] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c13afe +0  8B020000
[3e4c20ee013a8b3] jit-backend-dump}
[3e4c20ee013d9bd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c13b0d +0  98020000
[3e4c20ee013e676] jit-backend-dump}
[3e4c20ee01418f8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c13b1a +0  C3020000
[3e4c20ee0142578] jit-backend-dump}
[3e4c20ee014572f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c13b23 +0  D6020000
[3e4c20ee01463b2] jit-backend-dump}
[3e4c20ee0149466] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c13b2d +0  E8020000
[3e4c20ee014a153] jit-backend-dump}
[3e4c20ee014d216] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c13b4f +0  E2020000
[3e4c20ee014de9f] jit-backend-dump}
[3e4c20ee0150fb2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c13b5c +0  F1020000
[3e4c20ee0151c34] jit-backend-dump}
[3e4c20ee0154d53] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c13b6a +0  FF020000
[3e4c20ee01559d9] jit-backend-dump}
[3e4c20ee0158ab4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c13b7e +0  07030000
[3e4c20ee0159743] jit-backend-dump}
[3e4c20ee015c865] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c13b94 +0  0D030000
[3e4c20ee015d4eb] jit-backend-dump}
[3e4c20ee01605ae] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c13ba1 +0  1C030000
[3e4c20ee016134a] jit-backend-dump}
[3e4c20ee016447b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c13bb8 +0  21030000
[3e4c20ee01650f4] jit-backend-dump}
[3e4c20ee0168213] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c13bcc +0  29030000
[3e4c20ee0168e86] jit-backend-dump}
[3e4c20ee016bfb8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c13bd9 +0  38030000
[3e4c20ee016cc31] jit-backend-dump}
[3e4c20ee016fd06] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c13c05 +0  28030000
[3e4c20ee0170995] jit-backend-dump}
[3e4c20ee0173a6e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c13c19 +0  30030000
[3e4c20ee01746e7] jit-backend-dump}
[3e4c20ee01777c0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c13c23 +0  42030000
[3e4c20ee017843c] jit-backend-dump}
[3e4c20ee017b7e6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c099bb +0  D1A00000
[3e4c20ee017c4c5] jit-backend-dump}
[3e4c20ee01805fc] jit-backend}
[3e4c20ee018402f] {jit-log-opt-bridge
# bridge out of Guard 0xa8aed58 with 91 ops
[i0, f1, f2, i3, p4, p5, p6, p7]
+246: i9 = float_eq(f1, 0.000000)
+267: guard_true(i9, descr=<Guard0x97e6320>) [i0, f1, f2, i3, p5, p6, p4, p7]
+273: i10 = int_is_true(i0)
+276: guard_false(i10, descr=<Guard0x498a770>) [i0, f1, f2, i3, p5, p6, p4, p7]
+282: i11 = float_ne(f2, f2)
+293: guard_false(i11, descr=<Guard0x498a7b8>) [i0, f1, f2, i3, p5, p6, p4, p7]
+299: i13 = float_ge(f2, -9223372036854775808.000000)
+314: guard_true(i13, descr=<Guard0x498a800>) [i0, f1, f2, i3, p5, p6, p4, p7]
+320: i15 = float_lt(f2, 9223372036854775808.000000)
+332: guard_true(i15, descr=<Guard0x498a848>) [i0, f1, f2, i3, p5, p6, p4, p7]
+338: i16 = cast_float_to_int(f2)
+343: i18 = int_sub_ovf(i16, 1)
+347: guard_no_overflow(descr=<Guard0x498a890>) [i0, f1, f2, i3, p5, p6, p4, p7]
+353: guard_not_invalidated(descr=<Guard0x498a8d8>) [i0, f1, f2, i3, p5, p6, p4, p7]
debug_merge_point(0, 0, '(* bytes/node AppRand20)')
+353: i19 = getfield_gc_i(p4, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_vals_fixed_1 24 pure>)
+357: i20 = int_is_true(i19)
+360: guard_true(i20, descr=<Guard0x498a920>) [i0, f1, f2, i3, p5, p6, p4, p7]
+366: i21 = int_is_true(i18)
+369: guard_true(i21, descr=<Guard0x498a968>) [i0, f1, f2, i3, p5, p6, p4, p7]
+375: i22 = int_mul_ovf(i19, i18)
+379: guard_no_overflow(descr=<Guard0x498a9b0>) [i0, f1, f2, i3, p5, p6, p4, p7]
debug_merge_point(0, 0, '(let ([AppRand51 (- partial5490 AppRand50)]) (loop5488 AppRand51)) from (* bytes/node AppRand20)')
+385: p23 = getfield_gc_r(p6, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+389: p24 = getfield_gc_r(p5, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+400: guard_nonnull_class(p24, ConstClass(ForwardLink), descr=<Guard0x97e6380>) [i0, f1, f2, i3, p5, p6, p4, p7]
debug_merge_point(0, 0, '(- partial5490 AppRand50)')
+419: i26 = getfield_gc_i(p6, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+423: i27 = int_sub_ovf(i26, i22)
+426: guard_no_overflow(descr=<Guard0x498a9f8>) [i0, f1, f2, i3, p5, p6, p4, p7]
debug_merge_point(0, 0, '(loop5488 AppRand51)')
+432: guard_class(p23, 16479952, descr=<Guard0x498aa40>) [i0, f1, f2, i3, p5, p6, p4, p7]
+446: p29 = getfield_gc_r(p23, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+457: guard_value(p29, ConstPtr(ptr30), descr=<Guard0x498aa88>) [i0, f1, f2, i3, p5, p6, p4, p7]
debug_merge_point(0, 0, '(let ([if8 (> partial5490 INSIGNIFICANT)]) (if if8 (let ([h5494 (bytesToHeight partial5490)]) (let ([newTree (makeTree h5494)][AppRand48 (vector-ref CellRef(trees) CellRef(where))]) (CellRef(replaceTree) AppRand48 newTree) (let ([AppRand49 (+ CellRef(where) 1)]) (set! where (modulo AppRand49 (vector-length CellRef(trees))))) (let ([AppRand50 (heightToBytes h5494)]) (let ([AppRand51 (- partial5490 AppRand50)]) (loop5488 AppRand51))))) (void))) from (loop5488 AppRand51)')
debug_merge_point(0, 0, '(> partial5490 INSIGNIFICANT)')
+466: p31 = getfield_gc_r(p23, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize7.inst__vals_1 32 pure>)
+470: guard_nonnull_class(p31, ConstClass(W_Fixnum), descr=<Guard0x97e63e0>) [i0, f1, f2, i3, p5, p6, p4, p7]
+488: i33 = getfield_gc_i(p31, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+492: i34 = int_gt(i27, i33)
+495: guard_true(i34, descr=<Guard0x498aad0>) [i0, f1, f2, i3, p5, p6, p4, p7]
debug_merge_point(0, 0, '(if if8 (let ([h5494 (bytesToHeight partial5490)]) (let ([newTree (makeTree h5494)][AppRand48 (vector-ref CellRef(trees) CellRef(where))]) (CellRef(replaceTree) AppRand48 newTree) (let ([AppRand49 (+ CellRef(where) 1)]) (set! where (modulo AppRand49 (vector-length CellRef(trees))))) (let ([AppRand50 (heightToBytes h5494)]) (let ([AppRand51 (- partial5490 AppRand50)]) (loop5488 AppRand51))))) (void))')
debug_merge_point(0, 0, '(let ([h5494 (bytesToHeight partial5490)]) (let ([newTree (makeTree h5494)][AppRand48 (vector-ref CellRef(trees) CellRef(where))]) (CellRef(replaceTree) AppRand48 newTree) (let ([AppRand49 (+ CellRef(where) 1)]) (set! where (modulo AppRand49 (vector-length CellRef(trees))))) (let ([AppRand50 (heightToBytes h5494)]) (let ([AppRand51 (- partial5490 AppRand50)]) (loop5488 AppRand51)))))')
debug_merge_point(0, 0, '(bytesToHeight partial5490)')
+501: p35 = getfield_gc_r(p23, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize7.inst__vals_0 24 pure>)
+505: guard_nonnull_class(p35, 16482208, descr=<Guard0x97e6440>) [i0, f1, f2, i3, p5, p6, p4, p7]
+524: p37 = getfield_gc_r(p35, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+535: guard_value(p37, ConstPtr(ptr38), descr=<Guard0x498ab18>) [i0, f1, f2, i3, p5, p6, p4, p7]
+544: p39 = getfield_gc_r(p23, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([AppRand21 (/ bytes bytes/node)]) (nodesToHeight AppRand21))')
debug_merge_point(0, 0, '(/ bytes bytes/node)')
+544: i40 = getfield_gc_i(p35, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed10.inst_vals_fixed_0 24 pure>)
+548: i41 = int_is_zero(i40)
+551: guard_false(i41, descr=<Guard0x46b6020>) [i0, f1, f2, i3, p5, p6, p4, p7]
+557: i43 = int_eq(i40, -1)
+557: i45 = call_i(ConstClass(ll_int_py_div__Signed_Signed), i27, i40, descr=<Calli 8 ii EF=0 OS=12>)
+585: i46 = int_mul(i45, i40)
+592: i47 = int_eq(i46, i27)
+595: guard_true(i47, descr=<Guard0x97e64a0>) [i27, i46, i40, i45, p23, p35, p24, None, p5, None, None, None]
debug_merge_point(0, 0, '(nodesToHeight AppRand21)')
+601: p49 = getfield_gc_r(p35, descr=<FieldP pycket.small_list.W_Closure1AsEnvSize2Fixed10.inst_w_val1 32 pure>)
+612: guard_value(p49, ConstPtr(ptr50), descr=<Guard0x97e6500>) [i27, i46, i40, i45, p23, p35, p24, None, p5, None, None, None]
+621: p51 = getfield_gc_r(p35, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([doloop (lambda (h5278 n5280) (let ([AppRand17 (+ n5280 n5280 -1)]) (let ([if1 (> AppRand17 nodes)]) (if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))))))]) (doloop 1 1))')
debug_merge_point(0, 0, '(lambda (h5278 n5280) (let ([AppRand17 (+ n5280 n5280 -1)]) (let ([if1 (> AppRand17 nodes)]) (if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))))))')
debug_merge_point(0, 0, '(doloop 1 1)')
debug_merge_point(0, 0, '(let ([AppRand17 (+ n5280 n5280 -1)]) (let ([if1 (> AppRand17 nodes)]) (if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))))) from (doloop 1 1)')
debug_merge_point(0, 0, '(+ n5280 n5280 -1)')
debug_merge_point(0, 0, '(let ([if1 (> AppRand17 nodes)]) (if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))))')
debug_merge_point(0, 0, '(> AppRand17 nodes)')
+621: i53 = int_gt(1, i45)
+625: guard_false(i53, descr=<Guard0x46b6068>) [i27, i46, i40, i45, p23, p35, p24, None, p5, None, None, None]
debug_merge_point(0, 0, '(if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19)))')
debug_merge_point(0, 0, '(let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))')
debug_merge_point(0, 0, '(+ h5278 1)')
debug_merge_point(0, 0, '(+ n5280 n5280)')
debug_merge_point(0, 0, '(doloop AppRand18 AppRand19)')
debug_merge_point(0, 0, '(let ([AppRand17 (+ n5280 n5280 -1)]) (let ([if1 (> AppRand17 nodes)]) (if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))))) from (doloop AppRand18 AppRand19)')
+631: p54 = new_with_vtable(descr=<SizeDescr 32>)
+675: p55 = new_with_vtable(descr=<SizeDescr 40>)
+686: p56 = new_with_vtable(descr=<SizeDescr 24>)
+697: setfield_gc(p56, p23, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+701: setfield_gc(p56, i27, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+712: setfield_gc(p54, ConstPtr(ptr57), descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+716: setfield_gc(p55, p24, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+734: setfield_gc(p54, ConstPtr(ptr58), descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+738: setfield_gc(p54, i45, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize1Fixed.inst_vals_fixed_0 24 pure>)
+742: setfield_gc(p55, p56, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+746: setfield_gc(p55, p5, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+757: setfield_gc(p55, ConstPtr(ptr59), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+761: jump(p54, 2, 2, p55, p24, i45, descr=TargetToken(139976082360544))
+816: --end of the loop--
[3e4c20ee01e1353] jit-log-opt-bridge}
[3e4c20ee0941b42] {jit-backend
[3e4c20ee0b5504d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c
[3e4c20ee0b7b883] jit-backend-dump}
[3e4c20ee0b888a1] {jit-backend-addr
Loop 100 ((let ([if10 (>= i5574 (quotient n5570 2))]) (if if10 (void) (begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55))))) from (doloop5572 AppRand55)) has address 0x7f4eb6c1489d to 0x7f4eb6c154c0 (bootstrap 0x7f4eb6c14810)
       gc table: 0x7f4eb6c14520
       function: 0x7f4eb6c14810
         resops: 0x7f4eb6c1489d
       failures: 0x7f4eb6c154c0
            end: 0x7f4eb6c15e73
[3e4c20ee0b8bb0a] jit-backend-addr}
[3e4c20ee0b90449] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c148b4 +0  370C0000
[3e4c20ee0b918ab] jit-backend-dump}
[3e4c20ee0b94f18] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c148ca +0  3D0C0000
[3e4c20ee0b95f46] jit-backend-dump}
[3e4c20ee0b9960f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c148dd +0  620C0000
[3e4c20ee0b9a3fd] jit-backend-dump}
[3e4c20ee0b9d75e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c148f1 +0  6A0C0000
[3e4c20ee0b9e4e5] jit-backend-dump}
[3e4c20ee0ba16e6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14905 +0  720C0000
[3e4c20ee0ba23e9] jit-backend-dump}
[3e4c20ee0ba5557] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1493c +0  570C0000
[3e4c20ee0ba624e] jit-backend-dump}
[3e4c20ee0ba936a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14957 +0  580C0000
[3e4c20ee0baa039] jit-backend-dump}
[3e4c20ee0bad231] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1496b +0  600C0000
[3e4c20ee0bae03e] jit-backend-dump}
[3e4c20ee0bb4823] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14981 +0  660C0000
[3e4c20ee0bb5698] jit-backend-dump}
[3e4c20ee0bb8d8b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1499d +0  660C0000
[3e4c20ee0bb9b7d] jit-backend-dump}
[3e4c20ee0bbce7c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c149b5 +0  6A0C0000
[3e4c20ee0bbdbd5] jit-backend-dump}
[3e4c20ee0bc0e35] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c149c2 +0  790C0000
[3e4c20ee0bc1b47] jit-backend-dump}
[3e4c20ee0bc4ccb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c149dd +0  7A0C0000
[3e4c20ee0bc59f3] jit-backend-dump}
[3e4c20ee0bc8b67] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c149f1 +0  820C0000
[3e4c20ee0bc9892] jit-backend-dump}
[3e4c20ee0bccb48] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14a0c +0  830C0000
[3e4c20ee0bcd8a6] jit-backend-dump}
[3e4c20ee0bd0bac] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14a2b +0  800C0000
[3e4c20ee0bd1938] jit-backend-dump}
[3e4c20ee0bd4ac2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14a38 +0  8F0C0000
[3e4c20ee0bd5812] jit-backend-dump}
[3e4c20ee0bd898f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14a41 +0  A20C0000
[3e4c20ee0bd96bd] jit-backend-dump}
[3e4c20ee0bdc7d6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14a4b +0  B40C0000
[3e4c20ee0bdd575] jit-backend-dump}
[3e4c20ee0be073c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14a66 +0  B50C0000
[3e4c20ee0be1448] jit-backend-dump}
[3e4c20ee0be45a1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14a73 +0  C40C0000
[3e4c20ee0be52e8] jit-backend-dump}
[3e4c20ee0be847e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14a94 +0  BF0C0000
[3e4c20ee0be9190] jit-backend-dump}
[3e4c20ee0bec296] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14aa1 +0  CE0C0000
[3e4c20ee0bed008] jit-backend-dump}
[3e4c20ee0bf0157] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14acf +0  BC0C0000
[3e4c20ee0bf0ef0] jit-backend-dump}
[3e4c20ee0bf3fd2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14aff +0  A80C0000
[3e4c20ee0bf4d0f] jit-backend-dump}
[3e4c20ee0bf7e3a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14b49 +0  7A0C0000
[3e4c20ee0bf8b43] jit-backend-dump}
[3e4c20ee0bfbc8d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14b81 +0  5E0C0000
[3e4c20ee0bfc9cd] jit-backend-dump}
[3e4c20ee0bffb3f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14baa +0  510C0000
[3e4c20ee0c0087c] jit-backend-dump}
[3e4c20ee0c03954] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14bdb +0  3C0C0000
[3e4c20ee0c046a1] jit-backend-dump}
[3e4c20ee0c077cf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14c10 +0  230C0000
[3e4c20ee0c084e4] jit-backend-dump}
[3e4c20ee0c0b5db] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14c24 +0  2B0C0000
[3e4c20ee0c0c325] jit-backend-dump}
[3e4c20ee0c0f450] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14c2d +0  3E0C0000
[3e4c20ee0c10168] jit-backend-dump}
[3e4c20ee0c1324a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14c37 +0  500C0000
[3e4c20ee0c14014] jit-backend-dump}
[3e4c20ee0c17209] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14c44 +0  5F0C0000
[3e4c20ee0c17f3d] jit-backend-dump}
[3e4c20ee0c1afdb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14c59 +0  660C0000
[3e4c20ee0c1bd28] jit-backend-dump}
[3e4c20ee0c1ee87] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14c7f +0  5C0C0000
[3e4c20ee0c1fba2] jit-backend-dump}
[3e4c20ee0c22c84] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14caf +0  480C0000
[3e4c20ee0c239b8] jit-backend-dump}
[3e4c20ee0c26b1d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14cdd +0  360C0000
[3e4c20ee0c27829] jit-backend-dump}
[3e4c20ee0c2a988] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14d44 +0  EB0B0000
[3e4c20ee0c2b700] jit-backend-dump}
[3e4c20ee0c2e8d6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14d6f +0  DC0B0000
[3e4c20ee0c2f62c] jit-backend-dump}
[3e4c20ee0c3272f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14d8d +0  DA0B0000
[3e4c20ee0c33475] jit-backend-dump}
[3e4c20ee0c36652] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14d9e +0  E50B0000
[3e4c20ee0c37383] jit-backend-dump}
[3e4c20ee0c3a51f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14db2 +0  ED0B0000
[3e4c20ee0c3b256] jit-backend-dump}
[3e4c20ee0c3e2e2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14dc0 +0  FB0B0000
[3e4c20ee0c3efd3] jit-backend-dump}
[3e4c20ee0c420ba] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14dce +0  090C0000
[3e4c20ee0c42da5] jit-backend-dump}
[3e4c20ee0c45e90] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14ddb +0  180C0000
[3e4c20ee0c46b5f] jit-backend-dump}
[3e4c20ee0c49b92] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14de9 +0  260C0000
[3e4c20ee0c4a877] jit-backend-dump}
[3e4c20ee0c4d8b0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14e0f +0  1C0C0000
[3e4c20ee0c4e5ad] jit-backend-dump}
[3e4c20ee0c515e0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14e45 +0  020C0000
[3e4c20ee0c522d1] jit-backend-dump}
[3e4c20ee0c552e9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14e76 +0  ED0B0000
[3e4c20ee0c55fcd] jit-backend-dump}
[3e4c20ee0c59004] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14eb4 +0  CB0B0000
[3e4c20ee0c59ce5] jit-backend-dump}
[3e4c20ee0c5ce0d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14ee5 +0  B60B0000
[3e4c20ee0c5daee] jit-backend-dump}
[3e4c20ee0c60b31] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14f15 +0  A20B0000
[3e4c20ee0c6181f] jit-backend-dump}
[3e4c20ee0c64867] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14f43 +0  900B0000
[3e4c20ee0c65555] jit-backend-dump}
[3e4c20ee0c6859e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14f61 +0  8E0B0000
[3e4c20ee0c69298] jit-backend-dump}
[3e4c20ee0c6c330] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14f72 +0  990B0000
[3e4c20ee0c6d005] jit-backend-dump}
[3e4c20ee0c7008b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14f86 +0  A10B0000
[3e4c20ee0c70d66] jit-backend-dump}
[3e4c20ee0c73d78] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14f94 +0  AF0B0000
[3e4c20ee0c74a90] jit-backend-dump}
[3e4c20ee0c77b19] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14fa2 +0  BD0B0000
[3e4c20ee0c7887e] jit-backend-dump}
[3e4c20ee0c7b8e2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14faf +0  CC0B0000
[3e4c20ee0c7c5d3] jit-backend-dump}
[3e4c20ee0c7f687] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14fbd +0  DA0B0000
[3e4c20ee0c80365] jit-backend-dump}
[3e4c20ee0c83413] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c14fe3 +0  D00B0000
[3e4c20ee0c840f7] jit-backend-dump}
[3e4c20ee0c871df] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c15013 +0  BC0B0000
[3e4c20ee0c87ed3] jit-backend-dump}
[3e4c20ee0c8af84] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1503d +0  AE0B0000
[3e4c20ee0c8bc9c] jit-backend-dump}
[3e4c20ee0c8ed37] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c15091 +0  760B0000
[3e4c20ee0c8fa31] jit-backend-dump}
[3e4c20ee0c92ab4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c150ac +0  770B0000
[3e4c20ee0c93792] jit-backend-dump}
[3e4c20ee0c967fa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c150c0 +0  7F0B0000
[3e4c20ee0c97500] jit-backend-dump}
[3e4c20ee0c9a56a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c150c9 +0  920B0000
[3e4c20ee0c9b26d] jit-backend-dump}
[3e4c20ee0c9e2b9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c150ea +0  8D0B0000
[3e4c20ee0c9efa4] jit-backend-dump}
[3e4c20ee0ca2002] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c150fb +0  980B0000
[3e4c20ee0ca2d73] jit-backend-dump}
[3e4c20ee0ca5ec0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c15115 +0  9A0B0000
[3e4c20ee0ca6c03] jit-backend-dump}
[3e4c20ee0ca9dbb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1513b +0  900B0000
[3e4c20ee0caaab8] jit-backend-dump}
[3e4c20ee0cadb5f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1514f +0  980B0000
[3e4c20ee0cae86e] jit-backend-dump}
[3e4c20ee0cb18ba] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c15158 +0  AB0B0000
[3e4c20ee0cb25b7] jit-backend-dump}
[3e4c20ee0cb5606] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c15162 +0  BD0B0000
[3e4c20ee0cb62e1] jit-backend-dump}
[3e4c20ee0cb934c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c15183 +0  B80B0000
[3e4c20ee0cba042] jit-backend-dump}
[3e4c20ee0cbd158] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c15197 +0  C00B0000
[3e4c20ee0cbdec3] jit-backend-dump}
[3e4c20ee0cc0f3d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c151c7 +0  AC0B0000
[3e4c20ee0cc1c89] jit-backend-dump}
[3e4c20ee0cc4d2e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c151db +0  B40B0000
[3e4c20ee0cc5a46] jit-backend-dump}
[3e4c20ee0cc8a80] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c15210 +0  9B0B0000
[3e4c20ee0cc978c] jit-backend-dump}
[3e4c20ee0ccc7c5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c15247 +0  800B0000
[3e4c20ee0ccd4b6] jit-backend-dump}
[3e4c20ee0cd04d7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1527b +0  680B0000
[3e4c20ee0cd11be] jit-backend-dump}
[3e4c20ee0cd4213] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c152d5 +0  2A0B0000
[3e4c20ee0cd4f5d] jit-backend-dump}
[3e4c20ee0cd7f87] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c152fc +0  1F0B0000
[3e4c20ee0cd8c68] jit-backend-dump}
[3e4c20ee0cdbcb1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1531b +0  1C0B0000
[3e4c20ee0cdc9a2] jit-backend-dump}
[3e4c20ee0cdf9b6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c15324 +0  2F0B0000
[3e4c20ee0ce06c3] jit-backend-dump}
[3e4c20ee0ce441b] jit-backend}
[3e4c20ee0ce8334] {jit-log-opt-loop
# Loop 100 ((let ([if10 (>= i5574 (quotient n5570 2))]) (if if10 (void) (begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55))))) from (doloop5572 AppRand55)) : entry bridge with 441 ops
[p0, p1]
debug_merge_point(0, 0, '(let ([if10 (>= i5574 (quotient n5570 2))]) (if if10 (void) (begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55))))) from (doloop5572 AppRand55)')
+901: guard_class(p1, 16435208, descr=<Guard0x97e6560>) [p0, p1]
+920: p3 = getfield_gc_r(p1, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+924: guard_nonnull_class(p3, ConstClass(ForwardLink), descr=<Guard0x97e65c0>) [p0, p1]
debug_merge_point(0, 0, '(>= i5574 (quotient n5570 2))')
+942: guard_not_invalidated(descr=<Guard0x46b60b0>) [p0, p1]
+942: guard_class(p0, 16504944, descr=<Guard0x46b60f8>) [p0, p1]
+961: i6 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+965: p7 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+969: guard_class(p7, 16481456, descr=<Guard0x46b6140>) [p0, p1]
+981: p9 = getfield_gc_r(p7, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+992: guard_value(p9, ConstPtr(ptr10), descr=<Guard0x46b6188>) [p0, p1]
+1001: i11 = getfield_gc_i(p7, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_vals_fixed_1 24 pure>)
+1005: i13 = int_eq(i11, -9223372036854775808)
+1005: i15 = int_rshift(i11, 1)
+1011: i17 = int_lshift(i15, 1)
+1017: i19 = int_xor(i11, 2)
+1024: i21 = int_rshift(i19, 63)
+1028: i22 = int_ne(i17, i11)
+1041: i23 = int_and(i21, i22)
+1044: i24 = int_add(i15, i23)
+1047: i25 = int_ge(i6, i24)
+1050: guard_false(i25, descr=<Guard0x46b61d0>) [p0, p1]
debug_merge_point(0, 0, '(if if10 (void) (begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55))))')
debug_merge_point(0, 0, '(begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55)))')
debug_merge_point(0, 0, '(CellRef(oldGenSwapSubtrees))')
+1056: p26 = getfield_gc_r(p7, descr=<FieldP pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_w_val0 32 pure>)
+1060: p27 = getfield_gc_r(p26, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1065: guard_nonnull_class(p27, 16479200, descr=<Guard0x97e6620>) [p0, p1]
+1083: p29 = getfield_gc_r(p27, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1094: guard_value(p29, ConstPtr(ptr30), descr=<Guard0x46b6218>) [p0, p1]
+1103: p31 = getfield_gc_r(p7, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([index1 (rnd (vector-length CellRef(trees)))][index2 (rnd (vector-length CellRef(trees)))]) (let ([depth (rnd treeHeight)][path (rnd pathBits)][tn1 (vector-ref CellRef(trees) index1)][tn2 (vector-ref CellRef(trees) index2)]) (let ([doloop5533 (lambda (i5535) (let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))))]) (doloop5533 0) (if (even? CellRef(path)) (let ([tmp (vector-ref CellRef(tn1) 0)][AppRand53 (vector-ref CellRef(tn2) 0)]) (vector-set! CellRef(tn1) 0 AppRand53) (vector-set! CellRef(tn2) 0 tmp)) (let ([tmp5560 (vector-ref CellRef(tn1) 1)][AppRand54 (vector-ref CellRef(tn2) 1)]) (vector-set! CellRef(tn1) 1 AppRand54) (vector-set! CellRef(tn2) 1 tmp5560))) (let ([SetBang7 (+ CellRef(actuallyMut) 2)]) (set! actuallyMut SetBang7)))))')
debug_merge_point(0, 0, '(rnd (vector-length CellRef(trees)))')
+1103: p32 = getfield_gc_r(p27, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_2 40 pure>)
+1107: guard_nonnull_class(p32, 16478072, descr=<Guard0x97e6680>) [p0, p1]
+1125: p34 = getfield_gc_r(p27, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_3 48 pure>)
+1129: p35 = getfield_gc_r(p34, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1134: guard_nonnull_class(p35, ConstClass(W_Vector), descr=<Guard0x97e66e0>) [p0, p1]
+1153: i37 = getfield_gc_i(p35, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1157: p38 = getfield_gc_r(p32, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1168: guard_value(p38, ConstPtr(ptr39), descr=<Guard0x46b6260>) [p0, p1]
+1177: p40 = getfield_gc_r(p27, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([if0 (if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)]) (if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))))')
debug_merge_point(0, 0, '(if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)')
debug_merge_point(0, 0, '(if (integer? n5234) (< n5234 16384) #f)')
debug_merge_point(0, 0, '(< n5234 16384)')
+1177: i42 = int_lt(i37, 16384)
+1184: guard_true(i42, descr=<Guard0x46b62a8>) [p0, p1]
debug_merge_point(0, 0, '(if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234)))')
debug_merge_point(0, 0, '(CellRef(random14) n5234)')
+1190: p43 = getfield_gc_r(p32, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+1194: p44 = getfield_gc_r(p43, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1198: guard_nonnull_class(p44, 16478824, descr=<Guard0x97e6740>) [p0, p1]
+1217: p46 = getfield_gc_r(p44, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1228: guard_value(p46, ConstPtr(ptr47), descr=<Guard0x46b62f0>) [p0, p1]
+1237: p48 = getfield_gc_r(p32, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+1237: p49 = getfield_gc_r(p44, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_2 40 pure>)
+1241: p50 = getfield_gc_r(p49, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1245: guard_nonnull_class(p50, ConstClass(W_CellIntegerStrategy), descr=<Guard0x97e67a0>) [p0, p1]
+1264: i52 = getfield_gc_i(p50, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1268: p53 = getfield_gc_r(p44, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_3 48 pure>)
+1272: p54 = getfield_gc_r(p53, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1276: guard_nonnull_class(p54, ConstClass(W_CellIntegerStrategy), descr=<Guard0x97e6800>) [p0, p1]
+1295: i56 = getfield_gc_i(p54, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1299: i57 = int_is_true(i52)
+1302: guard_true(i57, descr=<Guard0x46b6338>) [p0, p1]
+1308: i58 = int_is_true(i56)
+1311: guard_true(i58, descr=<Guard0x46b6380>) [p0, p1]
+1317: i59 = int_mul_ovf(i52, i56)
+1321: guard_no_overflow(descr=<Guard0x46b63c8>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+1327: p60 = getfield_gc_r(p44, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_1 32 pure>)
+1331: p61 = getfield_gc_r(p60, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1335: guard_nonnull_class(p61, ConstClass(W_CellIntegerStrategy), descr=<Guard0x97e6860>) [p0, p1]
+1354: i63 = getfield_gc_i(p61, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1358: i64 = int_add_ovf(i59, i63)
+1361: guard_no_overflow(descr=<Guard0x46b6410>) [p0, p1]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+1367: p65 = getfield_gc_r(p44, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_0 24 pure>)
+1371: p66 = getfield_gc_r(p65, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1382: guard_nonnull_class(p66, ConstClass(W_CellIntegerStrategy), descr=<Guard0x97e68c0>) [p0, p1]
+1400: i68 = getfield_gc_i(p66, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1404: i69 = int_is_zero(i68)
+1407: guard_false(i69, descr=<Guard0x46b6458>) [p0, p1]
+1413: i71 = int_rshift(i64, 63)
+1424: i72 = int_xor(i64, i71)
+1434: i73 = int_sub(i72, i71)
+1437: i75 = int_rshift(i68, 63)
+1444: i76 = int_xor(i68, i75)
+1447: i77 = int_sub(i76, i75)
+1450: i78 = int_is_zero(i77)
+1453: guard_false(i78, descr=<Guard0x46b64a0>) [p0, p1]
+1459: i80 = int_eq(i73, -9223372036854775808)
+1482: i82 = int_eq(i77, -1)
+1495: i83 = int_and(i80, i82)
+1498: guard_false(i83, descr=<Guard0x46b64e8>) [p0, p1]
+1507: i85 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i73, i77, descr=<Calli 8 ii EF=0 OS=14>)
+1567: i87 = int_lt(i64, 0)
+1575: guard_false(i87, descr=<Guard0x97e6920>) [i77, i85, i73, i64, p1, p0, p27, i37, p44, p3]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+1581: i89 = int_eq(i85, -9223372036854775808)
+1581: i91 = int_rshift(i85, 3)
+1588: i93 = int_lshift(i91, 3)
+1595: i95 = int_xor(i85, 8)
+1602: i97 = int_rshift(i95, 63)
+1606: i98 = int_ne(i93, i85)
+1618: i99 = int_and(i97, i98)
+1621: i100 = int_add(i91, i99)
+1624: setfield_gc(p54, i85, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1628: i101 = int_is_zero(i37)
+1631: guard_false(i101, descr=<Guard0x97e6980>) [i37, i100, p1, p0, p27, None, p44, p3]
+1637: i104 = int_rshift(i100, 63)
+1644: i105 = int_xor(i100, i104)
+1650: i106 = int_sub(i105, i104)
+1653: i108 = int_rshift(i37, 63)
+1660: i109 = int_xor(i37, i108)
+1666: i110 = int_sub(i109, i108)
+1669: i111 = int_is_zero(i110)
+1672: guard_false(i111, descr=<Guard0x46b6530>) [i37, i100, p1, p0, p27, None, p44, p3]
+1678: i113 = int_eq(i106, -9223372036854775808)
+1701: i115 = int_eq(i110, -1)
+1715: i116 = int_and(i113, i115)
+1718: guard_false(i116, descr=<Guard0x46b6578>) [i37, i100, p1, p0, p27, None, p44, p3]
+1727: i118 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i106, i110, descr=<Calli 8 ii EF=0 OS=14>)
+1770: i120 = int_lt(i100, 0)
+1774: guard_false(i120, descr=<Guard0x97e69e0>) [i110, i118, i106, i100, None, p1, p0, p27, i37, p44, p3]
debug_merge_point(0, 0, '(rnd (vector-length CellRef(trees)))')
debug_merge_point(0, 0, '(let ([if0 (if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)]) (if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))))')
debug_merge_point(0, 0, '(if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)')
debug_merge_point(0, 0, '(if (integer? n5234) (< n5234 16384) #f)')
debug_merge_point(0, 0, '(< n5234 16384)')
debug_merge_point(0, 0, '(if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234)))')
debug_merge_point(0, 0, '(CellRef(random14) n5234)')
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+1780: i121 = getfield_gc_i(p50, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1791: i122 = int_is_true(i121)
+1794: guard_true(i122, descr=<Guard0x46b65c0>) [i110, i118, i106, i100, None, p1, p0, p27, i37, p44, p3]
+1800: i123 = int_is_true(i85)
+1803: guard_true(i123, descr=<Guard0x46b6608>) [i110, i118, i106, i100, None, p1, p0, p27, i37, p44, p3]
+1809: i124 = int_mul_ovf(i121, i85)
+1813: guard_no_overflow(descr=<Guard0x46b6650>) [i110, i118, i106, i100, None, p1, p0, p27, i37, p44, p3]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+1819: i125 = getfield_gc_i(p61, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1823: i126 = int_add_ovf(i124, i125)
+1826: guard_no_overflow(descr=<Guard0x46b6698>) [i110, i118, i106, i100, None, p1, p0, p27, i37, p44, p3]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+1832: i127 = getfield_gc_i(p66, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1844: i128 = int_is_zero(i127)
+1847: guard_false(i128, descr=<Guard0x46b66e0>) [i110, i118, i106, i100, None, p1, p0, p27, i37, p44, p3]
+1853: i130 = int_rshift(i126, 63)
+1860: i131 = int_xor(i126, i130)
+1866: i132 = int_sub(i131, i130)
+1869: i134 = int_rshift(i127, 63)
+1876: i135 = int_xor(i127, i134)
+1879: i136 = int_sub(i135, i134)
+1882: i137 = int_is_zero(i136)
+1885: guard_false(i137, descr=<Guard0x46b6728>) [i110, i118, i106, i100, None, p1, p0, p27, i37, p44, p3]
+1891: i139 = int_eq(i132, -9223372036854775808)
+1914: i141 = int_eq(i136, -1)
+1927: i142 = int_and(i139, i141)
+1930: guard_false(i142, descr=<Guard0x46b6770>) [i110, i118, i106, i100, None, p1, p0, p27, i37, p44, p3]
+1939: i144 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i132, i136, descr=<Calli 8 ii EF=0 OS=14>)
+1975: i146 = int_lt(i126, 0)
+1979: guard_false(i146, descr=<Guard0x97e6a40>) [i136, i144, i132, i126, i118, None, p1, p0, p27, i37, p44, p3]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+1985: i148 = int_eq(i144, -9223372036854775808)
+1985: i150 = int_rshift(i144, 3)
+1992: i152 = int_lshift(i150, 3)
+1999: i154 = int_xor(i144, 8)
+2006: i156 = int_rshift(i154, 63)
+2010: i157 = int_ne(i152, i144)
+2023: i158 = int_and(i156, i157)
+2026: i159 = int_add(i150, i158)
+2029: i161 = int_rshift(i159, 63)
+2036: i162 = int_xor(i159, i161)
+2042: i163 = int_sub(i162, i161)
+2045: i165 = int_eq(i163, -9223372036854775808)
+2068: i166 = int_and(i165, i115)
+2075: setfield_gc(p54, i144, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2079: guard_false(i166, descr=<Guard0x97e6aa0>) [i110, i163, i166, i159, i118, None, p1, p0, p27, i37, p44, p3]
+2088: i168 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i163, i110, descr=<Calli 8 ii EF=0 OS=14>)
+2121: i170 = int_lt(i159, 0)
+2125: guard_false(i170, descr=<Guard0x97e6b00>) [i110, i168, i163, i159, None, i118, None, p1, p0, p27, i37, p44, p3]
debug_merge_point(0, 0, '(let ([depth (rnd treeHeight)][path (rnd pathBits)][tn1 (vector-ref CellRef(trees) index1)][tn2 (vector-ref CellRef(trees) index2)]) (let ([doloop5533 (lambda (i5535) (let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))))]) (doloop5533 0) (if (even? CellRef(path)) (let ([tmp (vector-ref CellRef(tn1) 0)][AppRand53 (vector-ref CellRef(tn2) 0)]) (vector-set! CellRef(tn1) 0 AppRand53) (vector-set! CellRef(tn2) 0 tmp)) (let ([tmp5560 (vector-ref CellRef(tn1) 1)][AppRand54 (vector-ref CellRef(tn2) 1)]) (vector-set! CellRef(tn1) 1 AppRand54) (vector-set! CellRef(tn2) 1 tmp5560))) (let ([SetBang7 (+ CellRef(actuallyMut) 2)]) (set! actuallyMut SetBang7))))')
debug_merge_point(0, 0, '(rnd treeHeight)')
+2131: p171 = getfield_gc_r(p27, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_4 56 pure>)
+2142: guard_nonnull_class(p171, ConstClass(W_Fixnum), descr=<Guard0x97e6b60>) [i110, i168, i163, i159, None, i118, None, p1, p0, p27, i37, p44, p3]
+2161: i173 = getfield_gc_i(p171, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(let ([if0 (if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)]) (if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))))')
debug_merge_point(0, 0, '(if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)')
debug_merge_point(0, 0, '(if (integer? n5234) (< n5234 16384) #f)')
debug_merge_point(0, 0, '(< n5234 16384)')
+2165: i175 = int_lt(i173, 16384)
+2172: guard_true(i175, descr=<Guard0x46b67b8>) [i110, i168, i163, i159, None, i118, None, p1, p0, p27, i37, p44, p3]
debug_merge_point(0, 0, '(if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234)))')
debug_merge_point(0, 0, '(CellRef(random14) n5234)')
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+2178: i176 = getfield_gc_i(p50, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2189: i177 = int_is_true(i176)
+2192: guard_true(i177, descr=<Guard0x46b6800>) [i110, i168, i163, i159, None, i118, None, p1, p0, p27, i37, p44, p3]
+2198: i178 = int_is_true(i144)
+2206: guard_true(i178, descr=<Guard0x46b6848>) [i110, i168, i163, i159, None, i118, None, p1, p0, p27, i37, p44, p3]
+2212: i179 = int_mul_ovf(i176, i144)
+2220: guard_no_overflow(descr=<Guard0x46b6890>) [i110, i168, i163, i159, None, i118, None, p1, p0, p27, i37, p44, p3]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+2226: i180 = getfield_gc_i(p61, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2230: i181 = int_add_ovf(i179, i180)
+2233: guard_no_overflow(descr=<Guard0x46b68d8>) [i110, i168, i163, i159, None, i118, None, p1, p0, p27, i37, p44, p3]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+2239: i182 = getfield_gc_i(p66, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2244: i183 = int_is_zero(i182)
+2247: guard_false(i183, descr=<Guard0x46b6920>) [i110, i168, i163, i159, None, i118, None, p1, p0, p27, i37, p44, p3]
+2253: i185 = int_rshift(i181, 63)
+2260: i186 = int_xor(i181, i185)
+2266: i187 = int_sub(i186, i185)
+2269: i189 = int_rshift(i182, 63)
+2276: i190 = int_xor(i182, i189)
+2279: i191 = int_sub(i190, i189)
+2282: i192 = int_is_zero(i191)
+2285: guard_false(i192, descr=<Guard0x46b6968>) [i110, i168, i163, i159, None, i118, None, p1, p0, p27, i37, p44, p3]
+2291: i194 = int_eq(i187, -9223372036854775808)
+2313: i196 = int_eq(i191, -1)
+2333: i197 = int_and(i194, i196)
+2336: guard_false(i197, descr=<Guard0x46b69b0>) [i110, i168, i163, i159, None, i118, None, p1, p0, p27, i37, p44, p3]
+2345: i199 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i187, i191, descr=<Calli 8 ii EF=0 OS=14>)
+2384: i201 = int_lt(i181, 0)
+2388: guard_false(i201, descr=<Guard0x97e6bc0>) [i191, i199, i187, i181, i168, i173, None, i118, None, p1, p0, p27, None, p44, p3]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+2394: i203 = int_eq(i199, -9223372036854775808)
+2394: i205 = int_rshift(i199, 3)
+2401: i207 = int_lshift(i205, 3)
+2408: i209 = int_xor(i199, 8)
+2415: i211 = int_rshift(i209, 63)
+2419: i212 = int_ne(i207, i199)
+2432: i213 = int_and(i211, i212)
+2435: i214 = int_add(i205, i213)
+2438: setfield_gc(p54, i199, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2442: i215 = int_is_zero(i173)
+2450: guard_false(i215, descr=<Guard0x97e6c20>) [i173, i214, i168, None, None, i118, None, p1, p0, p27, None, p44, p3]
+2456: i217 = int_rshift(i214, 63)
+2463: i218 = int_xor(i214, i217)
+2469: i219 = int_sub(i218, i217)
+2472: i221 = int_rshift(i173, 63)
+2483: i222 = int_xor(i173, i221)
+2493: i223 = int_sub(i222, i221)
+2496: i224 = int_is_zero(i223)
+2499: guard_false(i224, descr=<Guard0x46b69f8>) [i173, i214, i168, None, None, i118, None, p1, p0, p27, None, p44, p3]
+2505: i226 = int_eq(i219, -9223372036854775808)
+2528: i228 = int_eq(i223, -1)
+2541: i229 = int_and(i226, i228)
+2544: guard_false(i229, descr=<Guard0x46b6a40>) [i173, i214, i168, None, None, i118, None, p1, p0, p27, None, p44, p3]
+2553: i231 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i219, i223, descr=<Calli 8 ii EF=0 OS=14>)
+2589: i233 = int_lt(i214, 0)
+2593: guard_false(i233, descr=<Guard0x97e6c80>) [i223, i231, i219, i214, None, i168, i173, None, i118, None, p1, p0, p27, None, p44, p3]
debug_merge_point(0, 0, '(rnd pathBits)')
+2599: p234 = getfield_gc_r(p27, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_0 24 pure>)
+2610: guard_nonnull_class(p234, ConstClass(W_Fixnum), descr=<Guard0x97e6ce0>) [i223, i231, i219, i214, None, i168, i173, None, i118, None, p1, p0, p27, None, p44, p3]
+2629: i236 = getfield_gc_i(p234, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(let ([if0 (if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)]) (if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))))')
debug_merge_point(0, 0, '(if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)')
debug_merge_point(0, 0, '(if (integer? n5234) (< n5234 16384) #f)')
debug_merge_point(0, 0, '(< n5234 16384)')
+2633: i238 = int_lt(i236, 16384)
+2640: guard_false(i238, descr=<Guard0x46b6a88>) [i223, i231, i219, i214, None, i168, i173, None, i118, None, p1, p0, p27, None, p44, p3]
debug_merge_point(0, 0, '(if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234)))')
debug_merge_point(0, 0, '(let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))')
debug_merge_point(0, 0, '(CellRef(random14) 16384)')
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+2646: i239 = getfield_gc_i(p50, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2657: i240 = int_is_true(i239)
+2660: guard_true(i240, descr=<Guard0x46b6ad0>) [i223, i231, i219, i214, None, i168, i173, None, i118, None, p1, p0, p27, None, p44, p3]
+2666: i241 = int_is_true(i199)
+2674: guard_true(i241, descr=<Guard0x46b6b18>) [i223, i231, i219, i214, None, i168, i173, None, i118, None, p1, p0, p27, None, p44, p3]
+2680: i242 = int_mul_ovf(i239, i199)
+2688: guard_no_overflow(descr=<Guard0x46b6b60>) [i223, i231, i219, i214, None, i168, i173, None, i118, None, p1, p0, p27, None, p44, p3]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+2694: i243 = getfield_gc_i(p61, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2698: i244 = int_add_ovf(i242, i243)
+2701: guard_no_overflow(descr=<Guard0x46b6ba8>) [i223, i231, i219, i214, None, i168, i173, None, i118, None, p1, p0, p27, None, p44, p3]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+2707: i245 = getfield_gc_i(p66, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2712: i246 = int_is_zero(i245)
+2715: guard_false(i246, descr=<Guard0x46b6bf0>) [i223, i231, i219, i214, None, i168, i173, None, i118, None, p1, p0, p27, None, p44, p3]
+2721: i248 = int_rshift(i244, 63)
+2728: i249 = int_xor(i244, i248)
+2734: i250 = int_sub(i249, i248)
+2737: i252 = int_rshift(i245, 63)
+2744: i253 = int_xor(i245, i252)
+2747: i254 = int_sub(i253, i252)
+2750: i255 = int_is_zero(i254)
+2753: guard_false(i255, descr=<Guard0x46b6c38>) [i223, i231, i219, i214, None, i168, i173, None, i118, None, p1, p0, p27, None, p44, p3]
+2759: i257 = int_eq(i250, -9223372036854775808)
+2781: i259 = int_eq(i254, -1)
+2795: i260 = int_and(i257, i259)
+2798: guard_false(i260, descr=<Guard0x46b6c80>) [i223, i231, i219, i214, None, i168, i173, None, i118, None, p1, p0, p27, None, p44, p3]
+2807: i262 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i250, i254, descr=<Calli 8 ii EF=0 OS=14>)
+2839: i264 = int_lt(i244, 0)
+2843: guard_false(i264, descr=<Guard0x97e6d40>) [i254, i262, i250, i244, i231, i236, p32, None, i168, None, None, i118, None, p1, p0, p27, None, p44, p3]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+2849: i266 = int_eq(i262, -9223372036854775808)
+2849: i268 = int_rshift(i262, 3)
+2856: i270 = int_lshift(i268, 3)
+2863: i272 = int_xor(i262, 8)
+2870: i274 = int_rshift(i272, 63)
+2874: i275 = int_ne(i270, i262)
+2887: i276 = int_and(i274, i275)
+2890: i277 = int_add(i268, i276)
+2893: i279 = int_rshift(i277, 63)
+2900: i280 = int_xor(i277, i279)
+2906: i281 = int_sub(i280, i279)
+2909: i283 = int_eq(i281, -9223372036854775808)
+2909: i285 = int_and(i281, 16383)
+2919: setfield_gc(p54, i262, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2923: i287 = int_lt(i277, 0)
+2927: guard_false(i287, descr=<Guard0x97e6da0>) [i285, i281, i277, i231, i236, p32, None, i168, None, None, i118, None, p1, p0, p27, None, p44, p3]
debug_merge_point(0, 0, '(CellRef(loop) n5234 AppRand5 n5234)')
+2933: p288 = getfield_gc_r(p32, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+2937: p289 = getfield_gc_r(p288, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+2941: guard_nonnull_class(p289, 16478072, descr=<Guard0x97e6e00>) [i285, i281, i277, i231, i236, p32, None, i168, None, None, i118, None, p1, p0, p27, None, p44, p3]
+2960: p291 = getfield_gc_r(p289, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+2971: guard_value(p291, ConstPtr(ptr292), descr=<Guard0x46b6cc8>) [i285, i281, i277, i231, i236, p32, None, i168, None, None, i118, None, p1, p0, p27, None, p44, p3]
debug_merge_point(0, 0, '(if (zero? q) (remainder r n5224) (let ([AppRand2 (* 16384 r)][AppRand3 (CellRef(random14) 16384)]) (let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)))) from (CellRef(loop) n5234 AppRand5 n5234)')
debug_merge_point(0, 0, '(let ([AppRand2 (* 16384 r)][AppRand3 (CellRef(random14) 16384)]) (let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)))')
debug_merge_point(0, 0, '(* 16384 r)')
+2980: i293 = int_is_true(i285)
+2983: guard_true(i293, descr=<Guard0x46b6d10>) [i285, i281, i277, i231, i236, p32, None, i168, None, None, i118, None, p1, p0, p27, None, p44, p3]
+2989: i295 = int_lshift(i285, 14)
debug_merge_point(0, 0, '(CellRef(random14) 16384)')
+2996: p296 = getfield_gc_r(p289, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+3000: p297 = getfield_gc_r(p296, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3004: guard_nonnull_class(p297, 16478824, descr=<Guard0x97e6e60>) [i285, i281, i277, i231, i236, p32, None, i168, None, None, i118, None, p1, p0, p27, None, p44, p3]
+3022: p299 = getfield_gc_r(p297, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+3026: guard_value(p299, ConstPtr(ptr300), descr=<Guard0x46b6e30>) [i285, i281, i277, i231, i236, p32, None, i168, None, None, i118, None, p1, p0, p27, None, p44, p3]
+3039: p301 = getfield_gc_r(p289, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+3039: p302 = getfield_gc_r(p297, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_2 40 pure>)
+3043: p303 = getfield_gc_r(p302, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3047: guard_nonnull_class(p303, ConstClass(W_CellIntegerStrategy), descr=<Guard0x97e6ec0>) [i285, i281, i277, i231, i236, p32, None, i168, None, None, i118, None, p1, p0, p27, None, p44, p3]
+3065: i305 = getfield_gc_i(p303, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3069: p306 = getfield_gc_r(p297, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_3 48 pure>)
+3073: p307 = getfield_gc_r(p306, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3084: guard_nonnull_class(p307, ConstClass(W_CellIntegerStrategy), descr=<Guard0x97e6f20>) [i285, i281, i277, i231, i236, p32, None, i168, None, None, i118, None, p1, p0, p27, None, p44, p3]
+3103: i309 = getfield_gc_i(p307, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3114: i310 = int_is_true(i305)
+3117: guard_true(i310, descr=<Guard0x46b6e78>) [i285, i281, i277, i231, i236, p32, None, i168, None, None, i118, None, p1, p0, p27, None, p44, p3]
+3123: i311 = int_is_true(i309)
+3126: guard_true(i311, descr=<Guard0x46b6ec0>) [i285, i281, i277, i231, i236, p32, None, i168, None, None, i118, None, p1, p0, p27, None, p44, p3]
+3132: i312 = int_mul_ovf(i305, i309)
+3136: guard_no_overflow(descr=<Guard0x46b6f98>) [i285, i281, i277, i231, i236, p32, None, i168, None, None, i118, None, p1, p0, p27, None, p44, p3]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+3142: p313 = getfield_gc_r(p297, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_1 32 pure>)
+3146: p314 = getfield_gc_r(p313, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3157: guard_nonnull_class(p314, ConstClass(W_CellIntegerStrategy), descr=<Guard0x97e6f80>) [i285, i281, i277, i231, i236, p32, None, i168, None, None, i118, None, p1, p0, p27, None, p44, p3]
+3175: i316 = getfield_gc_i(p314, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3186: i317 = int_add_ovf(i312, i316)
+3189: guard_no_overflow(descr=<Guard0x46b6fe0>) [i285, i281, i277, i231, i236, p32, None, i168, None, None, i118, None, p1, p0, p27, None, p44, p3]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+3195: p318 = getfield_gc_r(p297, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_0 24 pure>)
+3213: p319 = getfield_gc_r(p318, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3224: guard_nonnull_class(p319, ConstClass(W_CellIntegerStrategy), descr=<Guard0x97e6fe0>) [i285, i281, i277, i231, i236, p32, None, i168, None, None, i118, None, p1, p0, p27, None, p44, p3]
+3243: i321 = getfield_gc_i(p319, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3254: i322 = int_is_zero(i321)
+3257: guard_false(i322, descr=<Guard0x46b7028>) [i285, i281, i277, i231, i236, p32, None, i168, None, None, i118, None, p1, p0, p27, None, p44, p3]
+3263: i324 = int_rshift(i317, 63)
+3274: i325 = int_xor(i317, i324)
+3291: i326 = int_sub(i325, i324)
+3294: i328 = int_rshift(i321, 63)
+3301: i329 = int_xor(i321, i328)
+3304: i330 = int_sub(i329, i328)
+3307: i331 = int_is_zero(i330)
+3310: guard_false(i331, descr=<Guard0x46b7070>) [i285, i281, i277, i231, i236, p32, None, i168, None, None, i118, None, p1, p0, p27, None, p44, p3]
+3316: i333 = int_eq(i326, -9223372036854775808)
+3339: i335 = int_eq(i330, -1)
+3359: i336 = int_and(i333, i335)
+3362: guard_false(i336, descr=<Guard0x46b70b8>) [i285, i281, i277, i231, i236, p32, None, i168, None, None, i118, None, p1, p0, p27, None, p44, p3]
+3371: i338 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i326, i330, descr=<Calli 8 ii EF=0 OS=14>)
+3409: i340 = int_lt(i317, 0)
+3417: guard_false(i340, descr=<Guard0x97e7040>) [i330, i338, i326, i317, i285, p289, i295, p297, i231, i236, None, None, i168, None, None, i118, None, p1, p0, p27, None, None, p3]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+3423: i342 = int_eq(i338, -9223372036854775808)
+3423: i344 = int_rshift(i338, 3)
+3430: i346 = int_lshift(i344, 3)
+3437: i348 = int_xor(i338, 8)
+3444: i350 = int_rshift(i348, 63)
+3448: i351 = int_ne(i346, i338)
+3460: i352 = int_and(i350, i351)
+3463: i353 = int_add(i344, i352)
+3466: i355 = int_rshift(i353, 63)
+3473: i356 = int_xor(i353, i355)
+3479: i357 = int_sub(i356, i355)
+3482: i359 = int_eq(i357, -9223372036854775808)
+3482: i361 = int_and(i357, 16383)
+3492: setfield_gc(p307, i338, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3503: i363 = int_lt(i353, 0)
+3507: guard_false(i363, descr=<Guard0x97e70a0>) [i361, i357, i353, i285, p289, i295, p297, i231, i236, None, None, i168, None, None, i118, None, p1, p0, p27, None, None, p3]
debug_merge_point(0, 0, '(let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)) from (remainder (quotient CellRef(x) 8) n)')
debug_merge_point(0, 0, '(+ AppRand2 AppRand3)')
+3513: i364 = int_add(i295, i361)
debug_merge_point(0, 0, '(CellRef(loop) (quotient q 16384) AppRand4 n5224)')
+3519: p365 = getfield_gc_r(p289, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+3530: p366 = getfield_gc_r(p365, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3534: guard_nonnull_class(p366, 16478072, descr=<Guard0x97e7100>) [i361, i357, i353, i285, p289, i295, p297, i231, i236, None, None, i168, None, None, i118, None, p1, p0, p27, None, None, p3]
+3552: i369 = int_rshift(i236, 14)
+3563: i371 = int_lshift(i369, 14)
+3563: i373 = int_xor(i236, 16384)
+3563: i374 = int_ne(i371, i236)
+3563: p375 = getfield_gc_r(p366, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+3574: guard_value(p375, ConstPtr(ptr376), descr=<Guard0x46b7190>) [i361, i357, i353, i285, p289, i295, p297, i231, i236, None, None, i168, None, None, i118, None, p1, p0, p27, None, None, p3]
+3583: i377 = instance_ptr_eq(p289, p366)
+3586: guard_true(i377, descr=<Guard0x46b71d8>) [i361, i357, i353, i285, p289, i295, p297, i231, i236, None, None, i168, None, None, i118, None, p1, p0, p27, None, None, p3]
debug_merge_point(0, 0, '(if (zero? q) (remainder r n5224) (let ([AppRand2 (* 16384 r)][AppRand3 (CellRef(random14) 16384)]) (let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)))) from (CellRef(loop) (quotient q 16384) AppRand4 n5224)')
+3592: p378 = new_with_vtable(descr=<SizeDescr 16>)
+3636: p379 = new_with_vtable(descr=<SizeDescr 48>)
+3647: p380 = new_with_vtable(descr=<SizeDescr 32>)
+3658: setfield_gc(p380, p27, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+3669: setfield_gc(p380, i118, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_0 16 pure>)
+3680: setfield_gc(p380, i168, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_1 24 pure>)
+3691: p381 = new_with_vtable(descr=<SizeDescr 40>)
+3703: setfield_gc(p381, p3, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+3714: setfield_gc(p381, p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+3725: setfield_gc(p381, p1, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+3743: setfield_gc(p381, ConstPtr(ptr382), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+3747: setfield_gc(p379, p3, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+3751: setfield_gc(p378, i236, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+3762: setfield_gc(p379, p380, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+3766: setfield_gc(p379, p381, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+3777: setfield_gc(p379, ConstPtr(ptr383), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+3781: setfield_gc(p379, i231, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+3792: jump(p289, i369, i364, p378, p379, p296, p297, p302, p303, p306, p307, i338, p313, p314, p318, p319, p3, p365, p366, descr=TargetToken(139976055980144))
+4000: --end of the loop--
[3e4c20ee0e46fd3] jit-log-opt-loop}
[3e4c20ee174bfcb] {jit-backend
[3e4c20ee17f9d16] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c
[3e4c20ee180400a] jit-backend-dump}
[3e4c20ee1812d0a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c16174 +0  34000000
[3e4c20ee18145b4] jit-backend-dump}
[3e4c20ee1819217] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c16525 +0  34000000
[3e4c20ee181a23b] jit-backend-dump}
[3e4c20ee181d7a7] {jit-backend-addr
bridge out of Guard 0x4bd6e78 has address 0x7f4eb6c16170 to 0x7f4eb6c16520
       gc table: 0x7f4eb6c16070
    jump target: 0x7f4eb6c16170
         resops: 0x7f4eb6c1617e
       failures: 0x7f4eb6c16520
            end: 0x7f4eb6c16873
[3e4c20ee181fcca] jit-backend-addr}
[3e4c20ee18232b0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1618c +0  D3030000
[3e4c20ee18241bb] jit-backend-dump}
[3e4c20ee182750a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c161a0 +0  DB030000
[3e4c20ee182827b] jit-backend-dump}
[3e4c20ee182b473] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c161b8 +0  DF030000
[3e4c20ee182c192] jit-backend-dump}
[3e4c20ee182f488] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c161ce +0  E5030000
[3e4c20ee1830172] jit-backend-dump}
[3e4c20ee18334f8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c161db +0  10040000
[3e4c20ee183424a] jit-backend-dump}
[3e4c20ee1837691] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c161eb +0  1C040000
[3e4c20ee1838366] jit-backend-dump}
[3e4c20ee183b44b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c16205 +0  1E040000
[3e4c20ee183c148] jit-backend-dump}
[3e4c20ee183f1d7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c16213 +0  2C040000
[3e4c20ee183feb5] jit-backend-dump}
[3e4c20ee1842edf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c16227 +0  34040000
[3e4c20ee1843bd3] jit-backend-dump}
[3e4c20ee1846bf7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1623e +0  39040000
[3e4c20ee18478d2] jit-backend-dump}
[3e4c20ee184a90c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c16253 +0  40040000
[3e4c20ee184b5fc] jit-backend-dump}
[3e4c20ee184e614] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c16261 +0  4E040000
[3e4c20ee184f302] jit-backend-dump}
[3e4c20ee1852310] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1626a +0  61040000
[3e4c20ee1853013] jit-backend-dump}
[3e4c20ee1856025] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1627b +0  6C040000
[3e4c20ee1856d00] jit-backend-dump}
[3e4c20ee1859d1b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1628b +0  78040000
[3e4c20ee185aa6b] jit-backend-dump}
[3e4c20ee185dab3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c16295 +0  8A040000
[3e4c20ee185e792] jit-backend-dump}
[3e4c20ee18617c8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c162a5 +0  96040000
[3e4c20ee18624bc] jit-backend-dump}
[3e4c20ee18654d4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c162b3 +0  A4040000
[3e4c20ee18661ac] jit-backend-dump}
[3e4c20ee18691d0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c162c3 +0  B0040000
[3e4c20ee1869ec7] jit-backend-dump}
[3e4c20ee186cf74] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c162d7 +0  B8040000
[3e4c20ee186dc56] jit-backend-dump}
[3e4c20ee1870c77] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c162e5 +0  C6040000
[3e4c20ee1871964] jit-backend-dump}
[3e4c20ee1874976] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c162f5 +0  D2040000
[3e4c20ee187564e] jit-backend-dump}
[3e4c20ee187864a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c16309 +0  DA040000
[3e4c20ee187933b] jit-backend-dump}
[3e4c20ee187c3c1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1648f +0  70030000
[3e4c20ee187d0a2] jit-backend-dump}
[3e4c20ee188009f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c164a6 +0  75030000
[3e4c20ee1880d89] jit-backend-dump}
[3e4c20ee1883d9e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c164bd +0  7A030000
[3e4c20ee1884a76] jit-backend-dump}
[3e4c20ee1887a7c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c164d0 +0  83030000
[3e4c20ee1888763] jit-backend-dump}
[3e4c20ee188ba22] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0eae0 +0  8C760000
[3e4c20ee188c728] jit-backend-dump}
[3e4c20ee18907ab] jit-backend}
[3e4c20ee1894310] {jit-log-opt-bridge
# bridge out of Guard 0x4bd6e78 with 126 ops
[p0, i1, i2, i3, i4, p5, p6]
+278: i8 = int_lt(i4, 0)
+282: guard_false(i8, descr=<Guard0x97e7160>) [p0, i1, i2, i3, i4, p5, p6]
+288: p9 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+299: guard_value(p9, ConstPtr(ptr10), descr=<Guard0x46b7460>) [p0, i1, i2, i3, i4, p5, p6]
+308: i11 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+312: p12 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+316: p13 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+320: guard_class(p13, 16435208, descr=<Guard0x46b74a8>) [p0, i1, i2, i3, i4, p5, p6]
+332: p15 = getfield_gc_r(p13, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+336: guard_nonnull_class(p15, ConstClass(ForwardLink), descr=<Guard0x97e71c0>) [p0, i1, i2, i3, i4, p5, p6]
debug_merge_point(0, 0, '(vector-ref CellRef(trees) index1)')
+354: guard_not_invalidated(descr=<Guard0x46b74f0>) [p0, i1, i2, i3, i4, p5, p6]
+354: guard_class(p12, 16503888, descr=<Guard0x46b7538>) [p0, i1, i2, i3, i4, p5, p6]
+367: p18 = getfield_gc_r(p12, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+371: guard_class(p18, 16479200, descr=<Guard0x46b7580>) [p0, i1, i2, i3, i4, p5, p6]
+383: p20 = getfield_gc_r(p18, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_3 48 pure>)
+387: p21 = getfield_gc_r(p20, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+391: guard_nonnull_class(p21, ConstClass(W_Vector), descr=<Guard0x97e7220>) [p0, i1, i2, i3, i4, p5, p6]
+409: i23 = getfield_gc_i(p12, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_0 16 pure>)
+413: i25 = int_ge(i23, 0)
+417: guard_true(i25, descr=<Guard0x46b75c8>) [p0, i1, i2, i3, i4, p5, p6]
+423: i26 = getfield_gc_i(p21, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+434: i27 = int_lt(i23, i26)
+437: guard_true(i27, descr=<Guard0x46b7610>) [p0, i1, i2, i3, i4, p5, p6]
+443: p28 = getfield_gc_r(p21, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+454: guard_class(p28, 16622984, descr=<Guard0x46b7658>) [p0, i1, i2, i3, i4, p5, p6]
+466: p30 = getfield_gc_r(p21, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+470: p31 = getarrayitem_gc_r(p30, i23, descr=<ArrayP 8>)
+475: guard_class(p31, ConstClass(W_Vector), descr=<Guard0x46b76a0>) [p0, i1, i2, i3, i4, p5, p6]
debug_merge_point(0, 0, '(vector-ref CellRef(trees) index2)')
+487: i33 = getfield_gc_i(p12, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_1 24 pure>)
+491: i35 = int_ge(i33, 0)
+495: guard_true(i35, descr=<Guard0x46b76e8>) [p0, i1, i2, i3, i4, p5, p6]
+501: i36 = int_lt(i33, i26)
+504: guard_true(i36, descr=<Guard0x46b7730>) [p0, i1, i2, i3, i4, p5, p6]
+510: p37 = getarrayitem_gc_r(p30, i33, descr=<ArrayP 8>)
+515: guard_class(p37, ConstClass(W_Vector), descr=<Guard0x46b7778>) [p0, i1, i2, i3, i4, p5, p6]
debug_merge_point(0, 0, '(let ([doloop5533 (lambda (i5535) (let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))))]) (doloop5533 0) (if (even? CellRef(path)) (let ([tmp (vector-ref CellRef(tn1) 0)][AppRand53 (vector-ref CellRef(tn2) 0)]) (vector-set! CellRef(tn1) 0 AppRand53) (vector-set! CellRef(tn2) 0 tmp)) (let ([tmp5560 (vector-ref CellRef(tn1) 1)][AppRand54 (vector-ref CellRef(tn2) 1)]) (vector-set! CellRef(tn1) 1 AppRand54) (vector-set! CellRef(tn2) 1 tmp5560))) (let ([SetBang7 (+ CellRef(actuallyMut) 2)]) (set! actuallyMut SetBang7)))')
debug_merge_point(0, 0, '(lambda (i5535) (let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))))')
+527: p39 = getfield_gc_r(p18, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+531: guard_class(p39, 16505296, descr=<Guard0x46b77c0>) [p0, i1, i2, i3, i4, p5, p6]
debug_merge_point(0, 0, '(doloop5533 0)')
debug_merge_point(0, 0, '(let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))) from (doloop5533 0)')
debug_merge_point(0, 0, '(>= i5535 depth)')
+543: i42 = int_ge(0, i11)
+547: guard_false(i42, descr=<Guard0x46b7808>) [p0, i1, i2, i3, i4, p5, p6]
debug_merge_point(0, 0, '(if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))')
debug_merge_point(0, 0, '(begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52)))')
debug_merge_point(0, 0, '(if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6))))')
+553: i44 = int_and(i2, 1)
+560: i45 = int_is_zero(i44)
+563: guard_false(i45, descr=<Guard0x46b7850>) [p0, i1, i2, i3, i4, p5, p6]
debug_merge_point(0, 0, '(let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))')
debug_merge_point(0, 0, '(vector-ref CellRef(tn1) 1)')
+569: i46 = getfield_gc_i(p31, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+573: i48 = int_lt(1, i46)
+577: guard_true(i48, descr=<Guard0x46b7898>) [p0, i1, i2, i3, i4, p5, p6]
+583: p49 = getfield_gc_r(p31, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+587: guard_class(p49, 16622984, descr=<Guard0x46b78e0>) [p0, i1, i2, i3, i4, p5, p6]
+599: p51 = getfield_gc_r(p31, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+603: p53 = getarrayitem_gc_r(p51, 1, descr=<ArrayP 8>)
+607: guard_class(p53, ConstClass(W_Vector), descr=<Guard0x46b7928>) [p0, i1, i2, i3, i4, p5, p6]
debug_merge_point(0, 0, '(set! tn1 SetBang5)')
debug_merge_point(0, 0, '(let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6))')
debug_merge_point(0, 0, '(vector-ref CellRef(tn2) 1)')
+619: i55 = getfield_gc_i(p37, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+623: i57 = int_lt(1, i55)
+627: guard_true(i57, descr=<Guard0x46b7970>) [p0, i1, i2, i3, i4, p5, p6]
+633: p58 = getfield_gc_r(p37, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+637: guard_class(p58, 16622984, descr=<Guard0x46b79b8>) [p0, i1, i2, i3, i4, p5, p6]
+649: p60 = getfield_gc_r(p37, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+653: p62 = getarrayitem_gc_r(p60, 1, descr=<ArrayP 8>)
+657: guard_class(p62, ConstClass(W_Vector), descr=<Guard0x46b7a00>) [p0, i1, i2, i3, i4, p5, p6]
debug_merge_point(0, 0, '(set! tn2 SetBang6)')
debug_merge_point(0, 0, '(set! path (quotient CellRef(path) 2))')
+669: i65 = int_eq(i2, -9223372036854775808)
+669: i67 = int_rshift(i2, 1)
+675: i69 = int_lshift(i67, 1)
+681: i71 = int_xor(i2, 2)
+688: i73 = int_rshift(i71, 63)
+692: i74 = int_ne(i69, i2)
+705: i75 = int_and(i73, i74)
+708: i76 = int_add(i67, i75)
debug_merge_point(0, 0, '(let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))')
debug_merge_point(0, 0, '(+ i5535 1)')
debug_merge_point(0, 0, '(doloop5533 AppRand52)')
debug_merge_point(0, 0, '(let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))) from (doloop5533 AppRand52)')
+711: p77 = new_with_vtable(descr=<SizeDescr 56>)
+761: p78 = new_with_vtable(descr=<SizeDescr 16>)
+772: setfield_gc(p78, p53, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+776: p79 = new_with_vtable(descr=<SizeDescr 16>)
+787: setfield_gc(p79, i11, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+791: p80 = new_with_vtable(descr=<SizeDescr 16>)
+802: p81 = new_with_vtable(descr=<SizeDescr 16>)
+814: setfield_gc(p81, i76, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+819: setfield_gc(p80, p81, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+823: p82 = new_with_vtable(descr=<SizeDescr 16>)
+836: setfield_gc(p82, p62, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+840: p83 = new_with_vtable(descr=<SizeDescr 40>)
+851: p84 = new_with_vtable(descr=<SizeDescr 48>)
+863: setfield_gc(p84, p18, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+868: setfield_gc(p84, p79, descr=<FieldP rpython.tool.pairtype.ConsEnvSize4.inst__vals_0 16 pure>)
+873: setfield_gc(p84, p80, descr=<FieldP rpython.tool.pairtype.ConsEnvSize4.inst__vals_1 24 pure>)
+878: setfield_gc(p84, p78, descr=<FieldP rpython.tool.pairtype.ConsEnvSize4.inst__vals_2 32 pure>)
+883: setfield_gc(p84, p82, descr=<FieldP rpython.tool.pairtype.ConsEnvSize4.inst__vals_3 40 pure>)
+968: i85 = getfield_gc_i(p79, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+972: setfield_gc(p83, p84, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+976: setfield_gc(p83, p13, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+987: setfield_gc(p83, p15, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+998: setfield_gc(p77, p39, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1009: setfield_gc(p77, ConstPtr(ptr86), descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1013: setfield_gc(p77, p78, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_0 24 pure>)
+1017: setfield_gc(p77, p79, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_1 32 pure>)
+1021: setfield_gc(p77, p80, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_2 40 pure>)
+1025: setfield_gc(p77, p82, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_3 48 pure>)
+1036: setfield_gc(p83, ConstPtr(ptr87), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+1040: i89 = int_ge(i85, -9223372036854775807)
+1053: guard_true(i89, descr=<Guard0x97e7280>) [p83, p77, None, None]
+1059: p91 = getfield_gc_r(p80, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1063: guard_nonnull_class(p91, ConstClass(W_CellIntegerStrategy), descr=<Guard0x97e72e0>) [p83, p77, None, None]
+1082: i93 = getfield_gc_i(p91, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1086: i95 = int_ge(i93, -4611686018427387904)
+1099: guard_true(i95, descr=<Guard0x97e7340>) [p83, p77, None, None]
+1105: i97 = int_le(i93, 4611686018427387904)
+1118: guard_true(i97, descr=<Guard0x97e73a0>) [p83, p77, None, None]
+1124: jump(p77, 1, p83, p15, p79, i85, p80, p91, i93, p78, p82, descr=TargetToken(139976082360704))
+1200: --end of the loop--
[3e4c20ee1900ec5] jit-log-opt-bridge}
[3e4c20ee221a3f1] {jit-backend
[3e4c20ee2470128] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c16e20 +0  
[3e4c20ee248aabd] jit-backend-dump}
[3e4c20ee24977c7] {jit-backend-addr
Loop 102 ((let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55)) from (+ CellRef(actuallyMut) 2)) has address 0x7f4eb6c171ad to 0x7f4eb6c17e00 (bootstrap 0x7f4eb6c17120)
       gc table: 0x7f4eb6c16e20
       function: 0x7f4eb6c17120
         resops: 0x7f4eb6c171ad
       failures: 0x7f4eb6c17e00
            end: 0x7f4eb6c187cf
[3e4c20ee249a7db] jit-backend-addr}
[3e4c20ee249f0f5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c171c4 +0  670C0000
[3e4c20ee24a0646] jit-backend-dump}
[3e4c20ee24a3da8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c171db +0  6C0C0000
[3e4c20ee24a4d0c] jit-backend-dump}
[3e4c20ee24a7fec] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c171f1 +0  720C0000
[3e4c20ee24a8e49] jit-backend-dump}
[3e4c20ee24ac454] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c171ff +0  9C0C0000
[3e4c20ee24ad22d] jit-backend-dump}
[3e4c20ee24b05bc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1720b +0  AC0C0000
[3e4c20ee24b1355] jit-backend-dump}
[3e4c20ee24b45af] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1721f +0  B40C0000
[3e4c20ee24b52d6] jit-backend-dump}
[3e4c20ee24b85ba] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17256 +0  990C0000
[3e4c20ee24b9300] jit-backend-dump}
[3e4c20ee24bc588] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17272 +0  990C0000
[3e4c20ee24bd29a] jit-backend-dump}
[3e4c20ee24c050d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17286 +0  A10C0000
[3e4c20ee24c122e] jit-backend-dump}
[3e4c20ee24c44b0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1729c +0  A70C0000
[3e4c20ee24c51b0] jit-backend-dump}
[3e4c20ee24c8365] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c172b8 +0  A70C0000
[3e4c20ee24c906b] jit-backend-dump}
[3e4c20ee24cc1a5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c172d0 +0  AB0C0000
[3e4c20ee24ccea2] jit-backend-dump}
[3e4c20ee24cffd0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c172dd +0  BA0C0000
[3e4c20ee24d0cca] jit-backend-dump}
[3e4c20ee24d3de9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c172f8 +0  BB0C0000
[3e4c20ee24d4add] jit-backend-dump}
[3e4c20ee24d7c05] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1730c +0  C30C0000
[3e4c20ee24d890e] jit-backend-dump}
[3e4c20ee24dbad8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17327 +0  C40C0000
[3e4c20ee24dc7d2] jit-backend-dump}
[3e4c20ee24df91f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1734c +0  BB0C0000
[3e4c20ee24e061f] jit-backend-dump}
[3e4c20ee24e378d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17359 +0  CA0C0000
[3e4c20ee24e4487] jit-backend-dump}
[3e4c20ee24e75e6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17362 +0  DD0C0000
[3e4c20ee24e8351] jit-backend-dump}
[3e4c20ee24eb524] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1736c +0  EF0C0000
[3e4c20ee24ec24f] jit-backend-dump}
[3e4c20ee24ef3cd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17386 +0  F10C0000
[3e4c20ee24f00fe] jit-backend-dump}
[3e4c20ee24f3254] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17393 +0  000D0000
[3e4c20ee24f3fb2] jit-backend-dump}
[3e4c20ee24f716a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c173b4 +0  FB0C0000
[3e4c20ee24f7e86] jit-backend-dump}
[3e4c20ee24fb016] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c173c1 +0  0A0D0000
[3e4c20ee24fbd25] jit-backend-dump}
[3e4c20ee24fee47] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c173f6 +0  F10C0000
[3e4c20ee24ffb2e] jit-backend-dump}
[3e4c20ee2502ca9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1742e +0  D50C0000
[3e4c20ee25039b5] jit-backend-dump}
[3e4c20ee2506b24] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17471 +0  AE0C0000
[3e4c20ee250780e] jit-backend-dump}
[3e4c20ee250a94c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c174a9 +0  920C0000
[3e4c20ee250b639] jit-backend-dump}
[3e4c20ee250e7b1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c174d2 +0  850C0000
[3e4c20ee250f4c0] jit-backend-dump}
[3e4c20ee251261c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17503 +0  700C0000
[3e4c20ee2513319] jit-backend-dump}
[3e4c20ee251648a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1753b +0  540C0000
[3e4c20ee2517184] jit-backend-dump}
[3e4c20ee251a2ff] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17548 +0  630C0000
[3e4c20ee251aff9] jit-backend-dump}
[3e4c20ee251e13f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17551 +0  760C0000
[3e4c20ee251ee4c] jit-backend-dump}
[3e4c20ee2521fc6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1755b +0  880C0000
[3e4c20ee2522d1f] jit-backend-dump}
[3e4c20ee2525edd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1756f +0  900C0000
[3e4c20ee2526bec] jit-backend-dump}
[3e4c20ee2529d3c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17584 +0  970C0000
[3e4c20ee252aa30] jit-backend-dump}
[3e4c20ee252db5b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c175aa +0  8D0C0000
[3e4c20ee252e858] jit-backend-dump}
[3e4c20ee25319e8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c175d9 +0  7A0C0000
[3e4c20ee25326db] jit-backend-dump}
[3e4c20ee2535828] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1760a +0  650C0000
[3e4c20ee253651f] jit-backend-dump}
[3e4c20ee253968d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1766f +0  1C0C0000
[3e4c20ee253a387] jit-backend-dump}
[3e4c20ee253d505] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17697 +0  100C0000
[3e4c20ee253e21d] jit-backend-dump}
[3e4c20ee2541373] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c176b5 +0  0E0C0000
[3e4c20ee2542073] jit-backend-dump}
[3e4c20ee25451c0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c176c6 +0  190C0000
[3e4c20ee2545f37] jit-backend-dump}
[3e4c20ee2549099] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c176d3 +0  280C0000
[3e4c20ee2549d8d] jit-backend-dump}
[3e4c20ee254cec7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c176e1 +0  360C0000
[3e4c20ee254dbc7] jit-backend-dump}
[3e4c20ee2550cff] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c176ef +0  440C0000
[3e4c20ee25519ef] jit-backend-dump}
[3e4c20ee2554b48] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17703 +0  4C0C0000
[3e4c20ee2555845] jit-backend-dump}
[3e4c20ee25589a4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17711 +0  5A0C0000
[3e4c20ee255968f] jit-backend-dump}
[3e4c20ee255c7cc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17737 +0  500C0000
[3e4c20ee255d4c6] jit-backend-dump}
[3e4c20ee25605d9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1776e +0  350C0000
[3e4c20ee25612c0] jit-backend-dump}
[3e4c20ee25643e2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1779f +0  200C0000
[3e4c20ee25650d0] jit-backend-dump}
[3e4c20ee25681e2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c177dc +0  FF0B0000
[3e4c20ee2568ec1] jit-backend-dump}
[3e4c20ee256c03b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1780d +0  EA0B0000
[3e4c20ee256cd48] jit-backend-dump}
[3e4c20ee256fe85] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1783c +0  D70B0000
[3e4c20ee2570b70] jit-backend-dump}
[3e4c20ee2573cb6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17867 +0  C80B0000
[3e4c20ee25749b6] jit-backend-dump}
[3e4c20ee2577b03] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17884 +0  C70B0000
[3e4c20ee25787e7] jit-backend-dump}
[3e4c20ee257b93a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17895 +0  D20B0000
[3e4c20ee257c650] jit-backend-dump}
[3e4c20ee257f7b2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c178a2 +0  E10B0000
[3e4c20ee258049f] jit-backend-dump}
[3e4c20ee2583620] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c178b0 +0  EF0B0000
[3e4c20ee258433f] jit-backend-dump}
[3e4c20ee25874d2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c178be +0  FD0B0000
[3e4c20ee25881b9] jit-backend-dump}
[3e4c20ee258b343] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c178d2 +0  050C0000
[3e4c20ee258c06b] jit-backend-dump}
[3e4c20ee258f184] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c178e0 +0  130C0000
[3e4c20ee258fe77] jit-backend-dump}
[3e4c20ee2592fd6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17906 +0  090C0000
[3e4c20ee2593ce0] jit-backend-dump}
[3e4c20ee2596e3f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17935 +0  F60B0000
[3e4c20ee2597b42] jit-backend-dump}
[3e4c20ee259ac7c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1795f +0  E80B0000
[3e4c20ee259b98e] jit-backend-dump}
[3e4c20ee259eb09] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c179b2 +0  B10B0000
[3e4c20ee259f806] jit-backend-dump}
[3e4c20ee25a29e2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c179d3 +0  AC0B0000
[3e4c20ee25a36d0] jit-backend-dump}
[3e4c20ee25a6820] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c179e7 +0  B40B0000
[3e4c20ee25a751d] jit-backend-dump}
[3e4c20ee25aa679] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c179f0 +0  C70B0000
[3e4c20ee25ab373] jit-backend-dump}
[3e4c20ee25ae4aa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17a12 +0  C10B0000
[3e4c20ee25af182] jit-backend-dump}
[3e4c20ee25b22b0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17a1f +0  D00B0000
[3e4c20ee25b2fc3] jit-backend-dump}
[3e4c20ee25b60f7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17a39 +0  D20B0000
[3e4c20ee25b6dee] jit-backend-dump}
[3e4c20ee25b9f28] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17a5e +0  C90B0000
[3e4c20ee25bac13] jit-backend-dump}
[3e4c20ee25bdd38] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17a72 +0  D10B0000
[3e4c20ee25bea22] jit-backend-dump}
[3e4c20ee25c1b7b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17a7b +0  E40B0000
[3e4c20ee25c2875] jit-backend-dump}
[3e4c20ee25c59bc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17a85 +0  F60B0000
[3e4c20ee25c669d] jit-backend-dump}
[3e4c20ee25c97c8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17aa7 +0  F00B0000
[3e4c20ee25ca4bf] jit-backend-dump}
[3e4c20ee25cd65b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17abb +0  F80B0000
[3e4c20ee25ce3cc] jit-backend-dump}
[3e4c20ee25d153b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17aeb +0  E40B0000
[3e4c20ee25d2228] jit-backend-dump}
[3e4c20ee25d534d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17aff +0  EC0B0000
[3e4c20ee25d603b] jit-backend-dump}
[3e4c20ee25d9147] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17b34 +0  D30B0000
[3e4c20ee25d9e4a] jit-backend-dump}
[3e4c20ee25dcf82] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17b6b +0  B80B0000
[3e4c20ee25ddc69] jit-backend-dump}
[3e4c20ee25e0dbf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17b9c +0  A30B0000
[3e4c20ee25e1abc] jit-backend-dump}
[3e4c20ee25e4c06] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17bf6 +0  650B0000
[3e4c20ee25e58ed] jit-backend-dump}
[3e4c20ee25e8a5f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17c1d +0  5A0B0000
[3e4c20ee25e9765] jit-backend-dump}
[3e4c20ee25ec88d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17c3c +0  570B0000
[3e4c20ee25ed571] jit-backend-dump}
[3e4c20ee25f0696] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17c45 +0  6A0B0000
[3e4c20ee25f1393] jit-backend-dump}
[3e4c20ee25f5119] jit-backend}
[3e4c20ee25f90db] {jit-log-opt-loop
# Loop 102 ((let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55)) from (+ CellRef(actuallyMut) 2)) : entry bridge with 449 ops
[p0, p1]
debug_merge_point(0, 0, '(let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55)) from (+ CellRef(actuallyMut) 2)')
+917: guard_class(p0, 16504944, descr=<Guard0x97e7400>) [p1, p0]
+936: p3 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+940: guard_class(p1, 16435208, descr=<Guard0x46b7a48>) [p1, p0]
+959: p5 = getfield_gc_r(p1, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+963: guard_nonnull_class(p5, ConstClass(ForwardLink), descr=<Guard0x97e7460>) [p1, p0]
debug_merge_point(0, 0, '(+ i5574 1)')
+981: guard_not_invalidated(descr=<Guard0x46b7a90>) [p1, p0]
+981: i7 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+985: i9 = int_add_ovf(i7, 1)
+989: guard_no_overflow(descr=<Guard0x46b7ad8>) [p1, p0]
debug_merge_point(0, 0, '(doloop5572 AppRand55)')
+995: guard_class(p3, 16481456, descr=<Guard0x46b7b20>) [p1, p0]
+1007: p11 = getfield_gc_r(p3, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1018: guard_value(p11, ConstPtr(ptr12), descr=<Guard0x46b7b68>) [p1, p0]
debug_merge_point(0, 0, '(let ([if10 (>= i5574 (quotient n5570 2))]) (if if10 (void) (begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55))))) from (doloop5572 AppRand55)')
debug_merge_point(0, 0, '(>= i5574 (quotient n5570 2))')
+1027: i13 = getfield_gc_i(p3, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_vals_fixed_1 24 pure>)
+1031: i15 = int_eq(i13, -9223372036854775808)
+1031: i17 = int_rshift(i13, 1)
+1037: i19 = int_lshift(i17, 1)
+1043: i21 = int_xor(i13, 2)
+1050: i23 = int_rshift(i21, 63)
+1054: i24 = int_ne(i19, i13)
+1067: i25 = int_and(i23, i24)
+1070: i26 = int_add(i17, i25)
+1073: i27 = int_ge(i9, i26)
+1076: guard_false(i27, descr=<Guard0x46b7bb0>) [p1, p0]
debug_merge_point(0, 0, '(if if10 (void) (begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55))))')
debug_merge_point(0, 0, '(begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55)))')
debug_merge_point(0, 0, '(CellRef(oldGenSwapSubtrees))')
+1082: p28 = getfield_gc_r(p3, descr=<FieldP pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_w_val0 32 pure>)
+1086: p29 = getfield_gc_r(p28, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1091: guard_nonnull_class(p29, 16479200, descr=<Guard0x97e74c0>) [p1, p0]
+1110: p31 = getfield_gc_r(p29, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1121: guard_value(p31, ConstPtr(ptr32), descr=<Guard0x46b7bf8>) [p1, p0]
+1130: p33 = getfield_gc_r(p3, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([index1 (rnd (vector-length CellRef(trees)))][index2 (rnd (vector-length CellRef(trees)))]) (let ([depth (rnd treeHeight)][path (rnd pathBits)][tn1 (vector-ref CellRef(trees) index1)][tn2 (vector-ref CellRef(trees) index2)]) (let ([doloop5533 (lambda (i5535) (let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))))]) (doloop5533 0) (if (even? CellRef(path)) (let ([tmp (vector-ref CellRef(tn1) 0)][AppRand53 (vector-ref CellRef(tn2) 0)]) (vector-set! CellRef(tn1) 0 AppRand53) (vector-set! CellRef(tn2) 0 tmp)) (let ([tmp5560 (vector-ref CellRef(tn1) 1)][AppRand54 (vector-ref CellRef(tn2) 1)]) (vector-set! CellRef(tn1) 1 AppRand54) (vector-set! CellRef(tn2) 1 tmp5560))) (let ([SetBang7 (+ CellRef(actuallyMut) 2)]) (set! actuallyMut SetBang7)))))')
debug_merge_point(0, 0, '(rnd (vector-length CellRef(trees)))')
+1130: p34 = getfield_gc_r(p29, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_2 40 pure>)
+1134: guard_nonnull_class(p34, 16478072, descr=<Guard0x97e7520>) [p1, p0]
+1152: p36 = getfield_gc_r(p29, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_3 48 pure>)
+1156: p37 = getfield_gc_r(p36, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1161: guard_nonnull_class(p37, ConstClass(W_Vector), descr=<Guard0x97e7580>) [p1, p0]
+1180: i39 = getfield_gc_i(p37, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1184: p40 = getfield_gc_r(p34, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1195: guard_value(p40, ConstPtr(ptr41), descr=<Guard0x46b7c40>) [p1, p0]
+1204: p42 = getfield_gc_r(p29, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([if0 (if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)]) (if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))))')
debug_merge_point(0, 0, '(if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)')
debug_merge_point(0, 0, '(if (integer? n5234) (< n5234 16384) #f)')
debug_merge_point(0, 0, '(< n5234 16384)')
+1204: i44 = int_lt(i39, 16384)
+1211: guard_true(i44, descr=<Guard0x46b7c88>) [p1, p0]
debug_merge_point(0, 0, '(if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234)))')
debug_merge_point(0, 0, '(CellRef(random14) n5234)')
+1217: p45 = getfield_gc_r(p34, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+1221: p46 = getfield_gc_r(p45, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1225: guard_nonnull_class(p46, 16478824, descr=<Guard0x97e75e0>) [p1, p0]
+1244: p48 = getfield_gc_r(p46, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1255: guard_value(p48, ConstPtr(ptr49), descr=<Guard0x46b7cd0>) [p1, p0]
+1264: p50 = getfield_gc_r(p34, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+1264: p51 = getfield_gc_r(p46, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_2 40 pure>)
+1268: p52 = getfield_gc_r(p51, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1272: guard_nonnull_class(p52, ConstClass(W_CellIntegerStrategy), descr=<Guard0x97e7640>) [p1, p0]
+1291: i54 = getfield_gc_i(p52, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1295: p55 = getfield_gc_r(p46, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_3 48 pure>)
+1299: p56 = getfield_gc_r(p55, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1310: guard_nonnull_class(p56, ConstClass(W_CellIntegerStrategy), descr=<Guard0x97e76a0>) [p1, p0]
+1328: i58 = getfield_gc_i(p56, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1332: i59 = int_is_true(i54)
+1335: guard_true(i59, descr=<Guard0x46b7d18>) [p1, p0]
+1341: i60 = int_is_true(i58)
+1344: guard_true(i60, descr=<Guard0x46b7d60>) [p1, p0]
+1350: i61 = int_mul_ovf(i54, i58)
+1354: guard_no_overflow(descr=<Guard0x46b7da8>) [p1, p0]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+1360: p62 = getfield_gc_r(p46, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_1 32 pure>)
+1364: p63 = getfield_gc_r(p62, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1368: guard_nonnull_class(p63, ConstClass(W_CellIntegerStrategy), descr=<Guard0x97e7700>) [p1, p0]
+1386: i65 = getfield_gc_i(p63, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1390: i66 = int_add_ovf(i61, i65)
+1393: guard_no_overflow(descr=<Guard0x46b7df0>) [p1, p0]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+1399: p67 = getfield_gc_r(p46, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_0 24 pure>)
+1403: p68 = getfield_gc_r(p67, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1414: guard_nonnull_class(p68, ConstClass(W_CellIntegerStrategy), descr=<Guard0x97e7760>) [p1, p0]
+1432: i70 = getfield_gc_i(p68, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1436: i71 = int_is_zero(i70)
+1439: guard_false(i71, descr=<Guard0x46b7e38>) [p1, p0]
+1445: i73 = int_rshift(i66, 63)
+1456: i74 = int_xor(i66, i73)
+1473: i75 = int_sub(i74, i73)
+1476: i77 = int_rshift(i70, 63)
+1483: i78 = int_xor(i70, i77)
+1486: i79 = int_sub(i78, i77)
+1489: i80 = int_is_zero(i79)
+1492: guard_false(i80, descr=<Guard0x46b7e80>) [p1, p0]
+1498: i82 = int_eq(i75, -9223372036854775808)
+1521: i84 = int_eq(i79, -1)
+1542: i85 = int_and(i82, i84)
+1545: guard_false(i85, descr=<Guard0x46b7ec8>) [p1, p0]
+1554: i87 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i75, i79, descr=<Calli 8 ii EF=0 OS=14>)
+1607: i89 = int_lt(i66, 0)
+1615: guard_false(i89, descr=<Guard0x97e77c0>) [i79, i87, i75, i66, i9, p3, p1, p29, i39, p46, p5]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+1621: i91 = int_eq(i87, -9223372036854775808)
+1621: i93 = int_rshift(i87, 3)
+1628: i95 = int_lshift(i93, 3)
+1635: i97 = int_xor(i87, 8)
+1642: i99 = int_rshift(i97, 63)
+1646: i100 = int_ne(i95, i87)
+1658: i101 = int_and(i99, i100)
+1661: i102 = int_add(i93, i101)
+1664: setfield_gc(p56, i87, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1668: i103 = int_is_zero(i39)
+1671: guard_false(i103, descr=<Guard0x97e7820>) [i39, i102, i9, p3, p1, p29, None, p46, p5]
+1677: i106 = int_rshift(i102, 63)
+1684: i107 = int_xor(i102, i106)
+1690: i108 = int_sub(i107, i106)
+1693: i110 = int_rshift(i39, 63)
+1700: i111 = int_xor(i39, i110)
+1706: i112 = int_sub(i111, i110)
+1709: i113 = int_is_zero(i112)
+1712: guard_false(i113, descr=<Guard0x46b7f10>) [i39, i102, i9, p3, p1, p29, None, p46, p5]
+1718: i115 = int_eq(i108, -9223372036854775808)
+1741: i117 = int_eq(i112, -1)
+1755: i118 = int_and(i115, i117)
+1758: guard_false(i118, descr=<Guard0x46b7f58>) [i39, i102, i9, p3, p1, p29, None, p46, p5]
+1767: i120 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i108, i112, descr=<Calli 8 ii EF=0 OS=14>)
+1813: i122 = int_lt(i102, 0)
+1817: guard_false(i122, descr=<Guard0x97e7880>) [i112, i120, i108, i102, None, i9, p3, p1, p29, i39, p46, p5]
debug_merge_point(0, 0, '(rnd (vector-length CellRef(trees)))')
debug_merge_point(0, 0, '(let ([if0 (if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)]) (if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))))')
debug_merge_point(0, 0, '(if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)')
debug_merge_point(0, 0, '(if (integer? n5234) (< n5234 16384) #f)')
debug_merge_point(0, 0, '(< n5234 16384)')
debug_merge_point(0, 0, '(if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234)))')
debug_merge_point(0, 0, '(CellRef(random14) n5234)')
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+1823: i123 = getfield_gc_i(p52, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1827: i124 = int_is_true(i123)
+1830: guard_true(i124, descr=<Guard0x46b7fa0>) [i112, i120, i108, i102, None, i9, p3, p1, p29, i39, p46, p5]
+1836: i125 = int_is_true(i87)
+1839: guard_true(i125, descr=<Guard0x4639c88>) [i112, i120, i108, i102, None, i9, p3, p1, p29, i39, p46, p5]
+1845: i126 = int_mul_ovf(i123, i87)
+1849: guard_no_overflow(descr=<Guard0x4639cd0>) [i112, i120, i108, i102, None, i9, p3, p1, p29, i39, p46, p5]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+1855: i127 = getfield_gc_i(p63, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1866: i128 = int_add_ovf(i126, i127)
+1869: guard_no_overflow(descr=<Guard0x4639d18>) [i112, i120, i108, i102, None, i9, p3, p1, p29, i39, p46, p5]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+1875: i129 = getfield_gc_i(p68, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1887: i130 = int_is_zero(i129)
+1890: guard_false(i130, descr=<Guard0x4639d60>) [i112, i120, i108, i102, None, i9, p3, p1, p29, i39, p46, p5]
+1896: i132 = int_rshift(i128, 63)
+1903: i133 = int_xor(i128, i132)
+1909: i134 = int_sub(i133, i132)
+1912: i136 = int_rshift(i129, 63)
+1919: i137 = int_xor(i129, i136)
+1922: i138 = int_sub(i137, i136)
+1925: i139 = int_is_zero(i138)
+1928: guard_false(i139, descr=<Guard0x4639da8>) [i112, i120, i108, i102, None, i9, p3, p1, p29, i39, p46, p5]
+1934: i141 = int_eq(i134, -9223372036854775808)
+1956: i143 = int_eq(i138, -1)
+1969: i144 = int_and(i141, i143)
+1972: guard_false(i144, descr=<Guard0x4639df0>) [i112, i120, i108, i102, None, i9, p3, p1, p29, i39, p46, p5]
+1981: i146 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i134, i138, descr=<Calli 8 ii EF=0 OS=14>)
+2020: i148 = int_lt(i128, 0)
+2024: guard_false(i148, descr=<Guard0x97e78e0>) [i138, i146, i134, i128, i120, None, i9, p3, p1, p29, i39, p46, p5]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+2030: i150 = int_eq(i146, -9223372036854775808)
+2030: i152 = int_rshift(i146, 3)
+2037: i154 = int_lshift(i152, 3)
+2044: i156 = int_xor(i146, 8)
+2051: i158 = int_rshift(i156, 63)
+2055: i159 = int_ne(i154, i146)
+2067: i160 = int_and(i158, i159)
+2070: i161 = int_add(i152, i160)
+2073: i163 = int_rshift(i161, 63)
+2080: i164 = int_xor(i161, i163)
+2086: i165 = int_sub(i164, i163)
+2089: i167 = int_eq(i165, -9223372036854775808)
+2111: i168 = int_and(i167, i117)
+2118: setfield_gc(p56, i146, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2122: guard_false(i168, descr=<Guard0x97e7940>) [i112, i165, i168, i161, i120, None, i9, p3, p1, p29, i39, p46, p5]
+2131: i170 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i165, i112, descr=<Calli 8 ii EF=0 OS=14>)
+2161: i172 = int_lt(i161, 0)
+2165: guard_false(i172, descr=<Guard0x97e79a0>) [i112, i170, i165, i161, None, i120, None, i9, p3, p1, p29, i39, p46, p5]
debug_merge_point(0, 0, '(let ([depth (rnd treeHeight)][path (rnd pathBits)][tn1 (vector-ref CellRef(trees) index1)][tn2 (vector-ref CellRef(trees) index2)]) (let ([doloop5533 (lambda (i5535) (let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))))]) (doloop5533 0) (if (even? CellRef(path)) (let ([tmp (vector-ref CellRef(tn1) 0)][AppRand53 (vector-ref CellRef(tn2) 0)]) (vector-set! CellRef(tn1) 0 AppRand53) (vector-set! CellRef(tn2) 0 tmp)) (let ([tmp5560 (vector-ref CellRef(tn1) 1)][AppRand54 (vector-ref CellRef(tn2) 1)]) (vector-set! CellRef(tn1) 1 AppRand54) (vector-set! CellRef(tn2) 1 tmp5560))) (let ([SetBang7 (+ CellRef(actuallyMut) 2)]) (set! actuallyMut SetBang7))))')
debug_merge_point(0, 0, '(rnd treeHeight)')
+2171: p173 = getfield_gc_r(p29, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_4 56 pure>)
+2182: guard_nonnull_class(p173, ConstClass(W_Fixnum), descr=<Guard0x97e7a00>) [i112, i170, i165, i161, None, i120, None, i9, p3, p1, p29, i39, p46, p5]
+2201: i175 = getfield_gc_i(p173, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(let ([if0 (if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)]) (if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))))')
debug_merge_point(0, 0, '(if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)')
debug_merge_point(0, 0, '(if (integer? n5234) (< n5234 16384) #f)')
debug_merge_point(0, 0, '(< n5234 16384)')
+2205: i177 = int_lt(i175, 16384)
+2212: guard_true(i177, descr=<Guard0x4639e38>) [i112, i170, i165, i161, None, i120, None, i9, p3, p1, p29, i39, p46, p5]
debug_merge_point(0, 0, '(if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234)))')
debug_merge_point(0, 0, '(CellRef(random14) n5234)')
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+2218: i178 = getfield_gc_i(p52, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2222: i179 = int_is_true(i178)
+2225: guard_true(i179, descr=<Guard0x4639e80>) [i112, i170, i165, i161, None, i120, None, i9, p3, p1, p29, i39, p46, p5]
+2231: i180 = int_is_true(i146)
+2239: guard_true(i180, descr=<Guard0x4639ec8>) [i112, i170, i165, i161, None, i120, None, i9, p3, p1, p29, i39, p46, p5]
+2245: i181 = int_mul_ovf(i178, i146)
+2253: guard_no_overflow(descr=<Guard0x4639f10>) [i112, i170, i165, i161, None, i120, None, i9, p3, p1, p29, i39, p46, p5]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+2259: i182 = getfield_gc_i(p63, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2270: i183 = int_add_ovf(i181, i182)
+2273: guard_no_overflow(descr=<Guard0x4639f58>) [i112, i170, i165, i161, None, i120, None, i9, p3, p1, p29, i39, p46, p5]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+2279: i184 = getfield_gc_i(p68, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2284: i185 = int_is_zero(i184)
+2287: guard_false(i185, descr=<Guard0x4639fa0>) [i112, i170, i165, i161, None, i120, None, i9, p3, p1, p29, i39, p46, p5]
+2293: i187 = int_rshift(i183, 63)
+2300: i188 = int_xor(i183, i187)
+2306: i189 = int_sub(i188, i187)
+2309: i191 = int_rshift(i184, 63)
+2316: i192 = int_xor(i184, i191)
+2319: i193 = int_sub(i192, i191)
+2322: i194 = int_is_zero(i193)
+2325: guard_false(i194, descr=<Guard0x44763c8>) [i112, i170, i165, i161, None, i120, None, i9, p3, p1, p29, i39, p46, p5]
+2331: i196 = int_eq(i189, -9223372036854775808)
+2354: i198 = int_eq(i193, -1)
+2374: i199 = int_and(i196, i198)
+2377: guard_false(i199, descr=<Guard0x4476410>) [i112, i170, i165, i161, None, i120, None, i9, p3, p1, p29, i39, p46, p5]
+2386: i201 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i189, i193, descr=<Calli 8 ii EF=0 OS=14>)
+2425: i203 = int_lt(i183, 0)
+2429: guard_false(i203, descr=<Guard0x97e7a60>) [i193, i201, i189, i183, i170, i175, None, i120, None, i9, p3, p1, p29, None, p46, p5]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+2435: i205 = int_eq(i201, -9223372036854775808)
+2435: i207 = int_rshift(i201, 3)
+2442: i209 = int_lshift(i207, 3)
+2449: i211 = int_xor(i201, 8)
+2456: i213 = int_rshift(i211, 63)
+2460: i214 = int_ne(i209, i201)
+2472: i215 = int_and(i213, i214)
+2475: i216 = int_add(i207, i215)
+2478: setfield_gc(p56, i201, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2482: i217 = int_is_zero(i175)
+2490: guard_false(i217, descr=<Guard0x97e7ac0>) [i175, i216, i170, None, None, i120, None, i9, p3, p1, p29, None, p46, p5]
+2496: i219 = int_rshift(i216, 63)
+2503: i220 = int_xor(i216, i219)
+2509: i221 = int_sub(i220, i219)
+2512: i223 = int_rshift(i175, 63)
+2523: i224 = int_xor(i175, i223)
+2533: i225 = int_sub(i224, i223)
+2536: i226 = int_is_zero(i225)
+2539: guard_false(i226, descr=<Guard0x4476ad0>) [i175, i216, i170, None, None, i120, None, i9, p3, p1, p29, None, p46, p5]
+2545: i228 = int_eq(i221, -9223372036854775808)
+2567: i230 = int_eq(i225, -1)
+2580: i231 = int_and(i228, i230)
+2583: guard_false(i231, descr=<Guard0x4476a88>) [i175, i216, i170, None, None, i120, None, i9, p3, p1, p29, None, p46, p5]
+2592: i233 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i221, i225, descr=<Calli 8 ii EF=0 OS=14>)
+2625: i235 = int_lt(i216, 0)
+2629: guard_false(i235, descr=<Guard0x97e7f40>) [i225, i233, i221, i216, None, i170, i175, None, i120, None, i9, p3, p1, p29, None, p46, p5]
debug_merge_point(0, 0, '(rnd pathBits)')
+2635: p236 = getfield_gc_r(p29, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_0 24 pure>)
+2646: guard_nonnull_class(p236, ConstClass(W_Fixnum), descr=<Guard0x97e7fa0>) [i225, i233, i221, i216, None, i170, i175, None, i120, None, i9, p3, p1, p29, None, p46, p5]
+2664: i238 = getfield_gc_i(p236, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(let ([if0 (if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)]) (if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))))')
debug_merge_point(0, 0, '(if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)')
debug_merge_point(0, 0, '(if (integer? n5234) (< n5234 16384) #f)')
debug_merge_point(0, 0, '(< n5234 16384)')
+2668: i240 = int_lt(i238, 16384)
+2675: guard_false(i240, descr=<Guard0x4476a40>) [i225, i233, i221, i216, None, i170, i175, None, i120, None, i9, p3, p1, p29, None, p46, p5]
debug_merge_point(0, 0, '(if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234)))')
debug_merge_point(0, 0, '(let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))')
debug_merge_point(0, 0, '(CellRef(random14) 16384)')
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+2681: i241 = getfield_gc_i(p52, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2685: i242 = int_is_true(i241)
+2688: guard_true(i242, descr=<Guard0x44769f8>) [i225, i233, i221, i216, None, i170, i175, None, i120, None, i9, p3, p1, p29, None, p46, p5]
+2694: i243 = int_is_true(i201)
+2702: guard_true(i243, descr=<Guard0x44769b0>) [i225, i233, i221, i216, None, i170, i175, None, i120, None, i9, p3, p1, p29, None, p46, p5]
+2708: i244 = int_mul_ovf(i241, i201)
+2716: guard_no_overflow(descr=<Guard0x4476968>) [i225, i233, i221, i216, None, i170, i175, None, i120, None, i9, p3, p1, p29, None, p46, p5]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+2722: i245 = getfield_gc_i(p63, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2733: i246 = int_add_ovf(i244, i245)
+2736: guard_no_overflow(descr=<Guard0x4476920>) [i225, i233, i221, i216, None, i170, i175, None, i120, None, i9, p3, p1, p29, None, p46, p5]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+2742: i247 = getfield_gc_i(p68, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2747: i248 = int_is_zero(i247)
+2750: guard_false(i248, descr=<Guard0x44768d8>) [i225, i233, i221, i216, None, i170, i175, None, i120, None, i9, p3, p1, p29, None, p46, p5]
+2756: i250 = int_rshift(i246, 63)
+2763: i251 = int_xor(i246, i250)
+2769: i252 = int_sub(i251, i250)
+2772: i254 = int_rshift(i247, 63)
+2779: i255 = int_xor(i247, i254)
+2782: i256 = int_sub(i255, i254)
+2785: i257 = int_is_zero(i256)
+2788: guard_false(i257, descr=<Guard0x4476890>) [i225, i233, i221, i216, None, i170, i175, None, i120, None, i9, p3, p1, p29, None, p46, p5]
+2794: i259 = int_eq(i252, -9223372036854775808)
+2816: i261 = int_eq(i256, -1)
+2829: i262 = int_and(i259, i261)
+2832: guard_false(i262, descr=<Guard0x4476848>) [i225, i233, i221, i216, None, i170, i175, None, i120, None, i9, p3, p1, p29, None, p46, p5]
+2841: i264 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i252, i256, descr=<Calli 8 ii EF=0 OS=14>)
+2873: i266 = int_lt(i246, 0)
+2877: guard_false(i266, descr=<Guard0x97e7ee0>) [i256, i264, i252, i246, i233, i238, p34, None, i170, None, None, i120, None, i9, p3, p1, p29, None, p46, p5]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+2883: i268 = int_eq(i264, -9223372036854775808)
+2883: i270 = int_rshift(i264, 3)
+2890: i272 = int_lshift(i270, 3)
+2897: i274 = int_xor(i264, 8)
+2904: i276 = int_rshift(i274, 63)
+2908: i277 = int_ne(i272, i264)
+2920: i278 = int_and(i276, i277)
+2923: i279 = int_add(i270, i278)
+2926: i281 = int_rshift(i279, 63)
+2933: i282 = int_xor(i279, i281)
+2939: i283 = int_sub(i282, i281)
+2942: i285 = int_eq(i283, -9223372036854775808)
+2942: i287 = int_and(i283, 16383)
+2952: setfield_gc(p56, i264, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2956: i289 = int_lt(i279, 0)
+2960: guard_false(i289, descr=<Guard0x97e7c40>) [i287, i283, i279, i233, i238, p34, None, i170, None, None, i120, None, i9, p3, p1, p29, None, p46, p5]
debug_merge_point(0, 0, '(CellRef(loop) n5234 AppRand5 n5234)')
+2966: p290 = getfield_gc_r(p34, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+2977: p291 = getfield_gc_r(p290, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+2981: guard_nonnull_class(p291, 16478072, descr=<Guard0x97e7e80>) [i287, i283, i279, i233, i238, p34, None, i170, None, None, i120, None, i9, p3, p1, p29, None, p46, p5]
+2999: p293 = getfield_gc_r(p291, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+3010: guard_value(p293, ConstPtr(ptr294), descr=<Guard0x44767b8>) [i287, i283, i279, i233, i238, p34, None, i170, None, None, i120, None, i9, p3, p1, p29, None, p46, p5]
debug_merge_point(0, 0, '(if (zero? q) (remainder r n5224) (let ([AppRand2 (* 16384 r)][AppRand3 (CellRef(random14) 16384)]) (let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)))) from (CellRef(loop) n5234 AppRand5 n5234)')
debug_merge_point(0, 0, '(let ([AppRand2 (* 16384 r)][AppRand3 (CellRef(random14) 16384)]) (let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)))')
debug_merge_point(0, 0, '(* 16384 r)')
+3019: i295 = int_is_true(i287)
+3022: guard_true(i295, descr=<Guard0x4476770>) [i287, i283, i279, i233, i238, p34, None, i170, None, None, i120, None, i9, p3, p1, p29, None, p46, p5]
+3028: i297 = int_lshift(i287, 14)
debug_merge_point(0, 0, '(CellRef(random14) 16384)')
+3035: p298 = getfield_gc_r(p291, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+3039: p299 = getfield_gc_r(p298, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3043: guard_nonnull_class(p299, 16478824, descr=<Guard0x97e7e20>) [i287, i283, i279, i233, i238, p34, None, i170, None, None, i120, None, i9, p3, p1, p29, None, p46, p5]
+3062: p301 = getfield_gc_r(p299, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+3066: guard_value(p301, ConstPtr(ptr302), descr=<Guard0x4476728>) [i287, i283, i279, i233, i238, p34, None, i170, None, None, i120, None, i9, p3, p1, p29, None, p46, p5]
+3075: p303 = getfield_gc_r(p291, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+3075: p304 = getfield_gc_r(p299, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_2 40 pure>)
+3079: p305 = getfield_gc_r(p304, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3083: guard_nonnull_class(p305, ConstClass(W_CellIntegerStrategy), descr=<Guard0x97e7dc0>) [i287, i283, i279, i233, i238, p34, None, i170, None, None, i120, None, i9, p3, p1, p29, None, p46, p5]
+3101: i307 = getfield_gc_i(p305, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3105: p308 = getfield_gc_r(p299, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_3 48 pure>)
+3109: p309 = getfield_gc_r(p308, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3120: guard_nonnull_class(p309, ConstClass(W_CellIntegerStrategy), descr=<Guard0x97e7d60>) [i287, i283, i279, i233, i238, p34, None, i170, None, None, i120, None, i9, p3, p1, p29, None, p46, p5]
+3138: i311 = getfield_gc_i(p309, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3149: i312 = int_is_true(i307)
+3152: guard_true(i312, descr=<Guard0x44766e0>) [i287, i283, i279, i233, i238, p34, None, i170, None, None, i120, None, i9, p3, p1, p29, None, p46, p5]
+3158: i313 = int_is_true(i311)
+3161: guard_true(i313, descr=<Guard0x4476698>) [i287, i283, i279, i233, i238, p34, None, i170, None, None, i120, None, i9, p3, p1, p29, None, p46, p5]
+3167: i314 = int_mul_ovf(i307, i311)
+3171: guard_no_overflow(descr=<Guard0x4476650>) [i287, i283, i279, i233, i238, p34, None, i170, None, None, i120, None, i9, p3, p1, p29, None, p46, p5]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+3177: p315 = getfield_gc_r(p299, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_1 32 pure>)
+3181: p316 = getfield_gc_r(p315, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3192: guard_nonnull_class(p316, ConstClass(W_CellIntegerStrategy), descr=<Guard0x97e7d00>) [i287, i283, i279, i233, i238, p34, None, i170, None, None, i120, None, i9, p3, p1, p29, None, p46, p5]
+3211: i318 = getfield_gc_i(p316, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3222: i319 = int_add_ovf(i314, i318)
+3225: guard_no_overflow(descr=<Guard0x4476608>) [i287, i283, i279, i233, i238, p34, None, i170, None, None, i120, None, i9, p3, p1, p29, None, p46, p5]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+3231: p320 = getfield_gc_r(p299, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_0 24 pure>)
+3249: p321 = getfield_gc_r(p320, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3260: guard_nonnull_class(p321, ConstClass(W_CellIntegerStrategy), descr=<Guard0x97e7ca0>) [i287, i283, i279, i233, i238, p34, None, i170, None, None, i120, None, i9, p3, p1, p29, None, p46, p5]
+3279: i323 = getfield_gc_i(p321, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3290: i324 = int_is_zero(i323)
+3293: guard_false(i324, descr=<Guard0x44765c0>) [i287, i283, i279, i233, i238, p34, None, i170, None, None, i120, None, i9, p3, p1, p29, None, p46, p5]
+3299: i326 = int_rshift(i319, 63)
+3310: i327 = int_xor(i319, i326)
+3327: i328 = int_sub(i327, i326)
+3330: i330 = int_rshift(i323, 63)
+3337: i331 = int_xor(i323, i330)
+3340: i332 = int_sub(i331, i330)
+3343: i333 = int_is_zero(i332)
+3346: guard_false(i333, descr=<Guard0x4476578>) [i287, i283, i279, i233, i238, p34, None, i170, None, None, i120, None, i9, p3, p1, p29, None, p46, p5]
+3352: i335 = int_eq(i328, -9223372036854775808)
+3374: i337 = int_eq(i332, -1)
+3395: i338 = int_and(i335, i337)
+3398: guard_false(i338, descr=<Guard0x4476530>) [i287, i283, i279, i233, i238, p34, None, i170, None, None, i120, None, i9, p3, p1, p29, None, p46, p5]
+3407: i340 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i328, i332, descr=<Calli 8 ii EF=0 OS=14>)
+3442: i342 = int_lt(i319, 0)
+3450: guard_false(i342, descr=<Guard0x97e7be0>) [i332, i340, i328, i319, i287, p291, i297, p299, i233, i238, None, None, i170, None, None, i120, None, i9, p3, p1, p29, None, None, p5]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+3456: i344 = int_eq(i340, -9223372036854775808)
+3456: i346 = int_rshift(i340, 3)
+3463: i348 = int_lshift(i346, 3)
+3470: i350 = int_xor(i340, 8)
+3477: i352 = int_rshift(i350, 63)
+3481: i353 = int_ne(i348, i340)
+3493: i354 = int_and(i352, i353)
+3496: i355 = int_add(i346, i354)
+3499: i357 = int_rshift(i355, 63)
+3506: i358 = int_xor(i355, i357)
+3512: i359 = int_sub(i358, i357)
+3515: i361 = int_eq(i359, -9223372036854775808)
+3515: i363 = int_and(i359, 16383)
+3525: setfield_gc(p309, i340, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3536: i365 = int_lt(i355, 0)
+3540: guard_false(i365, descr=<Guard0x97e7b20>) [i363, i359, i355, i287, p291, i297, p299, i233, i238, None, None, i170, None, None, i120, None, i9, p3, p1, p29, None, None, p5]
debug_merge_point(0, 0, '(let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)) from (remainder (quotient CellRef(x) 8) n)')
debug_merge_point(0, 0, '(+ AppRand2 AppRand3)')
+3546: i366 = int_add(i297, i363)
debug_merge_point(0, 0, '(CellRef(loop) (quotient q 16384) AppRand4 n5224)')
+3552: p367 = getfield_gc_r(p291, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+3563: p368 = getfield_gc_r(p367, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3567: guard_nonnull_class(p368, 16478072, descr=<Guard0x97e7b80>) [i363, i359, i355, i287, p291, i297, p299, i233, i238, None, None, i170, None, None, i120, None, i9, p3, p1, p29, None, None, p5]
+3585: i371 = int_rshift(i238, 14)
+3596: i373 = int_lshift(i371, 14)
+3596: i375 = int_xor(i238, 16384)
+3596: i376 = int_ne(i373, i238)
+3596: p377 = getfield_gc_r(p368, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+3607: guard_value(p377, ConstPtr(ptr378), descr=<Guard0x44764a0>) [i363, i359, i355, i287, p291, i297, p299, i233, i238, None, None, i170, None, None, i120, None, i9, p3, p1, p29, None, None, p5]
+3616: i379 = instance_ptr_eq(p291, p368)
+3619: guard_true(i379, descr=<Guard0x4476458>) [i363, i359, i355, i287, p291, i297, p299, i233, i238, None, None, i170, None, None, i120, None, i9, p3, p1, p29, None, None, p5]
debug_merge_point(0, 0, '(if (zero? q) (remainder r n5224) (let ([AppRand2 (* 16384 r)][AppRand3 (CellRef(random14) 16384)]) (let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)))) from (CellRef(loop) (quotient q 16384) AppRand4 n5224)')
+3625: p380 = new_with_vtable(descr=<SizeDescr 16>)
+3672: p381 = new_with_vtable(descr=<SizeDescr 48>)
+3683: p382 = new_with_vtable(descr=<SizeDescr 32>)
+3694: setfield_gc(p382, p29, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+3705: setfield_gc(p382, i120, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_0 16 pure>)
+3716: setfield_gc(p382, i170, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_1 24 pure>)
+3727: p383 = new_with_vtable(descr=<SizeDescr 40>)
+3738: setfield_gc(p383, p5, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+3749: p384 = new_with_vtable(descr=<SizeDescr 24>)
+3760: setfield_gc(p384, p3, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+3771: setfield_gc(p384, i9, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+3782: setfield_gc(p383, p384, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+3786: setfield_gc(p383, p1, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+3804: setfield_gc(p383, ConstPtr(ptr385), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+3808: setfield_gc(p381, p5, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+3812: setfield_gc(p380, i238, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+3823: setfield_gc(p381, p382, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+3827: setfield_gc(p381, p383, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+3838: setfield_gc(p381, ConstPtr(ptr386), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+3842: setfield_gc(p381, i233, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+3853: jump(p291, i371, i366, p380, p381, p298, p299, p304, p305, p308, p309, i340, p315, p316, p320, p321, p5, p367, p368, descr=TargetToken(139976055980144))
+4064: --end of the loop--
[3e4c20ee2c556c7] jit-log-opt-loop}
[3e4c20ee43393a4] {jit-backend
[3e4c20ee45d35a5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c18ed
[3e4c20ee45f1be4] jit-backend-dump}
[3e4c20ee46029cb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19284 +0  34000000
[3e4c20ee460420d] jit-backend-dump}
[3e4c20ee46084d8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1a0b5 +0  34000000
[3e4c20ee460953f] jit-backend-dump}
[3e4c20ee460c823] {jit-backend-addr
bridge out of Guard 0xa8e5418 has address 0x7f4eb6c19280 to 0x7f4eb6c1a0b0
       gc table: 0x7f4eb6c18ed0
    jump target: 0x7f4eb6c19280
         resops: 0x7f4eb6c1928e
       failures: 0x7f4eb6c1a0b0
            end: 0x7f4eb6c1ad15
[3e4c20ee460ed8c] jit-backend-addr}
[3e4c20ee461252e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c192a6 +0  9B0E0000
[3e4c20ee46134a4] jit-backend-dump}
[3e4c20ee46168b6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c192bd +0  A00E0000
[3e4c20ee46176dc] jit-backend-dump}
[3e4c20ee461a8f9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c192ca +0  AF0E0000
[3e4c20ee461b8be] jit-backend-dump}
[3e4c20ee461eadb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c192de +0  B70E0000
[3e4c20ee461f871] jit-backend-dump}
[3e4c20ee4622a01] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c192f3 +0  BE0E0000
[3e4c20ee46236ec] jit-backend-dump}
[3e4c20ee46267e0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19305 +0  C80E0000
[3e4c20ee46274c7] jit-backend-dump}
[3e4c20ee462a5b5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1931d +0  CC0E0000
[3e4c20ee462b2c7] jit-backend-dump}
[3e4c20ee462e3dd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19337 +0  CE0E0000
[3e4c20ee462f0b8] jit-backend-dump}
[3e4c20ee4632175] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19348 +0  D90E0000
[3e4c20ee4632e7b] jit-backend-dump}
[3e4c20ee4635f32] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19362 +0  DB0E0000
[3e4c20ee4636c2f] jit-backend-dump}
[3e4c20ee4639d23] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19370 +0  E90E0000
[3e4c20ee463aa14] jit-backend-dump}
[3e4c20ee463db02] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19380 +0  F50E0000
[3e4c20ee463e7ec] jit-backend-dump}
[3e4c20ee4641897] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19394 +0  FD0E0000
[3e4c20ee464257e] jit-backend-dump}
[3e4c20ee46456da] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c193af +0  FE0E0000
[3e4c20ee46463b3] jit-backend-dump}
[3e4c20ee46494c2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c193bd +0  0C0F0000
[3e4c20ee464a215] jit-backend-dump}
[3e4c20ee464d31b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c193cd +0  180F0000
[3e4c20ee464e03a] jit-backend-dump}
[3e4c20ee465111e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c193e2 +0  1F0F0000
[3e4c20ee4651e40] jit-backend-dump}
[3e4c20ee4654f37] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1940b +0  120F0000
[3e4c20ee4655c1c] jit-backend-dump}
[3e4c20ee4658cee] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19425 +0  140F0000
[3e4c20ee46599cf] jit-backend-dump}
[3e4c20ee465ca83] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19433 +0  220F0000
[3e4c20ee465d75e] jit-backend-dump}
[3e4c20ee466080f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1944c +0  250F0000
[3e4c20ee46614fd] jit-backend-dump}
[3e4c20ee46645db] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19462 +0  2B0F0000
[3e4c20ee46652ba] jit-backend-dump}
[3e4c20ee466836a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19473 +0  360F0000
[3e4c20ee466904f] jit-backend-dump}
[3e4c20ee466c0b3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19489 +0  3C0F0000
[3e4c20ee466cda1] jit-backend-dump}
[3e4c20ee466fe17] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19497 +0  4A0F0000
[3e4c20ee4670af9] jit-backend-dump}
[3e4c20ee4673bc5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c194a4 +0  590F0000
[3e4c20ee46748bf] jit-backend-dump}
[3e4c20ee467793f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c194b8 +0  610F0000
[3e4c20ee467862c] jit-backend-dump}
[3e4c20ee467b6b5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c194ee +0  470F0000
[3e4c20ee467c3dd] jit-backend-dump}
[3e4c20ee467f4e3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19509 +0  480F0000
[3e4c20ee468022d] jit-backend-dump}
[3e4c20ee4683305] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1951d +0  500F0000
[3e4c20ee4683fd4] jit-backend-dump}
[3e4c20ee46870c2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19533 +0  560F0000
[3e4c20ee4687db3] jit-backend-dump}
[3e4c20ee468ae48] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1954d +0  580F0000
[3e4c20ee468bb36] jit-backend-dump}
[3e4c20ee468ebf0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19565 +0  5C0F0000
[3e4c20ee468f8ce] jit-backend-dump}
[3e4c20ee4692969] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19572 +0  6B0F0000
[3e4c20ee469363b] jit-backend-dump}
[3e4c20ee4696748] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1958c +0  6D0F0000
[3e4c20ee469752a] jit-backend-dump}
[3e4c20ee469a59b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c195a0 +0  750F0000
[3e4c20ee469b273] jit-backend-dump}
[3e4c20ee469e3b6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c195c1 +0  700F0000
[3e4c20ee469f0a7] jit-backend-dump}
[3e4c20ee46a2142] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c195ee +0  5F0F0000
[3e4c20ee46a2e1b] jit-backend-dump}
[3e4c20ee46a5f0f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c195fb +0  6E0F0000
[3e4c20ee46a6bea] jit-backend-dump}
[3e4c20ee46a9dd6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19604 +0  810F0000
[3e4c20ee46aaabd] jit-backend-dump}
[3e4c20ee46adb6e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1960e +0  930F0000
[3e4c20ee46ae84c] jit-backend-dump}
[3e4c20ee46b18d8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19631 +0  8C0F0000
[3e4c20ee46b25bd] jit-backend-dump}
[3e4c20ee46b56f1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1963e +0  9B0F0000
[3e4c20ee46b63dc] jit-backend-dump}
[3e4c20ee46b94a8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19660 +0  950F0000
[3e4c20ee46ba189] jit-backend-dump}
[3e4c20ee46bd22e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1966d +0  A40F0000
[3e4c20ee46bdf09] jit-backend-dump}
[3e4c20ee46c0fcf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c196a2 +0  8B0F0000
[3e4c20ee46c1cc0] jit-backend-dump}
[3e4c20ee46c4d6a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c196d8 +0  710F0000
[3e4c20ee46c5a64] jit-backend-dump}
[3e4c20ee46c8b34] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19717 +0  4E0F0000
[3e4c20ee46c9824] jit-backend-dump}
[3e4c20ee46cc8d2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19757 +0  2A0F0000
[3e4c20ee46cd5b6] jit-backend-dump}
[3e4c20ee46d064f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19780 +0  1D0F0000
[3e4c20ee46d1333] jit-backend-dump}
[3e4c20ee46d43c8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c197af +0  0A0F0000
[3e4c20ee46d50ad] jit-backend-dump}
[3e4c20ee46d8170] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c197eb +0  EA0E0000
[3e4c20ee46d8e98] jit-backend-dump}
[3e4c20ee46dbf33] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c197f9 +0  F80E0000
[3e4c20ee46dcc33] jit-backend-dump}
[3e4c20ee46dfce7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19802 +0  0B0F0000
[3e4c20ee46e09da] jit-backend-dump}
[3e4c20ee46e3a66] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1980c +0  1D0F0000
[3e4c20ee46e4751] jit-backend-dump}
[3e4c20ee46e77be] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19819 +0  2C0F0000
[3e4c20ee46e84a3] jit-backend-dump}
[3e4c20ee46eb547] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1982d +0  340F0000
[3e4c20ee46ec28b] jit-backend-dump}
[3e4c20ee46ef382] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19853 +0  2A0F0000
[3e4c20ee46f005d] jit-backend-dump}
[3e4c20ee46f313f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19882 +0  170F0000
[3e4c20ee46f3e32] jit-backend-dump}
[3e4c20ee46f6f02] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c198b3 +0  020F0000
[3e4c20ee46f7bdd] jit-backend-dump}
[3e4c20ee46facbc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19918 +0  B90E0000
[3e4c20ee46fb99a] jit-backend-dump}
[3e4c20ee46fea4e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19943 +0  AA0E0000
[3e4c20ee46ff735] jit-backend-dump}
[3e4c20ee47027c7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19961 +0  A80E0000
[3e4c20ee47034af] jit-backend-dump}
[3e4c20ee4706587] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19972 +0  B30E0000
[3e4c20ee4707260] jit-backend-dump}
[3e4c20ee470a2f5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19980 +0  C10E0000
[3e4c20ee470afd6] jit-backend-dump}
[3e4c20ee47110dc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1998e +0  CF0E0000
[3e4c20ee4711fad] jit-backend-dump}
[3e4c20ee47159ac] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1999c +0  DD0E0000
[3e4c20ee4716702] jit-backend-dump}
[3e4c20ee4719946] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c199a9 +0  EC0E0000
[3e4c20ee471a63a] jit-backend-dump}
[3e4c20ee471d8a6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c199b6 +0  FB0E0000
[3e4c20ee471e594] jit-backend-dump}
[3e4c20ee4721774] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c199dc +0  F10E0000
[3e4c20ee4722433] jit-backend-dump}
[3e4c20ee4725543] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19a0c +0  DD0E0000
[3e4c20ee472620f] jit-backend-dump}
[3e4c20ee472935f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19a41 +0  C40E0000
[3e4c20ee472a015] jit-backend-dump}
[3e4c20ee472d156] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19a7f +0  A20E0000
[3e4c20ee472de28] jit-backend-dump}
[3e4c20ee4730f03] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19ab0 +0  8D0E0000
[3e4c20ee4731bc0] jit-backend-dump}
[3e4c20ee4734c9c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19ae0 +0  790E0000
[3e4c20ee4735968] jit-backend-dump}
[3e4c20ee4738a68] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19b0e +0  670E0000
[3e4c20ee473972b] jit-backend-dump}
[3e4c20ee473c843] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19b2c +0  650E0000
[3e4c20ee473d506] jit-backend-dump}
[3e4c20ee47405e5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19b3d +0  700E0000
[3e4c20ee47412c6] jit-backend-dump}
[3e4c20ee47443d0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19b4b +0  7E0E0000
[3e4c20ee474509f] jit-backend-dump}
[3e4c20ee4748149] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19b59 +0  8C0E0000
[3e4c20ee4748e06] jit-backend-dump}
[3e4c20ee474beee] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19b67 +0  9A0E0000
[3e4c20ee474cbb7] jit-backend-dump}
[3e4c20ee474fc80] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19b74 +0  A90E0000
[3e4c20ee4750936] jit-backend-dump}
[3e4c20ee4753a24] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19b81 +0  B80E0000
[3e4c20ee47546f0] jit-backend-dump}
[3e4c20ee4757812] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19ba7 +0  AE0E0000
[3e4c20ee47584de] jit-backend-dump}
[3e4c20ee475b5d2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19bd7 +0  9A0E0000
[3e4c20ee475c29e] jit-backend-dump}
[3e4c20ee475f383] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19c01 +0  8C0E0000
[3e4c20ee4760046] jit-backend-dump}
[3e4c20ee476313d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19c54 +0  550E0000
[3e4c20ee4763ee5] jit-backend-dump}
[3e4c20ee4767078] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19c76 +0  4F0E0000
[3e4c20ee4767d50] jit-backend-dump}
[3e4c20ee476ae2f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19c8a +0  570E0000
[3e4c20ee476baf8] jit-backend-dump}
[3e4c20ee476ebb8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19c93 +0  6A0E0000
[3e4c20ee476f86b] jit-backend-dump}
[3e4c20ee47729a0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19cb5 +0  640E0000
[3e4c20ee477366f] jit-backend-dump}
[3e4c20ee477674d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19cc6 +0  6F0E0000
[3e4c20ee4777410] jit-backend-dump}
[3e4c20ee477a526] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19ce0 +0  710E0000
[3e4c20ee477b1f2] jit-backend-dump}
[3e4c20ee477e2b8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19d0d +0  600E0000
[3e4c20ee477ef81] jit-backend-dump}
[3e4c20ee4782087] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19d21 +0  680E0000
[3e4c20ee4782d50] jit-backend-dump}
[3e4c20ee4785e47] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19d2a +0  7B0E0000
[3e4c20ee4786b04] jit-backend-dump}
[3e4c20ee4789c44] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19d34 +0  8D0E0000
[3e4c20ee478a910] jit-backend-dump}
[3e4c20ee478d9d3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19d63 +0  7A0E0000
[3e4c20ee478e690] jit-backend-dump}
[3e4c20ee4791775] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19d77 +0  820E0000
[3e4c20ee479244a] jit-backend-dump}
[3e4c20ee4795507] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19d99 +0  7C0E0000
[3e4c20ee47961ca] jit-backend-dump}
[3e4c20ee4799675] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19da6 +0  8B0E0000
[3e4c20ee479a341] jit-backend-dump}
[3e4c20ee479d4f3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19ddb +0  720E0000
[3e4c20ee479e1af] jit-backend-dump}
[3e4c20ee47a12f3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19e11 +0  580E0000
[3e4c20ee47a1ff0] jit-backend-dump}
[3e4c20ee47a510f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19e49 +0  3C0E0000
[3e4c20ee47a5dd8] jit-backend-dump}
[3e4c20ee47a8ee1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19ea4 +0  FD0D0000
[3e4c20ee47a9bb3] jit-backend-dump}
[3e4c20ee47acc76] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19ecc +0  F10D0000
[3e4c20ee47ad93c] jit-backend-dump}
[3e4c20ee47b0a18] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19eef +0  EA0D0000
[3e4c20ee47b16ed] jit-backend-dump}
[3e4c20ee47b4797] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19ef8 +0  FD0D0000
[3e4c20ee47b545a] jit-backend-dump}
[3e4c20ee47b88b9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c3b8 +0  C4CE0000
[3e4c20ee47b95bc] jit-backend-dump}
[3e4c20ee47bda6a] jit-backend}
[3e4c20ee47c1500] {jit-log-opt-bridge
# bridge out of Guard 0xa8e5418 with 519 ops
[i0, p1, p2, p3]
+966: guard_not_invalidated(descr=<Guard0xafac020>) [i0, p1, p2, p3]
+966: p4 = getfield_gc_r(p1, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+977: guard_value(p4, ConstPtr(ptr5), descr=<Guard0x4476cc8>) [i0, p1, p2, p3]
+986: p6 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_1 32 pure>)
+990: guard_nonnull_class(p6, ConstClass(W_Fixnum), descr=<Guard0xafac080>) [i0, p1, p2, p3]
+1009: i8 = getfield_gc_i(p6, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1013: i9 = int_ge(i0, i8)
+1016: guard_true(i9, descr=<Guard0x4476d10>) [i0, p1, p2, p3]
debug_merge_point(0, 0, '(if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))')
debug_merge_point(0, 0, '(void)')
+1022: p10 = getfield_gc_r(p2, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+1033: guard_value(p10, ConstPtr(ptr11), descr=<Guard0x4476d58>) [i0, p1, p2, p3]
+1042: p12 = getfield_gc_r(p2, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1046: p13 = getfield_gc_r(p2, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1050: guard_class(p12, 16500720, descr=<Guard0x4476da0>) [i0, p1, p2, p3]
+1063: p15 = getfield_gc_r(p12, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1067: guard_class(p13, 16435208, descr=<Guard0x4476de8>) [i0, p1, p2, p3]
+1081: p17 = getfield_gc_r(p13, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1086: guard_nonnull_class(p17, ConstClass(ForwardLink), descr=<Guard0xafac0e0>) [i0, p1, p2, p3]
debug_merge_point(0, 0, '(if (even? CellRef(path)) (let ([tmp (vector-ref CellRef(tn1) 0)][AppRand53 (vector-ref CellRef(tn2) 0)]) (vector-set! CellRef(tn1) 0 AppRand53) (vector-set! CellRef(tn2) 0 tmp)) (let ([tmp5560 (vector-ref CellRef(tn1) 1)][AppRand54 (vector-ref CellRef(tn2) 1)]) (vector-set! CellRef(tn1) 1 AppRand54) (vector-set! CellRef(tn2) 1 tmp5560)))')
+1105: p19 = getfield_gc_r(p12, descr=<FieldP rpython.tool.pairtype.ConsEnvSize4.inst__vals_1 24 pure>)
+1109: p20 = getfield_gc_r(p19, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1113: guard_nonnull_class(p20, ConstClass(W_CellIntegerStrategy), descr=<Guard0xafac140>) [i0, p1, p2, p3]
+1131: i22 = getfield_gc_i(p20, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1135: i24 = int_and(i22, 1)
+1139: i25 = int_is_zero(i24)
+1142: guard_false(i25, descr=<Guard0x4476e30>) [i0, p1, p2, p3]
debug_merge_point(0, 0, '(let ([tmp5560 (vector-ref CellRef(tn1) 1)][AppRand54 (vector-ref CellRef(tn2) 1)]) (vector-set! CellRef(tn1) 1 AppRand54) (vector-set! CellRef(tn2) 1 tmp5560))')
debug_merge_point(0, 0, '(vector-ref CellRef(tn1) 1)')
+1148: p26 = getfield_gc_r(p12, descr=<FieldP rpython.tool.pairtype.ConsEnvSize4.inst__vals_2 32 pure>)
+1152: p27 = getfield_gc_r(p26, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1156: guard_nonnull_class(p27, ConstClass(W_Vector), descr=<Guard0xafac1a0>) [i0, p1, p2, p3]
+1174: i29 = getfield_gc_i(p27, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1178: i31 = int_lt(1, i29)
+1182: guard_true(i31, descr=<Guard0x4476e78>) [i0, p1, p2, p3]
+1188: p32 = getfield_gc_r(p27, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1192: guard_class(p32, 16622984, descr=<Guard0x4476ec0>) [i0, p1, p2, p3]
+1204: p34 = getfield_gc_r(p27, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1208: p36 = getarrayitem_gc_r(p34, 1, descr=<ArrayP 8>)
+1212: guard_class(p36, ConstClass(W_Vector), descr=<Guard0x4476f08>) [i0, p1, p2, p3]
debug_merge_point(0, 0, '(vector-ref CellRef(tn2) 1)')
+1224: p38 = getfield_gc_r(p12, descr=<FieldP rpython.tool.pairtype.ConsEnvSize4.inst__vals_3 40 pure>)
+1228: p39 = getfield_gc_r(p38, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1232: guard_nonnull_class(p39, ConstClass(W_Vector), descr=<Guard0xafac200>) [i0, p1, p2, p3]
+1251: i41 = getfield_gc_i(p39, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1255: i43 = int_lt(1, i41)
+1259: guard_true(i43, descr=<Guard0x4476f50>) [i0, p1, p2, p3]
+1265: p44 = getfield_gc_r(p39, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1269: guard_class(p44, 16622984, descr=<Guard0x4476f98>) [i0, p1, p2, p3]
+1281: p46 = getfield_gc_r(p39, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1285: p48 = getarrayitem_gc_r(p46, 1, descr=<ArrayP 8>)
+1289: guard_class(p48, ConstClass(W_Vector), descr=<Guard0x4476fe0>) [i0, p1, p2, p3]
debug_merge_point(0, 0, '(vector-set! CellRef(tn1) 1 AppRand54)')
debug_merge_point(0, 0, '(vector-set! CellRef(tn2) 1 tmp5560)')
+1312: setarrayitem_gc(p34, 1, p48, descr=<ArrayP 8>)
debug_merge_point(0, 0, '(let ([SetBang7 (+ CellRef(actuallyMut) 2)]) (set! actuallyMut SetBang7))')
debug_merge_point(0, 0, '(+ CellRef(actuallyMut) 2)')
+1326: setarrayitem_gc(p46, 1, p36, descr=<ArrayP 8>)
+1330: guard_class(p15, 16479200, descr=<Guard0xafac260>) [p15, p13, p17, None, None, None, None]
+1343: p54 = getfield_gc_r(p15, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_1 32 pure>)
+1347: p55 = getfield_gc_r(p54, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1351: guard_nonnull_class(p55, ConstClass(W_CellIntegerStrategy), descr=<Guard0xafac2c0>) [p15, p13, p17, None, None, None, None]
+1369: i57 = getfield_gc_i(p55, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1373: i59 = int_add_ovf(i57, 2)
+1377: guard_no_overflow(descr=<Guard0x4477028>) [p15, p13, p17, None, None, None, None]
debug_merge_point(0, 0, '(set! actuallyMut SetBang7)')
+1383: p60 = getfield_gc_r(p13, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+1388: setfield_gc(p55, i59, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1399: guard_value(p60, ConstPtr(ptr61), descr=<Guard0xafac320>) [p60, p13, None, None, None, None, None, None]
+1408: p62 = getfield_gc_r(p13, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1413: p63 = getfield_gc_r(p13, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55)) from (+ CellRef(actuallyMut) 2)')
+1418: guard_class(p62, 16504944, descr=<Guard0x4477070>) [p60, p13, None, None, None, None, None, None]
+1430: p65 = getfield_gc_r(p62, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1434: guard_class(p63, 16435208, descr=<Guard0x4477190>) [p60, p13, None, None, None, None, None, None]
+1447: p67 = getfield_gc_r(p63, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1451: guard_nonnull_class(p67, ConstClass(ForwardLink), descr=<Guard0xafac380>) [p60, p13, None, None, None, None, None, None]
debug_merge_point(0, 0, '(+ i5574 1)')
+1469: i69 = getfield_gc_i(p62, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1473: i71 = int_add_ovf(i69, 1)
+1477: guard_no_overflow(descr=<Guard0x44771d8>) [p60, p13, None, None, None, None, None, None]
debug_merge_point(0, 0, '(doloop5572 AppRand55)')
+1483: guard_class(p65, 16481456, descr=<Guard0x4477220>) [p60, p13, None, None, None, None, None, None]
+1496: p73 = getfield_gc_r(p65, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1507: guard_value(p73, ConstPtr(ptr74), descr=<Guard0x4477268>) [p60, p13, None, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([if10 (>= i5574 (quotient n5570 2))]) (if if10 (void) (begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55))))) from (doloop5572 AppRand55)')
debug_merge_point(0, 0, '(>= i5574 (quotient n5570 2))')
+1516: i75 = getfield_gc_i(p65, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_vals_fixed_1 24 pure>)
+1520: i77 = int_eq(i75, -9223372036854775808)
+1520: i79 = int_rshift(i75, 1)
+1526: i81 = int_lshift(i79, 1)
+1532: i83 = int_xor(i75, 2)
+1539: i85 = int_rshift(i83, 63)
+1543: i86 = int_ne(i81, i75)
+1555: i87 = int_and(i85, i86)
+1558: i88 = int_add(i79, i87)
+1561: i89 = int_ge(i71, i88)
+1564: guard_false(i89, descr=<Guard0x44772b0>) [p60, p13, None, None, None, None, None, None]
debug_merge_point(0, 0, '(if if10 (void) (begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55))))')
debug_merge_point(0, 0, '(begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55)))')
debug_merge_point(0, 0, '(CellRef(oldGenSwapSubtrees))')
+1570: p90 = getfield_gc_r(p65, descr=<FieldP pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_w_val0 32 pure>)
+1574: p91 = getfield_gc_r(p90, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1578: guard_nonnull_class(p91, 16479200, descr=<Guard0xafac3e0>) [p60, p13, None, None, None, None, None, None]
+1597: p93 = getfield_gc_r(p91, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1608: guard_value(p93, ConstPtr(ptr94), descr=<Guard0x44772f8>) [p60, p13, None, None, None, None, None, None]
+1617: p95 = getfield_gc_r(p65, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([index1 (rnd (vector-length CellRef(trees)))][index2 (rnd (vector-length CellRef(trees)))]) (let ([depth (rnd treeHeight)][path (rnd pathBits)][tn1 (vector-ref CellRef(trees) index1)][tn2 (vector-ref CellRef(trees) index2)]) (let ([doloop5533 (lambda (i5535) (let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))))]) (doloop5533 0) (if (even? CellRef(path)) (let ([tmp (vector-ref CellRef(tn1) 0)][AppRand53 (vector-ref CellRef(tn2) 0)]) (vector-set! CellRef(tn1) 0 AppRand53) (vector-set! CellRef(tn2) 0 tmp)) (let ([tmp5560 (vector-ref CellRef(tn1) 1)][AppRand54 (vector-ref CellRef(tn2) 1)]) (vector-set! CellRef(tn1) 1 AppRand54) (vector-set! CellRef(tn2) 1 tmp5560))) (let ([SetBang7 (+ CellRef(actuallyMut) 2)]) (set! actuallyMut SetBang7)))))')
debug_merge_point(0, 0, '(rnd (vector-length CellRef(trees)))')
+1617: p96 = getfield_gc_r(p91, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_2 40 pure>)
+1621: guard_nonnull_class(p96, 16478072, descr=<Guard0xafac440>) [p60, p13, None, None, None, None, None, None]
+1639: p98 = getfield_gc_r(p91, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_3 48 pure>)
+1643: p99 = getfield_gc_r(p98, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1647: guard_nonnull_class(p99, ConstClass(W_Vector), descr=<Guard0xafac4a0>) [p60, p13, None, None, None, None, None, None]
+1665: i101 = getfield_gc_i(p99, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1669: p102 = getfield_gc_r(p96, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1680: guard_value(p102, ConstPtr(ptr103), descr=<Guard0x4477340>) [p60, p13, None, None, None, None, None, None]
+1689: p104 = getfield_gc_r(p91, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([if0 (if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)]) (if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))))')
debug_merge_point(0, 0, '(if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)')
debug_merge_point(0, 0, '(if (integer? n5234) (< n5234 16384) #f)')
debug_merge_point(0, 0, '(< n5234 16384)')
+1689: i106 = int_lt(i101, 16384)
+1696: guard_true(i106, descr=<Guard0x4477388>) [p60, p13, None, None, None, None, None, None]
debug_merge_point(0, 0, '(if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234)))')
debug_merge_point(0, 0, '(CellRef(random14) n5234)')
+1702: p107 = getfield_gc_r(p96, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+1706: p108 = getfield_gc_r(p107, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1710: guard_nonnull_class(p108, 16478824, descr=<Guard0xafac500>) [p60, p13, None, None, None, None, None, None]
+1728: p110 = getfield_gc_r(p108, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1739: guard_value(p110, ConstPtr(ptr111), descr=<Guard0x44773d0>) [p60, p13, None, None, None, None, None, None]
+1748: p112 = getfield_gc_r(p96, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+1748: p113 = getfield_gc_r(p108, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_2 40 pure>)
+1752: p114 = getfield_gc_r(p113, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1763: guard_nonnull_class(p114, ConstClass(W_CellIntegerStrategy), descr=<Guard0xafac560>) [p60, p13, None, None, None, None, None, None]
+1781: i116 = getfield_gc_i(p114, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1785: p117 = getfield_gc_r(p108, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_3 48 pure>)
+1796: p118 = getfield_gc_r(p117, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1807: guard_nonnull_class(p118, ConstClass(W_CellIntegerStrategy), descr=<Guard0xafac5c0>) [p60, p13, None, None, None, None, None, None]
+1826: i120 = getfield_gc_i(p118, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1830: i121 = int_is_true(i116)
+1833: guard_true(i121, descr=<Guard0x7f4eb8aa2140>) [p60, p13, None, None, None, None, None, None]
+1839: i122 = int_is_true(i120)
+1842: guard_true(i122, descr=<Guard0x7f4eb71882f0>) [p60, p13, None, None, None, None, None, None]
+1848: i123 = int_mul_ovf(i116, i120)
+1852: guard_no_overflow(descr=<Guard0x405e380>) [p60, p13, None, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+1858: p124 = getfield_gc_r(p108, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_1 32 pure>)
+1862: p125 = getfield_gc_r(p124, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1873: guard_nonnull_class(p125, ConstClass(W_CellIntegerStrategy), descr=<Guard0xafac620>) [p60, p13, None, None, None, None, None, None]
+1893: i127 = getfield_gc_i(p125, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1897: i128 = int_add_ovf(i123, i127)
+1900: guard_no_overflow(descr=<Guard0xa8e5bf8>) [p60, p13, None, None, None, None, None, None]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+1906: p129 = getfield_gc_r(p108, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_0 24 pure>)
+1910: p130 = getfield_gc_r(p129, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1921: guard_nonnull_class(p130, ConstClass(W_CellIntegerStrategy), descr=<Guard0xafac680>) [p60, p13, None, None, None, None, None, None]
+1940: i132 = getfield_gc_i(p130, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1944: i133 = int_is_zero(i132)
+1947: guard_false(i133, descr=<Guard0xa8e5c40>) [p60, p13, None, None, None, None, None, None]
+1953: i135 = int_rshift(i128, 63)
+1964: i136 = int_xor(i128, i135)
+1981: i137 = int_sub(i136, i135)
+1984: i139 = int_rshift(i132, 63)
+1991: i140 = int_xor(i132, i139)
+1994: i141 = int_sub(i140, i139)
+1997: i142 = int_is_zero(i141)
+2000: guard_false(i142, descr=<Guard0xa8e5c88>) [p60, p13, None, None, None, None, None, None]
+2006: i144 = int_eq(i137, -9223372036854775808)
+2028: i146 = int_eq(i141, -1)
+2048: i147 = int_and(i144, i146)
+2051: guard_false(i147, descr=<Guard0xa8e5cd0>) [p60, p13, None, None, None, None, None, None]
+2060: i149 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i137, i141, descr=<Calli 8 ii EF=0 OS=14>)
+2109: i151 = int_lt(i128, 0)
+2117: guard_false(i151, descr=<Guard0xafac6e0>) [i141, i149, i137, i128, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+2123: i153 = int_eq(i149, -9223372036854775808)
+2123: i155 = int_rshift(i149, 3)
+2130: i157 = int_lshift(i155, 3)
+2137: i159 = int_xor(i149, 8)
+2144: i161 = int_rshift(i159, 63)
+2148: i162 = int_ne(i157, i149)
+2161: i163 = int_and(i161, i162)
+2164: i164 = int_add(i155, i163)
+2167: setfield_gc(p118, i149, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2178: i165 = int_is_zero(i101)
+2181: guard_false(i165, descr=<Guard0xafac740>) [i101, i164, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+2187: i167 = int_rshift(i164, 63)
+2194: i168 = int_xor(i164, i167)
+2200: i169 = int_sub(i168, i167)
+2203: i171 = int_rshift(i101, 63)
+2210: i172 = int_xor(i101, i171)
+2216: i173 = int_sub(i172, i171)
+2219: i174 = int_is_zero(i173)
+2222: guard_false(i174, descr=<Guard0xa8e5d18>) [i101, i164, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+2228: i176 = int_eq(i169, -9223372036854775808)
+2250: i178 = int_eq(i173, -1)
+2263: i179 = int_and(i176, i178)
+2266: guard_false(i179, descr=<Guard0xa8e5d60>) [i101, i164, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+2275: i181 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i169, i173, descr=<Calli 8 ii EF=0 OS=14>)
+2321: i183 = int_lt(i164, 0)
+2329: guard_false(i183, descr=<Guard0xafac7a0>) [i173, i181, i169, i164, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(rnd (vector-length CellRef(trees)))')
debug_merge_point(0, 0, '(let ([if0 (if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)]) (if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))))')
debug_merge_point(0, 0, '(if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)')
debug_merge_point(0, 0, '(if (integer? n5234) (< n5234 16384) #f)')
debug_merge_point(0, 0, '(< n5234 16384)')
debug_merge_point(0, 0, '(if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234)))')
debug_merge_point(0, 0, '(CellRef(random14) n5234)')
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+2335: i184 = getfield_gc_i(p114, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2340: i185 = int_is_true(i184)
+2343: guard_true(i185, descr=<Guard0xa8e5da8>) [i173, i181, i169, i164, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
+2349: i186 = int_is_true(i149)
+2352: guard_true(i186, descr=<Guard0xa8e5df0>) [i173, i181, i169, i164, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
+2358: i187 = int_mul_ovf(i184, i149)
+2362: guard_no_overflow(descr=<Guard0xa8e5e38>) [i173, i181, i169, i164, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+2368: i188 = getfield_gc_i(p125, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2372: i189 = int_add_ovf(i187, i188)
+2375: guard_no_overflow(descr=<Guard0xa8e5e80>) [i173, i181, i169, i164, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+2381: i190 = getfield_gc_i(p130, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2392: i191 = int_is_zero(i190)
+2395: guard_false(i191, descr=<Guard0xa8e5ec8>) [i173, i181, i169, i164, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
+2401: i193 = int_rshift(i189, 63)
+2408: i194 = int_xor(i189, i193)
+2414: i195 = int_sub(i194, i193)
+2417: i197 = int_rshift(i190, 63)
+2424: i198 = int_xor(i190, i197)
+2427: i199 = int_sub(i198, i197)
+2430: i200 = int_is_zero(i199)
+2433: guard_false(i200, descr=<Guard0xa8e5f10>) [i173, i181, i169, i164, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
+2439: i202 = int_eq(i195, -9223372036854775808)
+2461: i204 = int_eq(i199, -1)
+2474: i205 = int_and(i202, i204)
+2477: guard_false(i205, descr=<Guard0xa8e5f58>) [i173, i181, i169, i164, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
+2486: i207 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i195, i199, descr=<Calli 8 ii EF=0 OS=14>)
+2525: i209 = int_lt(i189, 0)
+2529: guard_false(i209, descr=<Guard0xafac800>) [i199, i207, i195, i189, i181, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+2535: i211 = int_eq(i207, -9223372036854775808)
+2535: i213 = int_rshift(i207, 3)
+2542: i215 = int_lshift(i213, 3)
+2549: i217 = int_xor(i207, 8)
+2556: i219 = int_rshift(i217, 63)
+2560: i220 = int_ne(i215, i207)
+2572: i221 = int_and(i219, i220)
+2575: i222 = int_add(i213, i221)
+2578: i224 = int_rshift(i222, 63)
+2585: i225 = int_xor(i222, i224)
+2591: i226 = int_sub(i225, i224)
+2594: i228 = int_eq(i226, -9223372036854775808)
+2616: i229 = int_and(i228, i178)
+2623: setfield_gc(p118, i207, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2627: guard_false(i229, descr=<Guard0xafac860>) [i173, i226, i229, i222, i181, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
+2636: i231 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i226, i173, descr=<Calli 8 ii EF=0 OS=14>)
+2669: i233 = int_lt(i222, 0)
+2673: guard_false(i233, descr=<Guard0xafac8c0>) [i173, i231, i226, i222, None, i181, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([depth (rnd treeHeight)][path (rnd pathBits)][tn1 (vector-ref CellRef(trees) index1)][tn2 (vector-ref CellRef(trees) index2)]) (let ([doloop5533 (lambda (i5535) (let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))))]) (doloop5533 0) (if (even? CellRef(path)) (let ([tmp (vector-ref CellRef(tn1) 0)][AppRand53 (vector-ref CellRef(tn2) 0)]) (vector-set! CellRef(tn1) 0 AppRand53) (vector-set! CellRef(tn2) 0 tmp)) (let ([tmp5560 (vector-ref CellRef(tn1) 1)][AppRand54 (vector-ref CellRef(tn2) 1)]) (vector-set! CellRef(tn1) 1 AppRand54) (vector-set! CellRef(tn2) 1 tmp5560))) (let ([SetBang7 (+ CellRef(actuallyMut) 2)]) (set! actuallyMut SetBang7))))')
debug_merge_point(0, 0, '(rnd treeHeight)')
+2679: p234 = getfield_gc_r(p91, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_4 56 pure>)
+2690: guard_nonnull_class(p234, ConstClass(W_Fixnum), descr=<Guard0xafac920>) [i173, i231, i226, i222, None, i181, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
+2709: i236 = getfield_gc_i(p234, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(let ([if0 (if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)]) (if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))))')
debug_merge_point(0, 0, '(if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)')
debug_merge_point(0, 0, '(if (integer? n5234) (< n5234 16384) #f)')
debug_merge_point(0, 0, '(< n5234 16384)')
+2713: i238 = int_lt(i236, 16384)
+2720: guard_true(i238, descr=<Guard0xa8e5fa0>) [i173, i231, i226, i222, None, i181, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234)))')
debug_merge_point(0, 0, '(CellRef(random14) n5234)')
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+2726: i239 = getfield_gc_i(p114, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2731: i240 = int_is_true(i239)
+2734: guard_true(i240, descr=<Guard0xafb0020>) [i173, i231, i226, i222, None, i181, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
+2740: i241 = int_is_true(i207)
+2748: guard_true(i241, descr=<Guard0xafb0068>) [i173, i231, i226, i222, None, i181, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
+2754: i242 = int_mul_ovf(i239, i207)
+2762: guard_no_overflow(descr=<Guard0xafb00b0>) [i173, i231, i226, i222, None, i181, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+2768: i243 = getfield_gc_i(p125, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2772: i244 = int_add_ovf(i242, i243)
+2775: guard_no_overflow(descr=<Guard0xafb00f8>) [i173, i231, i226, i222, None, i181, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+2781: i245 = getfield_gc_i(p130, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2785: i246 = int_is_zero(i245)
+2788: guard_false(i246, descr=<Guard0xafb0140>) [i173, i231, i226, i222, None, i181, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
+2794: i248 = int_rshift(i244, 63)
+2801: i249 = int_xor(i244, i248)
+2807: i250 = int_sub(i249, i248)
+2810: i252 = int_rshift(i245, 63)
+2817: i253 = int_xor(i245, i252)
+2820: i254 = int_sub(i253, i252)
+2823: i255 = int_is_zero(i254)
+2826: guard_false(i255, descr=<Guard0xafb0188>) [i173, i231, i226, i222, None, i181, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
+2832: i257 = int_eq(i250, -9223372036854775808)
+2855: i259 = int_eq(i254, -1)
+2868: i260 = int_and(i257, i259)
+2871: guard_false(i260, descr=<Guard0xafb01d0>) [i173, i231, i226, i222, None, i181, None, i71, p65, p63, p91, i101, p108, p67, None, None, None, None, None, None]
+2880: i262 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i250, i254, descr=<Calli 8 ii EF=0 OS=14>)
+2923: i264 = int_lt(i244, 0)
+2927: guard_false(i264, descr=<Guard0xafac980>) [i254, i262, i250, i244, i231, i236, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+2933: i266 = int_eq(i262, -9223372036854775808)
+2933: i268 = int_rshift(i262, 3)
+2940: i270 = int_lshift(i268, 3)
+2947: i272 = int_xor(i262, 8)
+2954: i274 = int_rshift(i272, 63)
+2958: i275 = int_ne(i270, i262)
+2971: i276 = int_and(i274, i275)
+2974: i277 = int_add(i268, i276)
+2977: setfield_gc(p118, i262, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2981: i278 = int_is_zero(i236)
+2989: guard_false(i278, descr=<Guard0xafac9e0>) [i236, i277, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+2995: i280 = int_rshift(i277, 63)
+3002: i281 = int_xor(i277, i280)
+3008: i282 = int_sub(i281, i280)
+3011: i284 = int_rshift(i236, 63)
+3022: i285 = int_xor(i236, i284)
+3032: i286 = int_sub(i285, i284)
+3035: i287 = int_is_zero(i286)
+3038: guard_false(i287, descr=<Guard0xafb0218>) [i236, i277, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3044: i289 = int_eq(i282, -9223372036854775808)
+3067: i291 = int_eq(i286, -1)
+3080: i292 = int_and(i289, i291)
+3083: guard_false(i292, descr=<Guard0xafb0260>) [i236, i277, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3092: i294 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i282, i286, descr=<Calli 8 ii EF=0 OS=14>)
+3128: i296 = int_lt(i277, 0)
+3132: guard_false(i296, descr=<Guard0xafaca40>) [i286, i294, i282, i277, None, i231, i236, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(rnd pathBits)')
+3138: p297 = getfield_gc_r(p91, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_0 24 pure>)
+3149: guard_nonnull_class(p297, ConstClass(W_Fixnum), descr=<Guard0xafacaa0>) [i286, i294, i282, i277, None, i231, i236, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3168: i299 = getfield_gc_i(p297, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(let ([if0 (if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)]) (if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))))')
debug_merge_point(0, 0, '(if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)')
debug_merge_point(0, 0, '(if (integer? n5234) (< n5234 16384) #f)')
debug_merge_point(0, 0, '(< n5234 16384)')
+3172: i301 = int_lt(i299, 16384)
+3179: guard_false(i301, descr=<Guard0xafb02a8>) [i286, i294, i282, i277, None, i231, i236, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234)))')
debug_merge_point(0, 0, '(let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))')
debug_merge_point(0, 0, '(CellRef(random14) 16384)')
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+3185: i302 = getfield_gc_i(p114, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3190: i303 = int_is_true(i302)
+3193: guard_true(i303, descr=<Guard0xafb02f0>) [i286, i294, i282, i277, None, i231, i236, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3199: i304 = int_is_true(i262)
+3207: guard_true(i304, descr=<Guard0xafb0338>) [i286, i294, i282, i277, None, i231, i236, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3213: i305 = int_mul_ovf(i302, i262)
+3221: guard_no_overflow(descr=<Guard0xafb0380>) [i286, i294, i282, i277, None, i231, i236, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+3227: i306 = getfield_gc_i(p125, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3231: i307 = int_add_ovf(i305, i306)
+3234: guard_no_overflow(descr=<Guard0xafb03c8>) [i286, i294, i282, i277, None, i231, i236, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+3240: i308 = getfield_gc_i(p130, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3244: i309 = int_is_zero(i308)
+3247: guard_false(i309, descr=<Guard0xafb0410>) [i286, i294, i282, i277, None, i231, i236, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3253: i311 = int_rshift(i307, 63)
+3260: i312 = int_xor(i307, i311)
+3266: i313 = int_sub(i312, i311)
+3269: i315 = int_rshift(i308, 63)
+3276: i316 = int_xor(i308, i315)
+3279: i317 = int_sub(i316, i315)
+3282: i318 = int_is_zero(i317)
+3285: guard_false(i318, descr=<Guard0xafb0458>) [i286, i294, i282, i277, None, i231, i236, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3291: i320 = int_eq(i313, -9223372036854775808)
+3314: i322 = int_eq(i317, -1)
+3327: i323 = int_and(i320, i322)
+3330: guard_false(i323, descr=<Guard0xafb04a0>) [i286, i294, i282, i277, None, i231, i236, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3339: i325 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i313, i317, descr=<Calli 8 ii EF=0 OS=14>)
+3371: i327 = int_lt(i307, 0)
+3375: guard_false(i327, descr=<Guard0xafacb00>) [i317, i325, i313, i307, i294, i299, p96, None, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+3381: i329 = int_eq(i325, -9223372036854775808)
+3381: i331 = int_rshift(i325, 3)
+3388: i333 = int_lshift(i331, 3)
+3395: i335 = int_xor(i325, 8)
+3402: i337 = int_rshift(i335, 63)
+3406: i338 = int_ne(i333, i325)
+3418: i339 = int_and(i337, i338)
+3421: i340 = int_add(i331, i339)
+3424: i342 = int_rshift(i340, 63)
+3431: i343 = int_xor(i340, i342)
+3437: i344 = int_sub(i343, i342)
+3440: i346 = int_eq(i344, -9223372036854775808)
+3440: i348 = int_and(i344, 16383)
+3450: setfield_gc(p118, i325, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3454: i350 = int_lt(i340, 0)
+3458: guard_false(i350, descr=<Guard0xafacb60>) [i348, i344, i340, i294, i299, p96, None, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(CellRef(loop) n5234 AppRand5 n5234)')
+3464: p351 = getfield_gc_r(p96, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+3476: p352 = getfield_gc_r(p351, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3480: guard_nonnull_class(p352, 16478072, descr=<Guard0xafacbc0>) [i348, i344, i340, i294, i299, p96, None, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3498: p354 = getfield_gc_r(p352, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+3509: guard_value(p354, ConstPtr(ptr355), descr=<Guard0xafb04e8>) [i348, i344, i340, i294, i299, p96, None, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(if (zero? q) (remainder r n5224) (let ([AppRand2 (* 16384 r)][AppRand3 (CellRef(random14) 16384)]) (let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)))) from (CellRef(loop) n5234 AppRand5 n5234)')
debug_merge_point(0, 0, '(let ([AppRand2 (* 16384 r)][AppRand3 (CellRef(random14) 16384)]) (let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)))')
debug_merge_point(0, 0, '(* 16384 r)')
+3518: i356 = int_is_true(i348)
+3521: guard_true(i356, descr=<Guard0xafb0530>) [i348, i344, i340, i294, i299, p96, None, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3527: i358 = int_lshift(i348, 14)
debug_merge_point(0, 0, '(CellRef(random14) 16384)')
+3534: p359 = getfield_gc_r(p352, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+3538: p360 = getfield_gc_r(p359, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3542: guard_nonnull_class(p360, 16478824, descr=<Guard0xafacc20>) [i348, i344, i340, i294, i299, p96, None, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3561: p362 = getfield_gc_r(p360, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+3565: guard_value(p362, ConstPtr(ptr363), descr=<Guard0xafb0578>) [i348, i344, i340, i294, i299, p96, None, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3578: p364 = getfield_gc_r(p352, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+3578: p365 = getfield_gc_r(p360, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_2 40 pure>)
+3582: p366 = getfield_gc_r(p365, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3586: guard_nonnull_class(p366, ConstClass(W_CellIntegerStrategy), descr=<Guard0xafacc80>) [i348, i344, i340, i294, i299, p96, None, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3604: i368 = getfield_gc_i(p366, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3608: p369 = getfield_gc_r(p360, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_3 48 pure>)
+3619: p370 = getfield_gc_r(p369, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3630: guard_nonnull_class(p370, ConstClass(W_CellIntegerStrategy), descr=<Guard0xafacce0>) [i348, i344, i340, i294, i299, p96, None, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3649: i372 = getfield_gc_i(p370, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3660: i373 = int_is_true(i368)
+3663: guard_true(i373, descr=<Guard0xafb05c0>) [i348, i344, i340, i294, i299, p96, None, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3669: i374 = int_is_true(i372)
+3672: guard_true(i374, descr=<Guard0xafb0608>) [i348, i344, i340, i294, i299, p96, None, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3678: i375 = int_mul_ovf(i368, i372)
+3682: guard_no_overflow(descr=<Guard0xafb0650>) [i348, i344, i340, i294, i299, p96, None, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+3688: p376 = getfield_gc_r(p360, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_1 32 pure>)
+3706: p377 = getfield_gc_r(p376, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3717: guard_nonnull_class(p377, ConstClass(W_CellIntegerStrategy), descr=<Guard0xafacd40>) [i348, i344, i340, i294, i299, p96, None, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3735: i379 = getfield_gc_i(p377, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3746: i380 = int_add_ovf(i375, i379)
+3749: guard_no_overflow(descr=<Guard0xafb0698>) [i348, i344, i340, i294, i299, p96, None, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+3755: p381 = getfield_gc_r(p360, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_0 24 pure>)
+3759: p382 = getfield_gc_r(p381, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3770: guard_nonnull_class(p382, ConstClass(W_CellIntegerStrategy), descr=<Guard0xafacda0>) [i348, i344, i340, i294, i299, p96, None, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3789: i384 = getfield_gc_i(p382, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3793: i385 = int_is_zero(i384)
+3796: guard_false(i385, descr=<Guard0xafb06e0>) [i348, i344, i340, i294, i299, p96, None, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3802: i387 = int_rshift(i380, 63)
+3813: i388 = int_xor(i380, i387)
+3830: i389 = int_sub(i388, i387)
+3833: i391 = int_rshift(i384, 63)
+3840: i392 = int_xor(i384, i391)
+3843: i393 = int_sub(i392, i391)
+3846: i394 = int_is_zero(i393)
+3849: guard_false(i394, descr=<Guard0xafb0728>) [i348, i344, i340, i294, i299, p96, None, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3855: i396 = int_eq(i389, -9223372036854775808)
+3877: i398 = int_eq(i393, -1)
+3897: i399 = int_and(i396, i398)
+3900: guard_false(i399, descr=<Guard0xafb0770>) [i348, i344, i340, i294, i299, p96, None, i231, None, None, i181, None, i71, p65, p63, p91, None, p108, p67, None, None, None, None, None, None]
+3909: i401 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i389, i393, descr=<Calli 8 ii EF=0 OS=14>)
+3951: i403 = int_lt(i380, 0)
+3959: guard_false(i403, descr=<Guard0xaface00>) [i393, i401, i389, i380, i348, p352, i358, p360, i294, i299, None, None, i231, None, None, i181, None, i71, p65, p63, p91, None, None, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+3965: i405 = int_eq(i401, -9223372036854775808)
+3965: i407 = int_rshift(i401, 3)
+3972: i409 = int_lshift(i407, 3)
+3979: i411 = int_xor(i401, 8)
+3986: i413 = int_rshift(i411, 63)
+3990: i414 = int_ne(i409, i401)
+4003: i415 = int_and(i413, i414)
+4006: i416 = int_add(i407, i415)
+4009: i418 = int_rshift(i416, 63)
+4016: i419 = int_xor(i416, i418)
+4022: i420 = int_sub(i419, i418)
+4025: i422 = int_eq(i420, -9223372036854775808)
+4025: i424 = int_and(i420, 16383)
+4035: setfield_gc(p370, i401, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+4046: i426 = int_lt(i416, 0)
+4050: guard_false(i426, descr=<Guard0xaface60>) [i424, i420, i416, i348, p352, i358, p360, i294, i299, None, None, i231, None, None, i181, None, i71, p65, p63, p91, None, None, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)) from (remainder (quotient CellRef(x) 8) n)')
debug_merge_point(0, 0, '(+ AppRand2 AppRand3)')
+4056: i427 = int_add(i358, i424)
debug_merge_point(0, 0, '(CellRef(loop) (quotient q 16384) AppRand4 n5224)')
+4062: p428 = getfield_gc_r(p352, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+4073: p429 = getfield_gc_r(p428, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+4077: guard_nonnull_class(p429, 16478072, descr=<Guard0xafacec0>) [i424, i420, i416, i348, p352, i358, p360, i294, i299, None, None, i231, None, None, i181, None, i71, p65, p63, p91, None, None, p67, None, None, None, None, None, None]
+4096: i432 = int_rshift(i299, 14)
+4107: i434 = int_lshift(i432, 14)
+4107: i436 = int_xor(i299, 16384)
+4107: i437 = int_ne(i434, i299)
+4107: p438 = getfield_gc_r(p429, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+4118: guard_value(p438, ConstPtr(ptr439), descr=<Guard0xafb07b8>) [i424, i420, i416, i348, p352, i358, p360, i294, i299, None, None, i231, None, None, i181, None, i71, p65, p63, p91, None, None, p67, None, None, None, None, None, None]
+4131: i440 = instance_ptr_eq(p352, p429)
+4134: guard_true(i440, descr=<Guard0xafb0800>) [i424, i420, i416, i348, p352, i358, p360, i294, i299, None, None, i231, None, None, i181, None, i71, p65, p63, p91, None, None, p67, None, None, None, None, None, None]
debug_merge_point(0, 0, '(if (zero? q) (remainder r n5224) (let ([AppRand2 (* 16384 r)][AppRand3 (CellRef(random14) 16384)]) (let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)))) from (CellRef(loop) (quotient q 16384) AppRand4 n5224)')
+4140: p441 = new_with_vtable(descr=<SizeDescr 16>)
+4190: p442 = new_with_vtable(descr=<SizeDescr 48>)
+4201: p443 = new_with_vtable(descr=<SizeDescr 32>)
+4212: setfield_gc(p443, p91, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+4216: setfield_gc(p443, i181, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_0 16 pure>)
+4227: setfield_gc(p443, i231, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_1 24 pure>)
+4238: p444 = new_with_vtable(descr=<SizeDescr 40>)
+4249: setfield_gc(p444, p67, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+4260: p445 = new_with_vtable(descr=<SizeDescr 24>)
+4272: setfield_gc(p445, p65, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+4283: setfield_gc(p445, i71, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+4294: setfield_gc(p444, p445, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+4298: setfield_gc(p444, p63, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+4309: setfield_gc(p444, ConstPtr(ptr446), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+4320: setfield_gc(p441, i299, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+4331: setfield_gc(p442, p443, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+4335: setfield_gc(p442, p444, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+4339: setfield_gc(p442, p67, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+4350: setfield_gc(p442, ConstPtr(ptr447), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+4354: setfield_gc(p442, i294, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+4365: jump(p352, i432, i427, p441, p442, p359, p360, p365, p366, p369, p370, i401, p376, p377, p381, p382, p67, p428, p429, descr=TargetToken(139976055980144))
+4576: --end of the loop--
[3e4c20ee494c9f1] jit-log-opt-bridge}
[3e4c20ee5eee566] {jit-backend
[3e4c20ee601b2e7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b160 +0  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8CA205000048FF0425B09A59034883FE017206813EE0C500000F85000000004C8B7E104C8B2D95FDFFFF4D39EF0F85000000004D8B7E084983FF000F8E000000004D8B661841813C24C8EB02000F85000000004D8B66104D8B442410418138F08C00000F8500000000498B78084883FF020F8E00000000498B7818813FC8EB02000F8500000000498B78104C8B4720418138601400000F8500000000498B58084C8B8530010000498B48084883F9020F8E00000000498B48188139C8EB02000F8500000000498B48104C8995380100004C8B512041813A601400000F8500000000498B4A084839CB0F8E000000004983FF010F8E000000004D8B7C241841813FF08C00000F85000000004D8B67084983FC020F8E000000004D8B671841813C24C8EB02000F85000000004D8B67104D8B7C242041813F601400000F85000000004D8B67084939CC0F8E000000004C8B66204D8B7C24084983FF01720741813FE0C500000F85000000004D8B67104D39EC0F85000000004C39FE0F85000000004C8B7F1041813FF08C00000F85000000004D8B6F084983FD020F8E000000004D8B6F1841817D00C8EB02000F85000000004D8B6F104D8B7D2041813F601400000F85000000004D8B6F084939CD0F8F000000004C8B6F1841817D00F08C00000F85000000004D8B7D084983FF020F8E000000004D8B7D1841813FC8EB02000F85000000004D8B7D104D8B6F2041817D00601400000F85000000004D8B7D084939CF0F8F00000000488B9538010000488B4208F64704810F85920300004C8947184883F80172068138900F00000F85000000004D8B4108418138B01E01000F8500000000498B7808813F10BD00000F85000000004C8B7710488B355AFCFFFF4939F60F8500000000488B77284C8B76084983FE01720741813EF08900000F8500000000498B76084883C6010F8000000000488B4F404C8B79084983FF01720741813FF08C00000F8500000000498B4F084885C90F84000000004D89CF4D89C54989FC4889D3488985400100004889F74889CE41BBB0CBAE0041FFD3498B742448498946084883FE017206813EF0C200000F8500000000498B47104C8B7610488B0DECFBFFFF4939CE0F8500000000488B4E204C8B35E8FBFFFF4C39F10F8500000000F24C0F2AF066450F2EF67B044883FD000F850000000066450F28EE49BBF8AFC1B64E7F0000F2450F583366450F2EEE7B044883FD000F84000000004989F74989C649BB10B0C1B64E7F0000F2410F100366410F28CD41BBB0FD410041FFD3488BB424B00000004863763066440F28E8F20F5CC049BB18B0C1B64E7F000066410F2E037B044883FD000F85000000004885F60F850000000066450F2EED7B044883FD000F850000000049BB50B0C1B64E7F000066450F2E2B0F820000000066450F2E6B187B044883FD000F8300000000F2490F2CC54883E8010F8000000000498B4F184885C90F84000000004885C00F8400000000480FAFC10F8000000000498B4D104829C10F8000000000498B4424204883F80172068138601400000F85000000004C8B48084C39C90F8E000000004D8B4C24184983F9017207418139E0C500000F8500000000498B41104C8B0515FBFFFF4C39C00F85000000004D8B41184D85C00F84000000004D89CD4D89C74989CE4889CF4C89C641BB70CBAE0041FFD34989C1490FAFC74C39F00F85000000004D8B4520488B0DECFAFFFF4939C80F85000000004983F9010F8C00000000488B0C25F091F900488D5160483B14251092F9000F87E000000048891425F091F90048C701D0C80000488D512048C702101100004C8D6A2849C74500B01E01004D8965084D8975104C8B35A2FAFFFF4C8971104C8B359FFAFFFF4C8971084C8BB5400100004C8972084C8949184C896A1048895A18488B1D85FAFFFF48895A2048898D30010000BB02000000BE02000000488995380100004C89B54001000049BBD012C0B64E7F000041FFE3666666662E0F1F84000000000048C7442408FFFFFF0049BB28ADC1B64E7F00004C895D204D8D9BC8D5FCFF41FFD3E938FAFFFF78105749BBF081BEB64E7F000041FFD37904804FFF01E953FCFFFF49BB50B1C1B64E7F00004C895D204D8D9BA0D9FCFF41FFD3E90BFFFFFFFF35ACF7FFFF49BB38ADC1B64E7F000041534D8D9BC8D2FCFF41FFE3FF35A0F7FFFF49BB48ADC1B64E7F000041534D8D9BB8D2FCFF41FFE3FF358CF7FFFF49BB58ADC1B64E7F000041534D8D9BA8D2FCFF41FFE3FF3578F7FFFF49BB68ADC1B64E7F000041534D8D9B98D2FCFF41FFE3FF3564F7FFFF49BB78ADC1B64E7F000041534D8D9B88D2FCFF41FFE3FF3550F7FFFF49BB88ADC1B64E7F000041534D8D9B78D2FCFF41FFE3FF353CF7FFFF49BB98ADC1B64E7F000041534D8D9B68D2FCFF41FFE3FF3528F7FFFF49BBA8ADC1B64E7F000041534D8D9B58D2FCFF41FFE3FF3514F7FFFF49BBB8ADC1B64E7F000041534D8D9B48D2FCFF41FFE3FF3500F7FFFF49BBC8ADC1B64E7F000041534D8D9B38D2FCFF41FFE3FF35ECF6FFFF49BBD8ADC1B64E7F000041534D8D9B28D2FCFF41FFE3FF35D8F6FFFF49BBE8ADC1B64E7F000041534D8D9B18D2FCFF41FFE3FF35C4F6FFFF49BBF8ADC1B64E7F000041534D8D9B08D2FCFF41FFE3FF35B0F6FFFF49BB08AEC1B64E7F000041534D8D9BF8D1FCFF41FFE3FF359CF6FFFF49BB18AEC1B64E7F000041534D8D9BE8D1FCFF41FFE3FF3588F6FFFF49BB28AEC1B64E7F000041534D8D9BD8D1FCFF41FFE3FF3574F6FFFF49BB38AEC1B64E7F000041534D8D9BC8D1FCFF41FFE3FF3560F6FFFF49BB48AEC1B64E7F000041534D8D9BB8D1FCFF41FFE3FF354CF6FFFF49BB58AEC1B64E7F000041534D8D9BA8D1FCFF41FFE3FF3538F6FFFF49BB68AEC1B64E7F000041534D8D9B98D1FCFF41FFE3FF3524F6FFFF49BB78AEC1B64E7F000041534D8D9B88D1FCFF41FFE3FF3510F6FFFF49BB88AEC1B64E7F000041534D8D9B78D1FCFF41FFE3FF35FCF5FFFF49BB98AEC1B64E7F000041534D8D9B68D1FCFF41FFE3FF35E8F5FFFF49BBA8AEC1B64E7F000041534D8D9B58D1FCFF41FFE3FF35D4F5FFFF49BBB8AEC1B64E7F000041534D8D9B48D1FCFF41FFE3FF35C0F5FFFF49BBC8AEC1B64E7F000041534D8D9B38D1FCFF41FFE3FF35ACF5FFFF49BBD8AEC1B64E7F000041534D8D9B28D1FCFF41FFE3FF3598F5FFFF49BBE8AEC1B64E7F000041534D8D9B18D1FCFF41FFE3FF3584F5FFFF49BBF8AEC1B64E7F000041534D8D9B08D1FCFF41FFE3FF3570F5FFFF49BB08AFC1B64E7F000041534D8D9BF8D0FCFF41FFE3FF355CF5FFFF49BB18AFC1B64E7F000041534D8D9BE8D0FCFF41FFE3FF3548F5FFFF49BB28AFC1B64E7F000041534D8D9BD8D0FCFF41FFE3FF3534F5FFFF49BB38AFC1B64E7F000041534D8D9BC8D0FCFF41FFE3FF3520F5FFFF49BB48AFC1B64E7F000041534D8D9BB8D0FCFF41FFE3FF350CF5FFFF49BB58AFC1B64E7F000041534D8D9BA8D0FCFF41FFE3FF3500F5FFFF49BB68AFC1B64E7F000041534D8D9B98D0FCFF41FFE3FF35ECF4FFFF49BB78AFC1B64E7F000041534D8D9B88D0FCFF41FFE3FF35D8F4FFFF49BB88AFC1B64E7F000041534D8D9B78D0FCFF41FFE3FF35C4F4FFFF49BB98AFC1B64E7F000041534D8D9B68D0FCFF41FFE3FF35B0F4FFFF49BBA8AFC1B64E7F000041534D8D9B58D0FCFF41FFE3FF359CF4FFFF49BBB8AFC1B64E7F000041534D8D9B48D0FCFF41FFE3FF3590F4FFFF49BBC8AFC1B64E7F000041534D8D9B38D0FCFF41FFE3FF3584F4FFFF49BBD8AFC1B64E7F000041534D8D9B28D0FCFF41FFE3FF3570F4FFFF49BBE8AFC1B64E7F000041534D8D9B18D0FCFF41FFE3FF355CF4FFFF49BB00B0C1B64E7F000041534D8D9B00D0FCFF41FFE3FF3548F4FFFF49BB20B0C1B64E7F000041534D8D9BF0D4FCFF41FFE3FF3534F4FFFF49BB30B0C1B64E7F000041534D8D9BE0D4FCFF41FFE3FF3520F4FFFF49BB40B0C1B64E7F000041534D8D9BD0D4FCFF41FFE3FF350CF4FFFF4D8D5B0841534D8D9BB8D4FCFF41FFE3FF35FEF3FFFF49BB70B0C1B64E7F000041534D8D9BA0D4FCFF41FFE3FF35EAF3FFFF49BB80B0C1B64E7F000041534D8D9B90D4FCFF41FFE3FF35D6F3FFFF49BB90B0C1B64E7F000041534D8D9B80D4FCFF41FFE3FF35C2F3FFFF49BBA0B0C1B64E7F000041534D8D9B70D4FCFF41FFE3FF35AEF3FFFF49BBB0B0C1B64E7F000041534D8D9B60D4FCFF41FFE3FF359AF3FFFF49BBC0B0C1B64E7F000041534D8D9B50D4FCFF41FFE3FF3586F3FFFF49BBD0B0C1B64E7F000041534D8D9B40D4FCFF41FFE3FF3572F3FFFF49BBE0B0C1B64E7F000041534D8D9B30D4FCFF41FFE3FF355EF3FFFF49BBF0B0C1B64E7F000041534D8D9B20D4FCFF41FFE3FF3552F3FFFF49BB00B1C1B64E7F000041534D8D9B10D4FCFF41FFE3FF353EF3FFFF49BB10B1C1B64E7F000041534D8D9B00D4FCFF41FFE3FF352AF3FFFF49BB20B1C1B64E7F000041534D8D9BE0CEFCFF41FFE3FF351EF3FFFF49BB30B1C1B64E7F000041534D8D9BD0CEFCFF41FFE3FF350AF3FFFF49BB40B1C1B64E7F000041534D8D9BC0CEFCFF41FFE3
[3e4c20ee602bfe0] jit-backend-dump}
[3e4c20ee603b1cf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b3a4 +0  34000000
[3e4c20ee603c71d] jit-backend-dump}
[3e4c20ee60409f7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b955 +0  34000000
[3e4c20ee6041af8] jit-backend-dump}
[3e4c20ee6044fe6] {jit-backend-addr
bridge out of Guard 0x44761d0 has address 0x7f4eb6c1b3a0 to 0x7f4eb6c1b950
       gc table: 0x7f4eb6c1b160
    jump target: 0x7f4eb6c1b3a0
         resops: 0x7f4eb6c1b3ae
       failures: 0x7f4eb6c1b950
            end: 0x7f4eb6c1c08c
[3e4c20ee60473f3] jit-backend-addr}
[3e4c20ee604aad1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b3c4 +0  E6050000
[3e4c20ee604b9e5] jit-backend-dump}
[3e4c20ee604ee81] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b3d8 +0  EE050000
[3e4c20ee604fbf8] jit-backend-dump}
[3e4c20ee60532a2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b3e6 +0  18060000
[3e4c20ee6053f99] jit-backend-dump}
[3e4c20ee6057191] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b3f8 +0  22060000
[3e4c20ee6057e76] jit-backend-dump}
[3e4c20ee605b05e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b40e +0  28060000
[3e4c20ee605bd49] jit-backend-dump}
[3e4c20ee605eefb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b41c +0  36060000
[3e4c20ee605fbc7] jit-backend-dump}
[3e4c20ee6062dc2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b42c +0  42060000
[3e4c20ee6063a9a] jit-backend-dump}
[3e4c20ee6066c67] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b441 +0  49060000
[3e4c20ee6067936] jit-backend-dump}
[3e4c20ee606aaf7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b45a +0  4C060000
[3e4c20ee606b7cc] jit-backend-dump}
[3e4c20ee606ea2c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b46a +0  58060000
[3e4c20ee606f6e0] jit-backend-dump}
[3e4c20ee60728cf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b486 +0  58060000
[3e4c20ee607359e] jit-backend-dump}
[3e4c20ee607675f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b493 +0  67060000
[3e4c20ee607741b] jit-backend-dump}
[3e4c20ee607a629] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b49d +0  79060000
[3e4c20ee607b2f8] jit-backend-dump}
[3e4c20ee607e4e7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b4af +0  83060000
[3e4c20ee607f1b0] jit-backend-dump}
[3e4c20ee6082377] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b4bd +0  91060000
[3e4c20ee6083064] jit-backend-dump}
[3e4c20ee6086256] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b4cf +0  9B060000
[3e4c20ee6086f25] jit-backend-dump}
[3e4c20ee608a108] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b4e5 +0  A1060000
[3e4c20ee608ade0] jit-backend-dump}
[3e4c20ee608e00c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b4f2 +0  B0060000
[3e4c20ee608ece7] jit-backend-dump}
[3e4c20ee6091ecd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b50e +0  B0060000
[3e4c20ee6092b9f] jit-backend-dump}
[3e4c20ee6095d8e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b51b +0  BF060000
[3e4c20ee6096a57] jit-backend-dump}
[3e4c20ee6099c1b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b524 +0  D2060000
[3e4c20ee609a8de] jit-backend-dump}
[3e4c20ee609daba] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b535 +0  DD060000
[3e4c20ee609e79f] jit-backend-dump}
[3e4c20ee60a197e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b543 +0  EB060000
[3e4c20ee60a2650] jit-backend-dump}
[3e4c20ee60a57f3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b555 +0  F5060000
[3e4c20ee60a649d] jit-backend-dump}
[3e4c20ee60a9655] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b56a +0  FC060000
[3e4c20ee60aa324] jit-backend-dump}
[3e4c20ee60ad4f1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b577 +0  0B070000
[3e4c20ee60ae1ba] jit-backend-dump}
[3e4c20ee60b13b2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b589 +0  15070000
[3e4c20ee60b206c] jit-backend-dump}
[3e4c20ee60b5285] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b597 +0  23070000
[3e4c20ee60b5f48] jit-backend-dump}
[3e4c20ee60b9134] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b5a8 +0  2E070000
[3e4c20ee60b9e06] jit-backend-dump}
[3e4c20ee60bcfcd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b5be +0  34070000
[3e4c20ee60bdc74] jit-backend-dump}
[3e4c20ee60c0e57] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b5cb +0  43070000
[3e4c20ee60c1b20] jit-backend-dump}
[3e4c20ee60c4d18] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b5f6 +0  34070000
[3e4c20ee60c59e4] jit-backend-dump}
[3e4c20ee60c8bdc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b607 +0  3F070000
[3e4c20ee60c98b1] jit-backend-dump}
[3e4c20ee60cca84] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b617 +0  4B070000
[3e4c20ee60cd74a] jit-backend-dump}
[3e4c20ee60d08ff] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b62b +0  53070000
[3e4c20ee60d15ce] jit-backend-dump}
[3e4c20ee60d47ee] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b646 +0  54070000
[3e4c20ee60d54c9] jit-backend-dump}
[3e4c20ee60d8699] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b654 +0  62070000
[3e4c20ee60d9365] jit-backend-dump}
[3e4c20ee60dc573] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b66f +0  63070000
[3e4c20ee60dd288] jit-backend-dump}
[3e4c20ee60e050d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b67c +0  72070000
[3e4c20ee60e11dc] jit-backend-dump}
[3e4c20ee60e439a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b6b9 +0  51070000
[3e4c20ee60e5063] jit-backend-dump}
[3e4c20ee60e8270] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b6d1 +0  55070000
[3e4c20ee60e8f48] jit-backend-dump}
[3e4c20ee60ec134] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b6e5 +0  5D070000
[3e4c20ee60ece03] jit-backend-dump}
[3e4c20ee60f0023] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b6fb +0  63070000
[3e4c20ee60f0cf5] jit-backend-dump}
[3e4c20ee60f3ee7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b720 +0  5A070000
[3e4c20ee60f4bb0] jit-backend-dump}
[3e4c20ee60f7d92] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b773 +0  23070000
[3e4c20ee60f8aa8] jit-backend-dump}
[3e4c20ee60fbd0b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b77c +0  36070000
[3e4c20ee60fca20] jit-backend-dump}
[3e4c20ee60ffc74] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b78d +0  41070000
[3e4c20ee610097d] jit-backend-dump}
[3e4c20ee6103b69] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b7a2 +0  48070000
[3e4c20ee610488b] jit-backend-dump}
[3e4c20ee6107a89] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b7b4 +0  4C070000
[3e4c20ee61087a4] jit-backend-dump}
[3e4c20ee610b9d6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b7c3 +0  59070000
[3e4c20ee610c6f2] jit-backend-dump}
[3e4c20ee610f8e7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b7d0 +0  68070000
[3e4c20ee6110624] jit-backend-dump}
[3e4c20ee611380d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b7d9 +0  7B070000
[3e4c20ee61144d3] jit-backend-dump}
[3e4c20ee61176a0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b7e3 +0  8D070000
[3e4c20ee6118372] jit-backend-dump}
[3e4c20ee611b558] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b7f0 +0  9C070000
[3e4c20ee611c217] jit-backend-dump}
[3e4c20ee611f3d5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b807 +0  A1070000
[3e4c20ee61200a1] jit-backend-dump}
[3e4c20ee612326b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b814 +0  B0070000
[3e4c20ee6123f34] jit-backend-dump}
[3e4c20ee6127117] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b82c +0  B4070000
[3e4c20ee6127de9] jit-backend-dump}
[3e4c20ee612afa7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b840 +0  BC070000
[3e4c20ee612bc6d] jit-backend-dump}
[3e4c20ee612ee65] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b84d +0  CB070000
[3e4c20ee612fb43] jit-backend-dump}
[3e4c20ee6132d0d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b875 +0  BF070000
[3e4c20ee61339dc] jit-backend-dump}
[3e4c20ee6136bd7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b889 +0  C7070000
[3e4c20ee61378a6] jit-backend-dump}
[3e4c20ee613aaf4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1b893 +0  D9070000
[3e4c20ee613b7d2] jit-backend-dump}
[3e4c20ee613ec84] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c07e34 +0  68350100
[3e4c20ee613f965] jit-backend-dump}
[3e4c20ee6143ddf] jit-backend}
[3e4c20ee6147b53] {jit-log-opt-bridge
# bridge out of Guard 0x44761d0 with 276 ops
[p0, p1, p2, i3, p4, p5, p6, p7]
+598: guard_nonnull_class(p0, 16482208, descr=<Guard0xafacf20>) [p0, p5, p1, p2, i3, p6, p4, p7]
+616: p9 = getfield_gc_r(p0, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+627: guard_value(p9, ConstPtr(ptr10), descr=<Guard0xafb0ba8>) [p0, p5, p1, p2, i3, p6, p4, p7]
+636: p11 = getfield_gc_r(p2, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([AppRand34 (vector-ref full 0)]) (let ([canGoLeft (if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)][AppRand38 (vector-ref full 1)]) (let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))))) from (CellRef(replaceTreeWork) full5448 partial5450 dir5452)')
debug_merge_point(0, 0, '(vector-ref full 0)')
+636: guard_not_invalidated(descr=<Guard0xafb0bf0>) [p0, p5, p1, p2, i3, p6, p4, p7]
+636: i12 = getfield_gc_i(p1, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+640: i14 = int_lt(0, i12)
+644: guard_true(i14, descr=<Guard0xafb0c38>) [p0, p5, p1, p2, i3, p6, p4, p7]
+650: p15 = getfield_gc_r(p1, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+654: guard_class(p15, 16622984, descr=<Guard0xafb0c80>) [p0, p5, p1, p2, i3, p6, p4, p7]
+668: p17 = getfield_gc_r(p1, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+672: p19 = getarrayitem_gc_r(p17, 0, descr=<ArrayP 8>)
+677: guard_class(p19, ConstClass(W_Vector), descr=<Guard0xafb0cc8>) [p0, p5, p1, p2, i3, p6, p4, p7]
debug_merge_point(0, 0, '(let ([canGoLeft (if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)][AppRand38 (vector-ref full 1)]) (let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))))')
debug_merge_point(0, 0, '(if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)')
+690: i21 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed10.inst_vals_fixed_0 24 pure>)
debug_merge_point(0, 0, '(let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37)))')
debug_merge_point(0, 0, 'partial')
+690: p22 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(vector-ref full 0)')
debug_merge_point(0, 0, '(let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))')
debug_merge_point(0, 0, '(vector-ref AppRand35 2)')
+690: i23 = getfield_gc_i(p19, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+694: i25 = int_lt(2, i23)
+698: guard_true(i25, descr=<Guard0xafb0d10>) [p0, p5, p1, p2, i3, p6, p4, p7]
+704: p26 = getfield_gc_r(p19, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+708: guard_class(p26, 16622984, descr=<Guard0xafb0d58>) [p0, p5, p1, p2, i3, p6, p4, p7]
+720: p28 = getfield_gc_r(p19, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+724: p30 = getarrayitem_gc_r(p28, 2, descr=<ArrayP 8>)
+728: guard_class(p30, ConstClass(W_Fixnum), descr=<Guard0xafb0da0>) [p0, p5, p1, p2, i3, p6, p4, p7]
+741: i32 = getfield_gc_i(p30, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(vector-ref partial 2)')
+745: i33 = getfield_gc_i(p5, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+756: i35 = int_lt(2, i33)
+760: guard_true(i35, descr=<Guard0xafb0de8>) [p0, p5, p1, p2, i3, p6, p4, p7]
+766: p36 = getfield_gc_r(p5, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+770: guard_class(p36, 16622984, descr=<Guard0xafb0e30>) [p0, p5, p1, p2, i3, p6, p4, p7]
+782: p38 = getfield_gc_r(p5, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+786: p40 = getarrayitem_gc_r(p38, 2, descr=<ArrayP 8>)
+797: guard_class(p40, ConstClass(W_Fixnum), descr=<Guard0xafb0e78>) [p0, p5, p1, p2, i3, p6, p4, p7]
+810: i42 = getfield_gc_i(p40, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(> AppRand36 AppRand37)')
+814: i43 = int_gt(i32, i42)
+817: guard_true(i43, descr=<Guard0xafb0ec0>) [p0, p5, p1, p2, i3, p6, p4, p7]
debug_merge_point(0, 0, '(vector-ref full 1)')
+823: i45 = int_lt(1, i12)
+827: guard_true(i45, descr=<Guard0xafb0f08>) [p0, p5, p1, p2, i3, p6, p4, p7]
+833: p47 = getarrayitem_gc_r(p17, 1, descr=<ArrayP 8>)
+838: guard_class(p47, ConstClass(W_Vector), descr=<Guard0xafb0f50>) [p0, p5, p1, p2, i3, p6, p4, p7]
debug_merge_point(0, 0, '(let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial)))))))')
debug_merge_point(0, 0, '(if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)')
debug_merge_point(0, 0, '(let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41)))')
debug_merge_point(0, 0, 'partial')
debug_merge_point(0, 0, '(vector-ref full 1)')
debug_merge_point(0, 0, '(let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))')
debug_merge_point(0, 0, '(vector-ref AppRand39 2)')
+851: i49 = getfield_gc_i(p47, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+855: i51 = int_lt(2, i49)
+859: guard_true(i51, descr=<Guard0xafb0f98>) [p0, p5, p1, p2, i3, p6, p4, p7]
+865: p52 = getfield_gc_r(p47, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+869: guard_class(p52, 16622984, descr=<Guard0xafb0fe0>) [p0, p5, p1, p2, i3, p6, p4, p7]
+883: p54 = getfield_gc_r(p47, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+887: p56 = getarrayitem_gc_r(p54, 2, descr=<ArrayP 8>)
+892: guard_class(p56, ConstClass(W_Fixnum), descr=<Guard0xafb1028>) [p0, p5, p1, p2, i3, p6, p4, p7]
+905: i58 = getfield_gc_i(p56, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(vector-ref partial 2)')
debug_merge_point(0, 0, '(> AppRand40 AppRand41)')
+909: i59 = int_gt(i58, i42)
+912: guard_true(i59, descr=<Guard0xafb1070>) [p0, p5, p1, p2, i3, p6, p4, p7]
debug_merge_point(0, 0, '(let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))')
debug_merge_point(0, 0, '(if canGoLeft canGoRight #f)')
debug_merge_point(0, 0, 'canGoRight')
debug_merge_point(0, 0, '(if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial)))))')
debug_merge_point(0, 0, '(if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir))))')
debug_merge_point(0, 0, '(let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir)))')
debug_merge_point(0, 0, '(vector-ref full 0)')
debug_merge_point(0, 0, '(CellRef(replaceTreeWork) AppRand42 partial (not dir))')
+918: p60 = getfield_gc_r(p0, descr=<FieldP pycket.small_list.W_Closure1AsEnvSize2Fixed10.inst_w_val1 32 pure>)
+922: p61 = getfield_gc_r(p60, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+927: guard_nonnull_class(p61, 16482208, descr=<Guard0xafacf80>) [p0, p5, p1, p2, i3, p6, p4, p7]
+946: p63 = getfield_gc_r(p61, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+950: guard_value(p63, ConstPtr(ptr64), descr=<Guard0xafb10b8>) [p0, p5, p1, p2, i3, p6, p4, p7]
+959: i65 = instance_ptr_eq(p0, p61)
+962: guard_true(i65, descr=<Guard0xafb1100>) [p0, p5, p1, p2, i3, p6, p4, p7]
debug_merge_point(0, 0, '(let ([AppRand34 (vector-ref full 0)]) (let ([canGoLeft (if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)][AppRand38 (vector-ref full 1)]) (let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))))) from (CellRef(replaceTreeWork) AppRand42 partial (not dir))')
debug_merge_point(0, 0, '(vector-ref full 0)')
+968: p67 = getarrayitem_gc_r(p28, 0, descr=<ArrayP 8>)
+972: guard_class(p67, ConstClass(W_Vector), descr=<Guard0xafb1148>) [p0, p5, p1, p2, i3, p6, p4, p7]
debug_merge_point(0, 0, '(let ([canGoLeft (if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)][AppRand38 (vector-ref full 1)]) (let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))))')
debug_merge_point(0, 0, '(if (not (eq? AppRand34 null)) (let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))) #f)')
debug_merge_point(0, 0, '(let ([partial partial][AppRand35 (vector-ref full 0)]) (let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37)))')
debug_merge_point(0, 0, 'partial')
debug_merge_point(0, 0, '(vector-ref full 0)')
debug_merge_point(0, 0, '(let ([AppRand36 (vector-ref AppRand35 2)][AppRand37 (vector-ref partial 2)]) (> AppRand36 AppRand37))')
debug_merge_point(0, 0, '(vector-ref AppRand35 2)')
+985: i69 = getfield_gc_i(p67, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+989: i71 = int_lt(2, i69)
+993: guard_true(i71, descr=<Guard0xafb1190>) [p0, p5, p1, p2, i3, p6, p4, p7]
+999: p72 = getfield_gc_r(p67, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1003: guard_class(p72, 16622984, descr=<Guard0xafb11d8>) [p0, p5, p1, p2, i3, p6, p4, p7]
+1017: p74 = getfield_gc_r(p67, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1021: p76 = getarrayitem_gc_r(p74, 2, descr=<ArrayP 8>)
+1025: guard_class(p76, ConstClass(W_Fixnum), descr=<Guard0xafb1220>) [p0, p5, p1, p2, i3, p6, p4, p7]
+1038: i78 = getfield_gc_i(p76, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(vector-ref partial 2)')
debug_merge_point(0, 0, '(> AppRand36 AppRand37)')
+1042: i79 = int_gt(i78, i42)
+1045: guard_false(i79, descr=<Guard0xafb1268>) [p0, p5, p1, p2, i3, p6, p4, p7]
debug_merge_point(0, 0, '(vector-ref full 1)')
+1051: p81 = getarrayitem_gc_r(p28, 1, descr=<ArrayP 8>)
+1055: guard_class(p81, ConstClass(W_Vector), descr=<Guard0xafb12b0>) [p0, p5, p1, p2, i3, p6, p4, p7]
debug_merge_point(0, 0, '(let ([canGoRight (if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)]) (let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial)))))))')
debug_merge_point(0, 0, '(if (not (eq? AppRand38 null)) (let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))) #f)')
debug_merge_point(0, 0, '(let ([partial partial][AppRand39 (vector-ref full 1)]) (let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41)))')
debug_merge_point(0, 0, 'partial')
debug_merge_point(0, 0, '(vector-ref full 1)')
debug_merge_point(0, 0, '(let ([AppRand40 (vector-ref AppRand39 2)][AppRand41 (vector-ref partial 2)]) (> AppRand40 AppRand41))')
debug_merge_point(0, 0, '(vector-ref AppRand39 2)')
+1069: i83 = getfield_gc_i(p81, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1073: i85 = int_lt(2, i83)
+1077: guard_true(i85, descr=<Guard0xafb12f8>) [p0, p5, p1, p2, i3, p6, p4, p7]
+1083: p86 = getfield_gc_r(p81, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1087: guard_class(p86, 16622984, descr=<Guard0xafb1340>) [p0, p5, p1, p2, i3, p6, p4, p7]
+1100: p88 = getfield_gc_r(p81, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1104: p90 = getarrayitem_gc_r(p88, 2, descr=<ArrayP 8>)
+1108: guard_class(p90, ConstClass(W_Fixnum), descr=<Guard0xafb1388>) [p0, p5, p1, p2, i3, p6, p4, p7]
+1122: i92 = getfield_gc_i(p90, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(vector-ref partial 2)')
debug_merge_point(0, 0, '(> AppRand40 AppRand41)')
+1126: i93 = int_gt(i92, i42)
+1129: guard_false(i93, descr=<Guard0xafb13d0>) [p0, p5, p1, p2, i3, p6, p4, p7]
debug_merge_point(0, 0, '(let ([if5 (if canGoLeft canGoRight #f)]) (if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))))')
debug_merge_point(0, 0, '(if canGoLeft canGoRight #f)')
debug_merge_point(0, 0, '#f')
debug_merge_point(0, 0, '(if if5 (if dir (let ([AppRand42 (vector-ref full 0)]) (CellRef(replaceTreeWork) AppRand42 partial (not dir))) (let ([AppRand43 (vector-ref full 1)]) (CellRef(replaceTreeWork) AppRand43 partial (not dir)))) (let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial)))))')
debug_merge_point(0, 0, '(let ([if6 (if (not canGoLeft) (not canGoRight) #f)]) (if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial))))')
debug_merge_point(0, 0, '(if (not canGoLeft) (not canGoRight) #f)')
debug_merge_point(0, 0, '(not canGoRight)')
debug_merge_point(0, 0, '(if if6 (if dir (vector-set! full 0 partial) (vector-set! full 1 partial)) (if (not canGoLeft) (vector-set! full 0 partial) (vector-set! full 1 partial)))')
debug_merge_point(0, 0, '(if dir (vector-set! full 0 partial) (vector-set! full 1 partial))')
debug_merge_point(0, 0, '(vector-set! full 1 partial)')
+1135: p94 = getfield_gc_r(p6, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1156: setarrayitem_gc(p28, 1, p5, descr=<ArrayP 8>)
+1160: guard_nonnull_class(p94, ConstClass(ForwardLink), descr=<Guard0xafacfe0>) [p94, p4, p6, None, None, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([AppRand49 (+ CellRef(where) 1)]) (set! where (modulo AppRand49 (vector-length CellRef(trees))))) from (vector-set! full 1 partial)')
+1178: p98 = getfield_gc_r(p4, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1182: guard_class(p98, 16504944, descr=<Guard0xafb1418>) [p94, p4, p6, None, None, None, None, None, None, None]
+1195: p100 = getfield_gc_r(p98, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(+ CellRef(where) 1)')
+1199: guard_class(p100, 16479952, descr=<Guard0xafb1460>) [p94, p4, p6, None, None, None, None, None, None, None]
+1211: p102 = getfield_gc_r(p100, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1222: guard_value(p102, ConstPtr(ptr103), descr=<Guard0xafb14a8>) [p94, p4, p6, None, None, None, None, None, None, None]
+1231: p104 = getfield_gc_r(p100, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize7.inst__vals_2 40 pure>)
+1235: p105 = getfield_gc_r(p104, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1239: guard_nonnull_class(p105, ConstClass(W_CellIntegerStrategy), descr=<Guard0xafad040>) [p94, p4, p6, None, None, None, None, None, None, None]
+1258: i107 = getfield_gc_i(p105, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1262: i109 = int_add_ovf(i107, 1)
+1266: guard_no_overflow(descr=<Guard0xafb14f0>) [p94, p4, p6, None, None, None, None, None, None, None]
debug_merge_point(0, 0, '(set! where (modulo AppRand49 (vector-length CellRef(trees))))')
+1272: p110 = getfield_gc_r(p100, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize7.inst__vals_5 64 pure>)
+1276: p111 = getfield_gc_r(p110, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1280: guard_nonnull_class(p111, ConstClass(W_Vector), descr=<Guard0xafad0a0>) [p94, p4, p6, None, None, None, None, None, None, None]
+1299: i113 = getfield_gc_i(p111, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1303: i114 = int_is_zero(i113)
+1306: guard_false(i114, descr=<Guard0xafb1538>) [p94, p4, p6, None, None, None, None, None, None, None]
+1312: i116 = int_eq(i113, -1)
+1312: i118 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i109, i113, descr=<Calli 8 ii EF=0 OS=14>)
debug_merge_point(0, 0, '(let ([AppRand50 (heightToBytes h5494)]) (let ([AppRand51 (- partial5490 AppRand50)]) (loop5488 AppRand51)))')
debug_merge_point(0, 0, '(heightToBytes h5494)')
+1346: p119 = getfield_gc_r(p100, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize7.inst__vals_6 72 pure>)
+1351: setfield_gc(p105, i118, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1355: guard_nonnull_class(p119, 16481456, descr=<Guard0xafad100>) [p4, p119, p98, p94, None, None, None, None, p6, None, None]
+1373: i121 = getfield_gc_i(p4, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1377: p122 = getfield_gc_r(p119, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1388: guard_value(p122, ConstPtr(ptr123), descr=<Guard0xafb1580>) [p4, p119, p98, p94, None, None, None, None, p6, None, None]
+1397: p124 = getfield_gc_r(p100, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([AppRand20 (heightToNodes h5299)]) (* bytes/node AppRand20))')
debug_merge_point(0, 0, '(heightToNodes h5299)')
+1397: p125 = getfield_gc_r(p119, descr=<FieldP pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_w_val0 32 pure>)
+1408: guard_value(p125, ConstPtr(ptr126), descr=<Guard0xafad160>) [p4, p119, p98, p94, None, None, None, None, p6, None, None]
+1417: p127 = getfield_gc_r(p119, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(- (expt 2 h) 1)')
+1417: f128 = cast_int_to_float(i121)
+1422: i129 = float_ne(f128, f128)
+1433: guard_false(i129, descr=<Guard0xafb15c8>) [p4, p119, p98, p94, None, None, None, None, p6, None, None]
+1439: f131 = float_add(f128, 11235582092889474423308157442431404585112356118389416079589380072358292237843810195794279832650471001320007117491962084853674360550901038905802964414967132773610493339054092829768888725077880882465817684505312860552384417646403930092119569408801702322709406917786643639996702871154982269052209770601514008576.000000)
+1459: i132 = float_eq(f131, f128)
+1470: guard_false(i132, descr=<Guard0xafb1610>) [p4, p119, p98, p94, None, None, None, None, p6, None, None]
+1476: f135 = call_f(ConstClass(ccall_pow), 2.000000, f128, descr=<Callf 8 ff EF=2>)
+1511: i138 = call_i(ConstClass(_ll_1_threadlocalref_get__INTLlT_Signed), 48, descr=<Calli 4 i EF=2 OS=5>)
+1523: f139 = float_sub(f135, f135)
+1532: i141 = float_eq(f139, 0.000000)
+1553: guard_true(i141, descr=<Guard0xafad1c0>) [i138, f139, f135, i121, p119, p98, p94, None, None, None, None, p6, None, None]
+1559: i142 = int_is_true(i138)
+1562: guard_false(i142, descr=<Guard0xafb1658>) [i138, f139, f135, i121, p119, p98, p94, None, None, None, None, p6, None, None]
+1568: i143 = float_ne(f135, f135)
+1579: guard_false(i143, descr=<Guard0xafb16a0>) [i138, f139, f135, i121, p119, p98, p94, None, None, None, None, p6, None, None]
+1585: i145 = float_ge(f135, -9223372036854775808.000000)
+1600: guard_true(i145, descr=<Guard0xafb16e8>) [i138, f139, f135, i121, p119, p98, p94, None, None, None, None, p6, None, None]
+1606: i147 = float_lt(f135, 9223372036854775808.000000)
+1618: guard_true(i147, descr=<Guard0xafb1730>) [i138, f139, f135, i121, p119, p98, p94, None, None, None, None, p6, None, None]
+1624: i148 = cast_float_to_int(f135)
+1629: i150 = int_sub_ovf(i148, 1)
+1633: guard_no_overflow(descr=<Guard0xafb1778>) [i138, f139, f135, i121, p119, p98, p94, None, None, None, None, p6, None, None]
debug_merge_point(0, 0, '(* bytes/node AppRand20)')
+1639: i151 = getfield_gc_i(p119, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_vals_fixed_1 24 pure>)
+1643: i152 = int_is_true(i151)
+1646: guard_true(i152, descr=<Guard0xafb17c0>) [i138, f139, f135, i121, p119, p98, p94, None, None, None, None, p6, None, None]
+1652: i153 = int_is_true(i150)
+1655: guard_true(i153, descr=<Guard0xafb1808>) [i138, f139, f135, i121, p119, p98, p94, None, None, None, None, p6, None, None]
+1661: i154 = int_mul_ovf(i151, i150)
+1665: guard_no_overflow(descr=<Guard0xafb1850>) [i138, f139, f135, i121, p119, p98, p94, None, None, None, None, p6, None, None]
debug_merge_point(0, 0, '(let ([AppRand51 (- partial5490 AppRand50)]) (loop5488 AppRand51)) from (* bytes/node AppRand20)')
debug_merge_point(0, 0, '(- partial5490 AppRand50)')
+1671: i155 = getfield_gc_i(p98, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1675: i156 = int_sub_ovf(i155, i154)
+1678: guard_no_overflow(descr=<Guard0xafb1898>) [i138, f139, f135, i121, p119, p98, p94, None, None, None, None, p6, None, None]
debug_merge_point(0, 0, '(loop5488 AppRand51)')
debug_merge_point(0, 0, '(let ([if8 (> partial5490 INSIGNIFICANT)]) (if if8 (let ([h5494 (bytesToHeight partial5490)]) (let ([newTree (makeTree h5494)][AppRand48 (vector-ref CellRef(trees) CellRef(where))]) (CellRef(replaceTree) AppRand48 newTree) (let ([AppRand49 (+ CellRef(where) 1)]) (set! where (modulo AppRand49 (vector-length CellRef(trees))))) (let ([AppRand50 (heightToBytes h5494)]) (let ([AppRand51 (- partial5490 AppRand50)]) (loop5488 AppRand51))))) (void))) from (loop5488 AppRand51)')
debug_merge_point(0, 0, '(> partial5490 INSIGNIFICANT)')
+1684: p157 = getfield_gc_r(p100, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize7.inst__vals_1 32 pure>)
+1689: guard_nonnull_class(p157, ConstClass(W_Fixnum), descr=<Guard0xafad220>) [i138, f139, f135, i121, p119, p98, p94, None, None, None, None, p6, None, None]
+1707: i159 = getfield_gc_i(p157, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1711: i160 = int_gt(i156, i159)
+1714: guard_true(i160, descr=<Guard0xafb18e0>) [i138, f139, f135, i121, p119, p98, p94, None, None, None, None, p6, None, None]
debug_merge_point(0, 0, '(if if8 (let ([h5494 (bytesToHeight partial5490)]) (let ([newTree (makeTree h5494)][AppRand48 (vector-ref CellRef(trees) CellRef(where))]) (CellRef(replaceTree) AppRand48 newTree) (let ([AppRand49 (+ CellRef(where) 1)]) (set! where (modulo AppRand49 (vector-length CellRef(trees))))) (let ([AppRand50 (heightToBytes h5494)]) (let ([AppRand51 (- partial5490 AppRand50)]) (loop5488 AppRand51))))) (void))')
debug_merge_point(0, 0, '(let ([h5494 (bytesToHeight partial5490)]) (let ([newTree (makeTree h5494)][AppRand48 (vector-ref CellRef(trees) CellRef(where))]) (CellRef(replaceTree) AppRand48 newTree) (let ([AppRand49 (+ CellRef(where) 1)]) (set! where (modulo AppRand49 (vector-length CellRef(trees))))) (let ([AppRand50 (heightToBytes h5494)]) (let ([AppRand51 (- partial5490 AppRand50)]) (loop5488 AppRand51)))))')
debug_merge_point(0, 0, '(bytesToHeight partial5490)')
+1720: p161 = getfield_gc_r(p100, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize7.inst__vals_0 24 pure>)
+1725: guard_nonnull_class(p161, 16482208, descr=<Guard0xafad280>) [i138, f139, f135, i121, p119, p98, p94, None, None, None, None, p6, None, None]
+1744: p163 = getfield_gc_r(p161, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1755: guard_value(p163, ConstPtr(ptr164), descr=<Guard0xafb1928>) [i138, f139, f135, i121, p119, p98, p94, None, None, None, None, p6, None, None]
debug_merge_point(0, 0, '(let ([AppRand21 (/ bytes bytes/node)]) (nodesToHeight AppRand21))')
debug_merge_point(0, 0, '(/ bytes bytes/node)')
+1764: i165 = getfield_gc_i(p161, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed10.inst_vals_fixed_0 24 pure>)
+1768: i166 = int_is_zero(i165)
+1771: guard_false(i166, descr=<Guard0xafb1970>) [i138, f139, f135, i121, p119, p98, p94, None, None, None, None, p6, None, None]
+1777: i168 = int_eq(i165, -1)
+1777: i170 = call_i(ConstClass(ll_int_py_div__Signed_Signed), i156, i165, descr=<Calli 8 ii EF=0 OS=12>)
+1801: i171 = int_mul(i170, i165)
+1808: i172 = int_eq(i171, i156)
+1811: guard_true(i172, descr=<Guard0xafad2e0>) [i156, i171, i165, i170, p100, p161, None, None, None, p94, None, None, None, None, p6, None, None]
debug_merge_point(0, 0, '(nodesToHeight AppRand21)')
+1817: p173 = getfield_gc_r(p161, descr=<FieldP pycket.small_list.W_Closure1AsEnvSize2Fixed10.inst_w_val1 32 pure>)
+1828: guard_value(p173, ConstPtr(ptr174), descr=<Guard0xafad340>) [i156, i171, i165, i170, p100, p161, None, None, None, p94, None, None, None, None, p6, None, None]
+1837: p175 = getfield_gc_r(p161, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([doloop (lambda (h5278 n5280) (let ([AppRand17 (+ n5280 n5280 -1)]) (let ([if1 (> AppRand17 nodes)]) (if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))))))]) (doloop 1 1))')
debug_merge_point(0, 0, '(lambda (h5278 n5280) (let ([AppRand17 (+ n5280 n5280 -1)]) (let ([if1 (> AppRand17 nodes)]) (if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))))))')
debug_merge_point(0, 0, '(doloop 1 1)')
debug_merge_point(0, 0, '(let ([AppRand17 (+ n5280 n5280 -1)]) (let ([if1 (> AppRand17 nodes)]) (if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))))) from (doloop 1 1)')
debug_merge_point(0, 0, '(+ n5280 n5280 -1)')
debug_merge_point(0, 0, '(let ([if1 (> AppRand17 nodes)]) (if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))))')
debug_merge_point(0, 0, '(> AppRand17 nodes)')
+1837: i177 = int_gt(1, i170)
+1841: guard_false(i177, descr=<Guard0xafb19b8>) [i156, i171, i165, i170, p100, p161, None, None, None, p94, None, None, None, None, p6, None, None]
debug_merge_point(0, 0, '(if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19)))')
debug_merge_point(0, 0, '(let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))')
debug_merge_point(0, 0, '(+ h5278 1)')
debug_merge_point(0, 0, '(+ n5280 n5280)')
debug_merge_point(0, 0, '(doloop AppRand18 AppRand19)')
debug_merge_point(0, 0, '(let ([AppRand17 (+ n5280 n5280 -1)]) (let ([if1 (> AppRand17 nodes)]) (if if1 (begin (void) (- h5278 1)) (let ([AppRand18 (+ h5278 1)][AppRand19 (+ n5280 n5280)]) (doloop AppRand18 AppRand19))))) from (doloop AppRand18 AppRand19)')
+1847: p178 = new_with_vtable(descr=<SizeDescr 32>)
+1888: p179 = new_with_vtable(descr=<SizeDescr 40>)
+1899: p180 = new_with_vtable(descr=<SizeDescr 24>)
+1911: setfield_gc(p180, p100, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1915: setfield_gc(p180, i156, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1926: setfield_gc(p178, ConstPtr(ptr181), descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1937: setfield_gc(p178, ConstPtr(ptr182), descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1941: setfield_gc(p179, p94, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1952: setfield_gc(p178, i170, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize1Fixed.inst_vals_fixed_0 24 pure>)
+1956: setfield_gc(p179, p180, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1960: setfield_gc(p179, p6, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1971: setfield_gc(p179, ConstPtr(ptr183), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+1975: jump(p178, 2, 2, p179, p94, i170, descr=TargetToken(139976082360544))
+2032: --end of the loop--
[3e4c20ee6239255] jit-log-opt-bridge}
[3e4c20ee8c6c949] {jit-backend
[3e4c20ee8d41cb0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1c280 +0  0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8CA203000048FF0425400805044983FF000F8C000000004D8B51204C8B05DDFEFFFF4D39C20F85000000004D8B41284D8B5110498B7118813E480E00000F8500000000488B5E084883FB017206813B900F00000F850000000041813A901A01000F8500000000498B5208813A20BA00000F8500000000488B4230488B48084883F90172068139F08C00000F8500000000498B42104883F8000F8C0000000048899D40010000488B59084839D80F8D000000004889B530010000488B7118813EC8EB02000F8500000000488B7110488B4CC6108139F08C00000F8500000000498B42184883F8000F8C000000004839D80F8D00000000488B5CC610813BF08C00000F8500000000488B42088138102001000F85000000004983F8000F8E000000004889FE4883E7014885FF0F8500000000488B79084883FF000F8E00000000488B7918813FC8EB02000F8500000000488B7910488B4F108139F08C00000F8500000000488B7B084883FF000F8E00000000488B7B18813FC8EB02000F8500000000488B7B10488B5F10813BF08C00000F85000000004989F648D1FE4989F748D1E64D89F44983F60249C1FE3F4C39E641BD00000000410F95C54D21F54D01FD4989CF4989D6488B0C25F091F900488D91E0000000483B14251092F9000F87EC01000048891425F091F90048C701A8B80000488D513848C702708700004C897A084C8D7A1049C707601400004D8947084D8D471049C700708700004D8D601049C70424F08900004D896C24084D8960084D8D6C241049C745007087000049895D08498D5D1048C703480E00004C8D632849C70424300E01004D897424084D897C24104D8944241849895424204D896C242848C741080000000048C741100000000048C741180000000048C741200000000048C741280000000048C741300000000048C743080000000048C743100000000048C743180000000048C74320000000004D8B77084C8963104C8BA5300100004C8963184C8BA5400100004C89630848894108488B05D7FCFFFF48894110488951184C8979204C8941284C896930488B05C4FCFFFF4889432049BB01000000000000804D39DE0F8C00000000498B40084883F80172068138F08900000F8500000000488B700849BB00000000000000C04C39DE0F8C0000000049BB00000000000000404C39DE0F8F0000000048898D3001000048899D380100004C89A5400100004C89BD480100004C89F74D89C1488985500100004889F14989D441BE0100000049BB701AC0B64E7F000041FFE366662E0F1F84000000000048C7442408FFFFFF0049BBA0C0C1B64E7F00004C895D204D8D9B50C2FCFF41FFD3E938FCFFFF49BB30C2C1B64E7F00004C895D204D8D9BC0C8FCFF41FFD3E9FFFDFFFFFF3507FBFFFF49BBB0C0C1B64E7F000041534D8D9B50BFFCFF41FFE3FF35FBFAFFFF49BBC0C0C1B64E7F000041534D8D9B40BFFCFF41FFE3FF35E7FAFFFF49BBD0C0C1B64E7F000041534D8D9B30BFFCFF41FFE3FF35D3FAFFFF49BBE0C0C1B64E7F000041534D8D9B20BFFCFF41FFE3FF35BFFAFFFF49BBF0C0C1B64E7F000041534D8D9B10BFFCFF41FFE3FF35ABFAFFFF49BB00C1C1B64E7F000041534D8D9B00BFFCFF41FFE3FF3597FAFFFF49BB10C1C1B64E7F000041534D8D9BF0BEFCFF41FFE3FF3583FAFFFF49BB20C1C1B64E7F000041534D8D9BE0BEFCFF41FFE3FF356FFAFFFF49BB30C1C1B64E7F000041534D8D9BD0BEFCFF41FFE3FF355BFAFFFF49BB40C1C1B64E7F000041534D8D9BC0BEFCFF41FFE3FF3547FAFFFF49BB50C1C1B64E7F000041534D8D9BB0BEFCFF41FFE3FF3533FAFFFF49BB60C1C1B64E7F000041534D8D9BA0BEFCFF41FFE3FF351FFAFFFF49BB70C1C1B64E7F000041534D8D9B90BEFCFF41FFE3FF350BFAFFFF49BB80C1C1B64E7F000041534D8D9B80BEFCFF41FFE3FF35F7F9FFFF49BB90C1C1B64E7F000041534D8D9B70BEFCFF41FFE3FF35E3F9FFFF49BBA0C1C1B64E7F000041534D8D9B60BEFCFF41FFE3FF35CFF9FFFF49BBB0C1C1B64E7F000041534D8D9B50BEFCFF41FFE3FF35BBF9FFFF49BBC0C1C1B64E7F000041534D8D9B40BEFCFF41FFE3FF35A7F9FFFF49BBD0C1C1B64E7F000041534D8D9B30BEFCFF41FFE3FF3593F9FFFF49BBE0C1C1B64E7F000041534D8D9B20BEFCFF41FFE3FF357FF9FFFF49BBF0C1C1B64E7F000041534D8D9B10BEFCFF41FFE3FF356BF9FFFF49BB00C2C1B64E7F000041534D8D9B00BEFCFF41FFE3FF3557F9FFFF49BB10C2C1B64E7F000041534D8D9BF0BDFCFF41FFE3FF3543F9FFFF49BB20C2C1B64E7F000041534D8D9BE0BDFCFF41FFE3FF353FF9FFFF49BB40C2C1B64E7F000041534D8D9BC0BDFCFF41FFE3FF352BF9FFFF49BB50C2C1B64E7F000041534D8D9BB0BDFCFF41FFE3FF3517F9FFFF49BB60C2C1B64E7F000041534D8D9BA0BDFCFF41FFE3FF3503F9FFFF49BB70C2C1B64E7F000041534D8D9B90BDFCFF41FFE3
[3e4c20ee8d4cc42] jit-backend-dump}
[3e4c20ee8d64977] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1c384 +0  34000000
[3e4c20ee8d65fd2] jit-backend-dump}
[3e4c20ee8d6a49b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1c735 +0  34000000
[3e4c20ee8d6b332] jit-backend-dump}
[3e4c20ee8d6e984] {jit-backend-addr
bridge out of Guard 0x46b7850 has address 0x7f4eb6c1c380 to 0x7f4eb6c1c730
       gc table: 0x7f4eb6c1c280
    jump target: 0x7f4eb6c1c380
         resops: 0x7f4eb6c1c38e
       failures: 0x7f4eb6c1c730
            end: 0x7f4eb6c1ca83
[3e4c20ee8d71188] jit-backend-addr}
[3e4c20ee8d74a06] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1c39c +0  D3030000
[3e4c20ee8d7585c] jit-backend-dump}
[3e4c20ee8d78c7b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1c3b0 +0  DB030000
[3e4c20ee8d7995c] jit-backend-dump}
[3e4c20ee8d7cc9f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1c3c8 +0  DF030000
[3e4c20ee8d7d97a] jit-backend-dump}
[3e4c20ee8d80c5a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1c3de +0  E5030000
[3e4c20ee8d81936] jit-backend-dump}
[3e4c20ee8d8522e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1c3eb +0  10040000
[3e4c20ee8d85f19] jit-backend-dump}
[3e4c20ee8d8928f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1c3fb +0  1C040000
[3e4c20ee8d89f24] jit-backend-dump}
[3e4c20ee8d8d156] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1c415 +0  1E040000
[3e4c20ee8d8ddee] jit-backend-dump}
[3e4c20ee8d9100b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1c423 +0  2C040000
[3e4c20ee8d91c97] jit-backend-dump}
[3e4c20ee8d94f28] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1c437 +0  34040000
[3e4c20ee8d95be1] jit-backend-dump}
[3e4c20ee8d98e2f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1c44e +0  39040000
[3e4c20ee8d99ac1] jit-backend-dump}
[3e4c20ee8d9cd02] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1c463 +0  40040000
[3e4c20ee8d9d9a6] jit-backend-dump}
[3e4c20ee8da0c10] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1c471 +0  4E040000
[3e4c20ee8da18c0] jit-backend-dump}
[3e4c20ee8da4af8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1c47a +0  61040000
[3e4c20ee8da57a3] jit-backend-dump}
[3e4c20ee8da89e1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1c48b +0  6C040000
[3e4c20ee8da9679] jit-backend-dump}
[3e4c20ee8dac8c7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1c49b +0  78040000
[3e4c20ee8dad57a] jit-backend-dump}
[3e4c20ee8db07c8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1c4a5 +0  8A040000
[3e4c20ee8db146c] jit-backend-dump}
[3e4c20ee8db46cf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1c4b5 +0  96040000
[3e4c20ee8db5376] jit-backend-dump}
[3e4c20ee8db859c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1c4c3 +0  A4040000
[3e4c20ee8db922e] jit-backend-dump}
[3e4c20ee8dbc460] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1c4d3 +0  B0040000
[3e4c20ee8dbd10b] jit-backend-dump}
[3e4c20ee8dc03c6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1c4e7 +0  B8040000
[3e4c20ee8dc10c0] jit-backend-dump}
[3e4c20ee8dc435a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1c4f5 +0  C6040000
[3e4c20ee8dc4ffc] jit-backend-dump}
[3e4c20ee8dc8249] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1c505 +0  D2040000
[3e4c20ee8dc8edb] jit-backend-dump}
[3e4c20ee8dcc160] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1c519 +0  DA040000
[3e4c20ee8dccdfb] jit-backend-dump}
[3e4c20ee8dd00aa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1c69f +0  70030000
[3e4c20ee8dd0d83] jit-backend-dump}
[3e4c20ee8dd3ff8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1c6b5 +0  76030000
[3e4c20ee8dd4ca2] jit-backend-dump}
[3e4c20ee8dd7f02] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1c6cc +0  7B030000
[3e4c20ee8dd8ba4] jit-backend-dump}
[3e4c20ee8ddbdeb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1c6df +0  84030000
[3e4c20ee8ddca86] jit-backend-dump}
[3e4c20ee8de01b1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c162a5 +0  D7600000
[3e4c20ee8de0e5e] jit-backend-dump}
[3e4c20ee8de5c1e] jit-backend}
[3e4c20ee8de9951] {jit-log-opt-bridge
# bridge out of Guard 0x46b7850 with 126 ops
[p0, i1, i2, i3, i4, p5, p6]
+278: i8 = int_lt(i4, 0)
+282: guard_false(i8, descr=<Guard0xafad4c0>) [p0, i1, i2, i3, i4, p5, p6]
+288: p9 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+299: guard_value(p9, ConstPtr(ptr10), descr=<Guard0xafb1a90>) [p0, i1, i2, i3, i4, p5, p6]
+308: i11 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+312: p12 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+316: p13 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+320: guard_class(p13, 16435208, descr=<Guard0xafb1ad8>) [p0, i1, i2, i3, i4, p5, p6]
+332: p15 = getfield_gc_r(p13, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+336: guard_nonnull_class(p15, ConstClass(ForwardLink), descr=<Guard0xafad520>) [p0, i1, i2, i3, i4, p5, p6]
debug_merge_point(0, 0, '(vector-ref CellRef(trees) index1)')
+354: guard_not_invalidated(descr=<Guard0xafb1b20>) [p0, i1, i2, i3, i4, p5, p6]
+354: guard_class(p12, 16503888, descr=<Guard0xafb1b68>) [p0, i1, i2, i3, i4, p5, p6]
+367: p18 = getfield_gc_r(p12, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+371: guard_class(p18, 16479200, descr=<Guard0xafb1bb0>) [p0, i1, i2, i3, i4, p5, p6]
+383: p20 = getfield_gc_r(p18, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_3 48 pure>)
+387: p21 = getfield_gc_r(p20, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+391: guard_nonnull_class(p21, ConstClass(W_Vector), descr=<Guard0xafad580>) [p0, i1, i2, i3, i4, p5, p6]
+409: i23 = getfield_gc_i(p12, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_0 16 pure>)
+413: i25 = int_ge(i23, 0)
+417: guard_true(i25, descr=<Guard0xafb1bf8>) [p0, i1, i2, i3, i4, p5, p6]
+423: i26 = getfield_gc_i(p21, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+434: i27 = int_lt(i23, i26)
+437: guard_true(i27, descr=<Guard0xafb1c40>) [p0, i1, i2, i3, i4, p5, p6]
+443: p28 = getfield_gc_r(p21, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+454: guard_class(p28, 16622984, descr=<Guard0xafb1c88>) [p0, i1, i2, i3, i4, p5, p6]
+466: p30 = getfield_gc_r(p21, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+470: p31 = getarrayitem_gc_r(p30, i23, descr=<ArrayP 8>)
+475: guard_class(p31, ConstClass(W_Vector), descr=<Guard0xafb1cd0>) [p0, i1, i2, i3, i4, p5, p6]
debug_merge_point(0, 0, '(vector-ref CellRef(trees) index2)')
+487: i33 = getfield_gc_i(p12, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_1 24 pure>)
+491: i35 = int_ge(i33, 0)
+495: guard_true(i35, descr=<Guard0xafb1d18>) [p0, i1, i2, i3, i4, p5, p6]
+501: i36 = int_lt(i33, i26)
+504: guard_true(i36, descr=<Guard0xafb1d60>) [p0, i1, i2, i3, i4, p5, p6]
+510: p37 = getarrayitem_gc_r(p30, i33, descr=<ArrayP 8>)
+515: guard_class(p37, ConstClass(W_Vector), descr=<Guard0xafb1da8>) [p0, i1, i2, i3, i4, p5, p6]
debug_merge_point(0, 0, '(let ([doloop5533 (lambda (i5535) (let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))))]) (doloop5533 0) (if (even? CellRef(path)) (let ([tmp (vector-ref CellRef(tn1) 0)][AppRand53 (vector-ref CellRef(tn2) 0)]) (vector-set! CellRef(tn1) 0 AppRand53) (vector-set! CellRef(tn2) 0 tmp)) (let ([tmp5560 (vector-ref CellRef(tn1) 1)][AppRand54 (vector-ref CellRef(tn2) 1)]) (vector-set! CellRef(tn1) 1 AppRand54) (vector-set! CellRef(tn2) 1 tmp5560))) (let ([SetBang7 (+ CellRef(actuallyMut) 2)]) (set! actuallyMut SetBang7)))')
debug_merge_point(0, 0, '(lambda (i5535) (let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))))')
+527: p39 = getfield_gc_r(p18, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+531: guard_class(p39, 16505296, descr=<Guard0xafb1df0>) [p0, i1, i2, i3, i4, p5, p6]
debug_merge_point(0, 0, '(doloop5533 0)')
debug_merge_point(0, 0, '(let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))) from (doloop5533 0)')
debug_merge_point(0, 0, '(>= i5535 depth)')
+543: i42 = int_ge(0, i11)
+547: guard_false(i42, descr=<Guard0xafb1e38>) [p0, i1, i2, i3, i4, p5, p6]
debug_merge_point(0, 0, '(if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))')
debug_merge_point(0, 0, '(begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52)))')
debug_merge_point(0, 0, '(if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6))))')
+553: i44 = int_and(i2, 1)
+560: i45 = int_is_zero(i44)
+563: guard_true(i45, descr=<Guard0xafb1e80>) [p0, i1, i2, i3, i4, p5, p6]
debug_merge_point(0, 0, '(let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4)))')
debug_merge_point(0, 0, '(vector-ref CellRef(tn1) 0)')
+569: i46 = getfield_gc_i(p31, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+573: i48 = int_lt(0, i46)
+577: guard_true(i48, descr=<Guard0xafb1ec8>) [p0, i1, i2, i3, i4, p5, p6]
+583: p49 = getfield_gc_r(p31, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+587: guard_class(p49, 16622984, descr=<Guard0xafb1f10>) [p0, i1, i2, i3, i4, p5, p6]
+599: p51 = getfield_gc_r(p31, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+603: p53 = getarrayitem_gc_r(p51, 0, descr=<ArrayP 8>)
+607: guard_class(p53, ConstClass(W_Vector), descr=<Guard0xafb1f58>) [p0, i1, i2, i3, i4, p5, p6]
debug_merge_point(0, 0, '(set! tn1 SetBang3)')
debug_merge_point(0, 0, '(let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))')
debug_merge_point(0, 0, '(vector-ref CellRef(tn2) 0)')
+619: i55 = getfield_gc_i(p37, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+623: i57 = int_lt(0, i55)
+627: guard_true(i57, descr=<Guard0xafb1fa0>) [p0, i1, i2, i3, i4, p5, p6]
+633: p58 = getfield_gc_r(p37, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+637: guard_class(p58, 16622984, descr=<Guard0xba3e020>) [p0, i1, i2, i3, i4, p5, p6]
+649: p60 = getfield_gc_r(p37, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+653: p62 = getarrayitem_gc_r(p60, 0, descr=<ArrayP 8>)
+657: guard_class(p62, ConstClass(W_Vector), descr=<Guard0xba3e068>) [p0, i1, i2, i3, i4, p5, p6]
debug_merge_point(0, 0, '(set! tn2 SetBang4)')
debug_merge_point(0, 0, '(set! path (quotient CellRef(path) 2))')
+669: i65 = int_eq(i2, -9223372036854775808)
+669: i67 = int_rshift(i2, 1)
+675: i69 = int_lshift(i67, 1)
+681: i71 = int_xor(i2, 2)
+688: i73 = int_rshift(i71, 63)
+692: i74 = int_ne(i69, i2)
+705: i75 = int_and(i73, i74)
+708: i76 = int_add(i67, i75)
debug_merge_point(0, 0, '(let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))')
debug_merge_point(0, 0, '(+ i5535 1)')
debug_merge_point(0, 0, '(doloop5533 AppRand52)')
debug_merge_point(0, 0, '(let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))) from (doloop5533 AppRand52)')
+711: p77 = new_with_vtable(descr=<SizeDescr 56>)
+761: p78 = new_with_vtable(descr=<SizeDescr 16>)
+772: setfield_gc(p78, p53, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+776: p79 = new_with_vtable(descr=<SizeDescr 16>)
+787: setfield_gc(p79, i11, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+791: p80 = new_with_vtable(descr=<SizeDescr 16>)
+802: p81 = new_with_vtable(descr=<SizeDescr 16>)
+814: setfield_gc(p81, i76, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+819: setfield_gc(p80, p81, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+823: p82 = new_with_vtable(descr=<SizeDescr 16>)
+836: setfield_gc(p82, p62, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+840: p83 = new_with_vtable(descr=<SizeDescr 40>)
+851: p84 = new_with_vtable(descr=<SizeDescr 48>)
+863: setfield_gc(p84, p18, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+868: setfield_gc(p84, p79, descr=<FieldP rpython.tool.pairtype.ConsEnvSize4.inst__vals_0 16 pure>)
+873: setfield_gc(p84, p80, descr=<FieldP rpython.tool.pairtype.ConsEnvSize4.inst__vals_1 24 pure>)
+878: setfield_gc(p84, p78, descr=<FieldP rpython.tool.pairtype.ConsEnvSize4.inst__vals_2 32 pure>)
+883: setfield_gc(p84, p82, descr=<FieldP rpython.tool.pairtype.ConsEnvSize4.inst__vals_3 40 pure>)
+968: i85 = getfield_gc_i(p79, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+972: setfield_gc(p83, p84, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+976: setfield_gc(p83, p13, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+987: setfield_gc(p83, p15, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+998: setfield_gc(p77, p39, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1009: setfield_gc(p77, ConstPtr(ptr86), descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1013: setfield_gc(p77, p78, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_0 24 pure>)
+1017: setfield_gc(p77, p79, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_1 32 pure>)
+1021: setfield_gc(p77, p80, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_2 40 pure>)
+1025: setfield_gc(p77, p82, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_3 48 pure>)
+1036: setfield_gc(p83, ConstPtr(ptr87), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+1040: i89 = int_ge(i85, -9223372036854775807)
+1053: guard_true(i89, descr=<Guard0xafad5e0>) [p83, p77, None, None]
+1059: p91 = getfield_gc_r(p80, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1063: guard_nonnull_class(p91, ConstClass(W_CellIntegerStrategy), descr=<Guard0xafad640>) [p83, p77, None, None]
+1081: i93 = getfield_gc_i(p91, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1085: i95 = int_ge(i93, -4611686018427387904)
+1098: guard_true(i95, descr=<Guard0xafad6a0>) [p83, p77, None, None]
+1104: i97 = int_le(i93, 4611686018427387904)
+1117: guard_true(i97, descr=<Guard0xafad700>) [p83, p77, None, None]
+1123: jump(p77, 1, p83, p15, p79, i85, p80, p91, i93, p78, p82, descr=TargetToken(139976082360704))
+1200: --end of the loop--
[3e4c20ee8e5fc6f] jit-log-opt-bridge}
[3e4c20ee9f5b748] {jit-backend
[3e4c20eea035097] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1cca
[3e4c20eea040ec4] jit-backend-dump}
[3e4c20eea04e635] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1cde4 +0  34000000
[3e4c20eea04fd32] jit-backend-dump}
[3e4c20eea05402e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1d275 +0  34000000
[3e4c20eea05501c] jit-backend-dump}
[3e4c20eea05850a] {jit-backend-addr
bridge out of Guard 0x46b61d0 has address 0x7f4eb6c1cde0 to 0x7f4eb6c1d270
       gc table: 0x7f4eb6c1cca0
    jump target: 0x7f4eb6c1cde0
         resops: 0x7f4eb6c1cdee
       failures: 0x7f4eb6c1d270
            end: 0x7f4eb6c1d60e
[3e4c20eea05a9a0] jit-backend-addr}
[3e4c20eea05de4f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1cdfe +0  C4040000
[3e4c20eea05ecca] jit-backend-dump}
[3e4c20eea0620a2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1ce15 +0  C9040000
[3e4c20eea062dd0] jit-backend-dump}
[3e4c20eea066392] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1ce21 +0  F5040000
[3e4c20eea0670b3] jit-backend-dump}
[3e4c20eea06a3b2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1ce36 +0  FC040000
[3e4c20eea06b0c8] jit-backend-dump}
[3e4c20eea06e309] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1ce4a +0  04050000
[3e4c20eea06efd2] jit-backend-dump}
[3e4c20eea0722bf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1ce81 +0  E9040000
[3e4c20eea072fed] jit-backend-dump}
[3e4c20eea0762e3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1ce95 +0  F1040000
[3e4c20eea076fc1] jit-backend-dump}
[3e4c20eea07a22a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1ceaa +0  F8040000
[3e4c20eea07af27] jit-backend-dump}
[3e4c20eea07e21d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1cebb +0  03050000
[3e4c20eea07ef2c] jit-backend-dump}
[3e4c20eea082177] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1cecf +0  0B050000
[3e4c20eea082e5b] jit-backend-dump}
[3e4c20eea08610b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1cedd +0  19050000
[3e4c20eea086e0e] jit-backend-dump}
[3e4c20eea08a03a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1ceeb +0  27050000
[3e4c20eea08ad31] jit-backend-dump}
[3e4c20eea08dfd7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1cf02 +0  2C050000
[3e4c20eea08ecda] jit-backend-dump}
[3e4c20eea091edb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1cf0f +0  3B050000
[3e4c20eea092bba] jit-backend-dump}
[3e4c20eea095e66] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1cf26 +0  40050000
[3e4c20eea096b51] jit-backend-dump}
[3e4c20eea099d8c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1cf3e +0  44050000
[3e4c20eea09aa7a] jit-backend-dump}
[3e4c20eea09dcfb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1cf58 +0  46050000
[3e4c20eea09ea23] jit-backend-dump}
[3e4c20eea0a1c6e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1cf76 +0  44050000
[3e4c20eea0a2958] jit-backend-dump}
[3e4c20eea0a5bec] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1cf8c +0  4A050000
[3e4c20eea0a68e0] jit-backend-dump}
[3e4c20eea0a9ae4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1cfa7 +0  4B050000
[3e4c20eea0aa7b6] jit-backend-dump}
[3e4c20eea0adaa3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1cfc1 +0  4D050000
[3e4c20eea0ae77e] jit-backend-dump}
[3e4c20eea0b1976] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1cfca +0  60050000
[3e4c20eea0b2658] jit-backend-dump}
[3e4c20eea0b58d3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1cfd7 +0  6F050000
[3e4c20eea0b65c4] jit-backend-dump}
[3e4c20eea0b9821] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1cfe1 +0  81050000
[3e4c20eea0ba51b] jit-backend-dump}
[3e4c20eea0bd7d7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1d007 +0  77050000
[3e4c20eea0be4bb] jit-backend-dump}
[3e4c20eea0c1712] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1d011 +0  89050000
[3e4c20eea0c2409] jit-backend-dump}
[3e4c20eea0c56f2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1d01b +0  9B050000
[3e4c20eea0c63e3] jit-backend-dump}
[3e4c20eea0c96a2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1d205 +0  CD030000
[3e4c20eea0ca383] jit-backend-dump}
[3e4c20eea0cd692] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1d213 +0  DB030000
[3e4c20eea0ce376] jit-backend-dump}
[3e4c20eea0d17d8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1493c +0  A0840000
[3e4c20eea0d24ea] jit-backend-dump}
[3e4c20eea0d6618] jit-backend}
[3e4c20eea0da201] {jit-log-opt-bridge
# bridge out of Guard 0x46b61d0 with 149 ops
[p0, p1]
+342: guard_class(p1, 16435208, descr=<Guard0xafad760>) [p0, p1]
+354: p3 = getfield_gc_r(p1, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+358: guard_nonnull_class(p3, ConstClass(ForwardLink), descr=<Guard0xafad7c0>) [p0, p1]
debug_merge_point(0, 0, '(>= i5574 (quotient n5570 2))')
+377: guard_not_invalidated(descr=<Guard0xba3e0b0>) [p0, p1]
+377: guard_class(p0, 16504944, descr=<Guard0xba3e0f8>) [p0, p1]
+389: i6 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+393: p7 = getfield_gc_r(p0, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+397: guard_class(p7, 16481456, descr=<Guard0xba3e140>) [p0, p1]
+410: p9 = getfield_gc_r(p7, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+421: guard_value(p9, ConstPtr(ptr10), descr=<Guard0xba3e188>) [p0, p1]
+430: i11 = getfield_gc_i(p7, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_vals_fixed_1 24 pure>)
+434: i13 = int_eq(i11, -9223372036854775808)
+434: i15 = int_rshift(i11, 1)
+440: i17 = int_lshift(i15, 1)
+446: i19 = int_xor(i11, 2)
+453: i21 = int_rshift(i19, 63)
+457: i22 = int_ne(i17, i11)
+470: i23 = int_and(i21, i22)
+473: i24 = int_add(i15, i23)
+476: i25 = int_ge(i6, i24)
+479: guard_true(i25, descr=<Guard0xba3e1d0>) [p0, p1]
debug_merge_point(0, 0, '(if if10 (void) (begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55))))')
debug_merge_point(0, 0, '(void)')
+485: p26 = getfield_gc_r(p1, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+496: guard_value(p26, ConstPtr(ptr27), descr=<Guard0xba3e218>) [p0, p1]
+505: p28 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+509: p29 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(doloop5663 (add1 i5665)) from (void)')
+513: guard_class(p28, 16504944, descr=<Guard0xba3e260>) [p0, p1]
+526: p31 = getfield_gc_r(p28, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+530: guard_class(p31, 16481456, descr=<Guard0xba3e2a8>) [p0, p1]
+543: p33 = getfield_gc_r(p31, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+554: guard_value(p33, ConstPtr(ptr34), descr=<Guard0xba3e2f0>) [p0, p1]
+563: i35 = getfield_gc_i(p28, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+567: i37 = int_add_ovf(i35, 1)
+571: guard_no_overflow(descr=<Guard0xba3e338>) [p0, p1]
debug_merge_point(0, 0, '(let ([if14 (> i5665 gcold-iters)]) (if if14 (begin (void) (void)) (begin (doStep MEG) (doloop5663 (add1 i5665))))) from (doloop5663 (add1 i5665))')
+577: guard_class(p29, 16528368, descr=<Guard0xba3e380>) [p0, p1]
+591: p39 = getfield_gc_r(p29, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+595: guard_nonnull_class(p39, ConstClass(ForwardLink), descr=<Guard0xafad820>) [p0, p1]
debug_merge_point(0, 0, '(> i5665 gcold-iters)')
+614: i42 = int_gt(i37, 3500)
+621: guard_false(i42, descr=<Guard0xba3e3c8>) [p0, p1]
debug_merge_point(0, 0, '(if if14 (begin (void) (void)) (begin (doStep MEG) (doloop5663 (add1 i5665))))')
debug_merge_point(0, 0, '(begin (doStep MEG) (doloop5663 (add1 i5665)))')
debug_merge_point(0, 0, '(doStep MEG)')
+627: p43 = getfield_gc_r(p31, descr=<FieldP pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_w_val0 32 pure>)
+631: guard_nonnull_class(p43, 16480328, descr=<Guard0xafad880>) [p0, p1]
+650: i45 = getfield_gc_i(p31, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_vals_fixed_1 24 pure>)
+654: p46 = getfield_gc_r(p43, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+665: guard_value(p46, ConstPtr(ptr47), descr=<Guard0xba3e410>) [p0, p1]
+674: p48 = getfield_gc_r(p31, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([mutations CellRef(actuallyMut)]) (CellRef(doYoungGenAlloc) n5623 words/dead) (CellRef(doMutWork) n5623) (CellRef(oldGenAlloc) (quotient n5623 promoteRate)) (let ([AppRand60 (+ mutations ptrMutRate)]) (let ([AppRand61 (- AppRand60 CellRef(actuallyMut))]) (let ([AppRand62 (max 0 AppRand61)]) (CellRef(oldGenMut) AppRand62)))))')
debug_merge_point(0, 0, 'CellRef(actuallyMut)')
+674: p49 = getfield_gc_r(p43, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_1 32 pure>)
+678: p50 = getfield_gc_r(p49, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+682: guard_nonnull_class(p50, ConstClass(W_CellIntegerStrategy), descr=<Guard0xafad8e0>) [p0, p1]
+700: i52 = getfield_gc_i(p50, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
debug_merge_point(0, 0, '(CellRef(doYoungGenAlloc) n5623 words/dead)')
+704: p53 = getfield_gc_r(p43, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_7 80 pure>)
+708: p54 = getfield_gc_r(p53, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+712: guard_nonnull_class(p54, 16478448, descr=<Guard0xafad940>) [p0, p1]
+730: p56 = getfield_gc_r(p43, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_3 48 pure>)
+734: guard_nonnull_class(p56, ConstClass(W_Fixnum), descr=<Guard0xafad9a0>) [p0, p1]
+752: p58 = getfield_gc_r(p54, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+770: guard_value(p58, ConstPtr(ptr59), descr=<Guard0xba3e458>) [p0, p1]
+779: p60 = getfield_gc_r(p43, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+779: i61 = getfield_gc_i(p56, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(let ([nbytes (* nwords bytes/word)]) (let ([doloop5608 (lambda (allocated) (let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))))]) (doloop5608 0)))')
debug_merge_point(0, 0, '(* nwords bytes/word)')
+783: p62 = getfield_gc_r(p54, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize3.inst__vals_1 32 pure>)
+787: guard_nonnull_class(p62, ConstClass(W_Fixnum), descr=<Guard0xafada00>) [p0, p1]
+805: i64 = int_is_true(i61)
+808: guard_true(i64, descr=<Guard0xba3e4a0>) [p0, p1]
+814: i65 = getfield_gc_i(p62, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+818: i66 = int_is_true(i65)
+821: guard_true(i66, descr=<Guard0xba3e4e8>) [p0, p1]
+827: i67 = int_mul_ovf(i61, i65)
+831: guard_no_overflow(descr=<Guard0xba3e530>) [p0, p1]
debug_merge_point(0, 0, '(let ([doloop5608 (lambda (allocated) (let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))))]) (doloop5608 0))')
+837: p68 = getfield_gc_r(p54, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(lambda (allocated) (let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))))')
+841: p69 = getfield_gc_r(p54, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize3.inst__vals_0 24 pure>)
+852: p70 = getfield_gc_r(p54, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize3.inst__vals_2 40 pure>)
+863: guard_class(p68, 16505296, descr=<Guard0xba3e578>) [p0, p1]
debug_merge_point(0, 0, '(doloop5608 0)')
debug_merge_point(0, 0, '(let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))) from (doloop5608 0)')
debug_merge_point(0, 0, '(>= allocated n5602)')
+875: i73 = int_ge(0, i45)
+879: guard_false(i73, descr=<Guard0xba3e5c0>) [p0, p1]
debug_merge_point(0, 0, '(if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))')
debug_merge_point(0, 0, '(let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59)))')
debug_merge_point(0, 0, '(make-vector nwords 0)')
+885: i75 = int_lt(i61, 0)
+889: guard_false(i75, descr=<Guard0xba3e608>) [p0, p1]
debug_merge_point(0, 0, '(set! aexport SetBang10)')
debug_merge_point(0, 0, '(let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))')
debug_merge_point(0, 0, '(+ allocated nbytes)')
debug_merge_point(0, 0, '(doloop5608 AppRand59)')
debug_merge_point(0, 0, '(let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))) from (doloop5608 AppRand59)')
+895: p76 = new_with_vtable(descr=<SizeDescr 32>)
+939: setfield_gc(p76, i61, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+943: p78 = new_array_clear(1, descr=<ArrayP 8>)
+969: setarrayitem_gc(p78, 0, ConstPtr(ptr80), descr=<ArrayP 8>)
+973: setfield_gc(p76, p78, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+984: setfield_gc(p76, ConstPtr(ptr81), descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+998: setfield_gc(p70, p76, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1002: p82 = new_with_vtable(descr=<SizeDescr 64>)
+1013: p83 = new_with_vtable(descr=<SizeDescr 16>)
+1024: setfield_gc(p83, i67, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1035: p84 = new_with_vtable(descr=<SizeDescr 16>)
+1053: setfield_gc(p84, i61, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1057: p85 = new_with_vtable(descr=<SizeDescr 16>)
+1068: setfield_gc(p85, i45, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1072: p86 = new_with_vtable(descr=<SizeDescr 40>)
+1090: p87 = new_with_vtable(descr=<SizeDescr 24>)
+1108: p88 = new_with_vtable(descr=<SizeDescr 24>)
+1119: setfield_gc(p88, p43, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1123: setfield_gc(p88, i45, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1127: setfield_gc(p87, p88, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1131: setfield_gc(p87, i52, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1135: p89 = new_with_vtable(descr=<SizeDescr 40>)
+1146: setfield_gc(p89, p39, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1157: p90 = new_with_vtable(descr=<SizeDescr 24>)
+1168: setfield_gc(p90, p31, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1172: setfield_gc(p90, i37, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1176: setfield_gc(p89, p90, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1180: setfield_gc(p89, p29, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1184: setfield_gc(p89, ConstPtr(ptr91), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+1283: i92 = getfield_gc_i(p85, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1287: setfield_gc(p86, p39, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1291: setfield_gc(p82, p68, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1302: setfield_gc(p82, ConstPtr(ptr93), descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1313: setfield_gc(p86, ConstPtr(ptr94), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+1317: setfield_gc(p86, p87, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1321: setfield_gc(p86, p89, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1325: setfield_gc(p82, p69, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_0 24 pure>)
+1336: setfield_gc(p82, p70, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_1 32 pure>)
+1347: setfield_gc(p82, p83, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_2 40 pure>)
+1358: setfield_gc(p82, p84, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_3 48 pure>)
+1362: setfield_gc(p82, p85, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_4 56 pure>)
+1366: i96 = int_ge(i92, -9223372036854775807)
+1379: guard_true(i96, descr=<Guard0xafada60>) [p86, i67, p82]
+1385: i97 = getfield_gc_i(p84, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1389: i99 = int_ge(i97, 1)
+1393: guard_true(i99, descr=<Guard0xafadac0>) [p86, i67, p82]
+1399: i100 = getfield_gc_i(p83, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1403: jump(p82, i67, p86, p39, p85, i92, p84, p83, i100, p70, i97, descr=TargetToken(80545296))
+1488: --end of the loop--
[3e4c20eea155f7d] jit-log-opt-bridge}
[3e4c20ef7731bbf] {jit-backend
[3e4c20ef78578f4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1d
[3e4c20ef786ae7e] jit-backend-dump}
[3e4c20ef788acf2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1d994 +0  34000000
[3e4c20ef788c56a] jit-backend-dump}
[3e4c20ef7890851] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1de55 +0  34000000
[3e4c20ef7891784] jit-backend-dump}
[3e4c20ef7894d76] {jit-backend-addr
bridge out of Guard 0xa8e4f50 has address 0x7f4eb6c1d990 to 0x7f4eb6c1de50
       gc table: 0x7f4eb6c1d840
    jump target: 0x7f4eb6c1d990
         resops: 0x7f4eb6c1d99e
       failures: 0x7f4eb6c1de50
            end: 0x7f4eb6c1e227
[3e4c20ef789787d] jit-backend-addr}
[3e4c20ef789af55] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1d9b2 +0  F1040000
[3e4c20ef789bd8d] jit-backend-dump}
[3e4c20ef789f17b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1d9c9 +0  F6040000
[3e4c20ef789fec4] jit-backend-dump}
[3e4c20ef78a32be] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1d9da +0  01050000
[3e4c20ef78a40e4] jit-backend-dump}
[3e4c20ef78a7368] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1d9f1 +0  06050000
[3e4c20ef78a80e9] jit-backend-dump}
[3e4c20ef78ab872] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1d9ff +0  30050000
[3e4c20ef78ac56c] jit-backend-dump}
[3e4c20ef78af8dc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1da0d +0  3E050000
[3e4c20ef78b05fe] jit-backend-dump}
[3e4c20ef78b3873] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1da21 +0  46050000
[3e4c20ef78b4570] jit-backend-dump}
[3e4c20ef78b777e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1da57 +0  2C050000
[3e4c20ef78b8490] jit-backend-dump}
[3e4c20ef78bb6aa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1da6b +0  34050000
[3e4c20ef78bc3b6] jit-backend-dump}
[3e4c20ef78bf68a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1da7f +0  3C050000
[3e4c20ef78c0393] jit-backend-dump}
[3e4c20ef78c35c2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1da90 +0  47050000
[3e4c20ef78c42cf] jit-backend-dump}
[3e4c20ef78c74e5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1daa4 +0  4F050000
[3e4c20ef78c81d9] jit-backend-dump}
[3e4c20ef78cb3d1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1dab2 +0  5D050000
[3e4c20ef78cc0d1] jit-backend-dump}
[3e4c20ef78cf2c0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1dabf +0  6C050000
[3e4c20ef78cffb4] jit-backend-dump}
[3e4c20ef78d31e6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1dad5 +0  72050000
[3e4c20ef78d3ee3] jit-backend-dump}
[3e4c20ef78d71b4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1dae2 +0  81050000
[3e4c20ef78d7eb7] jit-backend-dump}
[3e4c20ef78db0c1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1dafa +0  85050000
[3e4c20ef78dbdf5] jit-backend-dump}
[3e4c20ef78df055] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1db12 +0  89050000
[3e4c20ef78dfd4c] jit-backend-dump}
[3e4c20ef78e301d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1db2c +0  8B050000
[3e4c20ef78e3d26] jit-backend-dump}
[3e4c20ef78e6f65] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1db4a +0  89050000
[3e4c20ef78e7c4f] jit-backend-dump}
[3e4c20ef78eaee0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1db60 +0  8F050000
[3e4c20ef78ebbdd] jit-backend-dump}
[3e4c20ef78eee1c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1db7b +0  90050000
[3e4c20ef78efb53] jit-backend-dump}
[3e4c20ef78f2d69] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1db95 +0  92050000
[3e4c20ef78f3a6f] jit-backend-dump}
[3e4c20ef78f6cc9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1db9e +0  A5050000
[3e4c20ef78f79c0] jit-backend-dump}
[3e4c20ef78fabb2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1dbab +0  B4050000
[3e4c20ef78fb8af] jit-backend-dump}
[3e4c20ef78feb09] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1dbb5 +0  C6050000
[3e4c20ef78ff86e] jit-backend-dump}
[3e4c20ef7902ad1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1dbdb +0  BC050000
[3e4c20ef79037ce] jit-backend-dump}
[3e4c20ef7906a15] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1dbe5 +0  CE050000
[3e4c20ef79077a8] jit-backend-dump}
[3e4c20ef790a9a0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1dbef +0  E0050000
[3e4c20ef790b69d] jit-backend-dump}
[3e4c20ef790e93d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1ddea +0  01040000
[3e4c20ef790f631] jit-backend-dump}
[3e4c20ef79128f9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1ddf8 +0  0F040000
[3e4c20ef79135fc] jit-backend-dump}
[3e4c20ef7916c57] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c55e +0  2E140100
[3e4c20ef7917991] jit-backend-dump}
[3e4c20ef791c85e] jit-backend}
[3e4c20ef7920572] {jit-log-opt-bridge
# bridge out of Guard 0xa8e4f50 with 158 ops
[p0, p1]
+365: guard_value(p0, ConstPtr(ptr2), descr=<Guard0xafadb20>) [p0, p1]
+374: p3 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+379: p4 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55)) from (+ CellRef(actuallyMut) 2)')
+384: guard_class(p3, 16504944, descr=<Guard0xba3e6e0>) [p0, p1]
+397: p6 = getfield_gc_r(p3, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+401: guard_class(p4, 16435208, descr=<Guard0xba3e728>) [p0, p1]
+414: p8 = getfield_gc_r(p4, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+418: guard_nonnull_class(p8, ConstClass(ForwardLink), descr=<Guard0xafadb80>) [p0, p1]
debug_merge_point(0, 0, '(+ i5574 1)')
+437: guard_not_invalidated(descr=<Guard0xba3e770>) [p0, p1]
+437: i10 = getfield_gc_i(p3, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+441: i12 = int_add_ovf(i10, 1)
+445: guard_no_overflow(descr=<Guard0xba3e7b8>) [p0, p1]
debug_merge_point(0, 0, '(doloop5572 AppRand55)')
+451: guard_class(p6, 16481456, descr=<Guard0xba3e800>) [p0, p1]
+465: p14 = getfield_gc_r(p6, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+476: guard_value(p14, ConstPtr(ptr15), descr=<Guard0xba3e848>) [p0, p1]
debug_merge_point(0, 0, '(let ([if10 (>= i5574 (quotient n5570 2))]) (if if10 (void) (begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55))))) from (doloop5572 AppRand55)')
debug_merge_point(0, 0, '(>= i5574 (quotient n5570 2))')
+485: i16 = getfield_gc_i(p6, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_vals_fixed_1 24 pure>)
+489: i18 = int_eq(i16, -9223372036854775808)
+489: i20 = int_rshift(i16, 1)
+495: i22 = int_lshift(i20, 1)
+501: i24 = int_xor(i16, 2)
+508: i26 = int_rshift(i24, 63)
+512: i27 = int_ne(i22, i16)
+524: i28 = int_and(i26, i27)
+527: i29 = int_add(i20, i28)
+530: i30 = int_ge(i12, i29)
+533: guard_true(i30, descr=<Guard0xba3e890>) [p0, p1]
debug_merge_point(0, 0, '(if if10 (void) (begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55))))')
debug_merge_point(0, 0, '(void)')
+539: p31 = getfield_gc_r(p4, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+550: guard_value(p31, ConstPtr(ptr32), descr=<Guard0xba3e8d8>) [p0, p1]
+559: p33 = getfield_gc_r(p4, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+563: p34 = getfield_gc_r(p4, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(doloop5663 (add1 i5665)) from (void)')
+567: guard_class(p33, 16504944, descr=<Guard0xba3e920>) [p0, p1]
+579: p36 = getfield_gc_r(p33, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+583: guard_class(p36, 16481456, descr=<Guard0xba3e968>) [p0, p1]
+596: p38 = getfield_gc_r(p36, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+607: guard_value(p38, ConstPtr(ptr39), descr=<Guard0xba3e9b0>) [p0, p1]
+616: i40 = getfield_gc_i(p33, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+620: i42 = int_add_ovf(i40, 1)
+624: guard_no_overflow(descr=<Guard0xba3e9f8>) [p0, p1]
debug_merge_point(0, 0, '(let ([if14 (> i5665 gcold-iters)]) (if if14 (begin (void) (void)) (begin (doStep MEG) (doloop5663 (add1 i5665))))) from (doloop5663 (add1 i5665))')
+630: guard_class(p34, 16528368, descr=<Guard0xba3ea40>) [p0, p1]
+643: p44 = getfield_gc_r(p34, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+647: guard_nonnull_class(p44, ConstClass(ForwardLink), descr=<Guard0xafadbe0>) [p0, p1]
debug_merge_point(0, 0, '(> i5665 gcold-iters)')
+665: i47 = int_gt(i42, 3500)
+672: guard_false(i47, descr=<Guard0xba3ea88>) [p0, p1]
debug_merge_point(0, 0, '(if if14 (begin (void) (void)) (begin (doStep MEG) (doloop5663 (add1 i5665))))')
debug_merge_point(0, 0, '(begin (doStep MEG) (doloop5663 (add1 i5665)))')
debug_merge_point(0, 0, '(doStep MEG)')
+678: p48 = getfield_gc_r(p36, descr=<FieldP pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_w_val0 32 pure>)
+682: guard_nonnull_class(p48, 16480328, descr=<Guard0xafadc40>) [p0, p1]
+702: i50 = getfield_gc_i(p36, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_vals_fixed_1 24 pure>)
+706: p51 = getfield_gc_r(p48, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+717: guard_value(p51, ConstPtr(ptr52), descr=<Guard0xba3ead0>) [p0, p1]
+726: p53 = getfield_gc_r(p36, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([mutations CellRef(actuallyMut)]) (CellRef(doYoungGenAlloc) n5623 words/dead) (CellRef(doMutWork) n5623) (CellRef(oldGenAlloc) (quotient n5623 promoteRate)) (let ([AppRand60 (+ mutations ptrMutRate)]) (let ([AppRand61 (- AppRand60 CellRef(actuallyMut))]) (let ([AppRand62 (max 0 AppRand61)]) (CellRef(oldGenMut) AppRand62)))))')
debug_merge_point(0, 0, 'CellRef(actuallyMut)')
+726: p54 = getfield_gc_r(p48, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_1 32 pure>)
+730: p55 = getfield_gc_r(p54, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+734: guard_nonnull_class(p55, ConstClass(W_CellIntegerStrategy), descr=<Guard0xafadca0>) [p0, p1]
+752: i57 = getfield_gc_i(p55, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
debug_merge_point(0, 0, '(CellRef(doYoungGenAlloc) n5623 words/dead)')
+756: p58 = getfield_gc_r(p48, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_7 80 pure>)
+760: p59 = getfield_gc_r(p58, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+764: guard_nonnull_class(p59, 16478448, descr=<Guard0xafadd00>) [p0, p1]
+782: p61 = getfield_gc_r(p48, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_3 48 pure>)
+786: guard_nonnull_class(p61, ConstClass(W_Fixnum), descr=<Guard0xafadd60>) [p0, p1]
+804: p63 = getfield_gc_r(p59, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+822: guard_value(p63, ConstPtr(ptr64), descr=<Guard0xba3eb18>) [p0, p1]
+831: p65 = getfield_gc_r(p48, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+831: i66 = getfield_gc_i(p61, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(let ([nbytes (* nwords bytes/word)]) (let ([doloop5608 (lambda (allocated) (let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))))]) (doloop5608 0)))')
debug_merge_point(0, 0, '(* nwords bytes/word)')
+835: p67 = getfield_gc_r(p59, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize3.inst__vals_1 32 pure>)
+839: guard_nonnull_class(p67, ConstClass(W_Fixnum), descr=<Guard0xafaddc0>) [p0, p1]
+857: i69 = int_is_true(i66)
+860: guard_true(i69, descr=<Guard0xba3eb60>) [p0, p1]
+866: i70 = getfield_gc_i(p67, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+870: i71 = int_is_true(i70)
+873: guard_true(i71, descr=<Guard0xba3eba8>) [p0, p1]
+879: i72 = int_mul_ovf(i66, i70)
+883: guard_no_overflow(descr=<Guard0xba3ebf0>) [p0, p1]
debug_merge_point(0, 0, '(let ([doloop5608 (lambda (allocated) (let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))))]) (doloop5608 0))')
+889: p73 = getfield_gc_r(p59, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(lambda (allocated) (let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))))')
+893: p74 = getfield_gc_r(p59, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize3.inst__vals_0 24 pure>)
+904: p75 = getfield_gc_r(p59, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize3.inst__vals_2 40 pure>)
+915: guard_class(p73, 16505296, descr=<Guard0xba3ec38>) [p0, p1]
debug_merge_point(0, 0, '(doloop5608 0)')
debug_merge_point(0, 0, '(let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))) from (doloop5608 0)')
debug_merge_point(0, 0, '(>= allocated n5602)')
+927: i78 = int_ge(0, i50)
+931: guard_false(i78, descr=<Guard0xba3ec80>) [p0, p1]
debug_merge_point(0, 0, '(if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))')
debug_merge_point(0, 0, '(let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59)))')
debug_merge_point(0, 0, '(make-vector nwords 0)')
+937: i80 = int_lt(i66, 0)
+941: guard_false(i80, descr=<Guard0xba3ecc8>) [p0, p1]
debug_merge_point(0, 0, '(set! aexport SetBang10)')
debug_merge_point(0, 0, '(let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))')
debug_merge_point(0, 0, '(+ allocated nbytes)')
debug_merge_point(0, 0, '(doloop5608 AppRand59)')
debug_merge_point(0, 0, '(let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))) from (doloop5608 AppRand59)')
+947: p81 = new_with_vtable(descr=<SizeDescr 32>)
+1001: setfield_gc(p81, i66, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1005: p83 = new_array_clear(1, descr=<ArrayP 8>)
+1031: setarrayitem_gc(p83, 0, ConstPtr(ptr85), descr=<ArrayP 8>)
+1035: setfield_gc(p81, p83, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1046: setfield_gc(p81, ConstPtr(ptr86), descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1068: setfield_gc(p75, p81, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1072: p87 = new_with_vtable(descr=<SizeDescr 64>)
+1083: p88 = new_with_vtable(descr=<SizeDescr 16>)
+1094: setfield_gc(p88, i72, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1105: p89 = new_with_vtable(descr=<SizeDescr 16>)
+1116: setfield_gc(p89, i66, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1120: p90 = new_with_vtable(descr=<SizeDescr 16>)
+1131: setfield_gc(p90, i50, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1135: p91 = new_with_vtable(descr=<SizeDescr 40>)
+1153: p92 = new_with_vtable(descr=<SizeDescr 24>)
+1171: p93 = new_with_vtable(descr=<SizeDescr 24>)
+1182: setfield_gc(p93, p48, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1186: setfield_gc(p93, i50, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1190: setfield_gc(p92, p93, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1194: setfield_gc(p92, i57, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1198: p94 = new_with_vtable(descr=<SizeDescr 40>)
+1210: setfield_gc(p94, p44, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1222: p95 = new_with_vtable(descr=<SizeDescr 24>)
+1234: setfield_gc(p95, p36, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1238: setfield_gc(p95, i42, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1242: setfield_gc(p94, p95, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1247: setfield_gc(p94, p34, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1252: setfield_gc(p94, ConstPtr(ptr96), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+1352: i97 = getfield_gc_i(p90, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1363: setfield_gc(p91, ConstPtr(ptr98), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+1367: setfield_gc(p91, p92, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1371: setfield_gc(p91, p94, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1375: setfield_gc(p87, p73, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1379: setfield_gc(p91, p44, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1390: setfield_gc(p87, ConstPtr(ptr99), descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1394: setfield_gc(p87, p74, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_0 24 pure>)
+1405: setfield_gc(p87, p75, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_1 32 pure>)
+1416: setfield_gc(p87, p88, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_2 40 pure>)
+1427: setfield_gc(p87, p89, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_3 48 pure>)
+1431: setfield_gc(p87, p90, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_4 56 pure>)
+1435: i101 = int_ge(i97, -9223372036854775807)
+1448: guard_true(i101, descr=<Guard0xafade20>) [p91, i72, p87]
+1454: i102 = getfield_gc_i(p89, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1458: i104 = int_ge(i102, 1)
+1462: guard_true(i104, descr=<Guard0xafade80>) [p91, i72, p87]
+1468: i105 = getfield_gc_i(p88, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1473: jump(p87, i72, p91, p44, p90, i97, p89, p88, i105, p75, i102, descr=TargetToken(80545296))
+1552: --end of the loop--
[3e4c20ef79ab316] jit-log-opt-bridge}
[3e4c20f00d4dd12] {jit-backend
[3e4c20f00e6865c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1e450 +0  00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048817D48FFFFFF000F8CB204000048FF04257078AA034C8B3D93FEFFFF4D39F80F85000000004D8B7C24104D8B74241841813FB01E01000F85000000004D8B6F0841813E480E00000F85000000004D8B56084983FA01720741813A900F00000F85000000004D8B57104983C2010F800000000041817D00F0C200000F85000000004D8B7D104C8B0D64FEFFFF4D39CF0F85000000004D8B4D184D89CD49D1F94D89CF49D1E14C89EF4983F50249C1FD3F4939F9BE00000000400F95C64C21EE4C01FE4939F20F8C00000000498B76204C8B1532FEFFFF4C39D60F8500000000498B76104D8B7E18813EB01E01000F85000000004C8B760841813EF0C200000F85000000004D8B6E10488B3D19FEFFFF4939FD0F8500000000488B7E104883C7010F800000000041813F307A01000F8500000000498B77084883FE017206813E900F00000F85000000004881FFAC0D00000F8F000000004D8B6E204983FD01720841817D0088BE00000F85000000004D8B4E18498B5D10488B15E3FDFFFF4839D30F8500000000498B5520488B5A084883FB017206813BF08900000F8500000000488B5308498B5D50488B43084883F8017206813830B700000F8500000000498B5D304883FB017206813B601400000F8500000000488B48104889B530010000488B35A2FDFFFF4839F10F8500000000488B7308488B58204883FB017206813B601400000F85000000004885F60F8400000000488B4B084885C90F8400000000480FAFCE0F8000000000488B580848898D38010000488B481848898D40010000488B4828813B102001000F85000000004983F9000F8E000000004883FE000F8C000000004989D448898D48010000488B0C25F091F900488D9140010000483B14251092F9000F875C02000048891425F091F90048C701F08C000048897108488D512048C702080E000048C74208010000004C8B0519FDFFFF4C894210488951104C8B0512FDFFFF4C8941184C8B854801000041F64004010F852702000049894808488D4A1848C70120BA0000488D514048C70260140000488B8538010000488942084C8D421049C7006014000049897008498D701048C706601400004C894E0848898D50010000488D4E1048C701480E000048899558010000488D512848C702B01E0100488D421848C700B01E01004C8968084C894810488942084C8962104C8D601849C70424480E0000488B853001000049894424084D8D4C242849C701B01E01004D897108498979104D894C24104D897C24184D895424204C8B955001000049C742080000000049C742100000000049C742180000000049C742200000000049C742280000000049C742300000000049C742380000000048C741080000000048C741100000000048C741180000000048C74120000000004C8B7E084C8B0DDDFBFFFF4C894920488951104C89611849895A0848894108488B1DCAFBFFFF49895A10488B9D4001000049895A18488B9D4801000049895A204C8BA5580100004D8962284D8942304989723849BB01000000000000804D39DF0F8C00000000498B50084883FA010F8C000000004D8B4C24084C899530010000488985400100004889B5480100004C89FF4C8985500100004C89A5580100004D89CE4989DC4989D2488B9D3801000048898D3801000049BB30F1BEB64E7F000041FFE30F1F44000048C7442408FFFFFF0049BB30E2C1B64E7F00004C895D204D8D9BC0A0FCFF41FFD3E928FBFFFF49BB20E4C1B64E7F00004C895D204D8D9BD0A6FCFF41FFD3E98FFDFFFF415049BB8081BEB64E7F000041FFD3E9C5FDFFFFFF359BF9FFFF49BB40E2C1B64E7F000041534D8D9BC09DFCFF41FFE3FF3587F9FFFF49BB50E2C1B64E7F000041534D8D9BB09DFCFF41FFE3FF3573F9FFFF49BB60E2C1B64E7F000041534D8D9BA09DFCFF41FFE3FF355FF9FFFF49BB70E2C1B64E7F000041534D8D9B909DFCFF41FFE3FF354BF9FFFF49BB80E2C1B64E7F000041534D8D9B809DFCFF41FFE3FF3537F9FFFF49BB90E2C1B64E7F000041534D8D9B709DFCFF41FFE3FF3523F9FFFF49BBA0E2C1B64E7F000041534D8D9B609DFCFF41FFE3FF3517F9FFFF49BBB0E2C1B64E7F000041534D8D9B509DFCFF41FFE3FF3503F9FFFF49BBC0E2C1B64E7F000041534D8D9B409DFCFF41FFE3FF35F7F8FFFF49BBD0E2C1B64E7F000041534D8D9B309DFCFF41FFE3FF35E3F8FFFF49BBE0E2C1B64E7F000041534D8D9B209DFCFF41FFE3FF35CFF8FFFF49BBF0E2C1B64E7F000041534D8D9B109DFCFF41FFE3FF35C3F8FFFF49BB00E3C1B64E7F000041534D8D9B009DFCFF41FFE3FF35AFF8FFFF49BB10E3C1B64E7F000041534D8D9BF09CFCFF41FFE3FF359BF8FFFF49BB20E3C1B64E7F000041534D8D9BE09CFCFF41FFE3FF3587F8FFFF49BB30E3C1B64E7F000041534D8D9BD09CFCFF41FFE3FF3573F8FFFF49BB40E3C1B64E7F000041534D8D9BC09CFCFF41FFE3FF355FF8FFFF49BB50E3C1B64E7F000041534D8D9BB09CFCFF41FFE3FF3553F8FFFF49BB60E3C1B64E7F000041534D8D9BA09CFCFF41FFE3FF353FF8FFFF49BB70E3C1B64E7F000041534D8D9B909CFCFF41FFE3FF352BF8FFFF49BB80E3C1B64E7F000041534D8D9B809CFCFF41FFE3FF3517F8FFFF49BB90E3C1B64E7F000041534D8D9B709CFCFF41FFE3FF350BF8FFFF49BBA0E3C1B64E7F000041534D8D9B609CFCFF41FFE3FF35F7F7FFFF49BBB0E3C1B64E7F000041534D8D9B509CFCFF41FFE3FF35E3F7FFFF49BBC0E3C1B64E7F000041534D8D9B409CFCFF41FFE3FF35CFF7FFFF49BBD0E3C1B64E7F000041534D8D9B309CFCFF41FFE3FF35BBF7FFFF49BBE0E3C1B64E7F000041534D8D9B209CFCFF41FFE3FF35A7F7FFFF49BBF0E3C1B64E7F000041534D8D9B109CFCFF41FFE3FF3593F7FFFF49BB00E4C1B64E7F000041534D8D9B009CFCFF41FFE3FF357FF7FFFF49BB10E4C1B64E7F000041534D8D9BF09BFCFF41FFE3FF358BF7FFFF49BB30E4C1B64E7F000041534D8D9BD09BFCFF41FFE3FF3577F7FFFF49BB40E4C1B64E7F000041534D8D9BC09BFCFF41FFE3
[3e4c20f00e7bb25] jit-backend-dump}
[3e4c20f00e9c1ed] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1e5a4 +0  34000000
[3e4c20f00e9daa0] jit-backend-dump}
[3e4c20f00ea2403] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1ea65 +0  34000000
[3e4c20f00ea3342] jit-backend-dump}
[3e4c20f00ea6b1b] {jit-backend-addr
bridge out of Guard 0x44772b0 has address 0x7f4eb6c1e5a0 to 0x7f4eb6c1ea60
       gc table: 0x7f4eb6c1e450
    jump target: 0x7f4eb6c1e5a0
         resops: 0x7f4eb6c1e5ae
       failures: 0x7f4eb6c1ea60
            end: 0x7f4eb6c1ee37
[3e4c20f00ea9564] jit-backend-addr}
[3e4c20f00eaceff] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1e5c2 +0  F1040000
[3e4c20f00eadd8c] jit-backend-dump}
[3e4c20f00eb12e3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1e5d9 +0  F6040000
[3e4c20f00eb20b0] jit-backend-dump}
[3e4c20f00eb5497] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1e5ea +0  01050000
[3e4c20f00eb62ba] jit-backend-dump}
[3e4c20f00eb95f3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1e601 +0  06050000
[3e4c20f00eba355] jit-backend-dump}
[3e4c20f00ebdb5c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1e60f +0  30050000
[3e4c20f00ebe8f8] jit-backend-dump}
[3e4c20f00ec1cf8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1e61d +0  3E050000
[3e4c20f00ec2a2c] jit-backend-dump}
[3e4c20f00ec5c9e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1e631 +0  46050000
[3e4c20f00ec69c0] jit-backend-dump}
[3e4c20f00ec9bf5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1e667 +0  2C050000
[3e4c20f00eca929] jit-backend-dump}
[3e4c20f00ecdb46] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1e67b +0  34050000
[3e4c20f00ece87d] jit-backend-dump}
[3e4c20f00ed1aec] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1e68f +0  3C050000
[3e4c20f00ed2894] jit-backend-dump}
[3e4c20f00ed5b0d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1e6a0 +0  47050000
[3e4c20f00ed6875] jit-backend-dump}
[3e4c20f00ed9a9e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1e6b4 +0  4F050000
[3e4c20f00eda7cc] jit-backend-dump}
[3e4c20f00edd9b7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1e6c2 +0  5D050000
[3e4c20f00ede707] jit-backend-dump}
[3e4c20f00ee1933] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1e6cf +0  6C050000
[3e4c20f00ee2664] jit-backend-dump}
[3e4c20f00ee5877] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1e6e5 +0  72050000
[3e4c20f00ee65a2] jit-backend-dump}
[3e4c20f00ee97ce] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1e6f2 +0  81050000
[3e4c20f00eea51e] jit-backend-dump}
[3e4c20f00eed784] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1e70a +0  85050000
[3e4c20f00eee4e9] jit-backend-dump}
[3e4c20f00ef16fc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1e722 +0  89050000
[3e4c20f00ef2433] jit-backend-dump}
[3e4c20f00ef5641] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1e73c +0  8B050000
[3e4c20f00ef6393] jit-backend-dump}
[3e4c20f00ef9585] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1e75a +0  89050000
[3e4c20f00efa279] jit-backend-dump}
[3e4c20f00efd507] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1e770 +0  8F050000
[3e4c20f00efe294] jit-backend-dump}
[3e4c20f00f01506] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1e78b +0  90050000
[3e4c20f00f0222e] jit-backend-dump}
[3e4c20f00f054e0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1e7a5 +0  92050000
[3e4c20f00f06211] jit-backend-dump}
[3e4c20f00f0942e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1e7ae +0  A5050000
[3e4c20f00f0a143] jit-backend-dump}
[3e4c20f00f0d372] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1e7bb +0  B4050000
[3e4c20f00f0e09d] jit-backend-dump}
[3e4c20f00f11292] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1e7c5 +0  C6050000
[3e4c20f00f11f86] jit-backend-dump}
[3e4c20f00f151b8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1e7eb +0  BC050000
[3e4c20f00f15eb2] jit-backend-dump}
[3e4c20f00f19079] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1e7f5 +0  CE050000
[3e4c20f00f19d85] jit-backend-dump}
[3e4c20f00f1cfdf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1e7ff +0  E0050000
[3e4c20f00f1dcdf] jit-backend-dump}
[3e4c20f00f20ee0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1e9fa +0  01040000
[3e4c20f00f21be0] jit-backend-dump}
[3e4c20f00f24da7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1ea08 +0  0F040000
[3e4c20f00f25ac0] jit-backend-dump}
[3e4c20f00f29075] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c194ee +0  AE500000
[3e4c20f00f29d6f] jit-backend-dump}
[3e4c20f00f2ea37] jit-backend}
[3e4c20f00f3277d] {jit-log-opt-bridge
# bridge out of Guard 0x44772b0 with 158 ops
[p0, p1]
+365: guard_value(p0, ConstPtr(ptr2), descr=<Guard0xafadee0>) [p0, p1]
+374: p3 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+379: p4 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55)) from (+ CellRef(actuallyMut) 2)')
+384: guard_class(p3, 16504944, descr=<Guard0xba3ed10>) [p0, p1]
+397: p6 = getfield_gc_r(p3, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+401: guard_class(p4, 16435208, descr=<Guard0xba3ed58>) [p0, p1]
+414: p8 = getfield_gc_r(p4, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+418: guard_nonnull_class(p8, ConstClass(ForwardLink), descr=<Guard0xafadf40>) [p0, p1]
debug_merge_point(0, 0, '(+ i5574 1)')
+437: guard_not_invalidated(descr=<Guard0xba3eda0>) [p0, p1]
+437: i10 = getfield_gc_i(p3, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+441: i12 = int_add_ovf(i10, 1)
+445: guard_no_overflow(descr=<Guard0xba3ede8>) [p0, p1]
debug_merge_point(0, 0, '(doloop5572 AppRand55)')
+451: guard_class(p6, 16481456, descr=<Guard0xba3ee30>) [p0, p1]
+465: p14 = getfield_gc_r(p6, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+476: guard_value(p14, ConstPtr(ptr15), descr=<Guard0xba3ee78>) [p0, p1]
debug_merge_point(0, 0, '(let ([if10 (>= i5574 (quotient n5570 2))]) (if if10 (void) (begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55))))) from (doloop5572 AppRand55)')
debug_merge_point(0, 0, '(>= i5574 (quotient n5570 2))')
+485: i16 = getfield_gc_i(p6, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_vals_fixed_1 24 pure>)
+489: i18 = int_eq(i16, -9223372036854775808)
+489: i20 = int_rshift(i16, 1)
+495: i22 = int_lshift(i20, 1)
+501: i24 = int_xor(i16, 2)
+508: i26 = int_rshift(i24, 63)
+512: i27 = int_ne(i22, i16)
+524: i28 = int_and(i26, i27)
+527: i29 = int_add(i20, i28)
+530: i30 = int_ge(i12, i29)
+533: guard_true(i30, descr=<Guard0xba3eec0>) [p0, p1]
debug_merge_point(0, 0, '(if if10 (void) (begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55))))')
debug_merge_point(0, 0, '(void)')
+539: p31 = getfield_gc_r(p4, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+550: guard_value(p31, ConstPtr(ptr32), descr=<Guard0xba3ef08>) [p0, p1]
+559: p33 = getfield_gc_r(p4, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+563: p34 = getfield_gc_r(p4, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(doloop5663 (add1 i5665)) from (void)')
+567: guard_class(p33, 16504944, descr=<Guard0xba3ef50>) [p0, p1]
+579: p36 = getfield_gc_r(p33, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+583: guard_class(p36, 16481456, descr=<Guard0xba3ef98>) [p0, p1]
+596: p38 = getfield_gc_r(p36, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+607: guard_value(p38, ConstPtr(ptr39), descr=<Guard0xba3efe0>) [p0, p1]
+616: i40 = getfield_gc_i(p33, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+620: i42 = int_add_ovf(i40, 1)
+624: guard_no_overflow(descr=<Guard0xba3f028>) [p0, p1]
debug_merge_point(0, 0, '(let ([if14 (> i5665 gcold-iters)]) (if if14 (begin (void) (void)) (begin (doStep MEG) (doloop5663 (add1 i5665))))) from (doloop5663 (add1 i5665))')
+630: guard_class(p34, 16528368, descr=<Guard0xba3f070>) [p0, p1]
+643: p44 = getfield_gc_r(p34, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+647: guard_nonnull_class(p44, ConstClass(ForwardLink), descr=<Guard0xafadfa0>) [p0, p1]
debug_merge_point(0, 0, '(> i5665 gcold-iters)')
+665: i47 = int_gt(i42, 3500)
+672: guard_false(i47, descr=<Guard0xba3f0b8>) [p0, p1]
debug_merge_point(0, 0, '(if if14 (begin (void) (void)) (begin (doStep MEG) (doloop5663 (add1 i5665))))')
debug_merge_point(0, 0, '(begin (doStep MEG) (doloop5663 (add1 i5665)))')
debug_merge_point(0, 0, '(doStep MEG)')
+678: p48 = getfield_gc_r(p36, descr=<FieldP pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_w_val0 32 pure>)
+682: guard_nonnull_class(p48, 16480328, descr=<Guard0xa8ad1c0>) [p0, p1]
+702: i50 = getfield_gc_i(p36, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_vals_fixed_1 24 pure>)
+706: p51 = getfield_gc_r(p48, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+717: guard_value(p51, ConstPtr(ptr52), descr=<Guard0xba3f100>) [p0, p1]
+726: p53 = getfield_gc_r(p36, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([mutations CellRef(actuallyMut)]) (CellRef(doYoungGenAlloc) n5623 words/dead) (CellRef(doMutWork) n5623) (CellRef(oldGenAlloc) (quotient n5623 promoteRate)) (let ([AppRand60 (+ mutations ptrMutRate)]) (let ([AppRand61 (- AppRand60 CellRef(actuallyMut))]) (let ([AppRand62 (max 0 AppRand61)]) (CellRef(oldGenMut) AppRand62)))))')
debug_merge_point(0, 0, 'CellRef(actuallyMut)')
+726: p54 = getfield_gc_r(p48, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_1 32 pure>)
+730: p55 = getfield_gc_r(p54, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+734: guard_nonnull_class(p55, ConstClass(W_CellIntegerStrategy), descr=<Guard0x4b9a020>) [p0, p1]
+752: i57 = getfield_gc_i(p55, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
debug_merge_point(0, 0, '(CellRef(doYoungGenAlloc) n5623 words/dead)')
+756: p58 = getfield_gc_r(p48, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_7 80 pure>)
+760: p59 = getfield_gc_r(p58, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+764: guard_nonnull_class(p59, 16478448, descr=<Guard0xd108020>) [p0, p1]
+782: p61 = getfield_gc_r(p48, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_3 48 pure>)
+786: guard_nonnull_class(p61, ConstClass(W_Fixnum), descr=<Guard0xd108080>) [p0, p1]
+804: p63 = getfield_gc_r(p59, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+822: guard_value(p63, ConstPtr(ptr64), descr=<Guard0xba3f148>) [p0, p1]
+831: p65 = getfield_gc_r(p48, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+831: i66 = getfield_gc_i(p61, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(let ([nbytes (* nwords bytes/word)]) (let ([doloop5608 (lambda (allocated) (let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))))]) (doloop5608 0)))')
debug_merge_point(0, 0, '(* nwords bytes/word)')
+835: p67 = getfield_gc_r(p59, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize3.inst__vals_1 32 pure>)
+839: guard_nonnull_class(p67, ConstClass(W_Fixnum), descr=<Guard0xd1080e0>) [p0, p1]
+857: i69 = int_is_true(i66)
+860: guard_true(i69, descr=<Guard0xba3f190>) [p0, p1]
+866: i70 = getfield_gc_i(p67, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+870: i71 = int_is_true(i70)
+873: guard_true(i71, descr=<Guard0xba3f1d8>) [p0, p1]
+879: i72 = int_mul_ovf(i66, i70)
+883: guard_no_overflow(descr=<Guard0xba3f220>) [p0, p1]
debug_merge_point(0, 0, '(let ([doloop5608 (lambda (allocated) (let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))))]) (doloop5608 0))')
+889: p73 = getfield_gc_r(p59, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(lambda (allocated) (let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))))')
+893: p74 = getfield_gc_r(p59, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize3.inst__vals_0 24 pure>)
+904: p75 = getfield_gc_r(p59, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize3.inst__vals_2 40 pure>)
+915: guard_class(p73, 16505296, descr=<Guard0xba3f268>) [p0, p1]
debug_merge_point(0, 0, '(doloop5608 0)')
debug_merge_point(0, 0, '(let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))) from (doloop5608 0)')
debug_merge_point(0, 0, '(>= allocated n5602)')
+927: i78 = int_ge(0, i50)
+931: guard_false(i78, descr=<Guard0xba3f2b0>) [p0, p1]
debug_merge_point(0, 0, '(if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))')
debug_merge_point(0, 0, '(let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59)))')
debug_merge_point(0, 0, '(make-vector nwords 0)')
+937: i80 = int_lt(i66, 0)
+941: guard_false(i80, descr=<Guard0xba3f2f8>) [p0, p1]
debug_merge_point(0, 0, '(set! aexport SetBang10)')
debug_merge_point(0, 0, '(let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))')
debug_merge_point(0, 0, '(+ allocated nbytes)')
debug_merge_point(0, 0, '(doloop5608 AppRand59)')
debug_merge_point(0, 0, '(let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))) from (doloop5608 AppRand59)')
+947: p81 = new_with_vtable(descr=<SizeDescr 32>)
+1001: setfield_gc(p81, i66, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1005: p83 = new_array_clear(1, descr=<ArrayP 8>)
+1031: setarrayitem_gc(p83, 0, ConstPtr(ptr85), descr=<ArrayP 8>)
+1035: setfield_gc(p81, p83, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1046: setfield_gc(p81, ConstPtr(ptr86), descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1068: setfield_gc(p75, p81, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1072: p87 = new_with_vtable(descr=<SizeDescr 64>)
+1083: p88 = new_with_vtable(descr=<SizeDescr 16>)
+1094: setfield_gc(p88, i72, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1105: p89 = new_with_vtable(descr=<SizeDescr 16>)
+1116: setfield_gc(p89, i66, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1120: p90 = new_with_vtable(descr=<SizeDescr 16>)
+1131: setfield_gc(p90, i50, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1135: p91 = new_with_vtable(descr=<SizeDescr 40>)
+1153: p92 = new_with_vtable(descr=<SizeDescr 24>)
+1171: p93 = new_with_vtable(descr=<SizeDescr 24>)
+1182: setfield_gc(p93, p48, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1186: setfield_gc(p93, i50, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1190: setfield_gc(p92, p93, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1194: setfield_gc(p92, i57, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1198: p94 = new_with_vtable(descr=<SizeDescr 40>)
+1210: setfield_gc(p94, p44, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1222: p95 = new_with_vtable(descr=<SizeDescr 24>)
+1234: setfield_gc(p95, p36, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1238: setfield_gc(p95, i42, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1242: setfield_gc(p94, p95, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1247: setfield_gc(p94, p34, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1252: setfield_gc(p94, ConstPtr(ptr96), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+1352: i97 = getfield_gc_i(p90, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1363: setfield_gc(p91, ConstPtr(ptr98), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+1367: setfield_gc(p91, p92, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1371: setfield_gc(p91, p94, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1375: setfield_gc(p87, p73, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1379: setfield_gc(p91, p44, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1390: setfield_gc(p87, ConstPtr(ptr99), descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1394: setfield_gc(p87, p74, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_0 24 pure>)
+1405: setfield_gc(p87, p75, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_1 32 pure>)
+1416: setfield_gc(p87, p88, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_2 40 pure>)
+1427: setfield_gc(p87, p89, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_3 48 pure>)
+1431: setfield_gc(p87, p90, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_4 56 pure>)
+1435: i101 = int_ge(i97, -9223372036854775807)
+1448: guard_true(i101, descr=<Guard0xd108140>) [p91, i72, p87]
+1454: i102 = getfield_gc_i(p89, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1458: i104 = int_ge(i102, 1)
+1462: guard_true(i104, descr=<Guard0xd1081a0>) [p91, i72, p87]
+1468: i105 = getfield_gc_i(p88, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1473: jump(p87, i72, p91, p44, p90, i97, p89, p88, i105, p75, i102, descr=TargetToken(80545296))
+1552: --end of the loop--
[3e4c20f00fbe1fb] jit-log-opt-bridge}
[3e4c20f29592478] {jit-backend
[3e4c20f296f19e5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f
[3e4c20f29702a9b] jit-backend-dump}
[3e4c20f29722476] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f384 +0  34000000
[3e4c20f29723ba7] jit-backend-dump}
[3e4c20f297282a6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f9c5 +0  34000000
[3e4c20f2972922c] jit-backend-dump}
[3e4c20f2972c9d4] {jit-backend-addr
bridge out of Guard 0x4476ec0 has address 0x7f4eb6c1f380 to 0x7f4eb6c1f9c0
       gc table: 0x7f4eb6c1f190
    jump target: 0x7f4eb6c1f380
         resops: 0x7f4eb6c1f38e
       failures: 0x7f4eb6c1f9c0
            end: 0x7f4eb6c1ff8f
[3e4c20f2972f470] jit-backend-addr}
[3e4c20f297337d0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f3a6 +0  89060000
[3e4c20f297346f4] jit-backend-dump}
[3e4c20f29737c78] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f3bd +0  8E060000
[3e4c20f297389e6] jit-backend-dump}
[3e4c20f2973bd2c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f3ca +0  9D060000
[3e4c20f2973ca63] jit-backend-dump}
[3e4c20f2973fd50] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f3de +0  A5060000
[3e4c20f29740a65] jit-backend-dump}
[3e4c20f29743da7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f3f3 +0  AC060000
[3e4c20f29744adb] jit-backend-dump}
[3e4c20f29747cd3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f405 +0  B6060000
[3e4c20f297489be] jit-backend-dump}
[3e4c20f2974bb51] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f41d +0  BA060000
[3e4c20f2974c857] jit-backend-dump}
[3e4c20f2974fa4f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f437 +0  BC060000
[3e4c20f297507e5] jit-backend-dump}
[3e4c20f297539e0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f448 +0  C7060000
[3e4c20f297546e3] jit-backend-dump}
[3e4c20f2975787c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f462 +0  C9060000
[3e4c20f2975855e] jit-backend-dump}
[3e4c20f2975b774] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f470 +0  D7060000
[3e4c20f2975c47a] jit-backend-dump}
[3e4c20f2975f64e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f480 +0  E3060000
[3e4c20f29760332] jit-backend-dump}
[3e4c20f297634de] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f4a3 +0  DC060000
[3e4c20f297641f3] jit-backend-dump}
[3e4c20f297673a8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f4b1 +0  EA060000
[3e4c20f297680e5] jit-backend-dump}
[3e4c20f2976b2af] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f4c1 +0  F6060000
[3e4c20f2976bfd1] jit-backend-dump}
[3e4c20f2976f148] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f4de +0  F5060000
[3e4c20f2976fe33] jit-backend-dump}
[3e4c20f2977302b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f4f8 +0  F7060000
[3e4c20f29773d96] jit-backend-dump}
[3e4c20f2977702d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f506 +0  05070000
[3e4c20f29777d64] jit-backend-dump}
[3e4c20f2977afa2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f51f +0  08070000
[3e4c20f2977bcf8] jit-backend-dump}
[3e4c20f2977ef46] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f535 +0  0E070000
[3e4c20f2977fc4f] jit-backend-dump}
[3e4c20f29782ec7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f545 +0  1A070000
[3e4c20f29783bca] jit-backend-dump}
[3e4c20f29786de7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f55c +0  1F070000
[3e4c20f29787ad2] jit-backend-dump}
[3e4c20f2978ac65] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f56a +0  2D070000
[3e4c20f2978b96e] jit-backend-dump}
[3e4c20f2978eaef] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f577 +0  3C070000
[3e4c20f2978f7d6] jit-backend-dump}
[3e4c20f29792966] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f58b +0  44070000
[3e4c20f29793669] jit-backend-dump}
[3e4c20f297967ed] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f5c2 +0  29070000
[3e4c20f297974e1] jit-backend-dump}
[3e4c20f2979a640] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f5d6 +0  31070000
[3e4c20f2979b349] jit-backend-dump}
[3e4c20f2979e4b1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f5eb +0  38070000
[3e4c20f2979f19c] jit-backend-dump}
[3e4c20f297a2307] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f5fb +0  44070000
[3e4c20f297a300a] jit-backend-dump}
[3e4c20f297a61bc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f60f +0  4C070000
[3e4c20f297a6eb0] jit-backend-dump}
[3e4c20f297aa046] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f61d +0  5A070000
[3e4c20f297aad43] jit-backend-dump}
[3e4c20f297adec6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f629 +0  6A070000
[3e4c20f297aeba8] jit-backend-dump}
[3e4c20f297b1d22] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f640 +0  6F070000
[3e4c20f297b2a13] jit-backend-dump}
[3e4c20f297b5baf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f64d +0  7E070000
[3e4c20f297b6891] jit-backend-dump}
[3e4c20f297b9a1e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f664 +0  83070000
[3e4c20f297ba71b] jit-backend-dump}
[3e4c20f297bd898] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f67c +0  87070000
[3e4c20f297be57a] jit-backend-dump}
[3e4c20f297c16e2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f697 +0  88070000
[3e4c20f297c23d3] jit-backend-dump}
[3e4c20f297c554d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f6b5 +0  86070000
[3e4c20f297c621f] jit-backend-dump}
[3e4c20f297c939a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f6cc +0  8B070000
[3e4c20f297ca08b] jit-backend-dump}
[3e4c20f297cd224] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f6e7 +0  8C070000
[3e4c20f297cdefc] jit-backend-dump}
[3e4c20f297d1086] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f702 +0  8D070000
[3e4c20f297d1d80] jit-backend-dump}
[3e4c20f297d4ef7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f70b +0  A0070000
[3e4c20f297d5bd6] jit-backend-dump}
[3e4c20f297d8de0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f718 +0  AF070000
[3e4c20f297d9aec] jit-backend-dump}
[3e4c20f297dcf5a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f722 +0  C1070000
[3e4c20f297ddc8b] jit-backend-dump}
[3e4c20f297e0f22] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f749 +0  B6070000
[3e4c20f297e1c4d] jit-backend-dump}
[3e4c20f297e4f34] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f753 +0  C8070000
[3e4c20f297e5c5f] jit-backend-dump}
[3e4c20f297e8e54] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f75d +0  DA070000
[3e4c20f297e9b66] jit-backend-dump}
[3e4c20f297ecdfa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f958 +0  FB050000
[3e4c20f297edb37] jit-backend-dump}
[3e4c20f297f0e8f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f966 +0  09060000
[3e4c20f297f1b89] jit-backend-dump}
[3e4c20f297f53ab] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c19380 +0  FC5F0000
[3e4c20f297f60b7] jit-backend-dump}
[3e4c20f297fabca] jit-backend}
[3e4c20f297fe855] {jit-log-opt-bridge
# bridge out of Guard 0x4476ec0 with 223 ops
[i0, p1, p2, p3]
+518: guard_not_invalidated(descr=<Guard0x11d12020>) [i0, p1, p2, p3]
+518: p4 = getfield_gc_r(p1, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+529: guard_value(p4, ConstPtr(ptr5), descr=<Guard0x11d14020>) [i0, p1, p2, p3]
+538: p6 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_1 32 pure>)
+542: guard_nonnull_class(p6, ConstClass(W_Fixnum), descr=<Guard0x11d12080>) [i0, p1, p2, p3]
+561: i8 = getfield_gc_i(p6, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+565: i9 = int_ge(i0, i8)
+568: guard_true(i9, descr=<Guard0x11d14068>) [i0, p1, p2, p3]
debug_merge_point(0, 0, '(if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))')
debug_merge_point(0, 0, '(void)')
+574: p10 = getfield_gc_r(p2, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+585: guard_value(p10, ConstPtr(ptr11), descr=<Guard0x11d140b0>) [i0, p1, p2, p3]
+594: p12 = getfield_gc_r(p2, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+598: p13 = getfield_gc_r(p2, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+602: guard_class(p12, 16500720, descr=<Guard0x11d140f8>) [i0, p1, p2, p3]
+615: p15 = getfield_gc_r(p12, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+619: guard_class(p13, 16435208, descr=<Guard0x11d14140>) [i0, p1, p2, p3]
+633: p17 = getfield_gc_r(p13, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+638: guard_nonnull_class(p17, ConstClass(ForwardLink), descr=<Guard0x11d120e0>) [i0, p1, p2, p3]
debug_merge_point(0, 0, '(if (even? CellRef(path)) (let ([tmp (vector-ref CellRef(tn1) 0)][AppRand53 (vector-ref CellRef(tn2) 0)]) (vector-set! CellRef(tn1) 0 AppRand53) (vector-set! CellRef(tn2) 0 tmp)) (let ([tmp5560 (vector-ref CellRef(tn1) 1)][AppRand54 (vector-ref CellRef(tn2) 1)]) (vector-set! CellRef(tn1) 1 AppRand54) (vector-set! CellRef(tn2) 1 tmp5560)))')
+657: p19 = getfield_gc_r(p12, descr=<FieldP rpython.tool.pairtype.ConsEnvSize4.inst__vals_1 24 pure>)
+661: p20 = getfield_gc_r(p19, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+665: guard_nonnull_class(p20, ConstClass(W_CellIntegerStrategy), descr=<Guard0x11d12140>) [i0, p1, p2, p3]
+683: i22 = getfield_gc_i(p20, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+687: i24 = int_and(i22, 1)
+691: i25 = int_is_zero(i24)
+694: guard_false(i25, descr=<Guard0x11d14188>) [i0, p1, p2, p3]
debug_merge_point(0, 0, '(let ([tmp5560 (vector-ref CellRef(tn1) 1)][AppRand54 (vector-ref CellRef(tn2) 1)]) (vector-set! CellRef(tn1) 1 AppRand54) (vector-set! CellRef(tn2) 1 tmp5560))')
debug_merge_point(0, 0, '(vector-ref CellRef(tn1) 1)')
+700: p26 = getfield_gc_r(p12, descr=<FieldP rpython.tool.pairtype.ConsEnvSize4.inst__vals_2 32 pure>)
+704: p27 = getfield_gc_r(p26, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+708: guard_nonnull_class(p27, ConstClass(W_Vector), descr=<Guard0x11d121a0>) [i0, p1, p2, p3]
+726: i29 = getfield_gc_i(p27, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+730: i31 = int_lt(1, i29)
+734: guard_true(i31, descr=<Guard0x11d141d0>) [i0, p1, p2, p3]
+740: p32 = getfield_gc_r(p27, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+744: guard_class(p32, 16623792, descr=<Guard0x11d14218>) [i0, p1, p2, p3]
+756: p34 = getfield_gc_r(p27, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+760: i36 = getarrayitem_gc_i(p34, 1, descr=<ArrayS 8>)
debug_merge_point(0, 0, '(vector-ref CellRef(tn2) 1)')
+764: p37 = getfield_gc_r(p12, descr=<FieldP rpython.tool.pairtype.ConsEnvSize4.inst__vals_3 40 pure>)
+768: p38 = getfield_gc_r(p37, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+772: guard_nonnull_class(p38, ConstClass(W_Vector), descr=<Guard0x11d12200>) [i0, p1, p2, p3]
+791: i40 = getfield_gc_i(p38, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+795: i42 = int_lt(1, i40)
+799: guard_true(i42, descr=<Guard0x11d14260>) [i0, p1, p2, p3]
+805: p43 = getfield_gc_r(p38, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+809: guard_class(p43, 16623792, descr=<Guard0x11d142a8>) [i0, p1, p2, p3]
+821: p45 = getfield_gc_r(p38, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+825: i47 = getarrayitem_gc_i(p45, 1, descr=<ArrayS 8>)
debug_merge_point(0, 0, '(vector-set! CellRef(tn1) 1 AppRand54)')
debug_merge_point(0, 0, '(vector-set! CellRef(tn2) 1 tmp5560)')
+829: setarrayitem_gc(p34, 1, i47, descr=<ArrayS 8>)
debug_merge_point(0, 0, '(let ([SetBang7 (+ CellRef(actuallyMut) 2)]) (set! actuallyMut SetBang7))')
debug_merge_point(0, 0, '(+ CellRef(actuallyMut) 2)')
+833: setarrayitem_gc(p45, 1, i36, descr=<ArrayS 8>)
+837: guard_class(p15, 16479200, descr=<Guard0x11d12260>) [p15, p13, p17, None, None, None, None]
+850: p52 = getfield_gc_r(p15, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_1 32 pure>)
+854: p53 = getfield_gc_r(p52, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+858: guard_nonnull_class(p53, ConstClass(W_CellIntegerStrategy), descr=<Guard0x11d122c0>) [p15, p13, p17, None, None, None, None]
+876: i55 = getfield_gc_i(p53, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+880: i57 = int_add_ovf(i55, 2)
+884: guard_no_overflow(descr=<Guard0x11d142f0>) [p15, p13, p17, None, None, None, None]
debug_merge_point(0, 0, '(set! actuallyMut SetBang7)')
+890: p58 = getfield_gc_r(p13, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+895: setfield_gc(p53, i57, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+906: guard_value(p58, ConstPtr(ptr59), descr=<Guard0x11d12320>) [p58, p13, None, None, None, None, None, None]
+915: p60 = getfield_gc_r(p13, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+920: p61 = getfield_gc_r(p13, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55)) from (+ CellRef(actuallyMut) 2)')
+925: guard_class(p60, 16504944, descr=<Guard0x11d14338>) [p58, p13, None, None, None, None, None, None]
+937: p63 = getfield_gc_r(p60, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+941: guard_class(p61, 16435208, descr=<Guard0x11d14380>) [p58, p13, None, None, None, None, None, None]
+953: p65 = getfield_gc_r(p61, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+957: guard_nonnull_class(p65, ConstClass(ForwardLink), descr=<Guard0x11d12380>) [p58, p13, None, None, None, None, None, None]
debug_merge_point(0, 0, '(+ i5574 1)')
+976: i67 = getfield_gc_i(p60, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+980: i69 = int_add_ovf(i67, 1)
+984: guard_no_overflow(descr=<Guard0x11d143c8>) [p58, p13, None, None, None, None, None, None]
debug_merge_point(0, 0, '(doloop5572 AppRand55)')
+990: guard_class(p63, 16481456, descr=<Guard0x11d14410>) [p58, p13, None, None, None, None, None, None]
+1003: p71 = getfield_gc_r(p63, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1014: guard_value(p71, ConstPtr(ptr72), descr=<Guard0x11d14458>) [p58, p13, None, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([if10 (>= i5574 (quotient n5570 2))]) (if if10 (void) (begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55))))) from (doloop5572 AppRand55)')
debug_merge_point(0, 0, '(>= i5574 (quotient n5570 2))')
+1023: i73 = getfield_gc_i(p63, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_vals_fixed_1 24 pure>)
+1027: i75 = int_eq(i73, -9223372036854775808)
+1027: i77 = int_rshift(i73, 1)
+1033: i79 = int_lshift(i77, 1)
+1039: i81 = int_xor(i73, 2)
+1046: i83 = int_rshift(i81, 63)
+1050: i84 = int_ne(i79, i73)
+1063: i85 = int_and(i83, i84)
+1066: i86 = int_add(i77, i85)
+1069: i87 = int_ge(i69, i86)
+1072: guard_true(i87, descr=<Guard0x11d144a0>) [p58, p13, None, None, None, None, None, None]
debug_merge_point(0, 0, '(if if10 (void) (begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55))))')
debug_merge_point(0, 0, '(void)')
+1078: p88 = getfield_gc_r(p61, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+1089: guard_value(p88, ConstPtr(ptr89), descr=<Guard0x11d144e8>) [p58, p13, None, None, None, None, None, None]
+1098: p90 = getfield_gc_r(p61, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1102: p91 = getfield_gc_r(p61, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(doloop5663 (add1 i5665)) from (void)')
+1106: guard_class(p90, 16504944, descr=<Guard0x11d14530>) [p58, p13, None, None, None, None, None, None]
+1119: p93 = getfield_gc_r(p90, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1123: guard_class(p93, 16481456, descr=<Guard0x11d14578>) [p58, p13, None, None, None, None, None, None]
+1135: p95 = getfield_gc_r(p93, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1146: guard_value(p95, ConstPtr(ptr96), descr=<Guard0x11d145c0>) [p58, p13, None, None, None, None, None, None]
+1155: i97 = getfield_gc_i(p90, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1159: i99 = int_add_ovf(i97, 1)
+1163: guard_no_overflow(descr=<Guard0x11d14608>) [p58, p13, None, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([if14 (> i5665 gcold-iters)]) (if if14 (begin (void) (void)) (begin (doStep MEG) (doloop5663 (add1 i5665))))) from (doloop5663 (add1 i5665))')
+1169: guard_class(p91, 16528368, descr=<Guard0x11d14650>) [p58, p13, None, None, None, None, None, None]
+1181: p101 = getfield_gc_r(p91, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1185: guard_nonnull_class(p101, ConstClass(ForwardLink), descr=<Guard0x11d123e0>) [p58, p13, None, None, None, None, None, None]
debug_merge_point(0, 0, '(> i5665 gcold-iters)')
+1204: i104 = int_gt(i99, 3500)
+1211: guard_false(i104, descr=<Guard0x11d14698>) [p58, p13, None, None, None, None, None, None]
debug_merge_point(0, 0, '(if if14 (begin (void) (void)) (begin (doStep MEG) (doloop5663 (add1 i5665))))')
debug_merge_point(0, 0, '(begin (doStep MEG) (doloop5663 (add1 i5665)))')
debug_merge_point(0, 0, '(doStep MEG)')
+1217: p105 = getfield_gc_r(p93, descr=<FieldP pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_w_val0 32 pure>)
+1221: guard_nonnull_class(p105, 16480328, descr=<Guard0x11d12440>) [p58, p13, None, None, None, None, None, None]
+1240: i107 = getfield_gc_i(p93, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_vals_fixed_1 24 pure>)
+1244: p108 = getfield_gc_r(p105, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1255: guard_value(p108, ConstPtr(ptr109), descr=<Guard0x11d146e0>) [p58, p13, None, None, None, None, None, None]
+1264: p110 = getfield_gc_r(p93, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([mutations CellRef(actuallyMut)]) (CellRef(doYoungGenAlloc) n5623 words/dead) (CellRef(doMutWork) n5623) (CellRef(oldGenAlloc) (quotient n5623 promoteRate)) (let ([AppRand60 (+ mutations ptrMutRate)]) (let ([AppRand61 (- AppRand60 CellRef(actuallyMut))]) (let ([AppRand62 (max 0 AppRand61)]) (CellRef(oldGenMut) AppRand62)))))')
debug_merge_point(0, 0, 'CellRef(actuallyMut)')
+1264: p111 = getfield_gc_r(p105, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_1 32 pure>)
+1268: p112 = getfield_gc_r(p111, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1272: guard_nonnull_class(p112, ConstClass(W_CellIntegerStrategy), descr=<Guard0x11d124a0>) [p58, p13, None, None, None, None, None, None]
+1291: i114 = getfield_gc_i(p112, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
debug_merge_point(0, 0, '(CellRef(doYoungGenAlloc) n5623 words/dead)')
+1295: p115 = getfield_gc_r(p105, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_7 80 pure>)
+1299: p116 = getfield_gc_r(p115, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1303: guard_nonnull_class(p116, 16478448, descr=<Guard0x11d12500>) [p58, p13, None, None, None, None, None, None]
+1321: p118 = getfield_gc_r(p105, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_3 48 pure>)
+1325: guard_nonnull_class(p118, ConstClass(W_Fixnum), descr=<Guard0x11d12560>) [p58, p13, None, None, None, None, None, None]
+1344: p120 = getfield_gc_r(p116, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1362: guard_value(p120, ConstPtr(ptr121), descr=<Guard0x11d14728>) [p58, p13, None, None, None, None, None, None]
+1371: p122 = getfield_gc_r(p105, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1371: i123 = getfield_gc_i(p118, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(let ([nbytes (* nwords bytes/word)]) (let ([doloop5608 (lambda (allocated) (let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))))]) (doloop5608 0)))')
debug_merge_point(0, 0, '(* nwords bytes/word)')
+1375: p124 = getfield_gc_r(p116, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize3.inst__vals_1 32 pure>)
+1379: guard_nonnull_class(p124, ConstClass(W_Fixnum), descr=<Guard0x11d125c0>) [p58, p13, None, None, None, None, None, None]
+1398: i126 = int_is_true(i123)
+1401: guard_true(i126, descr=<Guard0x11d14770>) [p58, p13, None, None, None, None, None, None]
+1407: i127 = getfield_gc_i(p124, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1411: i128 = int_is_true(i127)
+1414: guard_true(i128, descr=<Guard0x11d147b8>) [p58, p13, None, None, None, None, None, None]
+1420: i129 = int_mul_ovf(i123, i127)
+1424: guard_no_overflow(descr=<Guard0x11d14800>) [p58, p13, None, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([doloop5608 (lambda (allocated) (let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))))]) (doloop5608 0))')
+1430: p130 = getfield_gc_r(p116, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(lambda (allocated) (let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))))')
+1434: p131 = getfield_gc_r(p116, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize3.inst__vals_0 24 pure>)
+1445: p132 = getfield_gc_r(p116, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize3.inst__vals_2 40 pure>)
+1456: guard_class(p130, 16505296, descr=<Guard0x11d14848>) [p58, p13, None, None, None, None, None, None]
debug_merge_point(0, 0, '(doloop5608 0)')
debug_merge_point(0, 0, '(let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))) from (doloop5608 0)')
debug_merge_point(0, 0, '(>= allocated n5602)')
+1469: i135 = int_ge(0, i107)
+1473: guard_false(i135, descr=<Guard0x11d14890>) [p58, p13, None, None, None, None, None, None]
debug_merge_point(0, 0, '(if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))')
debug_merge_point(0, 0, '(let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59)))')
debug_merge_point(0, 0, '(make-vector nwords 0)')
+1479: i137 = int_lt(i123, 0)
+1483: guard_false(i137, descr=<Guard0x11d148d8>) [p58, p13, None, None, None, None, None, None]
debug_merge_point(0, 0, '(set! aexport SetBang10)')
debug_merge_point(0, 0, '(let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))')
debug_merge_point(0, 0, '(+ allocated nbytes)')
debug_merge_point(0, 0, '(doloop5608 AppRand59)')
debug_merge_point(0, 0, '(let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))) from (doloop5608 AppRand59)')
+1489: p138 = new_with_vtable(descr=<SizeDescr 32>)
+1543: setfield_gc(p138, i123, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1547: p140 = new_array_clear(1, descr=<ArrayP 8>)
+1573: setarrayitem_gc(p140, 0, ConstPtr(ptr142), descr=<ArrayP 8>)
+1577: setfield_gc(p138, p140, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1588: setfield_gc(p138, ConstPtr(ptr143), descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1610: setfield_gc(p132, p138, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1614: p144 = new_with_vtable(descr=<SizeDescr 64>)
+1625: p145 = new_with_vtable(descr=<SizeDescr 16>)
+1636: setfield_gc(p145, i129, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1647: p146 = new_with_vtable(descr=<SizeDescr 16>)
+1658: setfield_gc(p146, i123, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1662: p147 = new_with_vtable(descr=<SizeDescr 16>)
+1673: setfield_gc(p147, i107, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1677: p148 = new_with_vtable(descr=<SizeDescr 40>)
+1695: p149 = new_with_vtable(descr=<SizeDescr 24>)
+1713: p150 = new_with_vtable(descr=<SizeDescr 24>)
+1724: setfield_gc(p150, p105, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1728: setfield_gc(p150, i107, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1732: setfield_gc(p149, p150, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1736: setfield_gc(p149, i114, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1740: p151 = new_with_vtable(descr=<SizeDescr 40>)
+1752: setfield_gc(p151, p101, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1764: p152 = new_with_vtable(descr=<SizeDescr 24>)
+1776: setfield_gc(p152, p93, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1780: setfield_gc(p152, i99, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1784: setfield_gc(p151, p152, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1789: setfield_gc(p151, p91, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1794: setfield_gc(p151, ConstPtr(ptr153), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+1894: i154 = getfield_gc_i(p147, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1905: setfield_gc(p144, ConstPtr(ptr155), descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1916: setfield_gc(p148, ConstPtr(ptr156), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+1920: setfield_gc(p148, p149, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1924: setfield_gc(p148, p151, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1928: setfield_gc(p144, p130, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1932: setfield_gc(p148, p101, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1936: setfield_gc(p144, p132, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_1 32 pure>)
+1947: setfield_gc(p144, p131, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_0 24 pure>)
+1958: setfield_gc(p144, p145, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_2 40 pure>)
+1969: setfield_gc(p144, p146, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_3 48 pure>)
+1973: setfield_gc(p144, p147, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_4 56 pure>)
+1977: i158 = int_ge(i154, -9223372036854775807)
+1990: guard_true(i158, descr=<Guard0x11d12620>) [p148, i129, p144, None, None, None, None, None, None]
+1996: i159 = getfield_gc_i(p146, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+2000: i161 = int_ge(i159, 1)
+2004: guard_true(i161, descr=<Guard0x11d12680>) [p148, i129, p144, None, None, None, None, None, None]
+2010: i162 = getfield_gc_i(p145, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+2015: jump(p144, i129, p148, p101, p147, i154, p146, p145, i162, p132, i159, descr=TargetToken(80545296))
+2096: --end of the loop--
[3e4c20f298b265d] jit-log-opt-bridge}
[3e4c20f2af9230f] {jit-backend
[3e4c20f2b0a1a35] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c201b
[3e4c20f2b0b4d73] jit-backend-dump}
[3e4c20f2b0d4f46] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c202f4 +0  34000000
[3e4c20f2b0d67cb] jit-backend-dump}
[3e4c20f2b0dac63] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c20785 +0  34000000
[3e4c20f2b0dbc60] jit-backend-dump}
[3e4c20f2b0df198] {jit-backend-addr
bridge out of Guard 0x46b7bb0 has address 0x7f4eb6c202f0 to 0x7f4eb6c20780
       gc table: 0x7f4eb6c201b0
    jump target: 0x7f4eb6c202f0
         resops: 0x7f4eb6c202fe
       failures: 0x7f4eb6c20780
            end: 0x7f4eb6c20b3a
[3e4c20f2b0e1d1c] jit-backend-addr}
[3e4c20f2b0e565e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2030e +0  C4040000
[3e4c20f2b0e6504] jit-backend-dump}
[3e4c20f2b0e998b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2031e +0  D0040000
[3e4c20f2b0ea733] jit-backend-dump}
[3e4c20f2b0edb0b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c20335 +0  D5040000
[3e4c20f2b0ee8c0] jit-backend-dump}
[3e4c20f2b0f200c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c20343 +0  FF040000
[3e4c20f2b0f2d93] jit-backend-dump}
[3e4c20f2b0f61eb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c20350 +0  0E050000
[3e4c20f2b0f6f1f] jit-backend-dump}
[3e4c20f2b0fa448] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c20364 +0  16050000
[3e4c20f2b0fb1a4] jit-backend-dump}
[3e4c20f2b0fe536] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2039b +0  FB040000
[3e4c20f2b0ff2c2] jit-backend-dump}
[3e4c20f2b1025d1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c203af +0  03050000
[3e4c20f2b103314] jit-backend-dump}
[3e4c20f2b106669] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c203c4 +0  0A050000
[3e4c20f2b1073b2] jit-backend-dump}
[3e4c20f2b10a690] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c203d5 +0  15050000
[3e4c20f2b10b3b1] jit-backend-dump}
[3e4c20f2b10e6e1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c203e9 +0  1D050000
[3e4c20f2b10f3fd] jit-backend-dump}
[3e4c20f2b1126fc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c203f7 +0  2B050000
[3e4c20f2b113405] jit-backend-dump}
[3e4c20f2b116723] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c20405 +0  39050000
[3e4c20f2b11742c] jit-backend-dump}
[3e4c20f2b11a8a6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2041c +0  3E050000
[3e4c20f2b11b5e6] jit-backend-dump}
[3e4c20f2b11e926] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c20429 +0  4D050000
[3e4c20f2b11f641] jit-backend-dump}
[3e4c20f2b1228c6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c20440 +0  52050000
[3e4c20f2b1235c6] jit-backend-dump}
[3e4c20f2b1268b0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c20458 +0  56050000
[3e4c20f2b1275b6] jit-backend-dump}
[3e4c20f2b12a85f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c20472 +0  58050000
[3e4c20f2b12b57b] jit-backend-dump}
[3e4c20f2b12e898] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c20490 +0  56050000
[3e4c20f2b12f5ba] jit-backend-dump}
[3e4c20f2b13284b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c204a6 +0  5C050000
[3e4c20f2b1335c5] jit-backend-dump}
[3e4c20f2b136890] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c204c1 +0  5D050000
[3e4c20f2b1375c7] jit-backend-dump}
[3e4c20f2b13a858] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c204db +0  5F050000
[3e4c20f2b13b57d] jit-backend-dump}
[3e4c20f2b13e86d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c204e4 +0  72050000
[3e4c20f2b13f582] jit-backend-dump}
[3e4c20f2b14282c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c204f1 +0  81050000
[3e4c20f2b143535] jit-backend-dump}
[3e4c20f2b14684c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c204fb +0  93050000
[3e4c20f2b147562] jit-backend-dump}
[3e4c20f2b14a84b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c20521 +0  89050000
[3e4c20f2b14b5e4] jit-backend-dump}
[3e4c20f2b14e8f0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2052b +0  9B050000
[3e4c20f2b14f608] jit-backend-dump}
[3e4c20f2b15288d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c20535 +0  AD050000
[3e4c20f2b153596] jit-backend-dump}
[3e4c20f2b1568a1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2071f +0  DF030000
[3e4c20f2b1575c0] jit-backend-dump}
[3e4c20f2b15a88b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2072d +0  ED030000
[3e4c20f2b15b5a6] jit-backend-dump}
[3e4c20f2b15ed4b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c17256 +0  96900000
[3e4c20f2b15fa7c] jit-backend-dump}
[3e4c20f2b1648aa] jit-backend}
[3e4c20f2b16878d] {jit-log-opt-bridge
# bridge out of Guard 0x46b7bb0 with 154 ops
[p0, p1]
+342: guard_class(p1, 16504944, descr=<Guard0xd108200>) [p0, p1]
+354: p3 = getfield_gc_r(p1, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+358: guard_class(p0, 16435208, descr=<Guard0xa8e5148>) [p0, p1]
+370: p5 = getfield_gc_r(p0, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+374: guard_nonnull_class(p5, ConstClass(ForwardLink), descr=<Guard0xd108260>) [p0, p1]
debug_merge_point(0, 0, '(+ i5574 1)')
+393: guard_not_invalidated(descr=<Guard0xa8e5190>) [p0, p1]
+393: i7 = getfield_gc_i(p1, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+397: i9 = int_add_ovf(i7, 1)
+401: guard_no_overflow(descr=<Guard0xa8e51d8>) [p0, p1]
debug_merge_point(0, 0, '(doloop5572 AppRand55)')
+407: guard_class(p3, 16481456, descr=<Guard0xa8e5220>) [p0, p1]
+420: p11 = getfield_gc_r(p3, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+431: guard_value(p11, ConstPtr(ptr12), descr=<Guard0xa8e55c8>) [p0, p1]
debug_merge_point(0, 0, '(let ([if10 (>= i5574 (quotient n5570 2))]) (if if10 (void) (begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55))))) from (doloop5572 AppRand55)')
debug_merge_point(0, 0, '(>= i5574 (quotient n5570 2))')
+440: i13 = getfield_gc_i(p3, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_vals_fixed_1 24 pure>)
+444: i15 = int_eq(i13, -9223372036854775808)
+444: i17 = int_rshift(i13, 1)
+450: i19 = int_lshift(i17, 1)
+456: i21 = int_xor(i13, 2)
+463: i23 = int_rshift(i21, 63)
+467: i24 = int_ne(i19, i13)
+480: i25 = int_and(i23, i24)
+483: i26 = int_add(i17, i25)
+486: i27 = int_ge(i9, i26)
+489: guard_true(i27, descr=<Guard0xa8e5610>) [p0, p1]
debug_merge_point(0, 0, '(if if10 (void) (begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55))))')
debug_merge_point(0, 0, '(void)')
+495: p28 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+506: guard_value(p28, ConstPtr(ptr29), descr=<Guard0xa8e5a00>) [p0, p1]
+515: p30 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+519: p31 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(doloop5663 (add1 i5665)) from (void)')
+523: guard_class(p30, 16504944, descr=<Guard0xa8e5a48>) [p0, p1]
+536: p33 = getfield_gc_r(p30, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+540: guard_class(p33, 16481456, descr=<Guard0xa8e5a90>) [p0, p1]
+553: p35 = getfield_gc_r(p33, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+564: guard_value(p35, ConstPtr(ptr36), descr=<Guard0x427d190>) [p0, p1]
+573: i37 = getfield_gc_i(p30, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+577: i39 = int_add_ovf(i37, 1)
+581: guard_no_overflow(descr=<Guard0x42c6380>) [p0, p1]
debug_merge_point(0, 0, '(let ([if14 (> i5665 gcold-iters)]) (if if14 (begin (void) (void)) (begin (doStep MEG) (doloop5663 (add1 i5665))))) from (doloop5663 (add1 i5665))')
+587: guard_class(p31, 16528368, descr=<Guard0x42c63c8>) [p0, p1]
+601: p41 = getfield_gc_r(p31, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+605: guard_nonnull_class(p41, ConstClass(ForwardLink), descr=<Guard0xd1082c0>) [p0, p1]
debug_merge_point(0, 0, '(> i5665 gcold-iters)')
+624: i44 = int_gt(i39, 3500)
+631: guard_false(i44, descr=<Guard0x42c6410>) [p0, p1]
debug_merge_point(0, 0, '(if if14 (begin (void) (void)) (begin (doStep MEG) (doloop5663 (add1 i5665))))')
debug_merge_point(0, 0, '(begin (doStep MEG) (doloop5663 (add1 i5665)))')
debug_merge_point(0, 0, '(doStep MEG)')
+637: p45 = getfield_gc_r(p33, descr=<FieldP pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_w_val0 32 pure>)
+641: guard_nonnull_class(p45, 16480328, descr=<Guard0xd108320>) [p0, p1]
+660: i47 = getfield_gc_i(p33, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_vals_fixed_1 24 pure>)
+664: p48 = getfield_gc_r(p45, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+675: guard_value(p48, ConstPtr(ptr49), descr=<Guard0x42c6458>) [p0, p1]
+684: p50 = getfield_gc_r(p33, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([mutations CellRef(actuallyMut)]) (CellRef(doYoungGenAlloc) n5623 words/dead) (CellRef(doMutWork) n5623) (CellRef(oldGenAlloc) (quotient n5623 promoteRate)) (let ([AppRand60 (+ mutations ptrMutRate)]) (let ([AppRand61 (- AppRand60 CellRef(actuallyMut))]) (let ([AppRand62 (max 0 AppRand61)]) (CellRef(oldGenMut) AppRand62)))))')
debug_merge_point(0, 0, 'CellRef(actuallyMut)')
+684: p51 = getfield_gc_r(p45, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_1 32 pure>)
+688: p52 = getfield_gc_r(p51, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+692: guard_nonnull_class(p52, ConstClass(W_CellIntegerStrategy), descr=<Guard0xd108380>) [p0, p1]
+710: i54 = getfield_gc_i(p52, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
debug_merge_point(0, 0, '(CellRef(doYoungGenAlloc) n5623 words/dead)')
+714: p55 = getfield_gc_r(p45, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_7 80 pure>)
+718: p56 = getfield_gc_r(p55, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+722: guard_nonnull_class(p56, 16478448, descr=<Guard0xd1083e0>) [p0, p1]
+740: p58 = getfield_gc_r(p45, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_3 48 pure>)
+744: guard_nonnull_class(p58, ConstClass(W_Fixnum), descr=<Guard0xd108440>) [p0, p1]
+762: p60 = getfield_gc_r(p56, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+780: guard_value(p60, ConstPtr(ptr61), descr=<Guard0x42c64a0>) [p0, p1]
+789: p62 = getfield_gc_r(p45, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+789: i63 = getfield_gc_i(p58, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(let ([nbytes (* nwords bytes/word)]) (let ([doloop5608 (lambda (allocated) (let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))))]) (doloop5608 0)))')
debug_merge_point(0, 0, '(* nwords bytes/word)')
+793: p64 = getfield_gc_r(p56, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize3.inst__vals_1 32 pure>)
+797: guard_nonnull_class(p64, ConstClass(W_Fixnum), descr=<Guard0xd1084a0>) [p0, p1]
+815: i66 = int_is_true(i63)
+818: guard_true(i66, descr=<Guard0x42c64e8>) [p0, p1]
+824: i67 = getfield_gc_i(p64, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+828: i68 = int_is_true(i67)
+831: guard_true(i68, descr=<Guard0x42c6530>) [p0, p1]
+837: i69 = int_mul_ovf(i63, i67)
+841: guard_no_overflow(descr=<Guard0x42c6578>) [p0, p1]
debug_merge_point(0, 0, '(let ([doloop5608 (lambda (allocated) (let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))))]) (doloop5608 0))')
+847: p70 = getfield_gc_r(p56, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(lambda (allocated) (let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))))')
+851: p71 = getfield_gc_r(p56, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize3.inst__vals_0 24 pure>)
+862: p72 = getfield_gc_r(p56, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize3.inst__vals_2 40 pure>)
+873: guard_class(p70, 16505296, descr=<Guard0x42c65c0>) [p0, p1]
debug_merge_point(0, 0, '(doloop5608 0)')
debug_merge_point(0, 0, '(let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))) from (doloop5608 0)')
debug_merge_point(0, 0, '(>= allocated n5602)')
+885: i75 = int_ge(0, i47)
+889: guard_false(i75, descr=<Guard0x44012b0>) [p0, p1]
debug_merge_point(0, 0, '(if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))')
debug_merge_point(0, 0, '(let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59)))')
debug_merge_point(0, 0, '(make-vector nwords 0)')
+895: i77 = int_lt(i63, 0)
+899: guard_false(i77, descr=<Guard0x44012f8>) [p0, p1]
debug_merge_point(0, 0, '(set! aexport SetBang10)')
debug_merge_point(0, 0, '(let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))')
debug_merge_point(0, 0, '(+ allocated nbytes)')
debug_merge_point(0, 0, '(doloop5608 AppRand59)')
debug_merge_point(0, 0, '(let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))) from (doloop5608 AppRand59)')
+905: p78 = new_with_vtable(descr=<SizeDescr 32>)
+949: setfield_gc(p78, i63, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+953: p80 = new_array_clear(1, descr=<ArrayP 8>)
+979: setarrayitem_gc(p80, 0, ConstPtr(ptr82), descr=<ArrayP 8>)
+983: setfield_gc(p78, p80, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+994: setfield_gc(p78, ConstPtr(ptr83), descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1008: setfield_gc(p72, p78, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1012: p84 = new_with_vtable(descr=<SizeDescr 64>)
+1023: p85 = new_with_vtable(descr=<SizeDescr 16>)
+1034: setfield_gc(p85, i69, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1045: p86 = new_with_vtable(descr=<SizeDescr 16>)
+1063: setfield_gc(p86, i63, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1067: p87 = new_with_vtable(descr=<SizeDescr 16>)
+1078: setfield_gc(p87, i47, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1082: p88 = new_with_vtable(descr=<SizeDescr 40>)
+1100: p89 = new_with_vtable(descr=<SizeDescr 24>)
+1118: p90 = new_with_vtable(descr=<SizeDescr 24>)
+1129: setfield_gc(p90, p45, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1133: setfield_gc(p90, i47, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1137: setfield_gc(p89, p90, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1141: setfield_gc(p89, i54, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1145: p91 = new_with_vtable(descr=<SizeDescr 40>)
+1156: setfield_gc(p91, p41, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1167: p92 = new_with_vtable(descr=<SizeDescr 24>)
+1178: setfield_gc(p92, p33, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1182: setfield_gc(p92, i39, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1186: setfield_gc(p91, p92, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1190: setfield_gc(p91, p31, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1194: setfield_gc(p91, ConstPtr(ptr93), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+1293: i94 = getfield_gc_i(p87, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1297: setfield_gc(p84, p70, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1301: setfield_gc(p88, p41, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1312: setfield_gc(p84, ConstPtr(ptr95), descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1323: setfield_gc(p88, ConstPtr(ptr96), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+1327: setfield_gc(p88, p89, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1331: setfield_gc(p88, p91, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1335: setfield_gc(p84, p71, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_0 24 pure>)
+1346: setfield_gc(p84, p72, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_1 32 pure>)
+1357: setfield_gc(p84, p85, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_2 40 pure>)
+1368: setfield_gc(p84, p86, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_3 48 pure>)
+1372: setfield_gc(p84, p87, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_4 56 pure>)
+1376: i98 = int_ge(i94, -9223372036854775807)
+1389: guard_true(i98, descr=<Guard0xd108500>) [p88, i69, p84]
+1395: i99 = getfield_gc_i(p86, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1399: i101 = int_ge(i99, 1)
+1403: guard_true(i101, descr=<Guard0xd108560>) [p88, i69, p84]
+1409: i102 = getfield_gc_i(p85, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1413: jump(p84, i69, p88, p41, p87, i94, p86, p85, i102, p72, i99, descr=TargetToken(80545296))
+1488: --end of the loop--
[3e4c20f2b1f5551] jit-log-opt-bridge}
[3e4c20f3260092d] {jit-backend
[3e4c20f3275df36] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c20e
[3e4c20f3277753f] jit-backend-dump}
[3e4c20f32798960] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c21084 +0  34000000
[3e4c20f32799f99] jit-backend-dump}
[3e4c20f3279e557] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c216c5 +0  34000000
[3e4c20f3279f4fb] jit-backend-dump}
[3e4c20f327a2c23] {jit-backend-addr
bridge out of Guard 0xa8e5388 has address 0x7f4eb6c21080 to 0x7f4eb6c216c0
       gc table: 0x7f4eb6c20e90
    jump target: 0x7f4eb6c21080
         resops: 0x7f4eb6c2108e
       failures: 0x7f4eb6c216c0
            end: 0x7f4eb6c21c8f
[3e4c20f327a5593] jit-backend-addr}
[3e4c20f327a9255] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c210a6 +0  89060000
[3e4c20f327aa06b] jit-backend-dump}
[3e4c20f327ad517] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c210bd +0  8E060000
[3e4c20f327ae23b] jit-backend-dump}
[3e4c20f327b16a0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c210ca +0  9D060000
[3e4c20f327b2489] jit-backend-dump}
[3e4c20f327b58de] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c210de +0  A5060000
[3e4c20f327b65ee] jit-backend-dump}
[3e4c20f327b9a3d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c210f3 +0  AC060000
[3e4c20f327ba750] jit-backend-dump}
[3e4c20f327bdafa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c21105 +0  B6060000
[3e4c20f327be7db] jit-backend-dump}
[3e4c20f327c1b92] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2111d +0  BA060000
[3e4c20f327c28f1] jit-backend-dump}
[3e4c20f327c5cf1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c21137 +0  BC060000
[3e4c20f327c69cf] jit-backend-dump}
[3e4c20f327c9d92] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c21148 +0  C7060000
[3e4c20f327caacc] jit-backend-dump}
[3e4c20f327cde42] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c21162 +0  C9060000
[3e4c20f327ceb73] jit-backend-dump}
[3e4c20f327d1e85] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c21170 +0  D7060000
[3e4c20f327d2c27] jit-backend-dump}
[3e4c20f327d60d5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c21180 +0  E3060000
[3e4c20f327d6dee] jit-backend-dump}
[3e4c20f327da1cf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c211a3 +0  DC060000
[3e4c20f327daee8] jit-backend-dump}
[3e4c20f327de2a4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c211b1 +0  EA060000
[3e4c20f327defb7] jit-backend-dump}
[3e4c20f327e2367] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c211c1 +0  F6060000
[3e4c20f327e30c6] jit-backend-dump}
[3e4c20f327e6492] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c211de +0  F5060000
[3e4c20f327e71a1] jit-backend-dump}
[3e4c20f327ea48b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c211f8 +0  F7060000
[3e4c20f327eb188] jit-backend-dump}
[3e4c20f327ee4bb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c21206 +0  05070000
[3e4c20f327ef1c1] jit-backend-dump}
[3e4c20f327f2522] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2121f +0  08070000
[3e4c20f327f3268] jit-backend-dump}
[3e4c20f327f6637] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c21235 +0  0E070000
[3e4c20f327f732b] jit-backend-dump}
[3e4c20f327fa62d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c21245 +0  1A070000
[3e4c20f327fb3c9] jit-backend-dump}
[3e4c20f327fe702] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2125c +0  1F070000
[3e4c20f327ff40f] jit-backend-dump}
[3e4c20f328027b3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2126a +0  2D070000
[3e4c20f328034f0] jit-backend-dump}
[3e4c20f3280684e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c21277 +0  3C070000
[3e4c20f32807532] jit-backend-dump}
[3e4c20f3280a83e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2128b +0  44070000
[3e4c20f3280b54d] jit-backend-dump}
[3e4c20f3280e8d3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c212c2 +0  29070000
[3e4c20f3280f5d3] jit-backend-dump}
[3e4c20f328128de] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c212d6 +0  31070000
[3e4c20f3281361e] jit-backend-dump}
[3e4c20f32816a2a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c212eb +0  38070000
[3e4c20f32817718] jit-backend-dump}
[3e4c20f3281aa57] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c212fb +0  44070000
[3e4c20f3281b77c] jit-backend-dump}
[3e4c20f3281eab5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2130f +0  4C070000
[3e4c20f3281f7be] jit-backend-dump}
[3e4c20f32822adc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2131d +0  5A070000
[3e4c20f32823813] jit-backend-dump}
[3e4c20f32826b31] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c21329 +0  6A070000
[3e4c20f32827809] jit-backend-dump}
[3e4c20f3282aad4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c21340 +0  6F070000
[3e4c20f3282b7dd] jit-backend-dump}
[3e4c20f3282ef39] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2134d +0  7E070000
[3e4c20f3282fc4b] jit-backend-dump}
[3e4c20f328330db] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c21364 +0  83070000
[3e4c20f32833e27] jit-backend-dump}
[3e4c20f3283aaef] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2137c +0  87070000
[3e4c20f3283b90b] jit-backend-dump}
[3e4c20f3283f1ab] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c21397 +0  88070000
[3e4c20f3283ff72] jit-backend-dump}
[3e4c20f328433ff] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c213b5 +0  86070000
[3e4c20f32844120] jit-backend-dump}
[3e4c20f3284750e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c213cc +0  8B070000
[3e4c20f3284823f] jit-backend-dump}
[3e4c20f3284b63f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c213e7 +0  8C070000
[3e4c20f3284c421] jit-backend-dump}
[3e4c20f3284f7b3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c21402 +0  8D070000
[3e4c20f32850515] jit-backend-dump}
[3e4c20f3285389e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2140b +0  A0070000
[3e4c20f328545cc] jit-backend-dump}
[3e4c20f3285794e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c21418 +0  AF070000
[3e4c20f328586a4] jit-backend-dump}
[3e4c20f3285bb06] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c21422 +0  C1070000
[3e4c20f3285c818] jit-backend-dump}
[3e4c20f3285fb64] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c21449 +0  B6070000
[3e4c20f3286088e] jit-backend-dump}
[3e4c20f32863cbc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c21453 +0  C8070000
[3e4c20f32864adf] jit-backend-dump}
[3e4c20f3286810f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2145d +0  DA070000
[3e4c20f32868e30] jit-backend-dump}
[3e4c20f3286c2b1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c21658 +0  FB050000
[3e4c20f3286cfcf] jit-backend-dump}
[3e4c20f3287031e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c21666 +0  09060000
[3e4c20f32871036] jit-backend-dump}
[3e4c20f32874862] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0c3f0 +0  8C4C0100
[3e4c20f328755a5] jit-backend-dump}
[3e4c20f3287a2ee] jit-backend}
[3e4c20f3287e1bb] {jit-log-opt-bridge
# bridge out of Guard 0xa8e5388 with 223 ops
[i0, p1, p2, p3]
+518: guard_not_invalidated(descr=<Guard0xd1085c0>) [i0, p1, p2, p3]
+518: p4 = getfield_gc_r(p1, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+529: guard_value(p4, ConstPtr(ptr5), descr=<Guard0x4401340>) [i0, p1, p2, p3]
+538: p6 = getfield_gc_r(p1, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_1 32 pure>)
+542: guard_nonnull_class(p6, ConstClass(W_Fixnum), descr=<Guard0xd108620>) [i0, p1, p2, p3]
+561: i8 = getfield_gc_i(p6, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+565: i9 = int_ge(i0, i8)
+568: guard_true(i9, descr=<Guard0x4401388>) [i0, p1, p2, p3]
debug_merge_point(0, 0, '(if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))')
debug_merge_point(0, 0, '(void)')
+574: p10 = getfield_gc_r(p2, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+585: guard_value(p10, ConstPtr(ptr11), descr=<Guard0x44013d0>) [i0, p1, p2, p3]
+594: p12 = getfield_gc_r(p2, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+598: p13 = getfield_gc_r(p2, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+602: guard_class(p12, 16500720, descr=<Guard0x4401418>) [i0, p1, p2, p3]
+615: p15 = getfield_gc_r(p12, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+619: guard_class(p13, 16435208, descr=<Guard0x4401460>) [i0, p1, p2, p3]
+633: p17 = getfield_gc_r(p13, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+638: guard_nonnull_class(p17, ConstClass(ForwardLink), descr=<Guard0xd108680>) [i0, p1, p2, p3]
debug_merge_point(0, 0, '(if (even? CellRef(path)) (let ([tmp (vector-ref CellRef(tn1) 0)][AppRand53 (vector-ref CellRef(tn2) 0)]) (vector-set! CellRef(tn1) 0 AppRand53) (vector-set! CellRef(tn2) 0 tmp)) (let ([tmp5560 (vector-ref CellRef(tn1) 1)][AppRand54 (vector-ref CellRef(tn2) 1)]) (vector-set! CellRef(tn1) 1 AppRand54) (vector-set! CellRef(tn2) 1 tmp5560)))')
+657: p19 = getfield_gc_r(p12, descr=<FieldP rpython.tool.pairtype.ConsEnvSize4.inst__vals_1 24 pure>)
+661: p20 = getfield_gc_r(p19, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+665: guard_nonnull_class(p20, ConstClass(W_CellIntegerStrategy), descr=<Guard0xd1086e0>) [i0, p1, p2, p3]
+683: i22 = getfield_gc_i(p20, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+687: i24 = int_and(i22, 1)
+691: i25 = int_is_zero(i24)
+694: guard_true(i25, descr=<Guard0x44014a8>) [i0, p1, p2, p3]
debug_merge_point(0, 0, '(let ([tmp (vector-ref CellRef(tn1) 0)][AppRand53 (vector-ref CellRef(tn2) 0)]) (vector-set! CellRef(tn1) 0 AppRand53) (vector-set! CellRef(tn2) 0 tmp))')
debug_merge_point(0, 0, '(vector-ref CellRef(tn1) 0)')
+700: p26 = getfield_gc_r(p12, descr=<FieldP rpython.tool.pairtype.ConsEnvSize4.inst__vals_2 32 pure>)
+704: p27 = getfield_gc_r(p26, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+708: guard_nonnull_class(p27, ConstClass(W_Vector), descr=<Guard0xd108740>) [i0, p1, p2, p3]
+726: i29 = getfield_gc_i(p27, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+730: i31 = int_lt(0, i29)
+734: guard_true(i31, descr=<Guard0x44014f0>) [i0, p1, p2, p3]
+740: p32 = getfield_gc_r(p27, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+744: guard_class(p32, 16623792, descr=<Guard0x4401538>) [i0, p1, p2, p3]
+756: p34 = getfield_gc_r(p27, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+760: i36 = getarrayitem_gc_i(p34, 0, descr=<ArrayS 8>)
debug_merge_point(0, 0, '(vector-ref CellRef(tn2) 0)')
+764: p37 = getfield_gc_r(p12, descr=<FieldP rpython.tool.pairtype.ConsEnvSize4.inst__vals_3 40 pure>)
+768: p38 = getfield_gc_r(p37, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+772: guard_nonnull_class(p38, ConstClass(W_Vector), descr=<Guard0xd1087a0>) [i0, p1, p2, p3]
+791: i40 = getfield_gc_i(p38, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+795: i42 = int_lt(0, i40)
+799: guard_true(i42, descr=<Guard0x4401580>) [i0, p1, p2, p3]
+805: p43 = getfield_gc_r(p38, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+809: guard_class(p43, 16623792, descr=<Guard0x44015c8>) [i0, p1, p2, p3]
+821: p45 = getfield_gc_r(p38, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+825: i47 = getarrayitem_gc_i(p45, 0, descr=<ArrayS 8>)
debug_merge_point(0, 0, '(vector-set! CellRef(tn1) 0 AppRand53)')
debug_merge_point(0, 0, '(vector-set! CellRef(tn2) 0 tmp)')
+829: setarrayitem_gc(p34, 0, i47, descr=<ArrayS 8>)
debug_merge_point(0, 0, '(let ([SetBang7 (+ CellRef(actuallyMut) 2)]) (set! actuallyMut SetBang7))')
debug_merge_point(0, 0, '(+ CellRef(actuallyMut) 2)')
+833: setarrayitem_gc(p45, 0, i36, descr=<ArrayS 8>)
+837: guard_class(p15, 16479200, descr=<Guard0xd108800>) [p15, p13, p17, None, None, None, None]
+850: p52 = getfield_gc_r(p15, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_1 32 pure>)
+854: p53 = getfield_gc_r(p52, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+858: guard_nonnull_class(p53, ConstClass(W_CellIntegerStrategy), descr=<Guard0xd108860>) [p15, p13, p17, None, None, None, None]
+876: i55 = getfield_gc_i(p53, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+880: i57 = int_add_ovf(i55, 2)
+884: guard_no_overflow(descr=<Guard0x4401610>) [p15, p13, p17, None, None, None, None]
debug_merge_point(0, 0, '(set! actuallyMut SetBang7)')
+890: p58 = getfield_gc_r(p13, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+895: setfield_gc(p53, i57, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+906: guard_value(p58, ConstPtr(ptr59), descr=<Guard0xd1088c0>) [p58, p13, None, None, None, None, None, None]
+915: p60 = getfield_gc_r(p13, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+920: p61 = getfield_gc_r(p13, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55)) from (+ CellRef(actuallyMut) 2)')
+925: guard_class(p60, 16504944, descr=<Guard0x4401658>) [p58, p13, None, None, None, None, None, None]
+937: p63 = getfield_gc_r(p60, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+941: guard_class(p61, 16435208, descr=<Guard0xba3f340>) [p58, p13, None, None, None, None, None, None]
+953: p65 = getfield_gc_r(p61, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+957: guard_nonnull_class(p65, ConstClass(ForwardLink), descr=<Guard0xd108920>) [p58, p13, None, None, None, None, None, None]
debug_merge_point(0, 0, '(+ i5574 1)')
+976: i67 = getfield_gc_i(p60, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+980: i69 = int_add_ovf(i67, 1)
+984: guard_no_overflow(descr=<Guard0xba3f388>) [p58, p13, None, None, None, None, None, None]
debug_merge_point(0, 0, '(doloop5572 AppRand55)')
+990: guard_class(p63, 16481456, descr=<Guard0xba3f3d0>) [p58, p13, None, None, None, None, None, None]
+1003: p71 = getfield_gc_r(p63, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1014: guard_value(p71, ConstPtr(ptr72), descr=<Guard0xba3f418>) [p58, p13, None, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([if10 (>= i5574 (quotient n5570 2))]) (if if10 (void) (begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55))))) from (doloop5572 AppRand55)')
debug_merge_point(0, 0, '(>= i5574 (quotient n5570 2))')
+1023: i73 = getfield_gc_i(p63, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_vals_fixed_1 24 pure>)
+1027: i75 = int_eq(i73, -9223372036854775808)
+1027: i77 = int_rshift(i73, 1)
+1033: i79 = int_lshift(i77, 1)
+1039: i81 = int_xor(i73, 2)
+1046: i83 = int_rshift(i81, 63)
+1050: i84 = int_ne(i79, i73)
+1063: i85 = int_and(i83, i84)
+1066: i86 = int_add(i77, i85)
+1069: i87 = int_ge(i69, i86)
+1072: guard_true(i87, descr=<Guard0xba3f460>) [p58, p13, None, None, None, None, None, None]
debug_merge_point(0, 0, '(if if10 (void) (begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55))))')
debug_merge_point(0, 0, '(void)')
+1078: p88 = getfield_gc_r(p61, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+1089: guard_value(p88, ConstPtr(ptr89), descr=<Guard0xba3f4a8>) [p58, p13, None, None, None, None, None, None]
+1098: p90 = getfield_gc_r(p61, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1102: p91 = getfield_gc_r(p61, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(doloop5663 (add1 i5665)) from (void)')
+1106: guard_class(p90, 16504944, descr=<Guard0xba3f4f0>) [p58, p13, None, None, None, None, None, None]
+1119: p93 = getfield_gc_r(p90, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1123: guard_class(p93, 16481456, descr=<Guard0xba3f538>) [p58, p13, None, None, None, None, None, None]
+1135: p95 = getfield_gc_r(p93, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1146: guard_value(p95, ConstPtr(ptr96), descr=<Guard0xba3f580>) [p58, p13, None, None, None, None, None, None]
+1155: i97 = getfield_gc_i(p90, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1159: i99 = int_add_ovf(i97, 1)
+1163: guard_no_overflow(descr=<Guard0xba3f5c8>) [p58, p13, None, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([if14 (> i5665 gcold-iters)]) (if if14 (begin (void) (void)) (begin (doStep MEG) (doloop5663 (add1 i5665))))) from (doloop5663 (add1 i5665))')
+1169: guard_class(p91, 16528368, descr=<Guard0xba3f610>) [p58, p13, None, None, None, None, None, None]
+1181: p101 = getfield_gc_r(p91, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1185: guard_nonnull_class(p101, ConstClass(ForwardLink), descr=<Guard0xd108980>) [p58, p13, None, None, None, None, None, None]
debug_merge_point(0, 0, '(> i5665 gcold-iters)')
+1204: i104 = int_gt(i99, 3500)
+1211: guard_false(i104, descr=<Guard0xba3f658>) [p58, p13, None, None, None, None, None, None]
debug_merge_point(0, 0, '(if if14 (begin (void) (void)) (begin (doStep MEG) (doloop5663 (add1 i5665))))')
debug_merge_point(0, 0, '(begin (doStep MEG) (doloop5663 (add1 i5665)))')
debug_merge_point(0, 0, '(doStep MEG)')
+1217: p105 = getfield_gc_r(p93, descr=<FieldP pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_w_val0 32 pure>)
+1221: guard_nonnull_class(p105, 16480328, descr=<Guard0xd1089e0>) [p58, p13, None, None, None, None, None, None]
+1240: i107 = getfield_gc_i(p93, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_vals_fixed_1 24 pure>)
+1244: p108 = getfield_gc_r(p105, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1255: guard_value(p108, ConstPtr(ptr109), descr=<Guard0xba3f6a0>) [p58, p13, None, None, None, None, None, None]
+1264: p110 = getfield_gc_r(p93, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([mutations CellRef(actuallyMut)]) (CellRef(doYoungGenAlloc) n5623 words/dead) (CellRef(doMutWork) n5623) (CellRef(oldGenAlloc) (quotient n5623 promoteRate)) (let ([AppRand60 (+ mutations ptrMutRate)]) (let ([AppRand61 (- AppRand60 CellRef(actuallyMut))]) (let ([AppRand62 (max 0 AppRand61)]) (CellRef(oldGenMut) AppRand62)))))')
debug_merge_point(0, 0, 'CellRef(actuallyMut)')
+1264: p111 = getfield_gc_r(p105, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_1 32 pure>)
+1268: p112 = getfield_gc_r(p111, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1272: guard_nonnull_class(p112, ConstClass(W_CellIntegerStrategy), descr=<Guard0xd108a40>) [p58, p13, None, None, None, None, None, None]
+1291: i114 = getfield_gc_i(p112, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
debug_merge_point(0, 0, '(CellRef(doYoungGenAlloc) n5623 words/dead)')
+1295: p115 = getfield_gc_r(p105, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_7 80 pure>)
+1299: p116 = getfield_gc_r(p115, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1303: guard_nonnull_class(p116, 16478448, descr=<Guard0xd108aa0>) [p58, p13, None, None, None, None, None, None]
+1321: p118 = getfield_gc_r(p105, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_3 48 pure>)
+1325: guard_nonnull_class(p118, ConstClass(W_Fixnum), descr=<Guard0xd108b00>) [p58, p13, None, None, None, None, None, None]
+1344: p120 = getfield_gc_r(p116, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1362: guard_value(p120, ConstPtr(ptr121), descr=<Guard0xba3f6e8>) [p58, p13, None, None, None, None, None, None]
+1371: p122 = getfield_gc_r(p105, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1371: i123 = getfield_gc_i(p118, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(let ([nbytes (* nwords bytes/word)]) (let ([doloop5608 (lambda (allocated) (let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))))]) (doloop5608 0)))')
debug_merge_point(0, 0, '(* nwords bytes/word)')
+1375: p124 = getfield_gc_r(p116, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize3.inst__vals_1 32 pure>)
+1379: guard_nonnull_class(p124, ConstClass(W_Fixnum), descr=<Guard0xd108b60>) [p58, p13, None, None, None, None, None, None]
+1398: i126 = int_is_true(i123)
+1401: guard_true(i126, descr=<Guard0xba3f730>) [p58, p13, None, None, None, None, None, None]
+1407: i127 = getfield_gc_i(p124, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1411: i128 = int_is_true(i127)
+1414: guard_true(i128, descr=<Guard0xba3f778>) [p58, p13, None, None, None, None, None, None]
+1420: i129 = int_mul_ovf(i123, i127)
+1424: guard_no_overflow(descr=<Guard0xba3f7c0>) [p58, p13, None, None, None, None, None, None]
debug_merge_point(0, 0, '(let ([doloop5608 (lambda (allocated) (let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))))]) (doloop5608 0))')
+1430: p130 = getfield_gc_r(p116, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(lambda (allocated) (let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))))')
+1434: p131 = getfield_gc_r(p116, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize3.inst__vals_0 24 pure>)
+1445: p132 = getfield_gc_r(p116, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize3.inst__vals_2 40 pure>)
+1456: guard_class(p130, 16505296, descr=<Guard0xba3f808>) [p58, p13, None, None, None, None, None, None]
debug_merge_point(0, 0, '(doloop5608 0)')
debug_merge_point(0, 0, '(let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))) from (doloop5608 0)')
debug_merge_point(0, 0, '(>= allocated n5602)')
+1469: i135 = int_ge(0, i107)
+1473: guard_false(i135, descr=<Guard0xba3f850>) [p58, p13, None, None, None, None, None, None]
debug_merge_point(0, 0, '(if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))')
debug_merge_point(0, 0, '(let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59)))')
debug_merge_point(0, 0, '(make-vector nwords 0)')
+1479: i137 = int_lt(i123, 0)
+1483: guard_false(i137, descr=<Guard0xba3f898>) [p58, p13, None, None, None, None, None, None]
debug_merge_point(0, 0, '(set! aexport SetBang10)')
debug_merge_point(0, 0, '(let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))')
debug_merge_point(0, 0, '(+ allocated nbytes)')
debug_merge_point(0, 0, '(doloop5608 AppRand59)')
debug_merge_point(0, 0, '(let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))) from (doloop5608 AppRand59)')
+1489: p138 = new_with_vtable(descr=<SizeDescr 32>)
+1543: setfield_gc(p138, i123, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1547: p140 = new_array_clear(1, descr=<ArrayP 8>)
+1573: setarrayitem_gc(p140, 0, ConstPtr(ptr142), descr=<ArrayP 8>)
+1577: setfield_gc(p138, p140, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1588: setfield_gc(p138, ConstPtr(ptr143), descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1610: setfield_gc(p132, p138, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1614: p144 = new_with_vtable(descr=<SizeDescr 64>)
+1625: p145 = new_with_vtable(descr=<SizeDescr 16>)
+1636: setfield_gc(p145, i129, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1647: p146 = new_with_vtable(descr=<SizeDescr 16>)
+1658: setfield_gc(p146, i123, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1662: p147 = new_with_vtable(descr=<SizeDescr 16>)
+1673: setfield_gc(p147, i107, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1677: p148 = new_with_vtable(descr=<SizeDescr 40>)
+1695: p149 = new_with_vtable(descr=<SizeDescr 24>)
+1713: p150 = new_with_vtable(descr=<SizeDescr 24>)
+1724: setfield_gc(p150, p105, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1728: setfield_gc(p150, i107, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1732: setfield_gc(p149, p150, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1736: setfield_gc(p149, i114, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1740: p151 = new_with_vtable(descr=<SizeDescr 40>)
+1752: setfield_gc(p151, p101, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1764: p152 = new_with_vtable(descr=<SizeDescr 24>)
+1776: setfield_gc(p152, p93, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1780: setfield_gc(p152, i99, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1784: setfield_gc(p151, p152, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1789: setfield_gc(p151, p91, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1794: setfield_gc(p151, ConstPtr(ptr153), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+1894: i154 = getfield_gc_i(p147, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1905: setfield_gc(p144, ConstPtr(ptr155), descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1916: setfield_gc(p148, ConstPtr(ptr156), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+1920: setfield_gc(p148, p149, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1924: setfield_gc(p148, p151, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1928: setfield_gc(p144, p130, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1932: setfield_gc(p148, p101, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1936: setfield_gc(p144, p132, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_1 32 pure>)
+1947: setfield_gc(p144, p131, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_0 24 pure>)
+1958: setfield_gc(p144, p145, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_2 40 pure>)
+1969: setfield_gc(p144, p146, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_3 48 pure>)
+1973: setfield_gc(p144, p147, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_4 56 pure>)
+1977: i158 = int_ge(i154, -9223372036854775807)
+1990: guard_true(i158, descr=<Guard0xd108bc0>) [p148, i129, p144, None, None, None, None, None, None]
+1996: i159 = getfield_gc_i(p146, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+2000: i161 = int_ge(i159, 1)
+2004: guard_true(i161, descr=<Guard0xd108c20>) [p148, i129, p144, None, None, None, None, None, None]
+2010: i162 = getfield_gc_i(p145, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+2015: jump(p144, i129, p148, p101, p147, i154, p146, p145, i162, p132, i159, descr=TargetToken(80545296))
+2096: --end of the loop--
[3e4c20f32940630] jit-log-opt-bridge}
[3e4c20f3437dd16] {jit-backend
[3e4c20f344f4996] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c
[3e4c20f3450f9bb] jit-backend-dump}
[3e4c20f34530f97] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c22274 +0  34000000
[3e4c20f345326f9] jit-backend-dump}
[3e4c20f34536ea1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c22905 +0  34000000
[3e4c20f34537ecb] jit-backend-dump}
[3e4c20f3453b4b5] {jit-backend-addr
bridge out of Guard 0x4bd6ec0 has address 0x7f4eb6c22270 to 0x7f4eb6c22900
       gc table: 0x7f4eb6c22050
    jump target: 0x7f4eb6c22270
         resops: 0x7f4eb6c2227e
       failures: 0x7f4eb6c22900
            end: 0x7f4eb6c22fcb
[3e4c20f3453dd86] jit-backend-addr}
[3e4c20f3454153a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2228c +0  FF060000
[3e4c20f34542457] jit-backend-dump}
[3e4c20f3454593d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c222a0 +0  07070000
[3e4c20f34546689] jit-backend-dump}
[3e4c20f34549a7a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c222b8 +0  0B070000
[3e4c20f3454a7ee] jit-backend-dump}
[3e4c20f3454db40] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c222ce +0  11070000
[3e4c20f3454e88f] jit-backend-dump}
[3e4c20f34551eb3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c222db +0  3C070000
[3e4c20f34552bf9] jit-backend-dump}
[3e4c20f345566b6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c222eb +0  48070000
[3e4c20f34557406] jit-backend-dump}
[3e4c20f3455a972] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c22305 +0  4A070000
[3e4c20f3455b739] jit-backend-dump}
[3e4c20f3455eb8e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c22313 +0  58070000
[3e4c20f3455f8b3] jit-backend-dump}
[3e4c20f34562bcb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c22327 +0  60070000
[3e4c20f345638fc] jit-backend-dump}
[3e4c20f34566be8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2233e +0  65070000
[3e4c20f3456791c] jit-backend-dump}
[3e4c20f3456ac7a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c22353 +0  6C070000
[3e4c20f3456b999] jit-backend-dump}
[3e4c20f3456ecc3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c22361 +0  7A070000
[3e4c20f3456fa0c] jit-backend-dump}
[3e4c20f34572d3f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2236a +0  8D070000
[3e4c20f34573ac0] jit-backend-dump}
[3e4c20f34576de3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2237b +0  98070000
[3e4c20f34577b36] jit-backend-dump}
[3e4c20f3457aedd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2238b +0  A4070000
[3e4c20f3457bc2d] jit-backend-dump}
[3e4c20f3457ef44] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c22395 +0  B6070000
[3e4c20f3457fc66] jit-backend-dump}
[3e4c20f34582f77] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c223a5 +0  C2070000
[3e4c20f34583ca8] jit-backend-dump}
[3e4c20f34586f61] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c223b3 +0  D0070000
[3e4c20f34587c92] jit-backend-dump}
[3e4c20f3458afa0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c223c4 +0  DB070000
[3e4c20f3458bce7] jit-backend-dump}
[3e4c20f3458f026] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c223d8 +0  E3070000
[3e4c20f3458fd60] jit-backend-dump}
[3e4c20f3459308d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c223e6 +0  F1070000
[3e4c20f34593df2] jit-backend-dump}
[3e4c20f345970ee] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c223f6 +0  FD070000
[3e4c20f34597e50] jit-backend-dump}
[3e4c20f3459b18c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2240a +0  05080000
[3e4c20f3459bed2] jit-backend-dump}
[3e4c20f3459f212] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c22442 +0  E9070000
[3e4c20f3459ff21] jit-backend-dump}
[3e4c20f345a3223] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c22450 +0  F7070000
[3e4c20f345a3f5a] jit-backend-dump}
[3e4c20f345a72da] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2246f +0  F4070000
[3e4c20f345a8008] jit-backend-dump}
[3e4c20f345ab316] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c22483 +0  FC070000
[3e4c20f345ac056] jit-backend-dump}
[3e4c20f345af337] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c22494 +0  07080000
[3e4c20f345b0074] jit-backend-dump}
[3e4c20f345b3379] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c224ab +0  0C080000
[3e4c20f345b40b6] jit-backend-dump}
[3e4c20f345b73a9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c224b9 +0  1A080000
[3e4c20f345b80e3] jit-backend-dump}
[3e4c20f345bb3eb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c224c5 +0  2A080000
[3e4c20f345bc138] jit-backend-dump}
[3e4c20f345bf4cd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c224d9 +0  32080000
[3e4c20f345c022f] jit-backend-dump}
[3e4c20f345c3574] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2250f +0  18080000
[3e4c20f345c42ca] jit-backend-dump}
[3e4c20f345c75c9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c22523 +0  20080000
[3e4c20f345c82d8] jit-backend-dump}
[3e4c20f345cb6c6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c22537 +0  28080000
[3e4c20f345cc446] jit-backend-dump}
[3e4c20f345cfa1a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c22548 +0  33080000
[3e4c20f345d07bf] jit-backend-dump}
[3e4c20f345d3cb1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2255c +0  3B080000
[3e4c20f345d4a25] jit-backend-dump}
[3e4c20f345d7e0d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2256a +0  49080000
[3e4c20f345d8c8b] jit-backend-dump}
[3e4c20f345dc158] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c22576 +0  59080000
[3e4c20f345dcec3] jit-backend-dump}
[3e4c20f345e0249] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2258c +0  5F080000
[3e4c20f345e0fcf] jit-backend-dump}
[3e4c20f345e751f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c22599 +0  6E080000
[3e4c20f345e8440] jit-backend-dump}
[3e4c20f345ec105] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c225af +0  74080000
[3e4c20f345ecf03] jit-backend-dump}
[3e4c20f345f04f8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c225c7 +0  78080000
[3e4c20f345f1270] jit-backend-dump}
[3e4c20f345f4670] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c225e3 +0  78080000
[3e4c20f345f54d2] jit-backend-dump}
[3e4c20f345f8a60] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c22601 +0  76080000
[3e4c20f345f9818] jit-backend-dump}
[3e4c20f345fcbb0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c22619 +0  7A080000
[3e4c20f345fd91e] jit-backend-dump}
[3e4c20f34600d89] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c22634 +0  7B080000
[3e4c20f34601acf] jit-backend-dump}
[3e4c20f34604ec0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c22650 +0  7B080000
[3e4c20f34605c06] jit-backend-dump}
[3e4c20f34608fba] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c22659 +0  8E080000
[3e4c20f34609cd5] jit-backend-dump}
[3e4c20f3460d04f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c22666 +0  9D080000
[3e4c20f3460ddb4] jit-backend-dump}
[3e4c20f346111b4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c22670 +0  AF080000
[3e4c20f34611ede] jit-backend-dump}
[3e4c20f3461522a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c22698 +0  A3080000
[3e4c20f34615f8c] jit-backend-dump}
[3e4c20f34619302] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c226a2 +0  B5080000
[3e4c20f3461a039] jit-backend-dump}
[3e4c20f3461d382] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c226ac +0  C7080000
[3e4c20f3461e0e4] jit-backend-dump}
[3e4c20f34621457] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2289a +0  F5060000
[3e4c20f3462218e] jit-backend-dump}
[3e4c20f3462548a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c228a8 +0  03070000
[3e4c20f346261d6] jit-backend-dump}
[3e4c20f34629941] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0eaf0 +0  7C370100
[3e4c20f3462a64a] jit-backend-dump}
[3e4c20f3462f864] jit-backend}
[3e4c20f34633630] {jit-log-opt-bridge
# bridge out of Guard 0x4bd6ec0 with 243 ops
[p0, i1, i2, i3, i4, p5, p6]
+566: i8 = int_lt(i4, 0)
+570: guard_false(i8, descr=<Guard0xd108c80>) [p0, i1, i2, i3, i4, p5, p6]
+576: p9 = getfield_gc_r(p0, descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+587: guard_value(p9, ConstPtr(ptr10), descr=<Guard0xba3f8e0>) [p0, i1, i2, i3, i4, p5, p6]
+596: i11 = getfield_gc_i(p0, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+600: p12 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+604: p13 = getfield_gc_r(p0, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+608: guard_class(p13, 16435208, descr=<Guard0xba3f928>) [p0, i1, i2, i3, i4, p5, p6]
+620: p15 = getfield_gc_r(p13, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+624: guard_nonnull_class(p15, ConstClass(ForwardLink), descr=<Guard0xd108ce0>) [p0, i1, i2, i3, i4, p5, p6]
debug_merge_point(0, 0, '(vector-ref CellRef(trees) index1)')
+642: guard_not_invalidated(descr=<Guard0xba3f970>) [p0, i1, i2, i3, i4, p5, p6]
+642: guard_class(p12, 16503888, descr=<Guard0xba3f9b8>) [p0, i1, i2, i3, i4, p5, p6]
+655: p18 = getfield_gc_r(p12, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+659: guard_class(p18, 16479200, descr=<Guard0xba3fa00>) [p0, i1, i2, i3, i4, p5, p6]
+671: p20 = getfield_gc_r(p18, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_3 48 pure>)
+675: p21 = getfield_gc_r(p20, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+679: guard_nonnull_class(p21, ConstClass(W_Vector), descr=<Guard0xd108d40>) [p0, i1, i2, i3, i4, p5, p6]
+697: i23 = getfield_gc_i(p12, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_0 16 pure>)
+701: i25 = int_ge(i23, 0)
+705: guard_true(i25, descr=<Guard0xba3fa48>) [p0, i1, i2, i3, i4, p5, p6]
+711: i26 = getfield_gc_i(p21, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+722: i27 = int_lt(i23, i26)
+725: guard_true(i27, descr=<Guard0xba3fa90>) [p0, i1, i2, i3, i4, p5, p6]
+731: p28 = getfield_gc_r(p21, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+742: guard_class(p28, 16622984, descr=<Guard0xba3fad8>) [p0, i1, i2, i3, i4, p5, p6]
+754: p30 = getfield_gc_r(p21, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+758: p31 = getarrayitem_gc_r(p30, i23, descr=<ArrayP 8>)
+763: guard_class(p31, ConstClass(W_Vector), descr=<Guard0xba3fb20>) [p0, i1, i2, i3, i4, p5, p6]
debug_merge_point(0, 0, '(vector-ref CellRef(trees) index2)')
+775: i33 = getfield_gc_i(p12, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_1 24 pure>)
+779: i35 = int_ge(i33, 0)
+783: guard_true(i35, descr=<Guard0xba3fb68>) [p0, i1, i2, i3, i4, p5, p6]
+789: i36 = int_lt(i33, i26)
+792: guard_true(i36, descr=<Guard0xba3fbb0>) [p0, i1, i2, i3, i4, p5, p6]
+798: p37 = getarrayitem_gc_r(p30, i33, descr=<ArrayP 8>)
+803: guard_class(p37, ConstClass(W_Vector), descr=<Guard0xba3fbf8>) [p0, i1, i2, i3, i4, p5, p6]
debug_merge_point(0, 0, '(let ([doloop5533 (lambda (i5535) (let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))))]) (doloop5533 0) (if (even? CellRef(path)) (let ([tmp (vector-ref CellRef(tn1) 0)][AppRand53 (vector-ref CellRef(tn2) 0)]) (vector-set! CellRef(tn1) 0 AppRand53) (vector-set! CellRef(tn2) 0 tmp)) (let ([tmp5560 (vector-ref CellRef(tn1) 1)][AppRand54 (vector-ref CellRef(tn2) 1)]) (vector-set! CellRef(tn1) 1 AppRand54) (vector-set! CellRef(tn2) 1 tmp5560))) (let ([SetBang7 (+ CellRef(actuallyMut) 2)]) (set! actuallyMut SetBang7)))')
debug_merge_point(0, 0, '(lambda (i5535) (let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))))')
+815: p39 = getfield_gc_r(p18, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+819: guard_class(p39, 16505296, descr=<Guard0xba3fc40>) [p0, i1, i2, i3, i4, p5, p6]
debug_merge_point(0, 0, '(doloop5533 0)')
debug_merge_point(0, 0, '(let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))) from (doloop5533 0)')
debug_merge_point(0, 0, '(>= i5535 depth)')
+831: i42 = int_ge(0, i11)
+835: guard_true(i42, descr=<Guard0xba3fc88>) [p0, i1, i2, i3, i4, p5, p6]
debug_merge_point(0, 0, '(if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))')
debug_merge_point(0, 0, '(void)')
debug_merge_point(0, 0, '(if (even? CellRef(path)) (let ([tmp (vector-ref CellRef(tn1) 0)][AppRand53 (vector-ref CellRef(tn2) 0)]) (vector-set! CellRef(tn1) 0 AppRand53) (vector-set! CellRef(tn2) 0 tmp)) (let ([tmp5560 (vector-ref CellRef(tn1) 1)][AppRand54 (vector-ref CellRef(tn2) 1)]) (vector-set! CellRef(tn1) 1 AppRand54) (vector-set! CellRef(tn2) 1 tmp5560)))')
+841: i44 = int_and(i2, 1)
+848: i45 = int_is_zero(i44)
+851: guard_true(i45, descr=<Guard0xba3fcd0>) [p0, i1, i2, i3, i4, p5, p6]
debug_merge_point(0, 0, '(let ([tmp (vector-ref CellRef(tn1) 0)][AppRand53 (vector-ref CellRef(tn2) 0)]) (vector-set! CellRef(tn1) 0 AppRand53) (vector-set! CellRef(tn2) 0 tmp))')
debug_merge_point(0, 0, '(vector-ref CellRef(tn1) 0)')
+857: i46 = getfield_gc_i(p31, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+861: i48 = int_lt(0, i46)
+865: guard_true(i48, descr=<Guard0xba3fd18>) [p0, i1, i2, i3, i4, p5, p6]
+871: p49 = getfield_gc_r(p31, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+875: guard_class(p49, 16622984, descr=<Guard0xba3fd60>) [p0, i1, i2, i3, i4, p5, p6]
+888: p51 = getfield_gc_r(p31, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+892: p53 = getarrayitem_gc_r(p51, 0, descr=<ArrayP 8>)
+896: guard_class(p53, ConstClass(W_Vector), descr=<Guard0xba3fda8>) [p0, i1, i2, i3, i4, p5, p6]
debug_merge_point(0, 0, '(vector-ref CellRef(tn2) 0)')
+908: i55 = getfield_gc_i(p37, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+912: i57 = int_lt(0, i55)
+916: guard_true(i57, descr=<Guard0xba3fdf0>) [p0, i1, i2, i3, i4, p5, p6]
+922: p58 = getfield_gc_r(p37, descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+926: guard_class(p58, 16622984, descr=<Guard0xba3fe38>) [p0, i1, i2, i3, i4, p5, p6]
+938: p60 = getfield_gc_r(p37, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+942: p62 = getarrayitem_gc_r(p60, 0, descr=<ArrayP 8>)
+946: guard_class(p62, ConstClass(W_Vector), descr=<Guard0xba3fe80>) [p0, i1, i2, i3, i4, p5, p6]
debug_merge_point(0, 0, '(vector-set! CellRef(tn1) 0 AppRand53)')
debug_merge_point(0, 0, '(vector-set! CellRef(tn2) 0 tmp)')
+969: setarrayitem_gc(p51, 0, p62, descr=<ArrayP 8>)
debug_merge_point(0, 0, '(let ([SetBang7 (+ CellRef(actuallyMut) 2)]) (set! actuallyMut SetBang7))')
debug_merge_point(0, 0, '(+ CellRef(actuallyMut) 2)')
+973: p65 = getfield_gc_r(p18, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_1 32 pure>)
+977: p66 = getfield_gc_r(p65, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+991: setarrayitem_gc(p60, 0, p53, descr=<ArrayP 8>)
+995: guard_nonnull_class(p66, ConstClass(W_CellIntegerStrategy), descr=<Guard0xd108da0>) [p18, p66, p13, p15, None, None]
+1014: i70 = getfield_gc_i(p66, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1018: i72 = int_add_ovf(i70, 2)
+1022: guard_no_overflow(descr=<Guard0xba3fec8>) [p18, p66, p13, p15, None, None]
debug_merge_point(0, 0, '(set! actuallyMut SetBang7)')
+1028: p73 = getfield_gc_r(p13, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+1039: setfield_gc(p66, i72, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1050: guard_value(p73, ConstPtr(ptr74), descr=<Guard0xd108e00>) [p73, p13, None, None, None, None]
+1059: p75 = getfield_gc_r(p13, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1063: p76 = getfield_gc_r(p13, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55)) from (+ CellRef(actuallyMut) 2)')
+1067: guard_class(p75, 16504944, descr=<Guard0xba3ff10>) [p73, p13, None, None, None, None]
+1079: p78 = getfield_gc_r(p75, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1083: guard_class(p76, 16435208, descr=<Guard0xba3ff58>) [p73, p13, None, None, None, None]
+1096: p80 = getfield_gc_r(p76, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1100: guard_nonnull_class(p80, ConstClass(ForwardLink), descr=<Guard0xd108e60>) [p73, p13, None, None, None, None]
debug_merge_point(0, 0, '(+ i5574 1)')
+1119: i82 = getfield_gc_i(p75, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1123: i84 = int_add_ovf(i82, 1)
+1127: guard_no_overflow(descr=<Guard0xba3ffa0>) [p73, p13, None, None, None, None]
debug_merge_point(0, 0, '(doloop5572 AppRand55)')
+1133: guard_class(p78, 16481456, descr=<Guard0x11d14920>) [p73, p13, None, None, None, None]
+1145: p86 = getfield_gc_r(p78, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1156: guard_value(p86, ConstPtr(ptr87), descr=<Guard0x11d14968>) [p73, p13, None, None, None, None]
debug_merge_point(0, 0, '(let ([if10 (>= i5574 (quotient n5570 2))]) (if if10 (void) (begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55))))) from (doloop5572 AppRand55)')
debug_merge_point(0, 0, '(>= i5574 (quotient n5570 2))')
+1165: i88 = getfield_gc_i(p78, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_vals_fixed_1 24 pure>)
+1169: i90 = int_eq(i88, -9223372036854775808)
+1169: i92 = int_rshift(i88, 1)
+1175: i94 = int_lshift(i92, 1)
+1181: i96 = int_xor(i88, 2)
+1188: i98 = int_rshift(i96, 63)
+1192: i99 = int_ne(i94, i88)
+1204: i100 = int_and(i98, i99)
+1207: i101 = int_add(i92, i100)
+1210: i102 = int_ge(i84, i101)
+1213: guard_true(i102, descr=<Guard0x11d149b0>) [p73, p13, None, None, None, None]
debug_merge_point(0, 0, '(if if10 (void) (begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55))))')
debug_merge_point(0, 0, '(void)')
+1219: p103 = getfield_gc_r(p76, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+1230: guard_value(p103, ConstPtr(ptr104), descr=<Guard0x11d149f8>) [p73, p13, None, None, None, None]
+1239: p105 = getfield_gc_r(p76, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1243: p106 = getfield_gc_r(p76, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(doloop5663 (add1 i5665)) from (void)')
+1247: guard_class(p105, 16504944, descr=<Guard0x11d14a40>) [p73, p13, None, None, None, None]
+1259: p108 = getfield_gc_r(p105, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1263: guard_class(p108, 16481456, descr=<Guard0x11d14a88>) [p73, p13, None, None, None, None]
+1276: p110 = getfield_gc_r(p108, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1287: guard_value(p110, ConstPtr(ptr111), descr=<Guard0x11d14ad0>) [p73, p13, None, None, None, None]
+1296: i112 = getfield_gc_i(p105, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1300: i114 = int_add_ovf(i112, 1)
+1304: guard_no_overflow(descr=<Guard0x11d14b18>) [p73, p13, None, None, None, None]
debug_merge_point(0, 0, '(let ([if14 (> i5665 gcold-iters)]) (if if14 (begin (void) (void)) (begin (doStep MEG) (doloop5663 (add1 i5665))))) from (doloop5663 (add1 i5665))')
+1310: guard_class(p106, 16528368, descr=<Guard0x11d14b60>) [p73, p13, None, None, None, None]
+1322: p116 = getfield_gc_r(p106, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1326: guard_nonnull_class(p116, ConstClass(ForwardLink), descr=<Guard0xd108ec0>) [p73, p13, None, None, None, None]
debug_merge_point(0, 0, '(> i5665 gcold-iters)')
+1344: i119 = int_gt(i114, 3500)
+1351: guard_false(i119, descr=<Guard0x11d14ba8>) [p73, p13, None, None, None, None]
debug_merge_point(0, 0, '(if if14 (begin (void) (void)) (begin (doStep MEG) (doloop5663 (add1 i5665))))')
debug_merge_point(0, 0, '(begin (doStep MEG) (doloop5663 (add1 i5665)))')
debug_merge_point(0, 0, '(doStep MEG)')
+1357: p120 = getfield_gc_r(p108, descr=<FieldP pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_w_val0 32 pure>)
+1361: guard_nonnull_class(p120, 16480328, descr=<Guard0xd108f20>) [p73, p13, None, None, None, None]
+1379: i122 = getfield_gc_i(p108, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_vals_fixed_1 24 pure>)
+1383: p123 = getfield_gc_r(p120, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1394: guard_value(p123, ConstPtr(ptr124), descr=<Guard0x11d14bf0>) [p73, p13, None, None, None, None]
+1403: p125 = getfield_gc_r(p108, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([mutations CellRef(actuallyMut)]) (CellRef(doYoungGenAlloc) n5623 words/dead) (CellRef(doMutWork) n5623) (CellRef(oldGenAlloc) (quotient n5623 promoteRate)) (let ([AppRand60 (+ mutations ptrMutRate)]) (let ([AppRand61 (- AppRand60 CellRef(actuallyMut))]) (let ([AppRand62 (max 0 AppRand61)]) (CellRef(oldGenMut) AppRand62)))))')
debug_merge_point(0, 0, 'CellRef(actuallyMut)')
+1403: p126 = getfield_gc_r(p120, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_1 32 pure>)
+1407: p127 = getfield_gc_r(p126, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1411: guard_nonnull_class(p127, ConstClass(W_CellIntegerStrategy), descr=<Guard0xd108f80>) [p73, p13, None, None, None, None]
+1431: i129 = getfield_gc_i(p127, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
debug_merge_point(0, 0, '(CellRef(doYoungGenAlloc) n5623 words/dead)')
+1435: p130 = getfield_gc_r(p120, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_7 80 pure>)
+1439: p131 = getfield_gc_r(p130, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1443: guard_nonnull_class(p131, 16478448, descr=<Guard0xd108fe0>) [p73, p13, None, None, None, None]
+1461: p133 = getfield_gc_r(p120, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_3 48 pure>)
+1465: guard_nonnull_class(p133, ConstClass(W_Fixnum), descr=<Guard0xd109040>) [p73, p13, None, None, None, None]
+1485: p135 = getfield_gc_r(p131, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1503: guard_value(p135, ConstPtr(ptr136), descr=<Guard0x11d14c38>) [p73, p13, None, None, None, None]
+1512: p137 = getfield_gc_r(p120, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1512: i138 = getfield_gc_i(p133, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(let ([nbytes (* nwords bytes/word)]) (let ([doloop5608 (lambda (allocated) (let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))))]) (doloop5608 0)))')
debug_merge_point(0, 0, '(* nwords bytes/word)')
+1516: p139 = getfield_gc_r(p131, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize3.inst__vals_1 32 pure>)
+1520: guard_nonnull_class(p139, ConstClass(W_Fixnum), descr=<Guard0xd1090a0>) [p73, p13, None, None, None, None]
+1540: i141 = int_is_true(i138)
+1543: guard_true(i141, descr=<Guard0x11d14c80>) [p73, p13, None, None, None, None]
+1549: i142 = getfield_gc_i(p139, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1553: i143 = int_is_true(i142)
+1556: guard_true(i143, descr=<Guard0x11d14cc8>) [p73, p13, None, None, None, None]
+1562: i144 = int_mul_ovf(i138, i142)
+1566: guard_no_overflow(descr=<Guard0x11d14d10>) [p73, p13, None, None, None, None]
debug_merge_point(0, 0, '(let ([doloop5608 (lambda (allocated) (let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))))]) (doloop5608 0))')
+1572: p145 = getfield_gc_r(p131, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(lambda (allocated) (let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))))')
+1576: p146 = getfield_gc_r(p131, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize3.inst__vals_0 24 pure>)
+1587: p147 = getfield_gc_r(p131, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize3.inst__vals_2 40 pure>)
+1598: guard_class(p145, 16505296, descr=<Guard0x11d14d58>) [p73, p13, None, None, None, None]
debug_merge_point(0, 0, '(doloop5608 0)')
debug_merge_point(0, 0, '(let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))) from (doloop5608 0)')
debug_merge_point(0, 0, '(>= allocated n5602)')
+1612: i150 = int_ge(0, i122)
+1616: guard_false(i150, descr=<Guard0x11d14da0>) [p73, p13, None, None, None, None]
debug_merge_point(0, 0, '(if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))')
debug_merge_point(0, 0, '(let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59)))')
debug_merge_point(0, 0, '(make-vector nwords 0)')
+1622: i152 = int_lt(i138, 0)
+1626: guard_false(i152, descr=<Guard0x11d14de8>) [p73, p13, None, None, None, None]
debug_merge_point(0, 0, '(set! aexport SetBang10)')
debug_merge_point(0, 0, '(let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))')
debug_merge_point(0, 0, '(+ allocated nbytes)')
debug_merge_point(0, 0, '(doloop5608 AppRand59)')
debug_merge_point(0, 0, '(let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))) from (doloop5608 AppRand59)')
+1632: p153 = new_with_vtable(descr=<SizeDescr 32>)
+1679: setfield_gc(p153, i138, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1683: p155 = new_array_clear(1, descr=<ArrayP 8>)
+1709: setarrayitem_gc(p155, 0, ConstPtr(ptr157), descr=<ArrayP 8>)
+1713: setfield_gc(p153, p155, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1724: setfield_gc(p153, ConstPtr(ptr158), descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1739: setfield_gc(p147, p153, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1743: p159 = new_with_vtable(descr=<SizeDescr 64>)
+1754: p160 = new_with_vtable(descr=<SizeDescr 16>)
+1765: setfield_gc(p160, i144, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1776: p161 = new_with_vtable(descr=<SizeDescr 16>)
+1794: setfield_gc(p161, i138, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1798: p162 = new_with_vtable(descr=<SizeDescr 16>)
+1809: setfield_gc(p162, i122, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1813: p163 = new_with_vtable(descr=<SizeDescr 40>)
+1831: p164 = new_with_vtable(descr=<SizeDescr 24>)
+1849: p165 = new_with_vtable(descr=<SizeDescr 24>)
+1860: setfield_gc(p165, p120, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1864: setfield_gc(p165, i122, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1868: setfield_gc(p164, p165, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1872: setfield_gc(p164, i129, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1876: p166 = new_with_vtable(descr=<SizeDescr 40>)
+1887: setfield_gc(p166, p116, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1898: p167 = new_with_vtable(descr=<SizeDescr 24>)
+1909: setfield_gc(p167, p108, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1913: setfield_gc(p167, i114, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1917: setfield_gc(p166, p167, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1921: setfield_gc(p166, p106, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1925: setfield_gc(p166, ConstPtr(ptr168), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+2024: i169 = getfield_gc_i(p162, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+2028: setfield_gc(p163, p164, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+2032: setfield_gc(p163, p166, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+2036: setfield_gc(p163, p116, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+2040: setfield_gc(p159, p145, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+2044: setfield_gc(p159, p161, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_3 48 pure>)
+2048: setfield_gc(p159, p147, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_1 32 pure>)
+2066: setfield_gc(p163, ConstPtr(ptr170), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+2077: setfield_gc(p159, ConstPtr(ptr171), descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+2081: setfield_gc(p159, p146, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_0 24 pure>)
+2092: setfield_gc(p159, p160, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_2 40 pure>)
+2103: setfield_gc(p159, p162, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_4 56 pure>)
+2107: i173 = int_ge(i169, -9223372036854775807)
+2120: guard_true(i173, descr=<Guard0xd109100>) [p163, i144, p159, None, None, None, None]
+2126: i174 = getfield_gc_i(p161, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+2130: i176 = int_ge(i174, 1)
+2134: guard_true(i176, descr=<Guard0xd109160>) [p163, i144, p159, None, None, None, None]
+2140: i177 = getfield_gc_i(p160, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+2144: jump(p159, i144, p163, p116, p162, i169, p161, p160, i177, p147, i174, descr=TargetToken(80545296))
+2224: --end of the loop--
[3e4c20f347087a1] jit-log-opt-bridge}
[3e4c20f7d5bf4ce] {jit-backend
[3e4c20f7d6d9320] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c
[3e4c20f7d6e5d5a] jit-backend-dump}
[3e4c20f7d709828] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c23354 +0  34000000
[3e4c20f7d70ae4f] jit-backend-dump}
[3e4c20f7d70f3a9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c23815 +0  34000000
[3e4c20f7d710356] jit-backend-dump}
[3e4c20f7d713bdd] {jit-backend-addr
bridge out of Guard 0x4bd7268 has address 0x7f4eb6c23350 to 0x7f4eb6c23810
       gc table: 0x7f4eb6c23200
    jump target: 0x7f4eb6c23350
         resops: 0x7f4eb6c2335e
       failures: 0x7f4eb6c23810
            end: 0x7f4eb6c23be6
[3e4c20f7d7169e1] jit-backend-addr}
[3e4c20f7d71a720] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c23372 +0  F0040000
[3e4c20f7d71b5c6] jit-backend-dump}
[3e4c20f7d71eb5d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c23387 +0  F7040000
[3e4c20f7d71f95b] jit-backend-dump}
[3e4c20f7d722d7a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c23398 +0  02050000
[3e4c20f7d723adc] jit-backend-dump}
[3e4c20f7d726e5e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c233b0 +0  06050000
[3e4c20f7d727b89] jit-backend-dump}
[3e4c20f7d72b087] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c233be +0  30050000
[3e4c20f7d72bdca] jit-backend-dump}
[3e4c20f7d72f269] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c233cc +0  3E050000
[3e4c20f7d72ff7c] jit-backend-dump}
[3e4c20f7d7332be] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c233e0 +0  46050000
[3e4c20f7d733f9c] jit-backend-dump}
[3e4c20f7d7372c9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c23417 +0  2B050000
[3e4c20f7d737fb4] jit-backend-dump}
[3e4c20f7d73b2b6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2342b +0  33050000
[3e4c20f7d73bf8b] jit-backend-dump}
[3e4c20f7d73f2a0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c23440 +0  3A050000
[3e4c20f7d73ff59] jit-backend-dump}
[3e4c20f7d743271] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c23451 +0  45050000
[3e4c20f7d743f55] jit-backend-dump}
[3e4c20f7d74726a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c23465 +0  4D050000
[3e4c20f7d747f17] jit-backend-dump}
[3e4c20f7d74b207] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c23473 +0  5B050000
[3e4c20f7d74bed6] jit-backend-dump}
[3e4c20f7d74f1e4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c23480 +0  6A050000
[3e4c20f7d74feaa] jit-backend-dump}
[3e4c20f7d7531f6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c23497 +0  6F050000
[3e4c20f7d753ed4] jit-backend-dump}
[3e4c20f7d7571df] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c234a4 +0  7E050000
[3e4c20f7d757ebb] jit-backend-dump}
[3e4c20f7d75b203] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c234bc +0  82050000
[3e4c20f7d75bedb] jit-backend-dump}
[3e4c20f7d75f1d4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c234d4 +0  86050000
[3e4c20f7d75fe9a] jit-backend-dump}
[3e4c20f7d7631be] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c234ee +0  88050000
[3e4c20f7d763e96] jit-backend-dump}
[3e4c20f7d767164] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2350c +0  86050000
[3e4c20f7d767e24] jit-backend-dump}
[3e4c20f7d76b0f8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c23522 +0  8C050000
[3e4c20f7d76bdc7] jit-backend-dump}
[3e4c20f7d76f0d3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2353d +0  8D050000
[3e4c20f7d76fd74] jit-backend-dump}
[3e4c20f7d773042] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c23557 +0  8F050000
[3e4c20f7d773d23] jit-backend-dump}
[3e4c20f7d777004] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c23560 +0  A2050000
[3e4c20f7d777cb7] jit-backend-dump}
[3e4c20f7d77af9b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2356d +0  B1050000
[3e4c20f7d77bc6a] jit-backend-dump}
[3e4c20f7d77ef7e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c23577 +0  C3050000
[3e4c20f7d77fc35] jit-backend-dump}
[3e4c20f7d782ef4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2359d +0  B9050000
[3e4c20f7d783bf7] jit-backend-dump}
[3e4c20f7d786ec5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c235a7 +0  CB050000
[3e4c20f7d787b85] jit-backend-dump}
[3e4c20f7d78aeec] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c235b1 +0  DD050000
[3e4c20f7d78bbbe] jit-backend-dump}
[3e4c20f7d78ef84] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c237a9 +0  01040000
[3e4c20f7d78fc37] jit-backend-dump}
[3e4c20f7d792f36] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c237b7 +0  0F040000
[3e4c20f7d793c1e] jit-backend-dump}
[3e4c20f7d797614] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c0ec58 +0  F4460100
[3e4c20f7d7982ff] jit-backend-dump}
[3e4c20f7d79d322] jit-backend}
[3e4c20f7d7a110a] {jit-log-opt-bridge
# bridge out of Guard 0x4bd7268 with 158 ops
[p0, p1]
+365: guard_value(p0, ConstPtr(ptr2), descr=<Guard0x11d126e0>) [p0, p1]
+374: p3 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+378: p4 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55)) from (+ CellRef(actuallyMut) 2)')
+382: guard_class(p3, 16504944, descr=<Guard0x11d14e30>) [p0, p1]
+395: p6 = getfield_gc_r(p3, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+399: guard_class(p4, 16435208, descr=<Guard0x11d14e78>) [p0, p1]
+412: p8 = getfield_gc_r(p4, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+416: guard_nonnull_class(p8, ConstClass(ForwardLink), descr=<Guard0x11d12740>) [p0, p1]
debug_merge_point(0, 0, '(+ i5574 1)')
+436: guard_not_invalidated(descr=<Guard0x11d14ec0>) [p0, p1]
+436: i10 = getfield_gc_i(p3, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+440: i12 = int_add_ovf(i10, 1)
+444: guard_no_overflow(descr=<Guard0x11d14f08>) [p0, p1]
debug_merge_point(0, 0, '(doloop5572 AppRand55)')
+450: guard_class(p6, 16481456, descr=<Guard0x11d14f50>) [p0, p1]
+464: p14 = getfield_gc_r(p6, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+475: guard_value(p14, ConstPtr(ptr15), descr=<Guard0x11d14f98>) [p0, p1]
debug_merge_point(0, 0, '(let ([if10 (>= i5574 (quotient n5570 2))]) (if if10 (void) (begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55))))) from (doloop5572 AppRand55)')
debug_merge_point(0, 0, '(>= i5574 (quotient n5570 2))')
+484: i16 = getfield_gc_i(p6, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_vals_fixed_1 24 pure>)
+488: i18 = int_eq(i16, -9223372036854775808)
+488: i20 = int_rshift(i16, 1)
+494: i22 = int_lshift(i20, 1)
+500: i24 = int_xor(i16, 2)
+507: i26 = int_rshift(i24, 63)
+511: i27 = int_ne(i22, i16)
+524: i28 = int_and(i26, i27)
+527: i29 = int_add(i20, i28)
+530: i30 = int_ge(i12, i29)
+533: guard_true(i30, descr=<Guard0x11d14fe0>) [p0, p1]
debug_merge_point(0, 0, '(if if10 (void) (begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55))))')
debug_merge_point(0, 0, '(void)')
+539: p31 = getfield_gc_r(p4, descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+550: guard_value(p31, ConstPtr(ptr32), descr=<Guard0x11d15028>) [p0, p1]
+559: p33 = getfield_gc_r(p4, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+563: p34 = getfield_gc_r(p4, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(doloop5663 (add1 i5665)) from (void)')
+567: guard_class(p33, 16504944, descr=<Guard0x11d15070>) [p0, p1]
+580: p36 = getfield_gc_r(p33, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+584: guard_class(p36, 16481456, descr=<Guard0x11d150b8>) [p0, p1]
+597: p38 = getfield_gc_r(p36, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+608: guard_value(p38, ConstPtr(ptr39), descr=<Guard0x11d15100>) [p0, p1]
+617: i40 = getfield_gc_i(p33, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+621: i42 = int_add_ovf(i40, 1)
+625: guard_no_overflow(descr=<Guard0x11d15148>) [p0, p1]
debug_merge_point(0, 0, '(let ([if14 (> i5665 gcold-iters)]) (if if14 (begin (void) (void)) (begin (doStep MEG) (doloop5663 (add1 i5665))))) from (doloop5663 (add1 i5665))')
+631: guard_class(p34, 16528368, descr=<Guard0x11d15190>) [p0, p1]
+644: p44 = getfield_gc_r(p34, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+648: guard_nonnull_class(p44, ConstClass(ForwardLink), descr=<Guard0x11d127a0>) [p0, p1]
debug_merge_point(0, 0, '(> i5665 gcold-iters)')
+667: i47 = int_gt(i42, 3500)
+674: guard_false(i47, descr=<Guard0x11d151d8>) [p0, p1]
debug_merge_point(0, 0, '(if if14 (begin (void) (void)) (begin (doStep MEG) (doloop5663 (add1 i5665))))')
debug_merge_point(0, 0, '(begin (doStep MEG) (doloop5663 (add1 i5665)))')
debug_merge_point(0, 0, '(doStep MEG)')
+680: p48 = getfield_gc_r(p36, descr=<FieldP pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_w_val0 32 pure>)
+684: guard_nonnull_class(p48, 16480328, descr=<Guard0x11d12800>) [p0, p1]
+704: i50 = getfield_gc_i(p36, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_vals_fixed_1 24 pure>)
+708: p51 = getfield_gc_r(p48, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+719: guard_value(p51, ConstPtr(ptr52), descr=<Guard0x11d15220>) [p0, p1]
+728: p53 = getfield_gc_r(p36, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([mutations CellRef(actuallyMut)]) (CellRef(doYoungGenAlloc) n5623 words/dead) (CellRef(doMutWork) n5623) (CellRef(oldGenAlloc) (quotient n5623 promoteRate)) (let ([AppRand60 (+ mutations ptrMutRate)]) (let ([AppRand61 (- AppRand60 CellRef(actuallyMut))]) (let ([AppRand62 (max 0 AppRand61)]) (CellRef(oldGenMut) AppRand62)))))')
debug_merge_point(0, 0, 'CellRef(actuallyMut)')
+728: p54 = getfield_gc_r(p48, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_1 32 pure>)
+732: p55 = getfield_gc_r(p54, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+736: guard_nonnull_class(p55, ConstClass(W_CellIntegerStrategy), descr=<Guard0x11d12860>) [p0, p1]
+754: i57 = getfield_gc_i(p55, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
debug_merge_point(0, 0, '(CellRef(doYoungGenAlloc) n5623 words/dead)')
+758: p58 = getfield_gc_r(p48, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_7 80 pure>)
+762: p59 = getfield_gc_r(p58, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+766: guard_nonnull_class(p59, 16478448, descr=<Guard0x11d128c0>) [p0, p1]
+784: p61 = getfield_gc_r(p48, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize8.inst__vals_3 48 pure>)
+788: guard_nonnull_class(p61, ConstClass(W_Fixnum), descr=<Guard0x11d12920>) [p0, p1]
+806: p63 = getfield_gc_r(p59, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+824: guard_value(p63, ConstPtr(ptr64), descr=<Guard0x11d15268>) [p0, p1]
+833: p65 = getfield_gc_r(p48, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+833: i66 = getfield_gc_i(p61, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(let ([nbytes (* nwords bytes/word)]) (let ([doloop5608 (lambda (allocated) (let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))))]) (doloop5608 0)))')
debug_merge_point(0, 0, '(* nwords bytes/word)')
+837: p67 = getfield_gc_r(p59, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize3.inst__vals_1 32 pure>)
+841: guard_nonnull_class(p67, ConstClass(W_Fixnum), descr=<Guard0x11d12980>) [p0, p1]
+859: i69 = int_is_true(i66)
+862: guard_true(i69, descr=<Guard0x11d152b0>) [p0, p1]
+868: i70 = getfield_gc_i(p67, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+872: i71 = int_is_true(i70)
+875: guard_true(i71, descr=<Guard0x11d152f8>) [p0, p1]
+881: i72 = int_mul_ovf(i66, i70)
+885: guard_no_overflow(descr=<Guard0x11d15340>) [p0, p1]
debug_merge_point(0, 0, '(let ([doloop5608 (lambda (allocated) (let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))))]) (doloop5608 0))')
+891: p73 = getfield_gc_r(p59, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(lambda (allocated) (let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))))')
+895: p74 = getfield_gc_r(p59, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize3.inst__vals_0 24 pure>)
+906: p75 = getfield_gc_r(p59, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize3.inst__vals_2 40 pure>)
+917: guard_class(p73, 16505296, descr=<Guard0x11d15388>) [p0, p1]
debug_merge_point(0, 0, '(doloop5608 0)')
debug_merge_point(0, 0, '(let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))) from (doloop5608 0)')
debug_merge_point(0, 0, '(>= allocated n5602)')
+929: i78 = int_ge(0, i50)
+933: guard_false(i78, descr=<Guard0x11d153d0>) [p0, p1]
debug_merge_point(0, 0, '(if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))')
debug_merge_point(0, 0, '(let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59)))')
debug_merge_point(0, 0, '(make-vector nwords 0)')
+939: i80 = int_lt(i66, 0)
+943: guard_false(i80, descr=<Guard0x11d15418>) [p0, p1]
debug_merge_point(0, 0, '(set! aexport SetBang10)')
debug_merge_point(0, 0, '(let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))')
debug_merge_point(0, 0, '(+ allocated nbytes)')
debug_merge_point(0, 0, '(doloop5608 AppRand59)')
debug_merge_point(0, 0, '(let ([if12 (>= allocated n5602)]) (if if12 (begin (void) (let ([SetBang9 (+ CellRef(youngBytes) allocated)]) (set! youngBytes SetBang9))) (let ([SetBang10 (make-vector nwords 0)]) (set! aexport SetBang10) (let ([AppRand59 (+ allocated nbytes)]) (doloop5608 AppRand59))))) from (doloop5608 AppRand59)')
+949: p81 = new_with_vtable(descr=<SizeDescr 32>)
+993: setfield_gc(p81, i66, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+997: p83 = new_array_clear(1, descr=<ArrayP 8>)
+1023: setarrayitem_gc(p83, 0, ConstPtr(ptr85), descr=<ArrayP 8>)
+1027: setfield_gc(p81, p83, descr=<FieldP pycket.vector.W_Vector.inst_storage 16>)
+1038: setfield_gc(p81, ConstPtr(ptr86), descr=<FieldP pycket.vector.W_Vector.inst_strategy 24>)
+1052: setfield_gc(p75, p81, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1056: p87 = new_with_vtable(descr=<SizeDescr 64>)
+1067: p88 = new_with_vtable(descr=<SizeDescr 16>)
+1078: setfield_gc(p88, i72, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1089: p89 = new_with_vtable(descr=<SizeDescr 16>)
+1107: setfield_gc(p89, i66, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1111: p90 = new_with_vtable(descr=<SizeDescr 16>)
+1122: setfield_gc(p90, i50, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1126: p91 = new_with_vtable(descr=<SizeDescr 40>)
+1144: p92 = new_with_vtable(descr=<SizeDescr 24>)
+1162: p93 = new_with_vtable(descr=<SizeDescr 24>)
+1173: setfield_gc(p93, p48, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1177: setfield_gc(p93, i50, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1181: setfield_gc(p92, p93, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1185: setfield_gc(p92, i57, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1189: p94 = new_with_vtable(descr=<SizeDescr 40>)
+1200: setfield_gc(p94, p44, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1211: p95 = new_with_vtable(descr=<SizeDescr 24>)
+1222: setfield_gc(p95, p36, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1226: setfield_gc(p95, i42, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+1230: setfield_gc(p94, p95, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1234: setfield_gc(p94, p34, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1238: setfield_gc(p94, ConstPtr(ptr96), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+1344: i97 = getfield_gc_i(p90, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1355: setfield_gc(p91, ConstPtr(ptr98), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+1359: setfield_gc(p91, p92, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+1363: setfield_gc(p91, p94, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+1367: setfield_gc(p87, p73, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+1372: setfield_gc(p91, p44, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+1383: setfield_gc(p87, ConstPtr(ptr99), descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1388: setfield_gc(p87, p74, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_0 24 pure>)
+1400: setfield_gc(p87, p75, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_1 32 pure>)
+1412: setfield_gc(p87, p88, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_2 40 pure>)
+1424: setfield_gc(p87, p89, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_3 48 pure>)
+1429: setfield_gc(p87, p90, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_4 56 pure>)
+1434: i101 = int_ge(i97, -9223372036854775807)
+1447: guard_true(i101, descr=<Guard0x11d129e0>) [p91, i72, p87]
+1453: i102 = getfield_gc_i(p89, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1457: i104 = int_ge(i102, 1)
+1461: guard_true(i104, descr=<Guard0x11d12a40>) [p91, i72, p87]
+1467: i105 = getfield_gc_i(p88, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+1471: jump(p87, i72, p91, p44, p90, i97, p89, p88, i105, p75, i102, descr=TargetToken(80545296))
+1552: --end of the loop--
[3e4c20f7d8266b6] jit-log-opt-bridge}
[3e4c20f7e9bb7a1] {jit-backend
[3e4c20f7ebffa0f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c241a
[3e4c20f7ec18ea9] jit-backend-dump}
[3e4c20f7ec28869] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c244a4 +0  34000000
[3e4c20f7ec29e3a] jit-backend-dump}
[3e4c20f7ec2e3be] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c25115 +0  34000000
[3e4c20f7ec2f2d3] jit-backend-dump}
[3e4c20f7ec3291e] {jit-backend-addr
bridge out of Guard 0x11d144a0 has address 0x7f4eb6c244a0 to 0x7f4eb6c25110
       gc table: 0x7f4eb6c241a0
    jump target: 0x7f4eb6c244a0
         resops: 0x7f4eb6c244ae
       failures: 0x7f4eb6c25110
            end: 0x7f4eb6c25b0f
[3e4c20f7ec34f94] jit-backend-addr}
[3e4c20f7ec386ea] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c244c2 +0  8D0C0000
[3e4c20f7ec395c1] jit-backend-dump}
[3e4c20f7ec3ca72] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c244d9 +0  920C0000
[3e4c20f7ec3d82d] jit-backend-dump}
[3e4c20f7ec40c14] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c244eb +0  9C0C0000
[3e4c20f7ec4196d] jit-backend-dump}
[3e4c20f7ec44cc8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24502 +0  A10C0000
[3e4c20f7ec45a95] jit-backend-dump}
[3e4c20f7ec492b4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24510 +0  CB0C0000
[3e4c20f7ec49ff4] jit-backend-dump}
[3e4c20f7ec4d35b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2451d +0  DA0C0000
[3e4c20f7ec4e092] jit-backend-dump}
[3e4c20f7ec51424] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24531 +0  E20C0000
[3e4c20f7ec52137] jit-backend-dump}
[3e4c20f7ec5547c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24567 +0  C80C0000
[3e4c20f7ec56167] jit-backend-dump}
[3e4c20f7ec59466] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24581 +0  CA0C0000
[3e4c20f7ec5a175] jit-backend-dump}
[3e4c20f7ec5d409] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24595 +0  D20C0000
[3e4c20f7ec5e0f7] jit-backend-dump}
[3e4c20f7ec61354] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c245ac +0  D70C0000
[3e4c20f7ec62044] jit-backend-dump}
[3e4c20f7ec652bd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c245c6 +0  D90C0000
[3e4c20f7ec65fa4] jit-backend-dump}
[3e4c20f7ec69229] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c245de +0  DD0C0000
[3e4c20f7ec69f20] jit-backend-dump}
[3e4c20f7ec6d158] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c245eb +0  EC0C0000
[3e4c20f7ec6de49] jit-backend-dump}
[3e4c20f7ec710dd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24605 +0  EE0C0000
[3e4c20f7ec71de0] jit-backend-dump}
[3e4c20f7ec7501e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24619 +0  F60C0000
[3e4c20f7ec75d00] jit-backend-dump}
[3e4c20f7ec78f3b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2463b +0  F00C0000
[3e4c20f7ec79c2c] jit-backend-dump}
[3e4c20f7ec7ce45] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24669 +0  DE0C0000
[3e4c20f7ec7db42] jit-backend-dump}
[3e4c20f7ec80d7a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24676 +0  ED0C0000
[3e4c20f7ec81a9c] jit-backend-dump}
[3e4c20f7ec84cbc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2467f +0  000D0000
[3e4c20f7ec859a6] jit-backend-dump}
[3e4c20f7ec88bee] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24689 +0  120D0000
[3e4c20f7ec898f7] jit-backend-dump}
[3e4c20f7ec8cb45] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c246aa +0  0D0D0000
[3e4c20f7ec8d851] jit-backend-dump}
[3e4c20f7ec90a8f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c246b7 +0  1C0D0000
[3e4c20f7ec9178c] jit-backend-dump}
[3e4c20f7ec94a23] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c246d9 +0  160D0000
[3e4c20f7ec95733] jit-backend-dump}
[3e4c20f7ec989b7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c246e6 +0  250D0000
[3e4c20f7ec996df] jit-backend-dump}
[3e4c20f7ec9c911] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2471b +0  0C0D0000
[3e4c20f7ec9d627] jit-backend-dump}
[3e4c20f7eca08a5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24753 +0  F00C0000
[3e4c20f7eca15ae] jit-backend-dump}
[3e4c20f7eca4827] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24792 +0  CD0C0000
[3e4c20f7eca5518] jit-backend-dump}
[3e4c20f7eca8799] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c247cb +0  B00C0000
[3e4c20f7eca94a2] jit-backend-dump}
[3e4c20f7ecac76a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c247f4 +0  A30C0000
[3e4c20f7ecad474] jit-backend-dump}
[3e4c20f7ecb078b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24825 +0  8E0C0000
[3e4c20f7ecb1502] jit-backend-dump}
[3e4c20f7ecb4781] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24856 +0  790C0000
[3e4c20f7ecb54a0] jit-backend-dump}
[3e4c20f7ecb87c0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24863 +0  880C0000
[3e4c20f7ecb94b4] jit-backend-dump}
[3e4c20f7ecbc6ef] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2486c +0  9B0C0000
[3e4c20f7ecbd3d4] jit-backend-dump}
[3e4c20f7ecc066b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24876 +0  AD0C0000
[3e4c20f7ecc134f] jit-backend-dump}
[3e4c20f7ecc4569] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2488a +0  B50C0000
[3e4c20f7ecc5254] jit-backend-dump}
[3e4c20f7ecc8495] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2489f +0  BC0C0000
[3e4c20f7ecc9189] jit-backend-dump}
[3e4c20f7eccc3e0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c248c5 +0  B20C0000
[3e4c20f7eccd0c1] jit-backend-dump}
[3e4c20f7ecd02f3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c248f5 +0  9E0C0000
[3e4c20f7ecd0fe1] jit-backend-dump}
[3e4c20f7ecd4225] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2491f +0  900C0000
[3e4c20f7ecd4f81] jit-backend-dump}
[3e4c20f7ecd826e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24986 +0  450C0000
[3e4c20f7ecd8f86] jit-backend-dump}
[3e4c20f7ecdc264] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c249aa +0  3D0C0000
[3e4c20f7ecdcf9b] jit-backend-dump}
[3e4c20f7ece020a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c249c7 +0  3C0C0000
[3e4c20f7ece0f35] jit-backend-dump}
[3e4c20f7ece419e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c249d8 +0  470C0000
[3e4c20f7ece4ecf] jit-backend-dump}
[3e4c20f7ece8197] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c249e5 +0  560C0000
[3e4c20f7ece8ea0] jit-backend-dump}
[3e4c20f7ecec137] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c249f3 +0  640C0000
[3e4c20f7ecece6e] jit-backend-dump}
[3e4c20f7ecf0158] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24a01 +0  720C0000
[3e4c20f7ecf0e64] jit-backend-dump}
[3e4c20f7ecf4084] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24a15 +0  7A0C0000
[3e4c20f7ecf4d68] jit-backend-dump}
[3e4c20f7ecf7fad] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24a23 +0  880C0000
[3e4c20f7ecf8ca4] jit-backend-dump}
[3e4c20f7ecfbefa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24a49 +0  7E0C0000
[3e4c20f7ecfcbdf] jit-backend-dump}
[3e4c20f7ecffe14] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24a7f +0  640C0000
[3e4c20f7ed00b02] jit-backend-dump}
[3e4c20f7ed03d46] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24aa9 +0  560C0000
[3e4c20f7ed04a34] jit-backend-dump}
[3e4c20f7ed07caf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24ae6 +0  350C0000
[3e4c20f7ed089ac] jit-backend-dump}
[3e4c20f7ed0bbeb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24b17 +0  200C0000
[3e4c20f7ed0c8d2] jit-backend-dump}
[3e4c20f7ed0fae9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24b46 +0  0D0C0000
[3e4c20f7ed107e6] jit-backend-dump}
[3e4c20f7ed13a49] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24b6d +0  020C0000
[3e4c20f7ed14733] jit-backend-dump}
[3e4c20f7ed1797e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24b8a +0  010C0000
[3e4c20f7ed1867b] jit-backend-dump}
[3e4c20f7ed1b8a7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24b9b +0  0C0C0000
[3e4c20f7ed1c58e] jit-backend-dump}
[3e4c20f7ed1f860] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24ba8 +0  1B0C0000
[3e4c20f7ed20566] jit-backend-dump}
[3e4c20f7ed237c3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24bb6 +0  290C0000
[3e4c20f7ed24498] jit-backend-dump}
[3e4c20f7ed276f8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24bc4 +0  370C0000
[3e4c20f7ed283f2] jit-backend-dump}
[3e4c20f7ed2b673] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24bd8 +0  3F0C0000
[3e4c20f7ed2c34c] jit-backend-dump}
[3e4c20f7ed2f584] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24be6 +0  4D0C0000
[3e4c20f7ed3026e] jit-backend-dump}
[3e4c20f7ed334a7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24c0c +0  430C0000
[3e4c20f7ed34197] jit-backend-dump}
[3e4c20f7ed37459] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24c3c +0  2F0C0000
[3e4c20f7ed381e6] jit-backend-dump}
[3e4c20f7ed3b48f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24c69 +0  1E0C0000
[3e4c20f7ed3c1c3] jit-backend-dump}
[3e4c20f7ed3f3ff] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24cbd +0  E60B0000
[3e4c20f7ed400ff] jit-backend-dump}
[3e4c20f7ed43374] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24cde +0  E10B0000
[3e4c20f7ed4405c] jit-backend-dump}
[3e4c20f7ed472f3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24cf2 +0  E90B0000
[3e4c20f7ed47fe0] jit-backend-dump}
[3e4c20f7ed4b206] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24cfb +0  FC0B0000
[3e4c20f7ed4bef4] jit-backend-dump}
[3e4c20f7ed4f12c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24d1c +0  F70B0000
[3e4c20f7ed4fe7c] jit-backend-dump}
[3e4c20f7ed530b7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24d2d +0  020C0000
[3e4c20f7ed53da8] jit-backend-dump}
[3e4c20f7ed57017] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24d48 +0  030C0000
[3e4c20f7ed57d0e] jit-backend-dump}
[3e4c20f7ed5af34] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24d74 +0  F30B0000
[3e4c20f7ed5bc18] jit-backend-dump}
[3e4c20f7ed5ee50] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24d88 +0  FB0B0000
[3e4c20f7ed5fb47] jit-backend-dump}
[3e4c20f7ed62d92] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24d91 +0  0E0C0000
[3e4c20f7ed63a76] jit-backend-dump}
[3e4c20f7ed66cec] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24d9b +0  200C0000
[3e4c20f7ed679dc] jit-backend-dump}
[3e4c20f7ed6ac2a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24dcb +0  0C0C0000
[3e4c20f7ed6b92a] jit-backend-dump}
[3e4c20f7ed6eb62] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24ddf +0  140C0000
[3e4c20f7ed6f84d] jit-backend-dump}
[3e4c20f7ed72a97] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24e00 +0  0F0C0000
[3e4c20f7ed73785] jit-backend-dump}
[3e4c20f7ed769d6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24e0d +0  1E0C0000
[3e4c20f7ed776d0] jit-backend-dump}
[3e4c20f7ed7a8ff] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24e42 +0  050C0000
[3e4c20f7ed7b5e9] jit-backend-dump}
[3e4c20f7ed7e85c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24e7a +0  E90B0000
[3e4c20f7ed7f565] jit-backend-dump}
[3e4c20f7ed827a0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24eb2 +0  CD0B0000
[3e4c20f7ed83491] jit-backend-dump}
[3e4c20f7ed866e8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24f0c +0  8F0B0000
[3e4c20f7ed873de] jit-backend-dump}
[3e4c20f7ed8a5ef] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24f33 +0  840B0000
[3e4c20f7ed8b2d3] jit-backend-dump}
[3e4c20f7ed8e55e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24f56 +0  7D0B0000
[3e4c20f7ed8f24c] jit-backend-dump}
[3e4c20f7ed924a6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c24f5f +0  900B0000
[3e4c20f7ed9318d] jit-backend-dump}
[3e4c20f7ed9667f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c1f5c2 +0  DA4E0000
[3e4c20f7ed9737c] jit-backend-dump}
[3e4c20f7ed9b965] jit-backend}
[3e4c20f7ed9f722] {jit-log-opt-bridge
# bridge out of Guard 0x11d144a0 with 452 ops
[p0, p1]
+797: guard_value(p0, ConstPtr(ptr2), descr=<Guard0x11d12aa0>) [p0, p1]
+806: p3 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+811: p4 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55)) from (+ CellRef(actuallyMut) 2)')
+816: guard_class(p3, 16504944, descr=<Guard0x11d15460>) [p0, p1]
+829: p6 = getfield_gc_r(p3, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+833: guard_class(p4, 16435208, descr=<Guard0x11d154a8>) [p0, p1]
+847: p8 = getfield_gc_r(p4, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+851: guard_nonnull_class(p8, ConstClass(ForwardLink), descr=<Guard0x11d12b00>) [p0, p1]
debug_merge_point(0, 0, '(+ i5574 1)')
+870: guard_not_invalidated(descr=<Guard0x11d154f0>) [p0, p1]
+870: i10 = getfield_gc_i(p3, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+874: i12 = int_add_ovf(i10, 1)
+878: guard_no_overflow(descr=<Guard0x11d15538>) [p0, p1]
debug_merge_point(0, 0, '(doloop5572 AppRand55)')
+884: guard_class(p6, 16481456, descr=<Guard0x11d15580>) [p0, p1]
+897: p14 = getfield_gc_r(p6, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+908: guard_value(p14, ConstPtr(ptr15), descr=<Guard0x11d155c8>) [p0, p1]
debug_merge_point(0, 0, '(let ([if10 (>= i5574 (quotient n5570 2))]) (if if10 (void) (begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55))))) from (doloop5572 AppRand55)')
debug_merge_point(0, 0, '(>= i5574 (quotient n5570 2))')
+917: i16 = getfield_gc_i(p6, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_vals_fixed_1 24 pure>)
+921: i18 = int_eq(i16, -9223372036854775808)
+921: i20 = int_rshift(i16, 1)
+927: i22 = int_lshift(i20, 1)
+933: i24 = int_xor(i16, 2)
+940: i26 = int_rshift(i24, 63)
+944: i27 = int_ne(i22, i16)
+956: i28 = int_and(i26, i27)
+959: i29 = int_add(i20, i28)
+962: i30 = int_ge(i12, i29)
+965: guard_false(i30, descr=<Guard0x11d15610>) [p0, p1]
debug_merge_point(0, 0, '(if if10 (void) (begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55))))')
debug_merge_point(0, 0, '(begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55)))')
debug_merge_point(0, 0, '(CellRef(oldGenSwapSubtrees))')
+971: p31 = getfield_gc_r(p6, descr=<FieldP pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_w_val0 32 pure>)
+975: p32 = getfield_gc_r(p31, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+979: guard_nonnull_class(p32, 16479200, descr=<Guard0x11d12b60>) [p0, p1]
+997: p34 = getfield_gc_r(p32, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1008: guard_value(p34, ConstPtr(ptr35), descr=<Guard0x11d15658>) [p0, p1]
+1017: p36 = getfield_gc_r(p6, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([index1 (rnd (vector-length CellRef(trees)))][index2 (rnd (vector-length CellRef(trees)))]) (let ([depth (rnd treeHeight)][path (rnd pathBits)][tn1 (vector-ref CellRef(trees) index1)][tn2 (vector-ref CellRef(trees) index2)]) (let ([doloop5533 (lambda (i5535) (let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))))]) (doloop5533 0) (if (even? CellRef(path)) (let ([tmp (vector-ref CellRef(tn1) 0)][AppRand53 (vector-ref CellRef(tn2) 0)]) (vector-set! CellRef(tn1) 0 AppRand53) (vector-set! CellRef(tn2) 0 tmp)) (let ([tmp5560 (vector-ref CellRef(tn1) 1)][AppRand54 (vector-ref CellRef(tn2) 1)]) (vector-set! CellRef(tn1) 1 AppRand54) (vector-set! CellRef(tn2) 1 tmp5560))) (let ([SetBang7 (+ CellRef(actuallyMut) 2)]) (set! actuallyMut SetBang7)))))')
debug_merge_point(0, 0, '(rnd (vector-length CellRef(trees)))')
+1017: p37 = getfield_gc_r(p32, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_2 40 pure>)
+1021: guard_nonnull_class(p37, 16478072, descr=<Guard0x11d12bc0>) [p0, p1]
+1040: p39 = getfield_gc_r(p32, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_3 48 pure>)
+1044: p40 = getfield_gc_r(p39, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1048: guard_nonnull_class(p40, ConstClass(W_Vector), descr=<Guard0x11d12c20>) [p0, p1]
+1066: i42 = getfield_gc_i(p40, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1070: p43 = getfield_gc_r(p37, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1081: guard_value(p43, ConstPtr(ptr44), descr=<Guard0x11d156a0>) [p0, p1]
+1090: p45 = getfield_gc_r(p32, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([if0 (if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)]) (if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))))')
debug_merge_point(0, 0, '(if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)')
debug_merge_point(0, 0, '(if (integer? n5234) (< n5234 16384) #f)')
debug_merge_point(0, 0, '(< n5234 16384)')
+1090: i47 = int_lt(i42, 16384)
+1097: guard_true(i47, descr=<Guard0x11d156e8>) [p0, p1]
debug_merge_point(0, 0, '(if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234)))')
debug_merge_point(0, 0, '(CellRef(random14) n5234)')
+1103: p48 = getfield_gc_r(p37, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+1107: p49 = getfield_gc_r(p48, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1111: guard_nonnull_class(p49, 16478824, descr=<Guard0x11d12c80>) [p0, p1]
+1129: p51 = getfield_gc_r(p49, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1140: guard_value(p51, ConstPtr(ptr52), descr=<Guard0x11d15730>) [p0, p1]
+1149: p53 = getfield_gc_r(p37, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+1149: p54 = getfield_gc_r(p49, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_2 40 pure>)
+1153: p55 = getfield_gc_r(p54, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1164: guard_nonnull_class(p55, ConstClass(W_CellIntegerStrategy), descr=<Guard0x11d12ce0>) [p0, p1]
+1183: i57 = getfield_gc_i(p55, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1187: p58 = getfield_gc_r(p49, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_3 48 pure>)
+1198: p59 = getfield_gc_r(p58, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1209: guard_nonnull_class(p59, ConstClass(W_CellIntegerStrategy), descr=<Guard0x11d12d40>) [p0, p1]
+1229: i61 = getfield_gc_i(p59, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1233: i62 = int_is_true(i57)
+1236: guard_true(i62, descr=<Guard0x11d15778>) [p0, p1]
+1242: i63 = int_is_true(i61)
+1245: guard_true(i63, descr=<Guard0x11d157c0>) [p0, p1]
+1251: i64 = int_mul_ovf(i57, i61)
+1255: guard_no_overflow(descr=<Guard0x11d15808>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+1261: p65 = getfield_gc_r(p49, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_1 32 pure>)
+1265: p66 = getfield_gc_r(p65, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1276: guard_nonnull_class(p66, ConstClass(W_CellIntegerStrategy), descr=<Guard0x11d12da0>) [p0, p1]
+1294: i68 = getfield_gc_i(p66, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1298: i69 = int_add_ovf(i64, i68)
+1301: guard_no_overflow(descr=<Guard0x11d15850>) [p0, p1]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+1307: p70 = getfield_gc_r(p49, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_0 24 pure>)
+1311: p71 = getfield_gc_r(p70, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1322: guard_nonnull_class(p71, ConstClass(W_CellIntegerStrategy), descr=<Guard0x11d12e00>) [p0, p1]
+1341: i73 = getfield_gc_i(p71, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1345: i74 = int_is_zero(i73)
+1348: guard_false(i74, descr=<Guard0x11d15898>) [p0, p1]
+1354: i76 = int_rshift(i69, 63)
+1365: i77 = int_xor(i69, i76)
+1382: i78 = int_sub(i77, i76)
+1385: i80 = int_rshift(i73, 63)
+1392: i81 = int_xor(i73, i80)
+1395: i82 = int_sub(i81, i80)
+1398: i83 = int_is_zero(i82)
+1401: guard_false(i83, descr=<Guard0x11d158e0>) [p0, p1]
+1407: i85 = int_eq(i78, -9223372036854775808)
+1430: i87 = int_eq(i82, -1)
+1451: i88 = int_and(i85, i87)
+1454: guard_false(i88, descr=<Guard0x11d15928>) [p0, p1]
+1463: i90 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i78, i82, descr=<Calli 8 ii EF=0 OS=14>)
+1512: i92 = int_lt(i69, 0)
+1520: guard_false(i92, descr=<Guard0x11d12e60>) [i82, i90, i78, i69, i12, p6, p4, p32, i42, p49, p8]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+1526: i94 = int_eq(i90, -9223372036854775808)
+1526: i96 = int_rshift(i90, 3)
+1533: i98 = int_lshift(i96, 3)
+1540: i100 = int_xor(i90, 8)
+1547: i102 = int_rshift(i100, 63)
+1551: i103 = int_ne(i98, i90)
+1564: i104 = int_and(i102, i103)
+1567: i105 = int_add(i96, i104)
+1570: setfield_gc(p59, i90, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1574: i106 = int_is_zero(i42)
+1577: guard_false(i106, descr=<Guard0x11d12ec0>) [i42, i105, i12, p6, p4, p32, None, p49, p8]
+1583: i109 = int_rshift(i105, 63)
+1590: i110 = int_xor(i105, i109)
+1596: i111 = int_sub(i110, i109)
+1599: i113 = int_rshift(i42, 63)
+1606: i114 = int_xor(i42, i113)
+1612: i115 = int_sub(i114, i113)
+1615: i116 = int_is_zero(i115)
+1618: guard_false(i116, descr=<Guard0x11d15970>) [i42, i105, i12, p6, p4, p32, None, p49, p8]
+1624: i118 = int_eq(i111, -9223372036854775808)
+1647: i120 = int_eq(i115, -1)
+1661: i121 = int_and(i118, i120)
+1664: guard_false(i121, descr=<Guard0x11d159b8>) [i42, i105, i12, p6, p4, p32, None, p49, p8]
+1673: i123 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i111, i115, descr=<Calli 8 ii EF=0 OS=14>)
+1712: i125 = int_lt(i105, 0)
+1716: guard_false(i125, descr=<Guard0x11d12f20>) [i115, i123, i111, i105, None, i12, p6, p4, p32, i42, p49, p8]
debug_merge_point(0, 0, '(rnd (vector-length CellRef(trees)))')
debug_merge_point(0, 0, '(let ([if0 (if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)]) (if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))))')
debug_merge_point(0, 0, '(if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)')
debug_merge_point(0, 0, '(if (integer? n5234) (< n5234 16384) #f)')
debug_merge_point(0, 0, '(< n5234 16384)')
debug_merge_point(0, 0, '(if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234)))')
debug_merge_point(0, 0, '(CellRef(random14) n5234)')
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+1722: i126 = getfield_gc_i(p55, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1726: i127 = int_is_true(i126)
+1729: guard_true(i127, descr=<Guard0x11d15a00>) [i115, i123, i111, i105, None, i12, p6, p4, p32, i42, p49, p8]
+1735: i128 = int_is_true(i90)
+1738: guard_true(i128, descr=<Guard0x11d15a48>) [i115, i123, i111, i105, None, i12, p6, p4, p32, i42, p49, p8]
+1744: i129 = int_mul_ovf(i126, i90)
+1748: guard_no_overflow(descr=<Guard0x11d15a90>) [i115, i123, i111, i105, None, i12, p6, p4, p32, i42, p49, p8]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+1754: i130 = getfield_gc_i(p66, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1765: i131 = int_add_ovf(i129, i130)
+1768: guard_no_overflow(descr=<Guard0x11d15ad8>) [i115, i123, i111, i105, None, i12, p6, p4, p32, i42, p49, p8]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+1774: i132 = getfield_gc_i(p71, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1786: i133 = int_is_zero(i132)
+1789: guard_false(i133, descr=<Guard0x11d15b20>) [i115, i123, i111, i105, None, i12, p6, p4, p32, i42, p49, p8]
+1795: i135 = int_rshift(i131, 63)
+1802: i136 = int_xor(i131, i135)
+1808: i137 = int_sub(i136, i135)
+1811: i139 = int_rshift(i132, 63)
+1818: i140 = int_xor(i132, i139)
+1821: i141 = int_sub(i140, i139)
+1824: i142 = int_is_zero(i141)
+1827: guard_false(i142, descr=<Guard0x11d15b68>) [i115, i123, i111, i105, None, i12, p6, p4, p32, i42, p49, p8]
+1833: i144 = int_eq(i137, -9223372036854775808)
+1855: i146 = int_eq(i141, -1)
+1869: i147 = int_and(i144, i146)
+1872: guard_false(i147, descr=<Guard0x11d15bb0>) [i115, i123, i111, i105, None, i12, p6, p4, p32, i42, p49, p8]
+1881: i149 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i137, i141, descr=<Calli 8 ii EF=0 OS=14>)
+1913: i151 = int_lt(i131, 0)
+1917: guard_false(i151, descr=<Guard0x11d12f80>) [i141, i149, i137, i131, i123, None, i12, p6, p4, p32, i42, p49, p8]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+1923: i153 = int_eq(i149, -9223372036854775808)
+1923: i155 = int_rshift(i149, 3)
+1930: i157 = int_lshift(i155, 3)
+1937: i159 = int_xor(i149, 8)
+1944: i161 = int_rshift(i159, 63)
+1948: i162 = int_ne(i157, i149)
+1961: i163 = int_and(i161, i162)
+1964: i164 = int_add(i155, i163)
+1967: i166 = int_rshift(i164, 63)
+1974: i167 = int_xor(i164, i166)
+1980: i168 = int_sub(i167, i166)
+1983: i170 = int_eq(i168, -9223372036854775808)
+2006: i171 = int_and(i170, i120)
+2013: setfield_gc(p59, i149, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2017: guard_false(i171, descr=<Guard0x11d12fe0>) [i115, i168, i171, i164, i123, None, i12, p6, p4, p32, i42, p49, p8]
+2026: i173 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i168, i115, descr=<Calli 8 ii EF=0 OS=14>)
+2052: i175 = int_lt(i164, 0)
+2056: guard_false(i175, descr=<Guard0x11d13040>) [i115, i173, i168, i164, None, i123, None, i12, p6, p4, p32, i42, p49, p8]
debug_merge_point(0, 0, '(let ([depth (rnd treeHeight)][path (rnd pathBits)][tn1 (vector-ref CellRef(trees) index1)][tn2 (vector-ref CellRef(trees) index2)]) (let ([doloop5533 (lambda (i5535) (let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))))]) (doloop5533 0) (if (even? CellRef(path)) (let ([tmp (vector-ref CellRef(tn1) 0)][AppRand53 (vector-ref CellRef(tn2) 0)]) (vector-set! CellRef(tn1) 0 AppRand53) (vector-set! CellRef(tn2) 0 tmp)) (let ([tmp5560 (vector-ref CellRef(tn1) 1)][AppRand54 (vector-ref CellRef(tn2) 1)]) (vector-set! CellRef(tn1) 1 AppRand54) (vector-set! CellRef(tn2) 1 tmp5560))) (let ([SetBang7 (+ CellRef(actuallyMut) 2)]) (set! actuallyMut SetBang7))))')
debug_merge_point(0, 0, '(rnd treeHeight)')
+2062: p176 = getfield_gc_r(p32, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_4 56 pure>)
+2073: guard_nonnull_class(p176, ConstClass(W_Fixnum), descr=<Guard0x11d130a0>) [i115, i173, i168, i164, None, i123, None, i12, p6, p4, p32, i42, p49, p8]
+2091: i178 = getfield_gc_i(p176, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(let ([if0 (if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)]) (if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))))')
debug_merge_point(0, 0, '(if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)')
debug_merge_point(0, 0, '(if (integer? n5234) (< n5234 16384) #f)')
debug_merge_point(0, 0, '(< n5234 16384)')
+2095: i180 = int_lt(i178, 16384)
+2102: guard_true(i180, descr=<Guard0x11d15bf8>) [i115, i173, i168, i164, None, i123, None, i12, p6, p4, p32, i42, p49, p8]
debug_merge_point(0, 0, '(if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234)))')
debug_merge_point(0, 0, '(CellRef(random14) n5234)')
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+2108: i181 = getfield_gc_i(p55, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2112: i182 = int_is_true(i181)
+2115: guard_true(i182, descr=<Guard0x11d15c40>) [i115, i173, i168, i164, None, i123, None, i12, p6, p4, p32, i42, p49, p8]
+2121: i183 = int_is_true(i149)
+2129: guard_true(i183, descr=<Guard0x11d15c88>) [i115, i173, i168, i164, None, i123, None, i12, p6, p4, p32, i42, p49, p8]
+2135: i184 = int_mul_ovf(i181, i149)
+2143: guard_no_overflow(descr=<Guard0x11d15cd0>) [i115, i173, i168, i164, None, i123, None, i12, p6, p4, p32, i42, p49, p8]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+2149: i185 = getfield_gc_i(p66, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2160: i186 = int_add_ovf(i184, i185)
+2163: guard_no_overflow(descr=<Guard0x11d15d18>) [i115, i173, i168, i164, None, i123, None, i12, p6, p4, p32, i42, p49, p8]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+2169: i187 = getfield_gc_i(p71, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2174: i188 = int_is_zero(i187)
+2177: guard_false(i188, descr=<Guard0x11d15d60>) [i115, i173, i168, i164, None, i123, None, i12, p6, p4, p32, i42, p49, p8]
+2183: i190 = int_rshift(i186, 63)
+2190: i191 = int_xor(i186, i190)
+2196: i192 = int_sub(i191, i190)
+2199: i194 = int_rshift(i187, 63)
+2206: i195 = int_xor(i187, i194)
+2209: i196 = int_sub(i195, i194)
+2212: i197 = int_is_zero(i196)
+2215: guard_false(i197, descr=<Guard0x11d15da8>) [i115, i173, i168, i164, None, i123, None, i12, p6, p4, p32, i42, p49, p8]
+2221: i199 = int_eq(i192, -9223372036854775808)
+2243: i201 = int_eq(i196, -1)
+2263: i202 = int_and(i199, i201)
+2266: guard_false(i202, descr=<Guard0x11d15df0>) [i115, i173, i168, i164, None, i123, None, i12, p6, p4, p32, i42, p49, p8]
+2275: i204 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i192, i196, descr=<Calli 8 ii EF=0 OS=14>)
+2307: i206 = int_lt(i186, 0)
+2311: guard_false(i206, descr=<Guard0x11d13100>) [i196, i204, i192, i186, i173, i178, None, i123, None, i12, p6, p4, p32, None, p49, p8]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+2317: i208 = int_eq(i204, -9223372036854775808)
+2317: i210 = int_rshift(i204, 3)
+2324: i212 = int_lshift(i210, 3)
+2331: i214 = int_xor(i204, 8)
+2338: i216 = int_rshift(i214, 63)
+2342: i217 = int_ne(i212, i204)
+2354: i218 = int_and(i216, i217)
+2357: i219 = int_add(i210, i218)
+2360: setfield_gc(p59, i204, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2364: i220 = int_is_zero(i178)
+2372: guard_false(i220, descr=<Guard0x11d13160>) [i178, i219, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2378: i222 = int_rshift(i219, 63)
+2385: i223 = int_xor(i219, i222)
+2391: i224 = int_sub(i223, i222)
+2394: i226 = int_rshift(i178, 63)
+2405: i227 = int_xor(i178, i226)
+2415: i228 = int_sub(i227, i226)
+2418: i229 = int_is_zero(i228)
+2421: guard_false(i229, descr=<Guard0x11d15e38>) [i178, i219, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2427: i231 = int_eq(i224, -9223372036854775808)
+2449: i233 = int_eq(i228, -1)
+2462: i234 = int_and(i231, i233)
+2465: guard_false(i234, descr=<Guard0x11d15e80>) [i178, i219, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2474: i236 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i224, i228, descr=<Calli 8 ii EF=0 OS=14>)
+2503: i238 = int_lt(i219, 0)
+2507: guard_false(i238, descr=<Guard0x11d131c0>) [i228, i236, i224, i219, None, i173, i178, None, i123, None, i12, p6, p4, p32, None, p49, p8]
debug_merge_point(0, 0, '(rnd pathBits)')
+2513: p239 = getfield_gc_r(p32, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_0 24 pure>)
+2524: guard_nonnull_class(p239, ConstClass(W_Fixnum), descr=<Guard0x11d13220>) [i228, i236, i224, i219, None, i173, i178, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2542: i241 = getfield_gc_i(p239, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(let ([if0 (if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)]) (if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))))')
debug_merge_point(0, 0, '(if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)')
debug_merge_point(0, 0, '(if (integer? n5234) (< n5234 16384) #f)')
debug_merge_point(0, 0, '(< n5234 16384)')
+2546: i243 = int_lt(i241, 16384)
+2553: guard_false(i243, descr=<Guard0x11d15ec8>) [i228, i236, i224, i219, None, i173, i178, None, i123, None, i12, p6, p4, p32, None, p49, p8]
debug_merge_point(0, 0, '(if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234)))')
debug_merge_point(0, 0, '(let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))')
debug_merge_point(0, 0, '(CellRef(random14) 16384)')
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+2559: i244 = getfield_gc_i(p55, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2563: i245 = int_is_true(i244)
+2566: guard_true(i245, descr=<Guard0x11d15f10>) [i228, i236, i224, i219, None, i173, i178, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2572: i246 = int_is_true(i204)
+2580: guard_true(i246, descr=<Guard0x11d15f58>) [i228, i236, i224, i219, None, i173, i178, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2586: i247 = int_mul_ovf(i244, i204)
+2594: guard_no_overflow(descr=<Guard0x11d15fa0>) [i228, i236, i224, i219, None, i173, i178, None, i123, None, i12, p6, p4, p32, None, p49, p8]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+2600: i248 = getfield_gc_i(p66, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2611: i249 = int_add_ovf(i247, i248)
+2614: guard_no_overflow(descr=<Guard0xe5c4020>) [i228, i236, i224, i219, None, i173, i178, None, i123, None, i12, p6, p4, p32, None, p49, p8]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+2620: i250 = getfield_gc_i(p71, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2625: i251 = int_is_zero(i250)
+2628: guard_false(i251, descr=<Guard0xe5c4068>) [i228, i236, i224, i219, None, i173, i178, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2634: i253 = int_rshift(i249, 63)
+2641: i254 = int_xor(i249, i253)
+2647: i255 = int_sub(i254, i253)
+2650: i257 = int_rshift(i250, 63)
+2657: i258 = int_xor(i250, i257)
+2660: i259 = int_sub(i258, i257)
+2663: i260 = int_is_zero(i259)
+2666: guard_false(i260, descr=<Guard0xe5c40b0>) [i228, i236, i224, i219, None, i173, i178, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2672: i262 = int_eq(i255, -9223372036854775808)
+2694: i264 = int_eq(i259, -1)
+2708: i265 = int_and(i262, i264)
+2711: guard_false(i265, descr=<Guard0xe5c40f8>) [i228, i236, i224, i219, None, i173, i178, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2720: i267 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i255, i259, descr=<Calli 8 ii EF=0 OS=14>)
+2755: i269 = int_lt(i249, 0)
+2759: guard_false(i269, descr=<Guard0x11d13280>) [i259, i267, i255, i249, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+2765: i271 = int_eq(i267, -9223372036854775808)
+2765: i273 = int_rshift(i267, 3)
+2772: i275 = int_lshift(i273, 3)
+2779: i277 = int_xor(i267, 8)
+2786: i279 = int_rshift(i277, 63)
+2790: i280 = int_ne(i275, i267)
+2803: i281 = int_and(i279, i280)
+2806: i282 = int_add(i273, i281)
+2809: i284 = int_rshift(i282, 63)
+2816: i285 = int_xor(i282, i284)
+2822: i286 = int_sub(i285, i284)
+2825: i288 = int_eq(i286, -9223372036854775808)
+2825: i290 = int_and(i286, 16383)
+2835: setfield_gc(p59, i267, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2839: i292 = int_lt(i282, 0)
+2843: guard_false(i292, descr=<Guard0x11d132e0>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
debug_merge_point(0, 0, '(CellRef(loop) n5234 AppRand5 n5234)')
+2849: p293 = getfield_gc_r(p37, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+2860: p294 = getfield_gc_r(p293, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+2864: guard_nonnull_class(p294, 16478072, descr=<Guard0x11d13340>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2882: p296 = getfield_gc_r(p294, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+2893: guard_value(p296, ConstPtr(ptr297), descr=<Guard0xe5c4140>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
debug_merge_point(0, 0, '(if (zero? q) (remainder r n5224) (let ([AppRand2 (* 16384 r)][AppRand3 (CellRef(random14) 16384)]) (let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)))) from (CellRef(loop) n5234 AppRand5 n5234)')
debug_merge_point(0, 0, '(let ([AppRand2 (* 16384 r)][AppRand3 (CellRef(random14) 16384)]) (let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)))')
debug_merge_point(0, 0, '(* 16384 r)')
+2902: i298 = int_is_true(i290)
+2905: guard_true(i298, descr=<Guard0xe5c4188>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2911: i300 = int_lshift(i290, 14)
debug_merge_point(0, 0, '(CellRef(random14) 16384)')
+2918: p301 = getfield_gc_r(p294, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+2922: p302 = getfield_gc_r(p301, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+2926: guard_nonnull_class(p302, 16478824, descr=<Guard0x11d133a0>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2944: p304 = getfield_gc_r(p302, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+2948: guard_value(p304, ConstPtr(ptr305), descr=<Guard0xe5c41d0>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2961: p306 = getfield_gc_r(p294, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+2961: p307 = getfield_gc_r(p302, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_2 40 pure>)
+2965: p308 = getfield_gc_r(p307, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+2969: guard_nonnull_class(p308, ConstClass(W_CellIntegerStrategy), descr=<Guard0x11d13400>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2988: i310 = getfield_gc_i(p308, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2992: p311 = getfield_gc_r(p302, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_3 48 pure>)
+3003: p312 = getfield_gc_r(p311, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3014: guard_nonnull_class(p312, ConstClass(W_CellIntegerStrategy), descr=<Guard0x11d13460>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+3032: i314 = getfield_gc_i(p312, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3043: i315 = int_is_true(i310)
+3046: guard_true(i315, descr=<Guard0xe5c4218>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+3052: i316 = int_is_true(i314)
+3055: guard_true(i316, descr=<Guard0xe5c4260>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+3061: i317 = int_mul_ovf(i310, i314)
+3065: guard_no_overflow(descr=<Guard0xe5c42a8>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+3071: p318 = getfield_gc_r(p302, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_1 32 pure>)
+3089: p319 = getfield_gc_r(p318, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3100: guard_nonnull_class(p319, ConstClass(W_CellIntegerStrategy), descr=<Guard0x11d134c0>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+3119: i321 = getfield_gc_i(p319, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3130: i322 = int_add_ovf(i317, i321)
+3133: guard_no_overflow(descr=<Guard0xe5c42f0>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+3139: p323 = getfield_gc_r(p302, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_0 24 pure>)
+3143: p324 = getfield_gc_r(p323, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3154: guard_nonnull_class(p324, ConstClass(W_CellIntegerStrategy), descr=<Guard0x11d13520>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+3172: i326 = getfield_gc_i(p324, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3176: i327 = int_is_zero(i326)
+3179: guard_false(i327, descr=<Guard0xe5c4338>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+3185: i329 = int_rshift(i322, 63)
+3196: i330 = int_xor(i322, i329)
+3213: i331 = int_sub(i330, i329)
+3216: i333 = int_rshift(i326, 63)
+3223: i334 = int_xor(i326, i333)
+3226: i335 = int_sub(i334, i333)
+3229: i336 = int_is_zero(i335)
+3232: guard_false(i336, descr=<Guard0xe5c4380>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+3238: i338 = int_eq(i331, -9223372036854775808)
+3261: i340 = int_eq(i335, -1)
+3282: i341 = int_and(i338, i340)
+3285: guard_false(i341, descr=<Guard0xe5c43c8>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+3294: i343 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i331, i335, descr=<Calli 8 ii EF=0 OS=14>)
+3336: i345 = int_lt(i322, 0)
+3344: guard_false(i345, descr=<Guard0x11d13580>) [i335, i343, i331, i322, i290, p294, i300, p302, i236, i241, None, None, i173, None, None, i123, None, i12, p6, p4, p32, None, None, p8]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+3350: i347 = int_eq(i343, -9223372036854775808)
+3350: i349 = int_rshift(i343, 3)
+3357: i351 = int_lshift(i349, 3)
+3364: i353 = int_xor(i343, 8)
+3371: i355 = int_rshift(i353, 63)
+3375: i356 = int_ne(i351, i343)
+3387: i357 = int_and(i355, i356)
+3390: i358 = int_add(i349, i357)
+3393: i360 = int_rshift(i358, 63)
+3400: i361 = int_xor(i358, i360)
+3406: i362 = int_sub(i361, i360)
+3409: i364 = int_eq(i362, -9223372036854775808)
+3409: i366 = int_and(i362, 16383)
+3419: setfield_gc(p312, i343, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3430: i368 = int_lt(i358, 0)
+3434: guard_false(i368, descr=<Guard0x11d135e0>) [i366, i362, i358, i290, p294, i300, p302, i236, i241, None, None, i173, None, None, i123, None, i12, p6, p4, p32, None, None, p8]
debug_merge_point(0, 0, '(let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)) from (remainder (quotient CellRef(x) 8) n)')
debug_merge_point(0, 0, '(+ AppRand2 AppRand3)')
+3440: i369 = int_add(i300, i366)
debug_merge_point(0, 0, '(CellRef(loop) (quotient q 16384) AppRand4 n5224)')
+3446: p370 = getfield_gc_r(p294, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+3457: p371 = getfield_gc_r(p370, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3461: guard_nonnull_class(p371, 16478072, descr=<Guard0x11d13640>) [i366, i362, i358, i290, p294, i300, p302, i236, i241, None, None, i173, None, None, i123, None, i12, p6, p4, p32, None, None, p8]
+3479: i374 = int_rshift(i241, 14)
+3490: i376 = int_lshift(i374, 14)
+3490: i378 = int_xor(i241, 16384)
+3490: i379 = int_ne(i376, i241)
+3490: p380 = getfield_gc_r(p371, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+3501: guard_value(p380, ConstPtr(ptr381), descr=<Guard0xe5c4410>) [i366, i362, i358, i290, p294, i300, p302, i236, i241, None, None, i173, None, None, i123, None, i12, p6, p4, p32, None, None, p8]
+3514: i382 = instance_ptr_eq(p294, p371)
+3517: guard_true(i382, descr=<Guard0xe5c4458>) [i366, i362, i358, i290, p294, i300, p302, i236, i241, None, None, i173, None, None, i123, None, i12, p6, p4, p32, None, None, p8]
debug_merge_point(0, 0, '(if (zero? q) (remainder r n5224) (let ([AppRand2 (* 16384 r)][AppRand3 (CellRef(random14) 16384)]) (let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)))) from (CellRef(loop) (quotient q 16384) AppRand4 n5224)')
+3523: p383 = new_with_vtable(descr=<SizeDescr 16>)
+3573: p384 = new_with_vtable(descr=<SizeDescr 48>)
+3584: p385 = new_with_vtable(descr=<SizeDescr 32>)
+3595: setfield_gc(p385, p32, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+3599: setfield_gc(p385, i123, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_0 16 pure>)
+3610: setfield_gc(p385, i173, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_1 24 pure>)
+3621: p386 = new_with_vtable(descr=<SizeDescr 40>)
+3632: setfield_gc(p386, p8, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+3643: p387 = new_with_vtable(descr=<SizeDescr 24>)
+3654: setfield_gc(p387, p6, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+3665: setfield_gc(p387, i12, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+3676: setfield_gc(p386, p387, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+3680: setfield_gc(p386, p4, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+3691: setfield_gc(p386, ConstPtr(ptr388), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+3702: setfield_gc(p384, p385, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+3706: setfield_gc(p384, p386, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+3710: setfield_gc(p384, p8, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+3714: setfield_gc(p383, i241, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+3732: setfield_gc(p384, ConstPtr(ptr389), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+3736: setfield_gc(p384, i236, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+3747: jump(p294, i374, i369, p383, p384, p301, p302, p307, p308, p311, p312, i343, p318, p319, p323, p324, p8, p370, p371, descr=TargetToken(139976055980144))
+3952: --end of the loop--
[3e4c20f7eefab3c] jit-log-opt-bridge}
[3e4c20f92110a8c] {jit-backend
[3e4c20f9237ba3b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c260d
[3e4c20f92395dfe] jit-backend-dump}
[3e4c20f923b981b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c263d4 +0  34000000
[3e4c20f923bb0f5] jit-backend-dump}
[3e4c20f923bf706] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c27045 +0  34000000
[3e4c20f923c0700] jit-backend-dump}
[3e4c20f923c3f4d] {jit-backend-addr
bridge out of Guard 0xba3f460 has address 0x7f4eb6c263d0 to 0x7f4eb6c27040
       gc table: 0x7f4eb6c260d0
    jump target: 0x7f4eb6c263d0
         resops: 0x7f4eb6c263de
       failures: 0x7f4eb6c27040
            end: 0x7f4eb6c27a3f
[3e4c20f923c6874] jit-backend-addr}
[3e4c20f923ca35f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c263f2 +0  8D0C0000
[3e4c20f923cb1f2] jit-backend-dump}
[3e4c20f923ce7e8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26409 +0  920C0000
[3e4c20f923cf556] jit-backend-dump}
[3e4c20f923d2a63] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2641b +0  9C0C0000
[3e4c20f923d37aa] jit-backend-dump}
[3e4c20f923d6ba4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26432 +0  A10C0000
[3e4c20f923d78b3] jit-backend-dump}
[3e4c20f923db005] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26440 +0  CB0C0000
[3e4c20f923dbd2d] jit-backend-dump}
[3e4c20f923df1f1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2644d +0  DA0C0000
[3e4c20f923dfef7] jit-backend-dump}
[3e4c20f923e3322] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26461 +0  E20C0000
[3e4c20f923e402b] jit-backend-dump}
[3e4c20f923e73f7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26497 +0  C80C0000
[3e4c20f923e8100] jit-backend-dump}
[3e4c20f923eb467] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c264b1 +0  CA0C0000
[3e4c20f923ec170] jit-backend-dump}
[3e4c20f923ef4fc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c264c5 +0  D20C0000
[3e4c20f923f01f9] jit-backend-dump}
[3e4c20f923f3585] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c264dc +0  D70C0000
[3e4c20f923f42bf] jit-backend-dump}
[3e4c20f923f760a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c264f6 +0  D90C0000
[3e4c20f923f8307] jit-backend-dump}
[3e4c20f923fb67b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2650e +0  DD0C0000
[3e4c20f923fc384] jit-backend-dump}
[3e4c20f923ff72b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2651b +0  EC0C0000
[3e4c20f9240042e] jit-backend-dump}
[3e4c20f9240377a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26535 +0  EE0C0000
[3e4c20f92404489] jit-backend-dump}
[3e4c20f924077f0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26549 +0  F60C0000
[3e4c20f924084fc] jit-backend-dump}
[3e4c20f9240b842] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2656b +0  F00C0000
[3e4c20f9240c554] jit-backend-dump}
[3e4c20f9240f8bb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26599 +0  DE0C0000
[3e4c20f924105c1] jit-backend-dump}
[3e4c20f92413919] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c265a6 +0  ED0C0000
[3e4c20f9241462e] jit-backend-dump}
[3e4c20f92417983] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c265af +0  000D0000
[3e4c20f9241868f] jit-backend-dump}
[3e4c20f9241ba09] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c265b9 +0  120D0000
[3e4c20f9241c70c] jit-backend-dump}
[3e4c20f9241fa88] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c265da +0  0D0D0000
[3e4c20f92420798] jit-backend-dump}
[3e4c20f92423be1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c265e7 +0  1C0D0000
[3e4c20f9242491e] jit-backend-dump}
[3e4c20f92427d06] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26609 +0  160D0000
[3e4c20f92428a1e] jit-backend-dump}
[3e4c20f9242bd73] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26616 +0  250D0000
[3e4c20f9242ca88] jit-backend-dump}
[3e4c20f9242fe85] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2664b +0  0C0D0000
[3e4c20f92430bed] jit-backend-dump}
[3e4c20f924341f5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26683 +0  F00C0000
[3e4c20f92434f11] jit-backend-dump}
[3e4c20f92438354] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c266c2 +0  CD0C0000
[3e4c20f92439070] jit-backend-dump}
[3e4c20f9243c66e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c266fb +0  B00C0000
[3e4c20f9243d396] jit-backend-dump}
[3e4c20f92440784] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26724 +0  A30C0000
[3e4c20f9244148d] jit-backend-dump}
[3e4c20f92444844] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26755 +0  8E0C0000
[3e4c20f9244553a] jit-backend-dump}
[3e4c20f9244899f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26786 +0  790C0000
[3e4c20f92449704] jit-backend-dump}
[3e4c20f9244cd96] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26793 +0  880C0000
[3e4c20f9244da68] jit-backend-dump}
[3e4c20f92450eca] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2679c +0  9B0C0000
[3e4c20f92451c2f] jit-backend-dump}
[3e4c20f924550da] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c267a6 +0  AD0C0000
[3e4c20f92455dd1] jit-backend-dump}
[3e4c20f92459188] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c267ba +0  B50C0000
[3e4c20f92459ea3] jit-backend-dump}
[3e4c20f9245d35e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c267cf +0  BC0C0000
[3e4c20f9245e0b6] jit-backend-dump}
[3e4c20f9246147f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c267f5 +0  B20C0000
[3e4c20f924621b0] jit-backend-dump}
[3e4c20f9246569f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26825 +0  9E0C0000
[3e4c20f9246639c] jit-backend-dump}
[3e4c20f92469700] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2684f +0  900C0000
[3e4c20f9246a3fd] jit-backend-dump}
[3e4c20f9246d83a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c268b6 +0  450C0000
[3e4c20f9246e54c] jit-backend-dump}
[3e4c20f9247190f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c268da +0  3D0C0000
[3e4c20f92472612] jit-backend-dump}
[3e4c20f92475a5c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c268f7 +0  3C0C0000
[3e4c20f92476734] jit-backend-dump}
[3e4c20f92479aaa] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26908 +0  470C0000
[3e4c20f9247a792] jit-backend-dump}
[3e4c20f9247db6a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26915 +0  560C0000
[3e4c20f9247e879] jit-backend-dump}
[3e4c20f92481b5d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26923 +0  640C0000
[3e4c20f92482860] jit-backend-dump}
[3e4c20f92485c78] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26931 +0  720C0000
[3e4c20f9248694a] jit-backend-dump}
[3e4c20f92489c96] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26945 +0  7A0C0000
[3e4c20f9248a98d] jit-backend-dump}
[3e4c20f9248ddb8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26953 +0  880C0000
[3e4c20f9248eaa8] jit-backend-dump}
[3e4c20f92491dcc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26979 +0  7E0C0000
[3e4c20f92492ad5] jit-backend-dump}
[3e4c20f92495f59] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c269af +0  640C0000
[3e4c20f92496d38] jit-backend-dump}
[3e4c20f9249a0d3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c269d9 +0  560C0000
[3e4c20f9249adef] jit-backend-dump}
[3e4c20f9249e1d0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26a16 +0  350C0000
[3e4c20f9249eeb8] jit-backend-dump}
[3e4c20f924a2206] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26a47 +0  200C0000
[3e4c20f924a2f0c] jit-backend-dump}
[3e4c20f924a633d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26a76 +0  0D0C0000
[3e4c20f924a7034] jit-backend-dump}
[3e4c20f924aa361] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26a9d +0  020C0000
[3e4c20f924ab061] jit-backend-dump}
[3e4c20f924ae408] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26aba +0  010C0000
[3e4c20f924af12a] jit-backend-dump}
[3e4c20f924b240a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26acb +0  0C0C0000
[3e4c20f924b3117] jit-backend-dump}
[3e4c20f924b6517] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26ad8 +0  1B0C0000
[3e4c20f924b71ef] jit-backend-dump}
[3e4c20f924ba51f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26ae6 +0  290C0000
[3e4c20f924bb278] jit-backend-dump}
[3e4c20f924be659] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26af4 +0  370C0000
[3e4c20f924bf350] jit-backend-dump}
[3e4c20f924c2683] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26b08 +0  3F0C0000
[3e4c20f924c3392] jit-backend-dump}
[3e4c20f924c67e8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26b16 +0  4D0C0000
[3e4c20f924c74c3] jit-backend-dump}
[3e4c20f924ca80f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26b3c +0  430C0000
[3e4c20f924cb4f3] jit-backend-dump}
[3e4c20f924ce8db] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26b6c +0  2F0C0000
[3e4c20f924cf5c2] jit-backend-dump}
[3e4c20f924d28d7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26b99 +0  1E0C0000
[3e4c20f924d35e3] jit-backend-dump}
[3e4c20f924d6a3c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26bed +0  E60B0000
[3e4c20f924d7742] jit-backend-dump}
[3e4c20f924daaca] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26c0e +0  E10B0000
[3e4c20f924db7be] jit-backend-dump}
[3e4c20f924debe0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26c22 +0  E90B0000
[3e4c20f924df8c7] jit-backend-dump}
[3e4c20f924e2c53] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26c2b +0  FC0B0000
[3e4c20f924e396c] jit-backend-dump}
[3e4c20f924e6df5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26c4c +0  F70B0000
[3e4c20f924e7ad4] jit-backend-dump}
[3e4c20f924eaea3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26c5d +0  020C0000
[3e4c20f924ebb90] jit-backend-dump}
[3e4c20f924eef7b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26c78 +0  030C0000
[3e4c20f924efc75] jit-backend-dump}
[3e4c20f924f2fc6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26ca4 +0  F30B0000
[3e4c20f924f3cd6] jit-backend-dump}
[3e4c20f924f710a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26cb8 +0  FB0B0000
[3e4c20f924f7ddf] jit-backend-dump}
[3e4c20f924fb12a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26cc1 +0  0E0C0000
[3e4c20f924fbe34] jit-backend-dump}
[3e4c20f924ff246] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26ccb +0  200C0000
[3e4c20f924fff37] jit-backend-dump}
[3e4c20f92503226] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26cfb +0  0C0C0000
[3e4c20f92503f30] jit-backend-dump}
[3e4c20f925072ef] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26d0f +0  140C0000
[3e4c20f92507fd4] jit-backend-dump}
[3e4c20f9250b397] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26d30 +0  0F0C0000
[3e4c20f9250c09a] jit-backend-dump}
[3e4c20f9250f4b5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26d3d +0  1E0C0000
[3e4c20f9251019d] jit-backend-dump}
[3e4c20f92513486] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26d72 +0  050C0000
[3e4c20f925141ae] jit-backend-dump}
[3e4c20f925175a2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26daa +0  E90B0000
[3e4c20f9251827a] jit-backend-dump}
[3e4c20f9251b58c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26de2 +0  CD0B0000
[3e4c20f9251c279] jit-backend-dump}
[3e4c20f9251f658] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26e3c +0  8F0B0000
[3e4c20f92520376] jit-backend-dump}
[3e4c20f925236a6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26e63 +0  840B0000
[3e4c20f92524411] jit-backend-dump}
[3e4c20f92527839] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26e86 +0  7D0B0000
[3e4c20f9252853f] jit-backend-dump}
[3e4c20f9252b85d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c26e8f +0  900B0000
[3e4c20f9252c57b] jit-backend-dump}
[3e4c20f9252ff8d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c212c2 +0  0A510000
[3e4c20f92530cc1] jit-backend-dump}
[3e4c20f92536022] jit-backend}
[3e4c20f92539e25] {jit-log-opt-bridge
# bridge out of Guard 0xba3f460 with 452 ops
[p0, p1]
+797: guard_value(p0, ConstPtr(ptr2), descr=<Guard0x118ec080>) [p0, p1]
+806: p3 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+811: p4 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55)) from (+ CellRef(actuallyMut) 2)')
+816: guard_class(p3, 16504944, descr=<Guard0x118ce530>) [p0, p1]
+829: p6 = getfield_gc_r(p3, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+833: guard_class(p4, 16435208, descr=<Guard0x118ce4e8>) [p0, p1]
+847: p8 = getfield_gc_r(p4, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+851: guard_nonnull_class(p8, ConstClass(ForwardLink), descr=<Guard0x118ec320>) [p0, p1]
debug_merge_point(0, 0, '(+ i5574 1)')
+870: guard_not_invalidated(descr=<Guard0x118ce4a0>) [p0, p1]
+870: i10 = getfield_gc_i(p3, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+874: i12 = int_add_ovf(i10, 1)
+878: guard_no_overflow(descr=<Guard0x118ce458>) [p0, p1]
debug_merge_point(0, 0, '(doloop5572 AppRand55)')
+884: guard_class(p6, 16481456, descr=<Guard0x118ce410>) [p0, p1]
+897: p14 = getfield_gc_r(p6, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+908: guard_value(p14, ConstPtr(ptr15), descr=<Guard0x118ce3c8>) [p0, p1]
debug_merge_point(0, 0, '(let ([if10 (>= i5574 (quotient n5570 2))]) (if if10 (void) (begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55))))) from (doloop5572 AppRand55)')
debug_merge_point(0, 0, '(>= i5574 (quotient n5570 2))')
+917: i16 = getfield_gc_i(p6, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_vals_fixed_1 24 pure>)
+921: i18 = int_eq(i16, -9223372036854775808)
+921: i20 = int_rshift(i16, 1)
+927: i22 = int_lshift(i20, 1)
+933: i24 = int_xor(i16, 2)
+940: i26 = int_rshift(i24, 63)
+944: i27 = int_ne(i22, i16)
+956: i28 = int_and(i26, i27)
+959: i29 = int_add(i20, i28)
+962: i30 = int_ge(i12, i29)
+965: guard_false(i30, descr=<Guard0x118ce380>) [p0, p1]
debug_merge_point(0, 0, '(if if10 (void) (begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55))))')
debug_merge_point(0, 0, '(begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55)))')
debug_merge_point(0, 0, '(CellRef(oldGenSwapSubtrees))')
+971: p31 = getfield_gc_r(p6, descr=<FieldP pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_w_val0 32 pure>)
+975: p32 = getfield_gc_r(p31, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+979: guard_nonnull_class(p32, 16479200, descr=<Guard0x118ec2c0>) [p0, p1]
+997: p34 = getfield_gc_r(p32, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1008: guard_value(p34, ConstPtr(ptr35), descr=<Guard0x118ce338>) [p0, p1]
+1017: p36 = getfield_gc_r(p6, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([index1 (rnd (vector-length CellRef(trees)))][index2 (rnd (vector-length CellRef(trees)))]) (let ([depth (rnd treeHeight)][path (rnd pathBits)][tn1 (vector-ref CellRef(trees) index1)][tn2 (vector-ref CellRef(trees) index2)]) (let ([doloop5533 (lambda (i5535) (let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))))]) (doloop5533 0) (if (even? CellRef(path)) (let ([tmp (vector-ref CellRef(tn1) 0)][AppRand53 (vector-ref CellRef(tn2) 0)]) (vector-set! CellRef(tn1) 0 AppRand53) (vector-set! CellRef(tn2) 0 tmp)) (let ([tmp5560 (vector-ref CellRef(tn1) 1)][AppRand54 (vector-ref CellRef(tn2) 1)]) (vector-set! CellRef(tn1) 1 AppRand54) (vector-set! CellRef(tn2) 1 tmp5560))) (let ([SetBang7 (+ CellRef(actuallyMut) 2)]) (set! actuallyMut SetBang7)))))')
debug_merge_point(0, 0, '(rnd (vector-length CellRef(trees)))')
+1017: p37 = getfield_gc_r(p32, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_2 40 pure>)
+1021: guard_nonnull_class(p37, 16478072, descr=<Guard0x118ec260>) [p0, p1]
+1040: p39 = getfield_gc_r(p32, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_3 48 pure>)
+1044: p40 = getfield_gc_r(p39, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1048: guard_nonnull_class(p40, ConstClass(W_Vector), descr=<Guard0x118ec200>) [p0, p1]
+1066: i42 = getfield_gc_i(p40, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1070: p43 = getfield_gc_r(p37, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1081: guard_value(p43, ConstPtr(ptr44), descr=<Guard0x118ce2f0>) [p0, p1]
+1090: p45 = getfield_gc_r(p32, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([if0 (if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)]) (if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))))')
debug_merge_point(0, 0, '(if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)')
debug_merge_point(0, 0, '(if (integer? n5234) (< n5234 16384) #f)')
debug_merge_point(0, 0, '(< n5234 16384)')
+1090: i47 = int_lt(i42, 16384)
+1097: guard_true(i47, descr=<Guard0x118ce2a8>) [p0, p1]
debug_merge_point(0, 0, '(if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234)))')
debug_merge_point(0, 0, '(CellRef(random14) n5234)')
+1103: p48 = getfield_gc_r(p37, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+1107: p49 = getfield_gc_r(p48, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1111: guard_nonnull_class(p49, 16478824, descr=<Guard0x118ec1a0>) [p0, p1]
+1129: p51 = getfield_gc_r(p49, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1140: guard_value(p51, ConstPtr(ptr52), descr=<Guard0x118ce260>) [p0, p1]
+1149: p53 = getfield_gc_r(p37, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+1149: p54 = getfield_gc_r(p49, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_2 40 pure>)
+1153: p55 = getfield_gc_r(p54, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1164: guard_nonnull_class(p55, ConstClass(W_CellIntegerStrategy), descr=<Guard0x118ec140>) [p0, p1]
+1183: i57 = getfield_gc_i(p55, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1187: p58 = getfield_gc_r(p49, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_3 48 pure>)
+1198: p59 = getfield_gc_r(p58, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1209: guard_nonnull_class(p59, ConstClass(W_CellIntegerStrategy), descr=<Guard0x118ec0e0>) [p0, p1]
+1229: i61 = getfield_gc_i(p59, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1233: i62 = int_is_true(i57)
+1236: guard_true(i62, descr=<Guard0x118ce218>) [p0, p1]
+1242: i63 = int_is_true(i61)
+1245: guard_true(i63, descr=<Guard0x118ce1d0>) [p0, p1]
+1251: i64 = int_mul_ovf(i57, i61)
+1255: guard_no_overflow(descr=<Guard0x118ce188>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+1261: p65 = getfield_gc_r(p49, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_1 32 pure>)
+1265: p66 = getfield_gc_r(p65, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1276: guard_nonnull_class(p66, ConstClass(W_CellIntegerStrategy), descr=<Guard0x118ec020>) [p0, p1]
+1294: i68 = getfield_gc_i(p66, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1298: i69 = int_add_ovf(i64, i68)
+1301: guard_no_overflow(descr=<Guard0x118ce578>) [p0, p1]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+1307: p70 = getfield_gc_r(p49, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_0 24 pure>)
+1311: p71 = getfield_gc_r(p70, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1322: guard_nonnull_class(p71, ConstClass(W_CellIntegerStrategy), descr=<Guard0x118ec380>) [p0, p1]
+1341: i73 = getfield_gc_i(p71, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1345: i74 = int_is_zero(i73)
+1348: guard_false(i74, descr=<Guard0x118ce5c0>) [p0, p1]
+1354: i76 = int_rshift(i69, 63)
+1365: i77 = int_xor(i69, i76)
+1382: i78 = int_sub(i77, i76)
+1385: i80 = int_rshift(i73, 63)
+1392: i81 = int_xor(i73, i80)
+1395: i82 = int_sub(i81, i80)
+1398: i83 = int_is_zero(i82)
+1401: guard_false(i83, descr=<Guard0x118ce608>) [p0, p1]
+1407: i85 = int_eq(i78, -9223372036854775808)
+1430: i87 = int_eq(i82, -1)
+1451: i88 = int_and(i85, i87)
+1454: guard_false(i88, descr=<Guard0x118ce650>) [p0, p1]
+1463: i90 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i78, i82, descr=<Calli 8 ii EF=0 OS=14>)
+1512: i92 = int_lt(i69, 0)
+1520: guard_false(i92, descr=<Guard0x118ec3e0>) [i82, i90, i78, i69, i12, p6, p4, p32, i42, p49, p8]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+1526: i94 = int_eq(i90, -9223372036854775808)
+1526: i96 = int_rshift(i90, 3)
+1533: i98 = int_lshift(i96, 3)
+1540: i100 = int_xor(i90, 8)
+1547: i102 = int_rshift(i100, 63)
+1551: i103 = int_ne(i98, i90)
+1564: i104 = int_and(i102, i103)
+1567: i105 = int_add(i96, i104)
+1570: setfield_gc(p59, i90, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1574: i106 = int_is_zero(i42)
+1577: guard_false(i106, descr=<Guard0x118ec440>) [i42, i105, i12, p6, p4, p32, None, p49, p8]
+1583: i109 = int_rshift(i105, 63)
+1590: i110 = int_xor(i105, i109)
+1596: i111 = int_sub(i110, i109)
+1599: i113 = int_rshift(i42, 63)
+1606: i114 = int_xor(i42, i113)
+1612: i115 = int_sub(i114, i113)
+1615: i116 = int_is_zero(i115)
+1618: guard_false(i116, descr=<Guard0x118ce698>) [i42, i105, i12, p6, p4, p32, None, p49, p8]
+1624: i118 = int_eq(i111, -9223372036854775808)
+1647: i120 = int_eq(i115, -1)
+1661: i121 = int_and(i118, i120)
+1664: guard_false(i121, descr=<Guard0x118ce6e0>) [i42, i105, i12, p6, p4, p32, None, p49, p8]
+1673: i123 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i111, i115, descr=<Calli 8 ii EF=0 OS=14>)
+1712: i125 = int_lt(i105, 0)
+1716: guard_false(i125, descr=<Guard0x118ec4a0>) [i115, i123, i111, i105, None, i12, p6, p4, p32, i42, p49, p8]
debug_merge_point(0, 0, '(rnd (vector-length CellRef(trees)))')
debug_merge_point(0, 0, '(let ([if0 (if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)]) (if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))))')
debug_merge_point(0, 0, '(if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)')
debug_merge_point(0, 0, '(if (integer? n5234) (< n5234 16384) #f)')
debug_merge_point(0, 0, '(< n5234 16384)')
debug_merge_point(0, 0, '(if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234)))')
debug_merge_point(0, 0, '(CellRef(random14) n5234)')
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+1722: i126 = getfield_gc_i(p55, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1726: i127 = int_is_true(i126)
+1729: guard_true(i127, descr=<Guard0x118ce728>) [i115, i123, i111, i105, None, i12, p6, p4, p32, i42, p49, p8]
+1735: i128 = int_is_true(i90)
+1738: guard_true(i128, descr=<Guard0x118ce770>) [i115, i123, i111, i105, None, i12, p6, p4, p32, i42, p49, p8]
+1744: i129 = int_mul_ovf(i126, i90)
+1748: guard_no_overflow(descr=<Guard0x118ce7b8>) [i115, i123, i111, i105, None, i12, p6, p4, p32, i42, p49, p8]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+1754: i130 = getfield_gc_i(p66, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1765: i131 = int_add_ovf(i129, i130)
+1768: guard_no_overflow(descr=<Guard0x118ce800>) [i115, i123, i111, i105, None, i12, p6, p4, p32, i42, p49, p8]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+1774: i132 = getfield_gc_i(p71, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1786: i133 = int_is_zero(i132)
+1789: guard_false(i133, descr=<Guard0x118ce848>) [i115, i123, i111, i105, None, i12, p6, p4, p32, i42, p49, p8]
+1795: i135 = int_rshift(i131, 63)
+1802: i136 = int_xor(i131, i135)
+1808: i137 = int_sub(i136, i135)
+1811: i139 = int_rshift(i132, 63)
+1818: i140 = int_xor(i132, i139)
+1821: i141 = int_sub(i140, i139)
+1824: i142 = int_is_zero(i141)
+1827: guard_false(i142, descr=<Guard0x118ce890>) [i115, i123, i111, i105, None, i12, p6, p4, p32, i42, p49, p8]
+1833: i144 = int_eq(i137, -9223372036854775808)
+1855: i146 = int_eq(i141, -1)
+1869: i147 = int_and(i144, i146)
+1872: guard_false(i147, descr=<Guard0x118ce8d8>) [i115, i123, i111, i105, None, i12, p6, p4, p32, i42, p49, p8]
+1881: i149 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i137, i141, descr=<Calli 8 ii EF=0 OS=14>)
+1913: i151 = int_lt(i131, 0)
+1917: guard_false(i151, descr=<Guard0x118ec500>) [i141, i149, i137, i131, i123, None, i12, p6, p4, p32, i42, p49, p8]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+1923: i153 = int_eq(i149, -9223372036854775808)
+1923: i155 = int_rshift(i149, 3)
+1930: i157 = int_lshift(i155, 3)
+1937: i159 = int_xor(i149, 8)
+1944: i161 = int_rshift(i159, 63)
+1948: i162 = int_ne(i157, i149)
+1961: i163 = int_and(i161, i162)
+1964: i164 = int_add(i155, i163)
+1967: i166 = int_rshift(i164, 63)
+1974: i167 = int_xor(i164, i166)
+1980: i168 = int_sub(i167, i166)
+1983: i170 = int_eq(i168, -9223372036854775808)
+2006: i171 = int_and(i170, i120)
+2013: setfield_gc(p59, i149, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2017: guard_false(i171, descr=<Guard0x118ec560>) [i115, i168, i171, i164, i123, None, i12, p6, p4, p32, i42, p49, p8]
+2026: i173 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i168, i115, descr=<Calli 8 ii EF=0 OS=14>)
+2052: i175 = int_lt(i164, 0)
+2056: guard_false(i175, descr=<Guard0x118ec5c0>) [i115, i173, i168, i164, None, i123, None, i12, p6, p4, p32, i42, p49, p8]
debug_merge_point(0, 0, '(let ([depth (rnd treeHeight)][path (rnd pathBits)][tn1 (vector-ref CellRef(trees) index1)][tn2 (vector-ref CellRef(trees) index2)]) (let ([doloop5533 (lambda (i5535) (let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))))]) (doloop5533 0) (if (even? CellRef(path)) (let ([tmp (vector-ref CellRef(tn1) 0)][AppRand53 (vector-ref CellRef(tn2) 0)]) (vector-set! CellRef(tn1) 0 AppRand53) (vector-set! CellRef(tn2) 0 tmp)) (let ([tmp5560 (vector-ref CellRef(tn1) 1)][AppRand54 (vector-ref CellRef(tn2) 1)]) (vector-set! CellRef(tn1) 1 AppRand54) (vector-set! CellRef(tn2) 1 tmp5560))) (let ([SetBang7 (+ CellRef(actuallyMut) 2)]) (set! actuallyMut SetBang7))))')
debug_merge_point(0, 0, '(rnd treeHeight)')
+2062: p176 = getfield_gc_r(p32, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_4 56 pure>)
+2073: guard_nonnull_class(p176, ConstClass(W_Fixnum), descr=<Guard0x118ec620>) [i115, i173, i168, i164, None, i123, None, i12, p6, p4, p32, i42, p49, p8]
+2091: i178 = getfield_gc_i(p176, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(let ([if0 (if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)]) (if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))))')
debug_merge_point(0, 0, '(if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)')
debug_merge_point(0, 0, '(if (integer? n5234) (< n5234 16384) #f)')
debug_merge_point(0, 0, '(< n5234 16384)')
+2095: i180 = int_lt(i178, 16384)
+2102: guard_true(i180, descr=<Guard0x118ce920>) [i115, i173, i168, i164, None, i123, None, i12, p6, p4, p32, i42, p49, p8]
debug_merge_point(0, 0, '(if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234)))')
debug_merge_point(0, 0, '(CellRef(random14) n5234)')
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+2108: i181 = getfield_gc_i(p55, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2112: i182 = int_is_true(i181)
+2115: guard_true(i182, descr=<Guard0x118ce968>) [i115, i173, i168, i164, None, i123, None, i12, p6, p4, p32, i42, p49, p8]
+2121: i183 = int_is_true(i149)
+2129: guard_true(i183, descr=<Guard0x118ce9b0>) [i115, i173, i168, i164, None, i123, None, i12, p6, p4, p32, i42, p49, p8]
+2135: i184 = int_mul_ovf(i181, i149)
+2143: guard_no_overflow(descr=<Guard0x118ce9f8>) [i115, i173, i168, i164, None, i123, None, i12, p6, p4, p32, i42, p49, p8]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+2149: i185 = getfield_gc_i(p66, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2160: i186 = int_add_ovf(i184, i185)
+2163: guard_no_overflow(descr=<Guard0x118cea40>) [i115, i173, i168, i164, None, i123, None, i12, p6, p4, p32, i42, p49, p8]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+2169: i187 = getfield_gc_i(p71, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2174: i188 = int_is_zero(i187)
+2177: guard_false(i188, descr=<Guard0x118cea88>) [i115, i173, i168, i164, None, i123, None, i12, p6, p4, p32, i42, p49, p8]
+2183: i190 = int_rshift(i186, 63)
+2190: i191 = int_xor(i186, i190)
+2196: i192 = int_sub(i191, i190)
+2199: i194 = int_rshift(i187, 63)
+2206: i195 = int_xor(i187, i194)
+2209: i196 = int_sub(i195, i194)
+2212: i197 = int_is_zero(i196)
+2215: guard_false(i197, descr=<Guard0x118cead0>) [i115, i173, i168, i164, None, i123, None, i12, p6, p4, p32, i42, p49, p8]
+2221: i199 = int_eq(i192, -9223372036854775808)
+2243: i201 = int_eq(i196, -1)
+2263: i202 = int_and(i199, i201)
+2266: guard_false(i202, descr=<Guard0x118ceb18>) [i115, i173, i168, i164, None, i123, None, i12, p6, p4, p32, i42, p49, p8]
+2275: i204 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i192, i196, descr=<Calli 8 ii EF=0 OS=14>)
+2307: i206 = int_lt(i186, 0)
+2311: guard_false(i206, descr=<Guard0x118ec680>) [i196, i204, i192, i186, i173, i178, None, i123, None, i12, p6, p4, p32, None, p49, p8]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+2317: i208 = int_eq(i204, -9223372036854775808)
+2317: i210 = int_rshift(i204, 3)
+2324: i212 = int_lshift(i210, 3)
+2331: i214 = int_xor(i204, 8)
+2338: i216 = int_rshift(i214, 63)
+2342: i217 = int_ne(i212, i204)
+2354: i218 = int_and(i216, i217)
+2357: i219 = int_add(i210, i218)
+2360: setfield_gc(p59, i204, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2364: i220 = int_is_zero(i178)
+2372: guard_false(i220, descr=<Guard0x118ec6e0>) [i178, i219, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2378: i222 = int_rshift(i219, 63)
+2385: i223 = int_xor(i219, i222)
+2391: i224 = int_sub(i223, i222)
+2394: i226 = int_rshift(i178, 63)
+2405: i227 = int_xor(i178, i226)
+2415: i228 = int_sub(i227, i226)
+2418: i229 = int_is_zero(i228)
+2421: guard_false(i229, descr=<Guard0x118ceb60>) [i178, i219, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2427: i231 = int_eq(i224, -9223372036854775808)
+2449: i233 = int_eq(i228, -1)
+2462: i234 = int_and(i231, i233)
+2465: guard_false(i234, descr=<Guard0x118ceba8>) [i178, i219, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2474: i236 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i224, i228, descr=<Calli 8 ii EF=0 OS=14>)
+2503: i238 = int_lt(i219, 0)
+2507: guard_false(i238, descr=<Guard0x118ec740>) [i228, i236, i224, i219, None, i173, i178, None, i123, None, i12, p6, p4, p32, None, p49, p8]
debug_merge_point(0, 0, '(rnd pathBits)')
+2513: p239 = getfield_gc_r(p32, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_0 24 pure>)
+2524: guard_nonnull_class(p239, ConstClass(W_Fixnum), descr=<Guard0x118ec7a0>) [i228, i236, i224, i219, None, i173, i178, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2542: i241 = getfield_gc_i(p239, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(let ([if0 (if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)]) (if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))))')
debug_merge_point(0, 0, '(if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)')
debug_merge_point(0, 0, '(if (integer? n5234) (< n5234 16384) #f)')
debug_merge_point(0, 0, '(< n5234 16384)')
+2546: i243 = int_lt(i241, 16384)
+2553: guard_false(i243, descr=<Guard0x118cebf0>) [i228, i236, i224, i219, None, i173, i178, None, i123, None, i12, p6, p4, p32, None, p49, p8]
debug_merge_point(0, 0, '(if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234)))')
debug_merge_point(0, 0, '(let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))')
debug_merge_point(0, 0, '(CellRef(random14) 16384)')
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+2559: i244 = getfield_gc_i(p55, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2563: i245 = int_is_true(i244)
+2566: guard_true(i245, descr=<Guard0x118cec38>) [i228, i236, i224, i219, None, i173, i178, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2572: i246 = int_is_true(i204)
+2580: guard_true(i246, descr=<Guard0x118cec80>) [i228, i236, i224, i219, None, i173, i178, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2586: i247 = int_mul_ovf(i244, i204)
+2594: guard_no_overflow(descr=<Guard0x118cecc8>) [i228, i236, i224, i219, None, i173, i178, None, i123, None, i12, p6, p4, p32, None, p49, p8]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+2600: i248 = getfield_gc_i(p66, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2611: i249 = int_add_ovf(i247, i248)
+2614: guard_no_overflow(descr=<Guard0x118ced10>) [i228, i236, i224, i219, None, i173, i178, None, i123, None, i12, p6, p4, p32, None, p49, p8]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+2620: i250 = getfield_gc_i(p71, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2625: i251 = int_is_zero(i250)
+2628: guard_false(i251, descr=<Guard0x118ced58>) [i228, i236, i224, i219, None, i173, i178, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2634: i253 = int_rshift(i249, 63)
+2641: i254 = int_xor(i249, i253)
+2647: i255 = int_sub(i254, i253)
+2650: i257 = int_rshift(i250, 63)
+2657: i258 = int_xor(i250, i257)
+2660: i259 = int_sub(i258, i257)
+2663: i260 = int_is_zero(i259)
+2666: guard_false(i260, descr=<Guard0x118ceda0>) [i228, i236, i224, i219, None, i173, i178, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2672: i262 = int_eq(i255, -9223372036854775808)
+2694: i264 = int_eq(i259, -1)
+2708: i265 = int_and(i262, i264)
+2711: guard_false(i265, descr=<Guard0x118cede8>) [i228, i236, i224, i219, None, i173, i178, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2720: i267 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i255, i259, descr=<Calli 8 ii EF=0 OS=14>)
+2755: i269 = int_lt(i249, 0)
+2759: guard_false(i269, descr=<Guard0x118ec800>) [i259, i267, i255, i249, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+2765: i271 = int_eq(i267, -9223372036854775808)
+2765: i273 = int_rshift(i267, 3)
+2772: i275 = int_lshift(i273, 3)
+2779: i277 = int_xor(i267, 8)
+2786: i279 = int_rshift(i277, 63)
+2790: i280 = int_ne(i275, i267)
+2803: i281 = int_and(i279, i280)
+2806: i282 = int_add(i273, i281)
+2809: i284 = int_rshift(i282, 63)
+2816: i285 = int_xor(i282, i284)
+2822: i286 = int_sub(i285, i284)
+2825: i288 = int_eq(i286, -9223372036854775808)
+2825: i290 = int_and(i286, 16383)
+2835: setfield_gc(p59, i267, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2839: i292 = int_lt(i282, 0)
+2843: guard_false(i292, descr=<Guard0x118ec860>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
debug_merge_point(0, 0, '(CellRef(loop) n5234 AppRand5 n5234)')
+2849: p293 = getfield_gc_r(p37, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+2860: p294 = getfield_gc_r(p293, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+2864: guard_nonnull_class(p294, 16478072, descr=<Guard0x118ec8c0>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2882: p296 = getfield_gc_r(p294, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+2893: guard_value(p296, ConstPtr(ptr297), descr=<Guard0x118cee30>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
debug_merge_point(0, 0, '(if (zero? q) (remainder r n5224) (let ([AppRand2 (* 16384 r)][AppRand3 (CellRef(random14) 16384)]) (let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)))) from (CellRef(loop) n5234 AppRand5 n5234)')
debug_merge_point(0, 0, '(let ([AppRand2 (* 16384 r)][AppRand3 (CellRef(random14) 16384)]) (let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)))')
debug_merge_point(0, 0, '(* 16384 r)')
+2902: i298 = int_is_true(i290)
+2905: guard_true(i298, descr=<Guard0x118cee78>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2911: i300 = int_lshift(i290, 14)
debug_merge_point(0, 0, '(CellRef(random14) 16384)')
+2918: p301 = getfield_gc_r(p294, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+2922: p302 = getfield_gc_r(p301, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+2926: guard_nonnull_class(p302, 16478824, descr=<Guard0x118ec920>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2944: p304 = getfield_gc_r(p302, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+2948: guard_value(p304, ConstPtr(ptr305), descr=<Guard0x118ceec0>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2961: p306 = getfield_gc_r(p294, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+2961: p307 = getfield_gc_r(p302, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_2 40 pure>)
+2965: p308 = getfield_gc_r(p307, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+2969: guard_nonnull_class(p308, ConstClass(W_CellIntegerStrategy), descr=<Guard0x118ec980>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2988: i310 = getfield_gc_i(p308, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2992: p311 = getfield_gc_r(p302, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_3 48 pure>)
+3003: p312 = getfield_gc_r(p311, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3014: guard_nonnull_class(p312, ConstClass(W_CellIntegerStrategy), descr=<Guard0x118ec9e0>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+3032: i314 = getfield_gc_i(p312, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3043: i315 = int_is_true(i310)
+3046: guard_true(i315, descr=<Guard0x118cef08>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+3052: i316 = int_is_true(i314)
+3055: guard_true(i316, descr=<Guard0x118cef50>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+3061: i317 = int_mul_ovf(i310, i314)
+3065: guard_no_overflow(descr=<Guard0x118cef98>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+3071: p318 = getfield_gc_r(p302, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_1 32 pure>)
+3089: p319 = getfield_gc_r(p318, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3100: guard_nonnull_class(p319, ConstClass(W_CellIntegerStrategy), descr=<Guard0x118eca40>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+3119: i321 = getfield_gc_i(p319, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3130: i322 = int_add_ovf(i317, i321)
+3133: guard_no_overflow(descr=<Guard0x118cefe0>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+3139: p323 = getfield_gc_r(p302, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_0 24 pure>)
+3143: p324 = getfield_gc_r(p323, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3154: guard_nonnull_class(p324, ConstClass(W_CellIntegerStrategy), descr=<Guard0x118ecaa0>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+3172: i326 = getfield_gc_i(p324, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3176: i327 = int_is_zero(i326)
+3179: guard_false(i327, descr=<Guard0x118cf028>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+3185: i329 = int_rshift(i322, 63)
+3196: i330 = int_xor(i322, i329)
+3213: i331 = int_sub(i330, i329)
+3216: i333 = int_rshift(i326, 63)
+3223: i334 = int_xor(i326, i333)
+3226: i335 = int_sub(i334, i333)
+3229: i336 = int_is_zero(i335)
+3232: guard_false(i336, descr=<Guard0x118cf070>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+3238: i338 = int_eq(i331, -9223372036854775808)
+3261: i340 = int_eq(i335, -1)
+3282: i341 = int_and(i338, i340)
+3285: guard_false(i341, descr=<Guard0x118cf0b8>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+3294: i343 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i331, i335, descr=<Calli 8 ii EF=0 OS=14>)
+3336: i345 = int_lt(i322, 0)
+3344: guard_false(i345, descr=<Guard0x118ecb00>) [i335, i343, i331, i322, i290, p294, i300, p302, i236, i241, None, None, i173, None, None, i123, None, i12, p6, p4, p32, None, None, p8]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+3350: i347 = int_eq(i343, -9223372036854775808)
+3350: i349 = int_rshift(i343, 3)
+3357: i351 = int_lshift(i349, 3)
+3364: i353 = int_xor(i343, 8)
+3371: i355 = int_rshift(i353, 63)
+3375: i356 = int_ne(i351, i343)
+3387: i357 = int_and(i355, i356)
+3390: i358 = int_add(i349, i357)
+3393: i360 = int_rshift(i358, 63)
+3400: i361 = int_xor(i358, i360)
+3406: i362 = int_sub(i361, i360)
+3409: i364 = int_eq(i362, -9223372036854775808)
+3409: i366 = int_and(i362, 16383)
+3419: setfield_gc(p312, i343, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3430: i368 = int_lt(i358, 0)
+3434: guard_false(i368, descr=<Guard0x118ecb60>) [i366, i362, i358, i290, p294, i300, p302, i236, i241, None, None, i173, None, None, i123, None, i12, p6, p4, p32, None, None, p8]
debug_merge_point(0, 0, '(let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)) from (remainder (quotient CellRef(x) 8) n)')
debug_merge_point(0, 0, '(+ AppRand2 AppRand3)')
+3440: i369 = int_add(i300, i366)
debug_merge_point(0, 0, '(CellRef(loop) (quotient q 16384) AppRand4 n5224)')
+3446: p370 = getfield_gc_r(p294, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+3457: p371 = getfield_gc_r(p370, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3461: guard_nonnull_class(p371, 16478072, descr=<Guard0x118ecbc0>) [i366, i362, i358, i290, p294, i300, p302, i236, i241, None, None, i173, None, None, i123, None, i12, p6, p4, p32, None, None, p8]
+3479: i374 = int_rshift(i241, 14)
+3490: i376 = int_lshift(i374, 14)
+3490: i378 = int_xor(i241, 16384)
+3490: i379 = int_ne(i376, i241)
+3490: p380 = getfield_gc_r(p371, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+3501: guard_value(p380, ConstPtr(ptr381), descr=<Guard0x118cf100>) [i366, i362, i358, i290, p294, i300, p302, i236, i241, None, None, i173, None, None, i123, None, i12, p6, p4, p32, None, None, p8]
+3514: i382 = instance_ptr_eq(p294, p371)
+3517: guard_true(i382, descr=<Guard0x118cf148>) [i366, i362, i358, i290, p294, i300, p302, i236, i241, None, None, i173, None, None, i123, None, i12, p6, p4, p32, None, None, p8]
debug_merge_point(0, 0, '(if (zero? q) (remainder r n5224) (let ([AppRand2 (* 16384 r)][AppRand3 (CellRef(random14) 16384)]) (let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)))) from (CellRef(loop) (quotient q 16384) AppRand4 n5224)')
+3523: p383 = new_with_vtable(descr=<SizeDescr 16>)
+3573: p384 = new_with_vtable(descr=<SizeDescr 48>)
+3584: p385 = new_with_vtable(descr=<SizeDescr 32>)
+3595: setfield_gc(p385, p32, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+3599: setfield_gc(p385, i123, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_0 16 pure>)
+3610: setfield_gc(p385, i173, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_1 24 pure>)
+3621: p386 = new_with_vtable(descr=<SizeDescr 40>)
+3632: setfield_gc(p386, p8, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+3643: p387 = new_with_vtable(descr=<SizeDescr 24>)
+3654: setfield_gc(p387, p6, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+3665: setfield_gc(p387, i12, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+3676: setfield_gc(p386, p387, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+3680: setfield_gc(p386, p4, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+3691: setfield_gc(p386, ConstPtr(ptr388), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+3702: setfield_gc(p384, p385, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+3706: setfield_gc(p384, p386, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+3710: setfield_gc(p384, p8, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+3714: setfield_gc(p383, i241, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+3732: setfield_gc(p384, ConstPtr(ptr389), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+3736: setfield_gc(p384, i236, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+3747: jump(p294, i374, i369, p383, p384, p301, p302, p307, p308, p311, p312, i343, p318, p319, p323, p324, p8, p370, p371, descr=TargetToken(139976055980144))
+3952: --end of the loop--
[3e4c20f9268ff03] jit-log-opt-bridge}
[3e4c20fa0f2353a] {jit-backend
[3e4c20fa11917b1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c
[3e4c20fa11af029] jit-backend-dump}
[3e4c20fa11d35e6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28304 +0  34000000
[3e4c20fa11d4cfb] jit-backend-dump}
[3e4c20fa11d95e7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28f55 +0  34000000
[3e4c20fa11da55a] jit-backend-dump}
[3e4c20fa11ddd95] {jit-backend-addr
bridge out of Guard 0x11d149b0 has address 0x7f4eb6c28300 to 0x7f4eb6c28f50
       gc table: 0x7f4eb6c28000
    jump target: 0x7f4eb6c28300
         resops: 0x7f4eb6c2830e
       failures: 0x7f4eb6c28f50
            end: 0x7f4eb6c2994f
[3e4c20fa11e0a36] jit-backend-addr}
[3e4c20fa11e450c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28322 +0  6D0C0000
[3e4c20fa11e53bb] jit-backend-dump}
[3e4c20fa11e8998] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28337 +0  740C0000
[3e4c20fa11e971f] jit-backend-dump}
[3e4c20fa11ecbe2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28349 +0  7E0C0000
[3e4c20fa11ed932] jit-backend-dump}
[3e4c20fa11f0dbf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28360 +0  830C0000
[3e4c20fa11f1b67] jit-backend-dump}
[3e4c20fa11f51a6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2836e +0  AD0C0000
[3e4c20fa11f5f51] jit-backend-dump}
[3e4c20fa11f9492] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2837c +0  BB0C0000
[3e4c20fa11fa1b7] jit-backend-dump}
[3e4c20fa11fd5f7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28391 +0  C20C0000
[3e4c20fa11fe37b] jit-backend-dump}
[3e4c20fa1201943] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c283c8 +0  A70C0000
[3e4c20fa12026b1] jit-backend-dump}
[3e4c20fa1205b2e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c283e3 +0  A80C0000
[3e4c20fa12068ec] jit-backend-dump}
[3e4c20fa1209e18] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c283f7 +0  B00C0000
[3e4c20fa120abcc] jit-backend-dump}
[3e4c20fa120e068] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2840e +0  B50C0000
[3e4c20fa120edf5] jit-backend-dump}
[3e4c20fa121261d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28428 +0  B70C0000
[3e4c20fa12133d5] jit-backend-dump}
[3e4c20fa1216984] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28440 +0  BB0C0000
[3e4c20fa12176e9] jit-backend-dump}
[3e4c20fa121abc5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2844d +0  CA0C0000
[3e4c20fa121b949] jit-backend-dump}
[3e4c20fa121ee28] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28467 +0  CC0C0000
[3e4c20fa121fb96] jit-backend-dump}
[3e4c20fa1222fe9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2847b +0  D40C0000
[3e4c20fa1223d6f] jit-backend-dump}
[3e4c20fa12271c8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2849d +0  CE0C0000
[3e4c20fa1227f3f] jit-backend-dump}
[3e4c20fa122b3b7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c284cb +0  BC0C0000
[3e4c20fa122c0fa] jit-backend-dump}
[3e4c20fa122f568] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c284d8 +0  CB0C0000
[3e4c20fa1230310] jit-backend-dump}
[3e4c20fa12336f2] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c284e1 +0  DE0C0000
[3e4c20fa1234497] jit-backend-dump}
[3e4c20fa12378da] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c284eb +0  F00C0000
[3e4c20fa12386a7] jit-backend-dump}
[3e4c20fa123bb0f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2850d +0  EA0C0000
[3e4c20fa123c871] jit-backend-dump}
[3e4c20fa123fceb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2851a +0  F90C0000
[3e4c20fa1240a94] jit-backend-dump}
[3e4c20fa1243eb5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2853d +0  F20C0000
[3e4c20fa1244c33] jit-backend-dump}
[3e4c20fa1248098] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2854b +0  000D0000
[3e4c20fa1248e15] jit-backend-dump}
[3e4c20fa124c274] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28580 +0  E70C0000
[3e4c20fa124cfb7] jit-backend-dump}
[3e4c20fa12503d3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c285b8 +0  CB0C0000
[3e4c20fa1251190] jit-backend-dump}
[3e4c20fa125455c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c285f4 +0  AB0C0000
[3e4c20fa12552dd] jit-backend-dump}
[3e4c20fa1258754] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2862c +0  8F0C0000
[3e4c20fa12594de] jit-backend-dump}
[3e4c20fa125c955] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28655 +0  820C0000
[3e4c20fa125d69e] jit-backend-dump}
[3e4c20fa1260b34] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28685 +0  6E0C0000
[3e4c20fa12618e0] jit-backend-dump}
[3e4c20fa1264cd0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c286b6 +0  590C0000
[3e4c20fa1265a69] jit-backend-dump}
[3e4c20fa1268eff] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c286ca +0  610C0000
[3e4c20fa1269c5e] jit-backend-dump}
[3e4c20fa126d01e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c286d3 +0  740C0000
[3e4c20fa126dd6a] jit-backend-dump}
[3e4c20fa12711a7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c286dd +0  860C0000
[3e4c20fa1271f31] jit-backend-dump}
[3e4c20fa127535c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c286f1 +0  8E0C0000
[3e4c20fa12760d6] jit-backend-dump}
[3e4c20fa1279513] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c286ff +0  9C0C0000
[3e4c20fa127a2a3] jit-backend-dump}
[3e4c20fa127d705] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28725 +0  920C0000
[3e4c20fa127e44b] jit-backend-dump}
[3e4c20fa12819a8] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28754 +0  7F0C0000
[3e4c20fa1282735] jit-backend-dump}
[3e4c20fa1285b81] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2877d +0  720C0000
[3e4c20fa1286911] jit-backend-dump}
[3e4c20fa1289eb4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c287e2 +0  290C0000
[3e4c20fa128ac25] jit-backend-dump}
[3e4c20fa128e06f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c287ff +0  280C0000
[3e4c20fa128edfe] jit-backend-dump}
[3e4c20fa129227f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2881d +0  260C0000
[3e4c20fa1292ff9] jit-backend-dump}
[3e4c20fa12963f6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2882e +0  310C0000
[3e4c20fa129718f] jit-backend-dump}
[3e4c20fa129a62b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28842 +0  390C0000
[3e4c20fa129b37e] jit-backend-dump}
[3e4c20fa129e7af] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2884b +0  4C0C0000
[3e4c20fa129f551] jit-backend-dump}
[3e4c20fa12a2985] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28855 +0  5E0C0000
[3e4c20fa12a372a] jit-backend-dump}
[3e4c20fa12a6b05] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28869 +0  660C0000
[3e4c20fa12a78b4] jit-backend-dump}
[3e4c20fa12aad40] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28877 +0  740C0000
[3e4c20fa12abac1] jit-backend-dump}
[3e4c20fa12aef0a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2889d +0  6A0C0000
[3e4c20fa12afc7e] jit-backend-dump}
[3e4c20fa12b30f3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c288d3 +0  500C0000
[3e4c20fa12b3e7f] jit-backend-dump}
[3e4c20fa12b729e] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c288f9 +0  460C0000
[3e4c20fa12b803a] jit-backend-dump}
[3e4c20fa12bb4fb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28936 +0  250C0000
[3e4c20fa12bc22f] jit-backend-dump}
[3e4c20fa12bf6b5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28967 +0  100C0000
[3e4c20fa12c0433] jit-backend-dump}
[3e4c20fa12c3958] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28996 +0  FD0B0000
[3e4c20fa12c4713] jit-backend-dump}
[3e4c20fa12c7c1a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c289b6 +0  F90B0000
[3e4c20fa12c89ad] jit-backend-dump}
[3e4c20fa12cbf00] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c289d3 +0  F80B0000
[3e4c20fa12ccc93] jit-backend-dump}
[3e4c20fa12d00e6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c289e4 +0  030C0000
[3e4c20fa12d0e91] jit-backend-dump}
[3e4c20fa12d4453] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c289f8 +0  0B0C0000
[3e4c20fa12d51df] jit-backend-dump}
[3e4c20fa12d85d9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28a01 +0  1E0C0000
[3e4c20fa12d9391] jit-backend-dump}
[3e4c20fa12dc8ad] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28a0b +0  300C0000
[3e4c20fa12dd5fd] jit-backend-dump}
[3e4c20fa12e0a7d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28a1f +0  380C0000
[3e4c20fa12e17ee] jit-backend-dump}
[3e4c20fa12e4ca3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28a2d +0  460C0000
[3e4c20fa12e5a08] jit-backend-dump}
[3e4c20fa12e8eb9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28a53 +0  3C0C0000
[3e4c20fa12e9c52] jit-backend-dump}
[3e4c20fa12ed125] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28a83 +0  280C0000
[3e4c20fa12ede7b] jit-backend-dump}
[3e4c20fa12f12bb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28ab0 +0  170C0000
[3e4c20fa12f2094] jit-backend-dump}
[3e4c20fa12f5543] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28b04 +0  DF0B0000
[3e4c20fa12f62df] jit-backend-dump}
[3e4c20fa12f96f1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28b25 +0  DA0B0000
[3e4c20fa12fa478] jit-backend-dump}
[3e4c20fa12fd932] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28b39 +0  E20B0000
[3e4c20fa12fe66c] jit-backend-dump}
[3e4c20fa1301b36] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28b42 +0  F50B0000
[3e4c20fa13028b7] jit-backend-dump}
[3e4c20fa1305d56] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28b63 +0  F00B0000
[3e4c20fa1306af2] jit-backend-dump}
[3e4c20fa1309eef] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28b74 +0  FB0B0000
[3e4c20fa130ac91] jit-backend-dump}
[3e4c20fa130e130] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28b8e +0  FD0B0000
[3e4c20fa130ee92] jit-backend-dump}
[3e4c20fa1312273] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28bba +0  ED0B0000
[3e4c20fa1312ff7] jit-backend-dump}
[3e4c20fa1316449] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28bce +0  F50B0000
[3e4c20fa13171d0] jit-backend-dump}
[3e4c20fa131a5ba] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28bd7 +0  080C0000
[3e4c20fa131b363] jit-backend-dump}
[3e4c20fa131e7ff] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28be1 +0  1A0C0000
[3e4c20fa131f53c] jit-backend-dump}
[3e4c20fa13229b3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28c10 +0  070C0000
[3e4c20fa132371b] jit-backend-dump}
[3e4c20fa1326b8c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28c24 +0  0F0C0000
[3e4c20fa132796c] jit-backend-dump}
[3e4c20fa132ada6] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28c45 +0  0A0C0000
[3e4c20fa132bb54] jit-backend-dump}
[3e4c20fa132efe1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28c52 +0  190C0000
[3e4c20fa132fd5e] jit-backend-dump}
[3e4c20fa13331cc] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28c87 +0  000C0000
[3e4c20fa1333f28] jit-backend-dump}
[3e4c20fa1337390] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28cbe +0  E50B0000
[3e4c20fa1338120] jit-backend-dump}
[3e4c20fa133b4e0] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28cf6 +0  C90B0000
[3e4c20fa133c251] jit-backend-dump}
[3e4c20fa133f691] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28d51 +0  8A0B0000
[3e4c20fa13403f9] jit-backend-dump}
[3e4c20fa13437f3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28d78 +0  7F0B0000
[3e4c20fa1344586] jit-backend-dump}
[3e4c20fa1347a09] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28d9b +0  780B0000
[3e4c20fa1348796] jit-backend-dump}
[3e4c20fa134f05a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c28da4 +0  8B0B0000
[3e4c20fa135000d] jit-backend-dump}
[3e4c20fa1353f8f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE ??
CODE_DUMP @7f4eb6c2250f +0  ED5D0000
[3e4c20fa1354d06] jit-backend-dump}
[3e4c20fa1359fca] jit-backend}
[3e4c20fa135de26] {jit-log-opt-bridge
# bridge out of Guard 0x11d149b0 with 452 ops
[p0, p1]
+797: guard_value(p0, ConstPtr(ptr2), descr=<Guard0xd109220>) [p0, p1]
+806: p3 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+810: p4 = getfield_gc_r(p1, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
debug_merge_point(0, 0, '(let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55)) from (+ CellRef(actuallyMut) 2)')
+814: guard_class(p3, 16504944, descr=<Guard0xe5c46e0>) [p0, p1]
+827: p6 = getfield_gc_r(p3, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+831: guard_class(p4, 16435208, descr=<Guard0xe5c4728>) [p0, p1]
+845: p8 = getfield_gc_r(p4, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+849: guard_nonnull_class(p8, ConstClass(ForwardLink), descr=<Guard0xd109280>) [p0, p1]
debug_merge_point(0, 0, '(+ i5574 1)')
+868: guard_not_invalidated(descr=<Guard0xe5c4770>) [p0, p1]
+868: i10 = getfield_gc_i(p3, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+872: i12 = int_add_ovf(i10, 1)
+876: guard_no_overflow(descr=<Guard0xe5c47b8>) [p0, p1]
debug_merge_point(0, 0, '(doloop5572 AppRand55)')
+882: guard_class(p6, 16481456, descr=<Guard0xe5c4800>) [p0, p1]
+896: p14 = getfield_gc_r(p6, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+908: guard_value(p14, ConstPtr(ptr15), descr=<Guard0xe5c4848>) [p0, p1]
debug_merge_point(0, 0, '(let ([if10 (>= i5574 (quotient n5570 2))]) (if if10 (void) (begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55))))) from (doloop5572 AppRand55)')
debug_merge_point(0, 0, '(>= i5574 (quotient n5570 2))')
+917: i16 = getfield_gc_i(p6, descr=<FieldS pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_vals_fixed_1 24 pure>)
+922: i18 = int_eq(i16, -9223372036854775808)
+922: i20 = int_rshift(i16, 1)
+928: i22 = int_lshift(i20, 1)
+934: i24 = int_xor(i16, 2)
+941: i26 = int_rshift(i24, 63)
+945: i27 = int_ne(i22, i16)
+957: i28 = int_and(i26, i27)
+960: i29 = int_add(i20, i28)
+963: i30 = int_ge(i12, i29)
+966: guard_false(i30, descr=<Guard0xe5c4890>) [p0, p1]
debug_merge_point(0, 0, '(if if10 (void) (begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55))))')
debug_merge_point(0, 0, '(begin (CellRef(oldGenSwapSubtrees)) (let ([AppRand55 (+ i5574 1)]) (doloop5572 AppRand55)))')
debug_merge_point(0, 0, '(CellRef(oldGenSwapSubtrees))')
+972: p31 = getfield_gc_r(p6, descr=<FieldP pycket.small_list.W_Closure1AsEnvSize2Fixed01.inst_w_val0 32 pure>)
+977: p32 = getfield_gc_r(p31, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+981: guard_nonnull_class(p32, 16479200, descr=<Guard0xd1092e0>) [p0, p1]
+999: p34 = getfield_gc_r(p32, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1010: guard_value(p34, ConstPtr(ptr35), descr=<Guard0xe5c48d8>) [p0, p1]
+1019: p36 = getfield_gc_r(p6, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([index1 (rnd (vector-length CellRef(trees)))][index2 (rnd (vector-length CellRef(trees)))]) (let ([depth (rnd treeHeight)][path (rnd pathBits)][tn1 (vector-ref CellRef(trees) index1)][tn2 (vector-ref CellRef(trees) index2)]) (let ([doloop5533 (lambda (i5535) (let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))))]) (doloop5533 0) (if (even? CellRef(path)) (let ([tmp (vector-ref CellRef(tn1) 0)][AppRand53 (vector-ref CellRef(tn2) 0)]) (vector-set! CellRef(tn1) 0 AppRand53) (vector-set! CellRef(tn2) 0 tmp)) (let ([tmp5560 (vector-ref CellRef(tn1) 1)][AppRand54 (vector-ref CellRef(tn2) 1)]) (vector-set! CellRef(tn1) 1 AppRand54) (vector-set! CellRef(tn2) 1 tmp5560))) (let ([SetBang7 (+ CellRef(actuallyMut) 2)]) (set! actuallyMut SetBang7)))))')
debug_merge_point(0, 0, '(rnd (vector-length CellRef(trees)))')
+1019: p37 = getfield_gc_r(p32, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_2 40 pure>)
+1023: guard_nonnull_class(p37, 16478072, descr=<Guard0xd109340>) [p0, p1]
+1042: p39 = getfield_gc_r(p32, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_3 48 pure>)
+1046: p40 = getfield_gc_r(p39, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1050: guard_nonnull_class(p40, ConstClass(W_Vector), descr=<Guard0xd1093a0>) [p0, p1]
+1068: i42 = getfield_gc_i(p40, descr=<FieldS pycket.vector.W_Vector.inst_len 8 pure>)
+1072: p43 = getfield_gc_r(p37, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1083: guard_value(p43, ConstPtr(ptr44), descr=<Guard0xe5c4920>) [p0, p1]
+1092: p45 = getfield_gc_r(p32, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([if0 (if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)]) (if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))))')
debug_merge_point(0, 0, '(if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)')
debug_merge_point(0, 0, '(if (integer? n5234) (< n5234 16384) #f)')
debug_merge_point(0, 0, '(< n5234 16384)')
+1092: i47 = int_lt(i42, 16384)
+1099: guard_true(i47, descr=<Guard0xe5c4968>) [p0, p1]
debug_merge_point(0, 0, '(if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234)))')
debug_merge_point(0, 0, '(CellRef(random14) n5234)')
+1105: p48 = getfield_gc_r(p37, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+1109: p49 = getfield_gc_r(p48, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1113: guard_nonnull_class(p49, 16478824, descr=<Guard0xd109400>) [p0, p1]
+1131: p51 = getfield_gc_r(p49, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+1142: guard_value(p51, ConstPtr(ptr52), descr=<Guard0xe5c49b0>) [p0, p1]
+1151: p53 = getfield_gc_r(p37, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+1151: p54 = getfield_gc_r(p49, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_2 40 pure>)
+1155: p55 = getfield_gc_r(p54, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1166: guard_nonnull_class(p55, ConstClass(W_CellIntegerStrategy), descr=<Guard0xd109460>) [p0, p1]
+1185: i57 = getfield_gc_i(p55, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1189: p58 = getfield_gc_r(p49, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_3 48 pure>)
+1200: p59 = getfield_gc_r(p58, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1211: guard_nonnull_class(p59, ConstClass(W_CellIntegerStrategy), descr=<Guard0xd1094c0>) [p0, p1]
+1231: i61 = getfield_gc_i(p59, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1235: i62 = int_is_true(i57)
+1238: guard_true(i62, descr=<Guard0xe5c49f8>) [p0, p1]
+1244: i63 = int_is_true(i61)
+1247: guard_true(i63, descr=<Guard0xe5c4a40>) [p0, p1]
+1253: i64 = int_mul_ovf(i57, i61)
+1257: guard_no_overflow(descr=<Guard0xe5c4a88>) [p0, p1]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+1263: p65 = getfield_gc_r(p49, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_1 32 pure>)
+1267: p66 = getfield_gc_r(p65, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1278: guard_nonnull_class(p66, ConstClass(W_CellIntegerStrategy), descr=<Guard0xd109520>) [p0, p1]
+1297: i68 = getfield_gc_i(p66, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1301: i69 = int_add_ovf(i64, i68)
+1304: guard_no_overflow(descr=<Guard0xe5c4ad0>) [p0, p1]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+1310: p70 = getfield_gc_r(p49, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_0 24 pure>)
+1314: p71 = getfield_gc_r(p70, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+1325: guard_nonnull_class(p71, ConstClass(W_CellIntegerStrategy), descr=<Guard0xd109580>) [p0, p1]
+1345: i73 = getfield_gc_i(p71, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1350: i74 = int_is_zero(i73)
+1353: guard_false(i74, descr=<Guard0xe5c4b18>) [p0, p1]
+1359: i76 = int_rshift(i69, 63)
+1370: i77 = int_xor(i69, i76)
+1387: i78 = int_sub(i77, i76)
+1390: i80 = int_rshift(i73, 63)
+1397: i81 = int_xor(i73, i80)
+1400: i82 = int_sub(i81, i80)
+1403: i83 = int_is_zero(i82)
+1406: guard_false(i83, descr=<Guard0xe5c4b60>) [p0, p1]
+1412: i85 = int_eq(i78, -9223372036854775808)
+1435: i87 = int_eq(i82, -1)
+1456: i88 = int_and(i85, i87)
+1459: guard_false(i88, descr=<Guard0xe5c4ba8>) [p0, p1]
+1468: i90 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i78, i82, descr=<Calli 8 ii EF=0 OS=14>)
+1514: i92 = int_lt(i69, 0)
+1522: guard_false(i92, descr=<Guard0xd1095e0>) [i82, i90, i78, i69, i12, p6, p4, p32, i42, p49, p8]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+1528: i94 = int_eq(i90, -9223372036854775808)
+1528: i96 = int_rshift(i90, 3)
+1535: i98 = int_lshift(i96, 3)
+1542: i100 = int_xor(i90, 8)
+1549: i102 = int_rshift(i100, 63)
+1553: i103 = int_ne(i98, i90)
+1565: i104 = int_and(i102, i103)
+1568: i105 = int_add(i96, i104)
+1571: setfield_gc(p59, i90, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1575: i106 = int_is_zero(i42)
+1578: guard_false(i106, descr=<Guard0xd109640>) [i42, i105, i12, p6, p4, p32, None, p49, p8]
+1584: i109 = int_rshift(i105, 63)
+1591: i110 = int_xor(i105, i109)
+1597: i111 = int_sub(i110, i109)
+1600: i113 = int_rshift(i42, 63)
+1607: i114 = int_xor(i42, i113)
+1613: i115 = int_sub(i114, i113)
+1616: i116 = int_is_zero(i115)
+1619: guard_false(i116, descr=<Guard0xe5c4bf0>) [i42, i105, i12, p6, p4, p32, None, p49, p8]
+1625: i118 = int_eq(i111, -9223372036854775808)
+1647: i120 = int_eq(i115, -1)
+1661: i121 = int_and(i118, i120)
+1664: guard_false(i121, descr=<Guard0xe5c4c38>) [i42, i105, i12, p6, p4, p32, None, p49, p8]
+1673: i123 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i111, i115, descr=<Calli 8 ii EF=0 OS=14>)
+1712: i125 = int_lt(i105, 0)
+1716: guard_false(i125, descr=<Guard0xd1096a0>) [i115, i123, i111, i105, None, i12, p6, p4, p32, i42, p49, p8]
debug_merge_point(0, 0, '(rnd (vector-length CellRef(trees)))')
debug_merge_point(0, 0, '(let ([if0 (if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)]) (if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))))')
debug_merge_point(0, 0, '(if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)')
debug_merge_point(0, 0, '(if (integer? n5234) (< n5234 16384) #f)')
debug_merge_point(0, 0, '(< n5234 16384)')
debug_merge_point(0, 0, '(if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234)))')
debug_merge_point(0, 0, '(CellRef(random14) n5234)')
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+1722: i126 = getfield_gc_i(p55, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1733: i127 = int_is_true(i126)
+1736: guard_true(i127, descr=<Guard0xe5c4c80>) [i115, i123, i111, i105, None, i12, p6, p4, p32, i42, p49, p8]
+1742: i128 = int_is_true(i90)
+1745: guard_true(i128, descr=<Guard0xe5c4cc8>) [i115, i123, i111, i105, None, i12, p6, p4, p32, i42, p49, p8]
+1751: i129 = int_mul_ovf(i126, i90)
+1755: guard_no_overflow(descr=<Guard0xe5c4d10>) [i115, i123, i111, i105, None, i12, p6, p4, p32, i42, p49, p8]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+1761: i130 = getfield_gc_i(p66, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1772: i131 = int_add_ovf(i129, i130)
+1775: guard_no_overflow(descr=<Guard0xe5c4d58>) [i115, i123, i111, i105, None, i12, p6, p4, p32, i42, p49, p8]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+1781: i132 = getfield_gc_i(p71, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+1786: i133 = int_is_zero(i132)
+1789: guard_false(i133, descr=<Guard0xe5c4da0>) [i115, i123, i111, i105, None, i12, p6, p4, p32, i42, p49, p8]
+1795: i135 = int_rshift(i131, 63)
+1802: i136 = int_xor(i131, i135)
+1808: i137 = int_sub(i136, i135)
+1811: i139 = int_rshift(i132, 63)
+1818: i140 = int_xor(i132, i139)
+1821: i141 = int_sub(i140, i139)
+1824: i142 = int_is_zero(i141)
+1827: guard_false(i142, descr=<Guard0xe5c4de8>) [i115, i123, i111, i105, None, i12, p6, p4, p32, i42, p49, p8]
+1833: i144 = int_eq(i137, -9223372036854775808)
+1855: i146 = int_eq(i141, -1)
+1868: i147 = int_and(i144, i146)
+1871: guard_false(i147, descr=<Guard0xe5c4e30>) [i115, i123, i111, i105, None, i12, p6, p4, p32, i42, p49, p8]
+1880: i149 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i137, i141, descr=<Calli 8 ii EF=0 OS=14>)
+1911: i151 = int_lt(i131, 0)
+1915: guard_false(i151, descr=<Guard0xd109700>) [i141, i149, i137, i131, i123, None, i12, p6, p4, p32, i42, p49, p8]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+1921: i153 = int_eq(i149, -9223372036854775808)
+1921: i155 = int_rshift(i149, 3)
+1928: i157 = int_lshift(i155, 3)
+1935: i159 = int_xor(i149, 8)
+1942: i161 = int_rshift(i159, 63)
+1946: i162 = int_ne(i157, i149)
+1958: i163 = int_and(i161, i162)
+1961: i164 = int_add(i155, i163)
+1964: i166 = int_rshift(i164, 63)
+1971: i167 = int_xor(i164, i166)
+1977: i168 = int_sub(i167, i166)
+1980: i170 = int_eq(i168, -9223372036854775808)
+2002: i171 = int_and(i170, i120)
+2009: setfield_gc(p59, i149, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2013: guard_false(i171, descr=<Guard0xd109760>) [i115, i168, i171, i164, i123, None, i12, p6, p4, p32, i42, p49, p8]
+2022: i173 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i168, i115, descr=<Calli 8 ii EF=0 OS=14>)
+2041: i175 = int_lt(i164, 0)
+2045: guard_false(i175, descr=<Guard0xd1097c0>) [i115, i173, i168, i164, None, i123, None, i12, p6, p4, p32, i42, p49, p8]
debug_merge_point(0, 0, '(let ([depth (rnd treeHeight)][path (rnd pathBits)][tn1 (vector-ref CellRef(trees) index1)][tn2 (vector-ref CellRef(trees) index2)]) (let ([doloop5533 (lambda (i5535) (let ([if9 (>= i5535 depth)]) (if if9 (void) (begin (if (even? CellRef(path)) (let ([SetBang3 (vector-ref CellRef(tn1) 0)]) (set! tn1 SetBang3) (let ([SetBang4 (vector-ref CellRef(tn2) 0)]) (set! tn2 SetBang4))) (let ([SetBang5 (vector-ref CellRef(tn1) 1)]) (set! tn1 SetBang5) (let ([SetBang6 (vector-ref CellRef(tn2) 1)]) (set! tn2 SetBang6)))) (set! path (quotient CellRef(path) 2)) (let ([AppRand52 (+ i5535 1)]) (doloop5533 AppRand52))))))]) (doloop5533 0) (if (even? CellRef(path)) (let ([tmp (vector-ref CellRef(tn1) 0)][AppRand53 (vector-ref CellRef(tn2) 0)]) (vector-set! CellRef(tn1) 0 AppRand53) (vector-set! CellRef(tn2) 0 tmp)) (let ([tmp5560 (vector-ref CellRef(tn1) 1)][AppRand54 (vector-ref CellRef(tn2) 1)]) (vector-set! CellRef(tn1) 1 AppRand54) (vector-set! CellRef(tn2) 1 tmp5560))) (let ([SetBang7 (+ CellRef(actuallyMut) 2)]) (set! actuallyMut SetBang7))))')
debug_merge_point(0, 0, '(rnd treeHeight)')
+2051: p176 = getfield_gc_r(p32, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_4 56 pure>)
+2062: guard_nonnull_class(p176, ConstClass(W_Fixnum), descr=<Guard0xd109820>) [i115, i173, i168, i164, None, i123, None, i12, p6, p4, p32, i42, p49, p8]
+2081: i178 = getfield_gc_i(p176, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(let ([if0 (if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)]) (if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))))')
debug_merge_point(0, 0, '(if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)')
debug_merge_point(0, 0, '(if (integer? n5234) (< n5234 16384) #f)')
debug_merge_point(0, 0, '(< n5234 16384)')
+2085: i180 = int_lt(i178, 16384)
+2092: guard_true(i180, descr=<Guard0xe5c4e78>) [i115, i173, i168, i164, None, i123, None, i12, p6, p4, p32, i42, p49, p8]
debug_merge_point(0, 0, '(if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234)))')
debug_merge_point(0, 0, '(CellRef(random14) n5234)')
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+2098: i181 = getfield_gc_i(p55, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2109: i182 = int_is_true(i181)
+2112: guard_true(i182, descr=<Guard0xe5c4ec0>) [i115, i173, i168, i164, None, i123, None, i12, p6, p4, p32, i42, p49, p8]
+2118: i183 = int_is_true(i149)
+2121: guard_true(i183, descr=<Guard0xe5c4f08>) [i115, i173, i168, i164, None, i123, None, i12, p6, p4, p32, i42, p49, p8]
+2127: i184 = int_mul_ovf(i181, i149)
+2131: guard_no_overflow(descr=<Guard0xe5c4f50>) [i115, i173, i168, i164, None, i123, None, i12, p6, p4, p32, i42, p49, p8]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+2137: i185 = getfield_gc_i(p66, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2148: i186 = int_add_ovf(i184, i185)
+2151: guard_no_overflow(descr=<Guard0xe5c4f98>) [i115, i173, i168, i164, None, i123, None, i12, p6, p4, p32, i42, p49, p8]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+2157: i187 = getfield_gc_i(p71, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2162: i188 = int_is_zero(i187)
+2165: guard_false(i188, descr=<Guard0xe5c4fe0>) [i115, i173, i168, i164, None, i123, None, i12, p6, p4, p32, i42, p49, p8]
+2171: i190 = int_rshift(i186, 63)
+2178: i191 = int_xor(i186, i190)
+2184: i192 = int_sub(i191, i190)
+2187: i194 = int_rshift(i187, 63)
+2194: i195 = int_xor(i187, i194)
+2197: i196 = int_sub(i195, i194)
+2200: i197 = int_is_zero(i196)
+2203: guard_false(i197, descr=<Guard0xe5c5028>) [i115, i173, i168, i164, None, i123, None, i12, p6, p4, p32, i42, p49, p8]
+2209: i199 = int_eq(i192, -9223372036854775808)
+2231: i201 = int_eq(i196, -1)
+2251: i202 = int_and(i199, i201)
+2254: guard_false(i202, descr=<Guard0xe5c5070>) [i115, i173, i168, i164, None, i123, None, i12, p6, p4, p32, i42, p49, p8]
+2263: i204 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i192, i196, descr=<Calli 8 ii EF=0 OS=14>)
+2291: i206 = int_lt(i186, 0)
+2295: guard_false(i206, descr=<Guard0xd109880>) [i196, i204, i192, i186, i173, i178, None, i123, None, i12, p6, p4, p32, None, p49, p8]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+2301: i208 = int_eq(i204, -9223372036854775808)
+2301: i210 = int_rshift(i204, 3)
+2308: i212 = int_lshift(i210, 3)
+2315: i214 = int_xor(i204, 8)
+2322: i216 = int_rshift(i214, 63)
+2326: i217 = int_ne(i212, i204)
+2338: i218 = int_and(i216, i217)
+2341: i219 = int_add(i210, i218)
+2344: setfield_gc(p59, i204, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2348: i220 = int_is_zero(i178)
+2356: guard_false(i220, descr=<Guard0xd1098e0>) [i178, i219, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2362: i222 = int_rshift(i219, 63)
+2369: i223 = int_xor(i219, i222)
+2375: i224 = int_sub(i223, i222)
+2378: i226 = int_rshift(i178, 63)
+2389: i227 = int_xor(i178, i226)
+2399: i228 = int_sub(i227, i226)
+2402: i229 = int_is_zero(i228)
+2405: guard_false(i229, descr=<Guard0xe5c50b8>) [i178, i219, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2411: i231 = int_eq(i224, -9223372036854775808)
+2433: i233 = int_eq(i228, -1)
+2446: i234 = int_and(i231, i233)
+2449: guard_false(i234, descr=<Guard0xe5c5100>) [i178, i219, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2458: i236 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i224, i228, descr=<Calli 8 ii EF=0 OS=14>)
+2480: i238 = int_lt(i219, 0)
+2484: guard_false(i238, descr=<Guard0xd109940>) [i228, i236, i224, i219, None, i173, i178, None, i123, None, i12, p6, p4, p32, None, p49, p8]
debug_merge_point(0, 0, '(rnd pathBits)')
+2490: p239 = getfield_gc_r(p32, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize5.inst__vals_0 24 pure>)
+2501: guard_nonnull_class(p239, ConstClass(W_Fixnum), descr=<Guard0xd1099a0>) [i228, i236, i224, i219, None, i173, i178, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2519: i241 = getfield_gc_i(p239, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
debug_merge_point(0, 0, '(let ([if0 (if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)]) (if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))))')
debug_merge_point(0, 0, '(if (exact? n5234) (if (integer? n5234) (< n5234 16384) #f) #f)')
debug_merge_point(0, 0, '(if (integer? n5234) (< n5234 16384) #f)')
debug_merge_point(0, 0, '(< n5234 16384)')
+2523: i243 = int_lt(i241, 16384)
+2530: guard_false(i243, descr=<Guard0xe5c5148>) [i228, i236, i224, i219, None, i173, i178, None, i123, None, i12, p6, p4, p32, None, p49, p8]
debug_merge_point(0, 0, '(if if0 (CellRef(random14) n5234) (let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234)))')
debug_merge_point(0, 0, '(let ([AppRand5 (CellRef(random14) 16384)]) (CellRef(loop) n5234 AppRand5 n5234))')
debug_merge_point(0, 0, '(CellRef(random14) 16384)')
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+2536: i244 = getfield_gc_i(p55, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2547: i245 = int_is_true(i244)
+2550: guard_true(i245, descr=<Guard0xe5c5190>) [i228, i236, i224, i219, None, i173, i178, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2556: i246 = int_is_true(i204)
+2559: guard_true(i246, descr=<Guard0xe5c51d8>) [i228, i236, i224, i219, None, i173, i178, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2565: i247 = int_mul_ovf(i244, i204)
+2569: guard_no_overflow(descr=<Guard0xe5c5220>) [i228, i236, i224, i219, None, i173, i178, None, i123, None, i12, p6, p4, p32, None, p49, p8]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+2575: i248 = getfield_gc_i(p66, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2586: i249 = int_add_ovf(i247, i248)
+2589: guard_no_overflow(descr=<Guard0xe5c5268>) [i228, i236, i224, i219, None, i173, i178, None, i123, None, i12, p6, p4, p32, None, p49, p8]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+2595: i250 = getfield_gc_i(p71, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2600: i251 = int_is_zero(i250)
+2603: guard_false(i251, descr=<Guard0xe5c52b0>) [i228, i236, i224, i219, None, i173, i178, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2609: i253 = int_rshift(i249, 63)
+2616: i254 = int_xor(i249, i253)
+2622: i255 = int_sub(i254, i253)
+2625: i257 = int_rshift(i250, 63)
+2632: i258 = int_xor(i250, i257)
+2635: i259 = int_sub(i258, i257)
+2638: i260 = int_is_zero(i259)
+2641: guard_false(i260, descr=<Guard0xe5c52f8>) [i228, i236, i224, i219, None, i173, i178, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2647: i262 = int_eq(i255, -9223372036854775808)
+2669: i264 = int_eq(i259, -1)
+2683: i265 = int_and(i262, i264)
+2686: guard_false(i265, descr=<Guard0xe5c5340>) [i228, i236, i224, i219, None, i173, i178, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2695: i267 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i255, i259, descr=<Calli 8 ii EF=0 OS=14>)
+2730: i269 = int_lt(i249, 0)
+2734: guard_false(i269, descr=<Guard0xd109a00>) [i259, i267, i255, i249, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+2740: i271 = int_eq(i267, -9223372036854775808)
+2740: i273 = int_rshift(i267, 3)
+2747: i275 = int_lshift(i273, 3)
+2754: i277 = int_xor(i267, 8)
+2761: i279 = int_rshift(i277, 63)
+2765: i280 = int_ne(i275, i267)
+2778: i281 = int_and(i279, i280)
+2781: i282 = int_add(i273, i281)
+2784: i284 = int_rshift(i282, 63)
+2791: i285 = int_xor(i282, i284)
+2797: i286 = int_sub(i285, i284)
+2800: i288 = int_eq(i286, -9223372036854775808)
+2800: i290 = int_and(i286, 16383)
+2810: setfield_gc(p59, i267, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2814: i292 = int_lt(i282, 0)
+2818: guard_false(i292, descr=<Guard0xd109a60>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
debug_merge_point(0, 0, '(CellRef(loop) n5234 AppRand5 n5234)')
+2824: p293 = getfield_gc_r(p37, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+2835: p294 = getfield_gc_r(p293, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+2839: guard_nonnull_class(p294, 16478072, descr=<Guard0xd109ac0>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2857: p296 = getfield_gc_r(p294, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+2868: guard_value(p296, ConstPtr(ptr297), descr=<Guard0xe5c5388>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
debug_merge_point(0, 0, '(if (zero? q) (remainder r n5224) (let ([AppRand2 (* 16384 r)][AppRand3 (CellRef(random14) 16384)]) (let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)))) from (CellRef(loop) n5234 AppRand5 n5234)')
debug_merge_point(0, 0, '(let ([AppRand2 (* 16384 r)][AppRand3 (CellRef(random14) 16384)]) (let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)))')
debug_merge_point(0, 0, '(* 16384 r)')
+2877: i298 = int_is_true(i290)
+2880: guard_true(i298, descr=<Guard0xe5c53d0>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2886: i300 = int_lshift(i290, 14)
debug_merge_point(0, 0, '(CellRef(random14) 16384)')
+2893: p301 = getfield_gc_r(p294, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_1 32 pure>)
+2897: p302 = getfield_gc_r(p301, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+2901: guard_nonnull_class(p302, 16478824, descr=<Guard0xd109b20>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2919: p304 = getfield_gc_r(p302, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+2923: guard_value(p304, ConstPtr(ptr305), descr=<Guard0xe5c5418>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2936: p306 = getfield_gc_r(p294, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
debug_merge_point(0, 0, '(let ([AppRand0 (* CellRef(a) CellRef(x))]) (let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m)))))')
debug_merge_point(0, 0, '(* CellRef(a) CellRef(x))')
+2936: p307 = getfield_gc_r(p302, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_2 40 pure>)
+2940: p308 = getfield_gc_r(p307, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+2944: guard_nonnull_class(p308, ConstClass(W_CellIntegerStrategy), descr=<Guard0xd109b80>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+2962: i310 = getfield_gc_i(p308, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+2966: p311 = getfield_gc_r(p302, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_3 48 pure>)
+2977: p312 = getfield_gc_r(p311, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+2988: guard_nonnull_class(p312, ConstClass(W_CellIntegerStrategy), descr=<Guard0xd109be0>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+3006: i314 = getfield_gc_i(p312, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3017: i315 = int_is_true(i310)
+3020: guard_true(i315, descr=<Guard0xe5c5460>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+3026: i316 = int_is_true(i314)
+3029: guard_true(i316, descr=<Guard0xe5c54a8>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+3035: i317 = int_mul_ovf(i310, i314)
+3039: guard_no_overflow(descr=<Guard0xe5c54f0>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
debug_merge_point(0, 0, '(let ([AppRand1 (+ AppRand0 CellRef(c))]) (set! x (remainder AppRand1 CellRef(m))))')
debug_merge_point(0, 0, '(+ AppRand0 CellRef(c))')
+3045: p318 = getfield_gc_r(p302, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_1 32 pure>)
+3063: p319 = getfield_gc_r(p318, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3074: guard_nonnull_class(p319, ConstClass(W_CellIntegerStrategy), descr=<Guard0xd109c40>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+3092: i321 = getfield_gc_i(p319, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3103: i322 = int_add_ovf(i317, i321)
+3106: guard_no_overflow(descr=<Guard0xe5c5538>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
debug_merge_point(0, 0, '(set! x (remainder AppRand1 CellRef(m)))')
+3112: p323 = getfield_gc_r(p302, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize4.inst__vals_0 24 pure>)
+3116: p324 = getfield_gc_r(p323, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3127: guard_nonnull_class(p324, ConstClass(W_CellIntegerStrategy), descr=<Guard0xd109ca0>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+3145: i326 = getfield_gc_i(p324, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3149: i327 = int_is_zero(i326)
+3152: guard_false(i327, descr=<Guard0xe5c5580>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+3158: i329 = int_rshift(i322, 63)
+3169: i330 = int_xor(i322, i329)
+3186: i331 = int_sub(i330, i329)
+3189: i333 = int_rshift(i326, 63)
+3196: i334 = int_xor(i326, i333)
+3199: i335 = int_sub(i334, i333)
+3202: i336 = int_is_zero(i335)
+3205: guard_false(i336, descr=<Guard0xe5c55c8>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+3211: i338 = int_eq(i331, -9223372036854775808)
+3234: i340 = int_eq(i335, -1)
+3254: i341 = int_and(i338, i340)
+3257: guard_false(i341, descr=<Guard0xe5c5610>) [i290, i286, i282, i236, i241, p37, None, i173, None, None, i123, None, i12, p6, p4, p32, None, p49, p8]
+3266: i343 = call_i(ConstClass(ll_int_py_mod__Signed_Signed), i331, i335, descr=<Calli 8 ii EF=0 OS=14>)
+3308: i345 = int_lt(i322, 0)
+3316: guard_false(i345, descr=<Guard0xd109d00>) [i335, i343, i331, i322, i290, p294, i300, p302, i236, i241, None, None, i173, None, None, i123, None, i12, p6, p4, p32, None, None, p8]
debug_merge_point(0, 0, '(remainder (quotient CellRef(x) 8) n)')
+3322: i347 = int_eq(i343, -9223372036854775808)
+3322: i349 = int_rshift(i343, 3)
+3329: i351 = int_lshift(i349, 3)
+3336: i353 = int_xor(i343, 8)
+3343: i355 = int_rshift(i353, 63)
+3347: i356 = int_ne(i351, i343)
+3360: i357 = int_and(i355, i356)
+3363: i358 = int_add(i349, i357)
+3366: i360 = int_rshift(i358, 63)
+3373: i361 = int_xor(i358, i360)
+3379: i362 = int_sub(i361, i360)
+3382: i364 = int_eq(i362, -9223372036854775808)
+3382: i366 = int_and(i362, 16383)
+3392: setfield_gc(p312, i343, descr=<FieldS pycket.values.W_CellIntegerStrategy.inst_value 8>)
+3403: i368 = int_lt(i358, 0)
+3407: guard_false(i368, descr=<Guard0xd109d60>) [i366, i362, i358, i290, p294, i300, p302, i236, i241, None, None, i173, None, None, i123, None, i12, p6, p4, p32, None, None, p8]
debug_merge_point(0, 0, '(let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)) from (remainder (quotient CellRef(x) 8) n)')
debug_merge_point(0, 0, '(+ AppRand2 AppRand3)')
+3413: i369 = int_add(i300, i366)
debug_merge_point(0, 0, '(CellRef(loop) (quotient q 16384) AppRand4 n5224)')
+3419: p370 = getfield_gc_r(p294, descr=<FieldP rpython.tool.pairtype.W_Closure1AsEnvSize2.inst__vals_0 24 pure>)
+3430: p371 = getfield_gc_r(p370, descr=<FieldP pycket.values.W_Cell.inst_w_value 8>)
+3434: guard_nonnull_class(p371, 16478072, descr=<Guard0xd109dc0>) [i366, i362, i358, i290, p294, i300, p302, i236, i241, None, None, i173, None, None, i123, None, i12, p6, p4, p32, None, None, p8]
+3452: i374 = int_rshift(i241, 14)
+3463: i376 = int_lshift(i374, 14)
+3463: i378 = int_xor(i241, 16384)
+3463: i379 = int_ne(i376, i241)
+3463: p380 = getfield_gc_r(p371, descr=<FieldP pycket.values.W_Closure1AsEnv.inst_caselam 16 pure>)
+3474: guard_value(p380, ConstPtr(ptr381), descr=<Guard0xe5c5658>) [i366, i362, i358, i290, p294, i300, p302, i236, i241, None, None, i173, None, None, i123, None, i12, p6, p4, p32, None, None, p8]
+3487: i382 = instance_ptr_eq(p294, p371)
+3490: guard_true(i382, descr=<Guard0xe5c56a0>) [i366, i362, i358, i290, p294, i300, p302, i236, i241, None, None, i173, None, None, i123, None, i12, p6, p4, p32, None, None, p8]
debug_merge_point(0, 0, '(if (zero? q) (remainder r n5224) (let ([AppRand2 (* 16384 r)][AppRand3 (CellRef(random14) 16384)]) (let ([AppRand4 (+ AppRand2 AppRand3)]) (CellRef(loop) (quotient q 16384) AppRand4 n5224)))) from (CellRef(loop) (quotient q 16384) AppRand4 n5224)')
+3496: p383 = new_with_vtable(descr=<SizeDescr 16>)
+3543: p384 = new_with_vtable(descr=<SizeDescr 48>)
+3554: p385 = new_with_vtable(descr=<SizeDescr 32>)
+3565: setfield_gc(p385, p32, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+3569: setfield_gc(p385, i123, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_0 16 pure>)
+3580: setfield_gc(p385, i173, descr=<FieldS pycket.small_list.ConsEnvSize2Fixed11.inst_vals_fixed_1 24 pure>)
+3591: p386 = new_with_vtable(descr=<SizeDescr 40>)
+3602: setfield_gc(p386, p8, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+3613: p387 = new_with_vtable(descr=<SizeDescr 24>)
+3624: setfield_gc(p387, p6, descr=<FieldP pycket.env.ConsEnv.inst__prev 8 pure>)
+3635: setfield_gc(p387, i12, descr=<FieldS pycket.small_list.ConsEnvSize1Fixed.inst_vals_fixed_0 16 pure>)
+3646: setfield_gc(p386, p387, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+3650: setfield_gc(p386, p4, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+3661: setfield_gc(p386, ConstPtr(ptr388), descr=<FieldP pycket.interpreter.BeginCont.inst_counting_ast 32 pure>)
+3672: setfield_gc(p384, p385, descr=<FieldP pycket.cont.Cont.inst_env 16 pure>)
+3676: setfield_gc(p384, p386, descr=<FieldP pycket.cont.Cont.inst_prev 24 pure>)
+3680: setfield_gc(p384, p8, descr=<FieldP pycket.cont.BaseCont.inst_marks 8>)
+3684: setfield_gc(p383, i241, descr=<FieldS pycket.values.W_Fixnum.inst_value 8 pure>)
+3702: setfield_gc(p384, ConstPtr(ptr389), descr=<FieldP pycket.interpreter.LetCont.inst_counting_ast 32 pure>)
+3706: setfield_gc(p384, i236, descr=<FieldS pycket.small_list.LetContSize1Fixed.inst_vals_fixed_0 40 pure>)
+3717: jump(p294, i374, i369, p383, p384, p301, p302, p307, p308, p311, p312, i343, p318, p319, p323, p324, p8, p370, p371, descr=TargetToken(139976055980144))
+3920: --end of the loop--
[3e4c20fa14ba088] jit-log-opt-bridge}
[3e4c22317797738] {jit-summary
Tracing:      	100	0.302469
Backend:      	100	0.096354
TOTAL:      		34.567985
ops:             	162790
recorded ops:    	32048
  calls:         	213
guards:          	7667
opt ops:         	14564
opt guards:      	4095
opt guards shared:	3050
forcings:        	0
abort: trace too long:	0
abort: compiling:	0
abort: vable escape:	0
abort: bad loop: 	0
abort: force quasi-immut:	0
nvirtuals:       	1835
nvholes:         	645
nvreused:        	474
vecopt tried:    	0
vecopt success:  	0
Total # of loops:	29
Total # of bridges:	71
Freed # of loops:	0
Freed # of bridges:	0
[3e4c223177a7d59] jit-summary}
[3e4c223177b37b8] {jit-backend-counts
entry 1:293
TargetToken(79354624):140313
TargetToken(79354704):175684665
entry 2:213
TargetToken(79354784):140167
TargetToken(79354864):175684674
entry 3:84
bridge 79526832:140140
bridge 79282080:87982372
entry 6:29
TargetToken(79354944):29
TargetToken(79355024):43851082
bridge 79280736:43991175
bridge 79280544:87702156
bridge 79890504:21995564
entry 10:49
bridge 79894968:21855429
entry 12:182
TargetToken(80545216):182
TargetToken(80545296):134813781
bridge 80204176:140020
bridge 79894608:140020
bridge 80205184:35020
entry 24:204
TargetToken(80544176):1089323
TargetToken(80544256):155637
entry 25:463
bridge 139976082369472:209
entry 27:253
TargetToken(80544336):1556200
TargetToken(80544416):622459
entry 28:51
TargetToken(80544496):51
TargetToken(80544576):1244809
bridge 139976082335384:622503
entry 30:56
bridge 139976082370432:1089356
bridge 139976082337256:40
bridge 139976082338192:56
bridge 139976082337544:6
bridge 139976082633248:622439
bridge 139976082338768:39
bridge 139976082371104:622425
bridge 139976082339848:311209
bridge 139976082341432:311200
bridge 139976082335744:155588
bridge 139976082335960:155437
bridge 139976082336464:155585
bridge 139976082339416:155581
bridge 139976056013984:311160
entry 45:8
bridge 139976082634040:155571
entry 55:204
TargetToken(80547776):1089323
TargetToken(80547856):155637
entry 56:463
bridge 59026848:209
entry 58:252
TargetToken(80549376):1556199
TargetToken(80549456):622460
entry 59:51
TargetToken(80549536):51
TargetToken(80549616):1244809
bridge 139976051487480:622503
entry 61:56
bridge 59027904:1089356
bridge 139976051489352:40
bridge 139976051490144:56
bridge 139976051489568:6
bridge 63327432:622439
bridge 139976051490720:39
bridge 59028576:622425
bridge 60302280:311209
bridge 60303864:311200
bridge 139976051487840:155588
bridge 139976051488056:155437
bridge 139976051488560:155585
bridge 60301848:155581
bridge 63331752:311160
entry 76:8
bridge 63328152:155571
bridge 63331608:102
bridge 139976056013840:101
entry 80:142
TargetToken(139976082360464):142
TargetToken(139976082360544):1259721
entry 81:238
TargetToken(139976082360624):238
TargetToken(139976082360704):681097
entry 82:82
TargetToken(139976082361104):82
TargetToken(139976082361184):244825
bridge 66972944:139935
entry 84:120
bridge 66973448:52
bridge 66974024:291824
entry 87:77
entry 88:49
TargetToken(139976055980064):49
TargetToken(139976055980144):209780
bridge 80206480:139893
bridge 67494208:104906
bridge 66973952:97288
bridge 79276320:104864
entry 93:14
entry 94:137
bridge 71310184:69893
entry 96:10
bridge 69720072:5
bridge 139976082366688:34941
bridge 176876888:69882
entry 100:383
bridge 79523448:97208
entry 102:157
bridge 177099800:48546
bridge 71786960:34917
bridge 74152016:48552
bridge 74146256:168
bridge 177098576:14836
bridge 71791280:14898
bridge 71790272:3634
bridge 74152880:5
bridge 177099656:3730
bridge 79523520:3752
bridge 79524456:1213
bridge 298927264:2358
bridge 195294304:2381
bridge 298928560:2443
[3e4c223177d4e4f] jit-backend-counts}
